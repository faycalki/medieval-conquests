from header_common import *
from header_operations import *
from header_mission_templates import *
from header_animations import *
from header_sounds import *
from header_music import *
from header_items import *
from module_constants import *
#COOP BEGIN#####################################
from module_coop_mission_templates import *
#COOP END#############################################
####################################################################################################################
#   Each mission-template is a tuple that contains the following fields:
#  1) Mission-template id (string): used for referencing mission-templates in other files.
#     The prefix mt_ is automatically added before each mission-template id
#
#  2) Mission-template flags (int): See header_mission-templates.py for a list of available flags
#  3) Mission-type(int): Which mission types this mission template matches.
#     For mission-types to be used with the default party-meeting system,
#     this should be 'charge' or 'charge_with_ally' otherwise must be -1.
#     
#  4) Mission description text (string).
#  5) List of spawn records (list): Each spawn record is a tuple that contains the following fields:
#    5.1) entry-no: Troops spawned from this spawn record will use this entry
#    5.2) spawn flags.
#    5.3) alter flags. which equipment will be overriden
#    5.4) ai flags.
#    5.5) Number of troops to spawn.
#    5.6) list of equipment to add to troops spawned from here (maximum 8).
#  6) List of triggers (list).
#     See module_triggers.py for infomation about triggers.
#
#  Please note that mission templates is work in progress and can be changed in the future versions.
# 
####################################################################################################################

#pilgrim_disguise = [itm_pilgrim_hood,itm_pilgrim_disguise,itm_practice_staff, itm_throwing_daggers]
af_castle_lord = af_override_horse | af_override_weapons| af_require_civilian



player_crouch = (0, 0, 2,
  [
  (neq, "$ai_crouch_mode", 2),
  (neg|main_hero_fallen),(key_clicked,"$key_crouch"),
   (get_player_agent_no, ":player_agent"), (agent_get_horse, ":horse", ":player_agent"), (le, ":horse", 0),
   (try_begin),
   #pavise_related_things BEGIN
   #   (key_is_down, key_left_control),
   #   (call_script, "script_deploy_pavise", ":player_agent"),
   #(else_try),
   #pavise_related_things END
      (agent_get_slot, ":crouching", ":player_agent", slot_agent_crouching),
      (eq, ":crouching", 0),
      (agent_set_animation, ":player_agent", "anim_stand_to_crouch"),
      (agent_set_slot, ":player_agent", slot_agent_crouching, 1),
   (else_try),         
      (agent_set_animation, ":player_agent", "anim_crouch_to_stand"),
      (agent_set_slot, ":player_agent", slot_agent_crouching, 0),
   (try_end)], [])

crouching_command = (0, 0, 0,
  [
  (neq, "$ai_crouch_mode", 2),
  (neg|main_hero_fallen),
   (assign, ":command", -1),
   (try_begin),
     (key_clicked, "$key_crouch_command"),
     #Pavise related things BEGIN
     #(try_begin),
     #   (key_is_down, key_left_control),
     #   (assign, ":command", 2),
     #(else_try),
     #Pavise related things END
        (assign, ":command", 1),
     #Pavise related things BEGIN
     #(try_end),   
     #Pavise related things END
   (else_try),
     (key_clicked, "$key_stand_command"),   
     (assign, ":command", 0),
   (try_end),
   (ge, ":command", 0),
   (call_script, "script_crouch_command", ":command"),], []) 
   
crouching_scan = (0, 0, 0,  [(neq, "$ai_crouch_mode", 2),(call_script, "script_crouching_scan"),], [])

crouching_triggers = [

player_crouch,crouching_command,crouching_scan]


#] + doghotel_triggers),
		
#doghotel_1 = (ti_before_mission_start, 0, 0, 
#    [],
#    [
#      (this_or_next|multiplayer_is_server),
#      (neg|game_in_multiplayer_mode),
#      (assign, ":var0", 0),
#      (try_begin),
#        (neq, "$g_doghotel_version_id", 3),
#        (assign, ":var0", 1),
#      (try_end),
#      (call_script, "script_doghotel_initialize_bot_globals", ":var0"),
#    ])
#
#doghotel_2 = (0.5, 0, 0, 
#    [
#      (eq, "$g_doghotel_enable_brainy_bots", 1),
#    ],
#    [
#      (this_or_next|multiplayer_is_server),
#      (neg|game_in_multiplayer_mode),
#      (call_script, "script_doghotel_special_actions"),
#    ])
#
#doghotel_3 = (0, 0, 0, 
#    [
#      (eq, "$g_doghotel_enable_brainy_bots", 1),
#    ],
#    [
#      (this_or_next|multiplayer_is_server),
#      (neg|game_in_multiplayer_mode),
#      (call_script, "script_doghotel_distance_calculations"),
#      (call_script, "script_doghotel_combat_loop"),
#    ])
#
#doghotel_4 = (0, 0, 0, 
#    [
#      (key_clicked, 67),
#    ],
#    [
#      (neg|multiplayer_is_dedicated_server),
#      (try_begin),
#        (neg|is_presentation_active, "prsnt_doghotel_configure"),
#        (try_begin),
#          (neg|game_in_multiplayer_mode),
#          (omit_key_once, 67),
#          (start_presentation, "prsnt_doghotel_configure"),
#        (else_try),
#          (game_in_multiplayer_mode),
#          (eq, "$g_doghotel_multiplayer_brainy_bots_installed_on_server", 1),
#          (multiplayer_get_my_player, ":var0"),
#          (player_is_admin, ":var0"),
#          (omit_key_once, 67),
#          (start_presentation, "prsnt_doghotel_configure"),
#        (try_end),
#      (try_end),
#    ])
#
#doghotel_5 = (0, 0, 0, 
#    [
#      (gt, "$g_doghotel_prsnt_configure_close", 0),
#    ],
#    [
#      (neg|multiplayer_is_dedicated_server),
#      (call_script, "script_doghotel_configure_close"),
#    ])
# 
# 
# 
#	#Multiplayer triggers begin
#doghotel_mp_1 = (ti_before_mission_start, 0, ti_once, 
#    [],
#    [
#      (multiplayer_is_server),
#      (call_script, "script_doghotel_initialize_mp_globals", 0),
#    ])
#
#doghotel_mp_2 = (60, 0, 0, 
#    [],
#    [
#      (multiplayer_is_server),
#      (val_add, "$g_doghotel_brainy_message_timer", 1),
#      (try_begin),
#        (gt, "$g_doghotel_brainy_message_interval", 1),
#        (ge, "$g_doghotel_brainy_message_timer", "$g_doghotel_brainy_message_interval"),
#        (assign, "$g_doghotel_brainy_message_timer", 0),
#        (str_store_string, s1, "str_doghotel_brainy_bots_server_message"),
#        (call_script, "script_doghotel_server_message"),
#      (try_end),
#    ])
#
#doghotel_mp_3 = (0.5, 0, 0, 
#    [
#      (eq, "$g_doghotel_anti_autoblock", 1),
#      (server_get_control_block_dir, ":var0"),
#      (eq, ":var0", 1),
#    ],
#    [
#      (multiplayer_is_server),
#      (server_set_control_block_dir, 1),
#    ])
#	#Multiplayer triggers end
#	
#	
#doghotel_triggers = [
#doghotel_1,doghotel_2,doghotel_3,doghotel_4,doghotel_5]
#
#doghotel_triggers_mp = [
#doghotel_1,doghotel_2,doghotel_3,doghotel_4,doghotel_5,doghotel_mp_1,doghotel_mp_2,doghotel_mp_3]

mission_templates = [

	("town_default", 0, -1,
	"Default town visit",
	[(0, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, [itm_priest_robe_1, itm_priest_cap_1, itm_shoes, itm_sword_type_xii, itm_talak_buckler, itm_throwing_daggers]),
	(1, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, []),
	(2, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, []),
	(3, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, []),
	(4, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, []),
	(5, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, []),
	(6, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, []),
	(7, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, []),
	(8, mtef_scene_source, af_override_horse, 0, 1, []),
	(9, mtef_visitor_source, af_override_horse, 0, 1, []),
	(10, mtef_scene_source, af_override_horse, 0, 1, []),
	(11, mtef_scene_source, af_override_horse, 0, 1, []),
	(12, mtef_scene_source, af_override_horse, 0, 1, []),
	(13, mtef_scene_source, 0, 0, 1, []),
	(14, mtef_scene_source, 0, 0, 1, []),
	(15, mtef_scene_source, 0, 0, 1, []),
	(16, mtef_visitor_source, af_override_horse, 0, 1, []),
	(17, mtef_visitor_source, af_override_horse, 0, 1, []),
	(18, mtef_visitor_source, af_override_horse, 0, 1, []),
	(19, mtef_visitor_source, af_override_horse, 0, 1, []),
	(20, mtef_visitor_source, af_override_horse, 0, 1, []),
	(21, mtef_visitor_source, af_override_horse, 0, 1, []),
	(22, mtef_visitor_source, af_override_horse, 0, 1, []),
	(23, mtef_visitor_source, af_override_horse, 0, 1, []),
	(24, mtef_visitor_source, af_override_horse, 0, 1, []),
	(25, mtef_visitor_source, af_override_horse, 0, 1, []),
	(26, mtef_visitor_source, af_override_horse, 0, 1, []),
	(27, mtef_visitor_source, af_override_horse, 0, 1, []),
	(28, mtef_visitor_source, af_override_horse, 0, 1, []),
	(29, mtef_visitor_source, af_override_horse, 0, 1, []),
	(30, mtef_visitor_source, af_override_horse, 0, 1, []),
	(31, mtef_visitor_source, af_override_horse, 0, 1, [])],
	[
		(1.0, 0.0, ti_once,
		[],

		[
			(store_current_scene, ":current_scene"),
			(scene_set_slot, ":current_scene", slot_scene_visited, 1),
			(try_begin),
				(eq, "$sneaked_into_town", 1),
				(call_script, "script_music_set_situation_with_culture", 16384),
			(else_try),
				(eq, "$talk_context", 14),
				(call_script, "script_music_set_situation_with_culture", 512),
			(else_try),
				(call_script, "script_music_set_situation_with_culture", 8192),
			(try_end)
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_change_banners_and_chest"),
			(call_script, "script_initialize_tavern_variables")
		]),

		(-22.0, 0.0, 0.0,
		[
			(set_trigger_result, 1)
		],

		[]),

		(1.0, 0.0, 0.0,
		[
			(gt, "$g_belligerent_drunk_leaving", 0),
			(entry_point_get_position, 0, 0),
			(agent_get_position, 1, "$g_belligerent_drunk_leaving"),
			(get_distance_between_positions, ":distance_between_positions_0_1", 0, 1),
			(le, ":distance_between_positions_0_1", 150)
		],

		[
			(agent_fade_out, "$g_belligerent_drunk_leaving"),
			(assign, "$g_belligerent_drunk_leaving", 0)
		]),

		(-21.0, 0.0, 0.0,
		[
			(try_begin),
				(eq, "$g_main_attacker_agent", 0),
				(set_trigger_result, 1),
			(try_end)
		],

		[]),

		(2.0, 0.0, 0.0,
		[
			(neg|conversation_screen_is_active),
			(eq, "$talk_context", 14),
			(neg|troop_slot_eq, "trp_hired_assassin", slot_troop_cur_center, "$g_encountered_party"),
			(troop_slot_eq, "trp_belligerent_drunk", slot_troop_cur_center, "$g_encountered_party"),
			(eq, "$drunks_dont_pick_fights", 0)
		],

		[
			(try_begin),
				(eq, "$g_start_belligerent_drunk_fight", 0),
				(assign, "$g_start_belligerent_drunk_fight", 1),
				(try_for_agents, ":var_1"),
					(agent_get_troop_id, ":troop_id_var_1", ":var_1"),
					(eq, ":troop_id_var_1", "trp_belligerent_drunk"),
					(assign, "$g_belligerent_drunk", ":var_1"),
				(try_end),
			(else_try),
				(eq, "$g_start_belligerent_drunk_fight", 1),
				(agent_is_active, "$g_belligerent_drunk"),
				(agent_is_alive, "$g_belligerent_drunk"),
				(get_player_agent_no, ":player_agent_no"),
				(agent_get_position, 0, ":player_agent_no"),
				(agent_get_position, 1, "$g_belligerent_drunk"),
				(get_distance_between_positions, ":distance_between_positions_0_1", 0, 1),
				(position_get_z, ":position_z_0", 0),
				(position_get_z, ":position_z_1", 1),
				(store_sub, ":value", ":position_z_1", ":position_z_0"),
				(try_begin),
					(le, ":value", 0),
					(val_mul, ":value", -1),
				(try_end),
				(store_mul, ":value_2", ":value", 3),
				(val_add, ":distance_between_positions_0_1", ":value_2"),
				(store_random_in_range, ":random_in_range_0_200", 0, 200),
				(store_add, ":value_3", 400, ":random_in_range_0_200"),
				(le, ":distance_between_positions_0_1", ":value_3"),
				(call_script, "script_activate_tavern_attackers"),
				(start_mission_conversation, "trp_belligerent_drunk"),
				(assign, "$g_start_belligerent_drunk_fight", 2),
			(try_end)
		]),

		(2.0, 0.0, 0.0,
		[
			(neg|conversation_screen_is_active),
			(eq, "$talk_context", 14),
			(troop_slot_eq, "trp_hired_assassin", slot_troop_cur_center, "$g_encountered_party")
		],

		[
			(try_begin),
				(eq, "$g_start_hired_assassin_fight", 0),
				(assign, "$g_start_hired_assassin_fight", 1),
				(try_for_agents, ":var_1"),
					(agent_get_troop_id, ":troop_id_var_1", ":var_1"),
					(eq, ":troop_id_var_1", "trp_hired_assassin"),
					(assign, "$g_hired_assassin", ":var_1"),
				(try_end),
			(else_try),
				(eq, "$g_start_hired_assassin_fight", 1),
				(agent_is_active, "$g_hired_assassin"),
				(agent_is_alive, "$g_hired_assassin"),
				(get_player_agent_no, ":player_agent_no"),
				(agent_get_position, 0, ":player_agent_no"),
				(agent_get_position, 1, "$g_hired_assassin"),
				(get_distance_between_positions, ":distance_between_positions_0_1", 0, 1),
				(position_get_z, ":position_z_0", 0),
				(position_get_z, ":position_z_1", 1),
				(store_sub, ":value", ":position_z_1", ":position_z_0"),
				(try_begin),
					(le, ":value", 0),
					(val_mul, ":value", -1),
				(try_end),
				(store_mul, ":value_2", ":value", 3),
				(val_add, ":distance_between_positions_0_1", ":value_2"),
				(store_random_in_range, ":random_in_range_0_200", 0, 200),
				(store_add, ":value_3", 400, ":random_in_range_0_200"),
				(le, ":distance_between_positions_0_1", ":value_3"),
				(call_script, "script_activate_tavern_attackers"),
				(assign, "$g_start_hired_assassin_fight", 2),
			(try_end)
		]),

		(3.0, 0.0, ti_once,
		[
			(neg|conversation_screen_is_active),
			(eq, "$talk_context", 14),
			(gt, "$g_main_attacker_agent", 0),
			(this_or_next|neg|agent_is_alive, "$g_main_attacker_agent"),
			(agent_is_wounded, "$g_main_attacker_agent")
		],

		[
			(mission_enable_talk),
			(try_for_agents, ":var_1"),
				(agent_is_alive, ":var_1"),
				(agent_get_position, 4, ":var_1"),
				(agent_set_scripted_destination, ":var_1", 4),
			(try_end),
			(party_get_slot, ":g_encountered_party_town_tavernkeeper", "$g_encountered_party", slot_town_tavernkeeper),
			(start_mission_conversation, ":g_encountered_party_town_tavernkeeper")
		]),

		(3.0, 0.0, ti_once,
		[
			(neg|conversation_screen_is_active),
			(eq, "$talk_context", 14),
			(gt, "$g_main_attacker_agent", 0),
			(main_hero_fallen)
		],

		[
			(jump_to_menu, "mnu_lost_tavern_duel"),
			(finish_mission, 0)
		]),

		(1.0, 0.0, 0.0,
		[
			(neg|conversation_screen_is_active),
			(eq, "$talk_context", 14),
			(gt, "$g_main_attacker_agent", 0),
			(get_player_agent_no, ":player_agent_no"),
			(agent_is_alive, ":player_agent_no"),
			(agent_get_wielded_item, ":wielded_item_player_agent_no_0", ":player_agent_no", 0),
			(is_between, ":wielded_item_player_agent_no_0", "itm_darts", "itm_torch")
		],

		[
			(party_get_slot, ":g_encountered_party_town_tavernkeeper", "$g_encountered_party", slot_town_tavernkeeper),
			(start_mission_conversation, ":g_encountered_party_town_tavernkeeper")
		]),

		(1.0, 0.0, 0.0,
		[
			(gt, "$g_main_attacker_agent", 0)
		],

		[
			(agent_get_wielded_item, ":wielded_item_g_main_attacker_agent_0", "$g_main_attacker_agent", 0),
			(val_max, "$g_attacker_drawn_weapon", ":wielded_item_g_main_attacker_agent_0"),
			(call_script, "script_neutral_behavior_in_fight")
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_set_matching_sexy_boots", ":trigger_param_1")
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$sp_shield_bash", 1),
			(game_key_is_down, 7),
			(game_key_clicked, 6),
			(neg|main_hero_fallen),
		],

		[
		(call_script, "script_shield_bash"),
		]),

			##AI kicking begin
		   (2, 0, 3, #AI kicking
       [], [
	(get_player_agent_no,":player"),
	(try_for_agents, ":agent"),
		(neq, ":agent", ":player"),
		(agent_is_alive, ":agent"),
		(neq, ":agent", -1),
		(agent_is_human, ":agent"),#Only humans can kick....FOR NOW
		(agent_is_active, ":agent"),
		(agent_slot_eq, ":agent", slot_agent_is_running_away, 0),#Isn't fleeing the battle.
		##He's an eligible human.  Now see if he's in a position to kick.
		(agent_get_attack_action, ":attack_action", ":agent"), #returned values: free = 0, readying_attack = 1, releasing_attack = 2, completing_attack_after_hit = 3, attack_parried = 4, reloading = 5, after_release = 6, cancelling_attack = 7
		(agent_get_defend_action, ":defend_action", ":agent"),#
		(this_or_next|eq,":attack_action",4),#Just got parried
		(this_or_next|eq,":defend_action",1),#Parrying an enemy
		##So he'll only try to kick if he just parried an enemy attack, or his own attack just got parried.
		(agent_get_team, ":team", ":agent"),
		(assign, ":maximum_distance", 100),
		#Target Acquisition
		(agent_ai_get_look_target,":suspect",":agent"),
		(gt,":suspect",0),#Make sure there is someone.
		(agent_is_alive, ":suspect"),
		(agent_is_human, ":suspect"),#Only kick humans
		(agent_is_active, ":suspect"),
		(agent_get_team, ":suspect_team", ":suspect"),
		(neq, ":suspect_team", ":team"),#Friends don't let friends kick friends.
		(agent_get_position, pos1, ":agent"),#Distance check
		(agent_get_position, pos2, ":suspect"),
		(neg|position_is_behind_position, pos2, pos1), #Suspect can't be behind kicker.
		(get_distance_between_positions, ":distance", pos1, pos2),
		(le, ":distance", ":maximum_distance"),
		#Check chance
		(store_random_in_range,":kickchance", 1, 10),
		(try_begin),
			(eq,":kickchance",1), #10% chance per check
				#(display_message, "@Agent kicks."),
				(agent_set_animation, ":agent", "anim_prepare_kick_0"),
				(agent_deliver_damage_to_agent, ":agent", ":suspect", 3),
				(agent_set_animation, ":suspect", "anim_strike3_abdomen_front"),#Get Kicked
			(try_end),
	   (try_end),]),
	   
	   ##AI Kicking end
		
		
		(0.25, 0.0, 4.0,
		[
			(eq, "$sp_shield_bash_ai", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(neq, ":var_2", ":player_agent_no"),
				(agent_is_alive, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_active, ":var_2"), #Test to see if it stops AI from shield bashing (new addition v3)
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(store_skill_level, ":skill_level_shield_troop_id_var_2", "skl_shield", ":troop_id_var_2"),
				(store_proficiency_level, ":proficiency_level_troop_id_var_2_0", ":troop_id_var_2", 0),
				(ge, ":skill_level_shield_troop_id_var_2", 4),
				(ge, ":proficiency_level_troop_id_var_2_0", 200),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(le, ":horse_var_2", 0),
				(try_begin),
					(neg|agent_slot_ge, ":var_2", 50, 1),
					(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
					(agent_get_wielded_item, ":wielded_item_var_2_1", ":var_2", 1),
					(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
					(eq, ":type_wielded_item_var_2_1", 7),
					(agent_get_attack_action, ":attack_action_var_2", ":var_2"),
					(eq, ":attack_action_var_2", 0),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_position, 1, ":var_2"),
					(assign, ":value", -1),
					(assign, ":value_2", 125),
					(try_for_agents, ":var_13"),
						(agent_is_alive, ":var_13"),
						(agent_is_human, ":var_13"),
						(agent_get_position, 2, ":var_13"),
						(neg|position_is_behind_position, 2, 1),
						(agent_get_team, ":team_var_13", ":var_13"),
						(neq, ":team_var_13", ":team_var_2"),
						(try_begin),
							(eq, ":team_var_2", 0),
							(assign, ":value_3", 2),
						(else_try),
							(eq, ":team_var_2", 2),
							(assign, ":value_3", 0),
						(else_try),
							(eq, ":team_var_2", 1),
							(assign, ":value_3", 3),
						(else_try),
							(eq, ":team_var_2", 3),
							(assign, ":value_3", 1),
						(try_end),
						(neq, ":team_var_13", ":value_3"),
						(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
						(le, ":distance_between_positions_1_2", ":value_2"),
						(assign, ":value_2", ":distance_between_positions_1_2"),
						(assign, ":value", ":var_13"),
					(try_end),
					(ge, ":value", 0),
					(agent_get_horse, ":horse_var_2", ":value"),
					(eq, ":horse_var_2", -1),
					(store_random_in_range, ":random_in_range_15_26", 15, 26),
					(agent_set_slot, ":var_2", 50, ":random_in_range_15_26"),
					(agent_set_animation, ":var_2", "anim_shield_bash"),
					(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
					(troop_get_type, ":type_wielded_item_var_2_1", ":troop_id_var_2"),
					(try_begin),
						(eq, ":type_wielded_item_var_2_1", 0),
						(agent_play_sound, ":var_2", "snd_man_yell"),
					(else_try),
						(eq, ":type_wielded_item_var_2_1", 1),
						(agent_play_sound, ":var_2", "snd_woman_yell"),
					(try_end),
					(agent_play_sound, ":value", "snd_wooden_hit_low_armor_high_damage"),
					(agent_get_defend_action, ":attack_action_var_2", ":value"),
					(try_begin),
						(eq, ":attack_action_var_2", 2),
						(neg|position_is_behind_position, 1, 2),
						(agent_get_wielded_item, ":wielded_item_var_2_1", ":value", 1),
						(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
						(eq, ":type_wielded_item_var_2_1", 7),
						(agent_set_animation, ":value", "anim_shield_bash"),
					(else_try),
						(agent_set_animation, ":value", "anim_shield_strike"),
					(try_end),
				(try_end),
				(agent_get_slot, ":var_2_50", ":var_2", 50),
				(val_sub, ":var_2_50", 1),
				(val_max, ":var_2_50", 0),
				(agent_set_slot, ":var_2", 50, ":var_2_50"),
			(try_end)
])
		]),

	("conversation_encounter", 0, -1,
	"Conversation encounter",
	[(0, mtef_visitor_source, af_override_fullhelm, 0, 1, []),
	(1, mtef_visitor_source, af_override_fullhelm, 0, 1, []),
	(2, mtef_visitor_source, af_override_fullhelm, 0, 1, []),
	(3, mtef_visitor_source, af_override_fullhelm, 0, 1, []),
	(4, mtef_visitor_source, af_override_fullhelm, 0, 1, []),
	(5, mtef_visitor_source, af_override_fullhelm, 0, 1, []),
	(6, mtef_visitor_source, af_override_fullhelm, 0, 1, []),
	(7, mtef_visitor_source, af_override_fullhelm, 0, 1, []),
	(8, mtef_visitor_source, af_override_fullhelm, 0, 1, []),
	(9, mtef_visitor_source, af_override_fullhelm, 0, 1, []),
	(10, mtef_visitor_source, af_override_fullhelm, 0, 1, []),
	(11, mtef_visitor_source, af_override_fullhelm, 0, 1, []),
	(12, mtef_visitor_source, af_override_fullhelm, 0, 1, []),
	(13, mtef_visitor_source, af_override_fullhelm, 0, 1, []),
	(14, mtef_visitor_source, af_override_fullhelm, 0, 1, []),
	(15, mtef_visitor_source, af_override_fullhelm, 0, 1, []),
	(16, mtef_visitor_source, af_override_fullhelm, 0, 1, []),
	(17, mtef_visitor_source, af_override_fullhelm, 0, 1, []),
	(18, mtef_visitor_source, af_override_fullhelm, 0, 1, []),
	(19, mtef_visitor_source, af_override_fullhelm, 0, 1, []),
	(20, mtef_visitor_source, af_override_fullhelm, 0, 1, []),
	(21, mtef_visitor_source, af_override_fullhelm, 0, 1, []),
	(22, mtef_visitor_source, af_override_fullhelm, 0, 1, []),
	(23, mtef_visitor_source, af_override_fullhelm, 0, 1, []),
	(24, mtef_visitor_source, af_override_fullhelm, 0, 1, []),
	(25, mtef_visitor_source, af_override_fullhelm, 0, 1, []),
	(26, mtef_visitor_source, af_override_fullhelm, 0, 1, []),
	(27, mtef_visitor_source, af_override_fullhelm, 0, 1, []),
	(28, mtef_visitor_source, af_override_fullhelm, 0, 1, []),
	(29, mtef_visitor_source, af_override_fullhelm, 0, 1, []),
	(30, mtef_visitor_source, af_override_fullhelm, 0, 1, []),
	(31, mtef_visitor_source, af_override_fullhelm, 0, 1, [])],
	[
		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_set_matching_sexy_boots", ":trigger_param_1")
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$sp_shield_bash", 1),
			(game_key_is_down, 7),
			(game_key_clicked, 6),
			(neg|main_hero_fallen),
		],

		[
		(call_script, "script_shield_bash"),
		]),

			##AI kicking begin
		   (2, 0, 3, #AI kicking
       [], [
	(get_player_agent_no,":player"),
	(try_for_agents, ":agent"),
		(neq, ":agent", ":player"),
		(agent_is_alive, ":agent"),
		(neq, ":agent", -1),
		(agent_is_human, ":agent"),#Only humans can kick....FOR NOW
		(agent_is_active, ":agent"),
		(agent_slot_eq, ":agent", slot_agent_is_running_away, 0),#Isn't fleeing the battle.
		##He's an eligible human.  Now see if he's in a position to kick.
		(agent_get_attack_action, ":attack_action", ":agent"), #returned values: free = 0, readying_attack = 1, releasing_attack = 2, completing_attack_after_hit = 3, attack_parried = 4, reloading = 5, after_release = 6, cancelling_attack = 7
		(agent_get_defend_action, ":defend_action", ":agent"),#
		(this_or_next|eq,":attack_action",4),#Just got parried
		(this_or_next|eq,":defend_action",1),#Parrying an enemy
		##So he'll only try to kick if he just parried an enemy attack, or his own attack just got parried.
		(agent_get_team, ":team", ":agent"),
		(assign, ":maximum_distance", 100),
		#Target Acquisition
		(agent_ai_get_look_target,":suspect",":agent"),
		(gt,":suspect",0),#Make sure there is someone.
		(agent_is_alive, ":suspect"),
		(agent_is_human, ":suspect"),#Only kick humans
		(agent_is_active, ":suspect"),
		(agent_get_team, ":suspect_team", ":suspect"),
		(neq, ":suspect_team", ":team"),#Friends don't let friends kick friends.
		(agent_get_position, pos1, ":agent"),#Distance check
		(agent_get_position, pos2, ":suspect"),
		(neg|position_is_behind_position, pos2, pos1), #Suspect can't be behind kicker.
		(get_distance_between_positions, ":distance", pos1, pos2),
		(le, ":distance", ":maximum_distance"),
		#Check chance
		(store_random_in_range,":kickchance", 1, 10),
		(try_begin),
			(eq,":kickchance",1), #10% chance per check
				#(display_message, "@Agent kicks."),
				(agent_set_animation, ":agent", "anim_prepare_kick_0"),
				(agent_deliver_damage_to_agent, ":agent", ":suspect", 3),
				(agent_set_animation, ":suspect", "anim_strike3_abdomen_front"),#Get Kicked
			(try_end),
	   (try_end),]),
	   
	   ##AI Kicking end
		
		
		(0.25, 0.0, 4.0,
		[
			(eq, "$sp_shield_bash_ai", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(neq, ":var_2", ":player_agent_no"),
				(agent_is_alive, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_active, ":var_2"), #Test to see if it stops AI from shield bashing (new addition v3)
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(store_skill_level, ":skill_level_shield_troop_id_var_2", "skl_shield", ":troop_id_var_2"),
				(store_proficiency_level, ":proficiency_level_troop_id_var_2_0", ":troop_id_var_2", 0),
				(ge, ":skill_level_shield_troop_id_var_2", 4),
				(ge, ":proficiency_level_troop_id_var_2_0", 200),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(le, ":horse_var_2", 0),
				(try_begin),
					(neg|agent_slot_ge, ":var_2", 50, 1),
					(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
					(agent_get_wielded_item, ":wielded_item_var_2_1", ":var_2", 1),
					(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
					(eq, ":type_wielded_item_var_2_1", 7),
					(agent_get_attack_action, ":attack_action_var_2", ":var_2"),
					(eq, ":attack_action_var_2", 0),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_position, 1, ":var_2"),
					(assign, ":value", -1),
					(assign, ":value_2", 125),
					(try_for_agents, ":var_13"),
						(agent_is_alive, ":var_13"),
						(agent_is_human, ":var_13"),
						(agent_get_position, 2, ":var_13"),
						(neg|position_is_behind_position, 2, 1),
						(agent_get_team, ":team_var_13", ":var_13"),
						(neq, ":team_var_13", ":team_var_2"),
						(try_begin),
							(eq, ":team_var_2", 0),
							(assign, ":value_3", 2),
						(else_try),
							(eq, ":team_var_2", 2),
							(assign, ":value_3", 0),
						(else_try),
							(eq, ":team_var_2", 1),
							(assign, ":value_3", 3),
						(else_try),
							(eq, ":team_var_2", 3),
							(assign, ":value_3", 1),
						(try_end),
						(neq, ":team_var_13", ":value_3"),
						(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
						(le, ":distance_between_positions_1_2", ":value_2"),
						(assign, ":value_2", ":distance_between_positions_1_2"),
						(assign, ":value", ":var_13"),
					(try_end),
					(ge, ":value", 0),
					(agent_get_horse, ":horse_var_2", ":value"),
					(eq, ":horse_var_2", -1),
					(store_random_in_range, ":random_in_range_15_26", 15, 26),
					(agent_set_slot, ":var_2", 50, ":random_in_range_15_26"),
					(agent_set_animation, ":var_2", "anim_shield_bash"),
					(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
					(troop_get_type, ":type_wielded_item_var_2_1", ":troop_id_var_2"),
					(try_begin),
						(eq, ":type_wielded_item_var_2_1", 0),
						(agent_play_sound, ":var_2", "snd_man_yell"),
					(else_try),
						(eq, ":type_wielded_item_var_2_1", 1),
						(agent_play_sound, ":var_2", "snd_woman_yell"),
					(try_end),
					(agent_play_sound, ":value", "snd_wooden_hit_low_armor_high_damage"),
					(agent_get_defend_action, ":attack_action_var_2", ":value"),
					(try_begin),
						(eq, ":attack_action_var_2", 2),
						(neg|position_is_behind_position, 1, 2),
						(agent_get_wielded_item, ":wielded_item_var_2_1", ":value", 1),
						(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
						(eq, ":type_wielded_item_var_2_1", 7),
						(agent_set_animation, ":value", "anim_shield_bash"),
					(else_try),
						(agent_set_animation, ":value", "anim_shield_strike"),
					(try_end),
				(try_end),
				(agent_get_slot, ":var_2_50", ":var_2", 50),
				(val_sub, ":var_2_50", 1),
				(val_max, ":var_2_50", 0),
				(agent_set_slot, ":var_2", 50, ":var_2_50"),
			(try_end)
])
		]),



	("town_center", 0, -1,
	"Default town visit",
	[(0, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, [itm_priest_robe_1, itm_priest_cap_1, itm_shoes, itm_sword_type_xii, itm_talak_buckler, itm_throwing_daggers]),
	(1, mtef_scene_source|mtef_team_0, 0, 0, 1, []),
	(2, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, [itm_priest_robe_1, itm_priest_cap_1, itm_shoes, itm_sword_type_xii, itm_talak_buckler, itm_throwing_daggers]),
	(3, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, [itm_priest_robe_1, itm_priest_cap_1, itm_shoes, itm_sword_type_xii, itm_talak_buckler, itm_throwing_daggers]),
	(4, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, [itm_priest_robe_1, itm_priest_cap_1, itm_shoes, itm_sword_type_xii, itm_talak_buckler, itm_throwing_daggers]),
	(5, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, [itm_priest_robe_1, itm_priest_cap_1, itm_shoes, itm_sword_type_xii, itm_talak_buckler, itm_throwing_daggers]),
	(6, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, [itm_priest_robe_1, itm_priest_cap_1, itm_shoes, itm_sword_type_xii, itm_talak_buckler, itm_throwing_daggers]),
	(7, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, [itm_priest_robe_1, itm_priest_cap_1, itm_shoes, itm_sword_type_xii, itm_talak_buckler, itm_throwing_daggers]),
	(8, mtef_visitor_source, af_override_horse, 0, 1, []),
	(9, mtef_visitor_source, af_override_horse, 0, 1, []),
	(10, mtef_visitor_source, af_override_horse, 0, 1, []),
	(11, mtef_visitor_source, af_override_horse, 0, 1, []),
	(12, mtef_visitor_source, af_override_horse, 0, 1, []),
	(13, mtef_visitor_source, 0, 0, 1, []),
	(14, mtef_scene_source, 0, 0, 1, []),
	(15, mtef_scene_source, 0, 0, 1, []),
	(16, mtef_visitor_source, af_override_horse, 0, 1, []),
	(17, mtef_visitor_source, af_override_horse, 0, 1, []),
	(18, mtef_visitor_source, af_override_horse, 0, 1, []),
	(19, mtef_visitor_source, af_override_horse, 0, 1, []),
	(20, mtef_visitor_source, af_override_horse, 0, 1, []),
	(21, mtef_visitor_source, af_override_horse, 0, 1, []),
	(22, mtef_visitor_source, af_override_horse, 0, 1, []),
	(23, mtef_visitor_source, af_override_horse, 0, 1, []),
	(24, mtef_visitor_source, af_override_horse, 0, 1, []),
	(25, mtef_visitor_source, af_override_horse, 0, 1, []),
	(26, mtef_visitor_source, af_override_horse, 0, 1, []),
	(27, mtef_visitor_source, af_override_horse, 0, 1, []),
	(28, mtef_visitor_source, af_override_horse, 0, 1, []),
	(29, mtef_visitor_source, af_override_horse, 0, 1, []),
	(30, mtef_visitor_source, af_override_horse, 0, 1, []),
	(31, mtef_visitor_source, af_override_horse, 0, 1, []),
	(32, mtef_visitor_source, af_override_horse, 0, 1, []),
	(33, mtef_visitor_source, af_override_horse, 0, 1, []),
	(34, mtef_visitor_source, af_override_horse, 0, 1, []),
	(35, mtef_visitor_source, af_override_horse, 0, 1, []),
	(36, mtef_visitor_source, af_override_horse, 0, 1, []),
	(37, mtef_visitor_source, af_override_horse, 0, 1, []),
	(38, mtef_visitor_source, af_override_horse, 0, 1, []),
	(39, mtef_visitor_source, af_override_horse, 0, 1, []),
	(40, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(41, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(42, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(43, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(44, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(45, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(46, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(47, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, [])],
	[
		(-19.0, 0.0, 0.0,
		[],

		[
			(assign, "$tom_sand_storm", 0),
			(call_script, "script_change_rain_or_snow"),
			(set_fixed_point_multiplier, 100),
			(try_begin),
				(is_currently_night),
				#(set_shader_param_float, "@vFresnelMultiplier", 15),
			(else_try),
				#(set_shader_param_float, "@vFresnelMultiplier", 50),
			(try_end)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_init_town_agent", ":trigger_param_1"),
			(try_begin),
				(this_or_next|eq, "$talk_context", 19),
				(eq, "$talk_context", 18),
				(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
				(troop_slot_eq, ":troop_id_trigger_param_1", slot_troop_will_join_prison_break, 1),
				(get_player_agent_no, ":player_agent_no"),
				(agent_get_team, ":team_player_agent_no", ":player_agent_no"),
				(agent_set_team, ":trigger_param_1", ":team_player_agent_no"),
				(agent_ai_set_aggressiveness, ":trigger_param_1", 5),
				(troop_set_slot, ":troop_id_trigger_param_1", slot_troop_will_join_prison_break, 0),
				(try_begin),
					(troop_slot_eq, ":troop_id_trigger_param_1", slot_troop_mission_participation, 3),
					(agent_get_position, 1, ":trigger_param_1"),
					(agent_set_scripted_destination, ":trigger_param_1", 1),
				(try_end),
			(try_end)
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(assign, "$g_main_attacker_agent", 0)
		]),

		(1.0, 0.0, ti_once,
		[],

		[
			(try_begin),
				(eq, "$g_mt_mode", 0),
				(store_current_scene, ":current_scene"),
				(scene_set_slot, ":current_scene", slot_scene_visited, 1),
			(try_end),
			(call_script, "script_init_town_walker_agents"),
			(try_begin),
				(eq, "$sneaked_into_town", 1),
				(call_script, "script_music_set_situation_with_culture", 16384),
			(else_try),
				(call_script, "script_music_set_situation_with_culture", 8192),
			(try_end)
		]),

		(-19.0, 0.0, 0.0, #Ti before mission start
		[],

		[
			(call_script, "script_change_banners_and_chest")
		]),

		(-22.0, 0.0, 0.0, #Ti inventory key pressed
		[
			(try_begin),
				(eq, "$g_mt_mode", 0),
				(set_trigger_result, 1),
			(else_try),
				(eq, "$g_mt_mode", 1),
				(display_message, "str_cant_use_inventory_disguised"),
			(else_try),
				(display_message, "str_cant_use_inventory_now"),
			(try_end),
			###Begin Blackjack
			###BLACKJACK BEGIN
		  (eq, "$black_jack",0),#plus blackjack
          (set_trigger_result,1),
		  ###BLACKJACK END
		  ###End Blackjack
		],

		[]),

		(-21.0, 0.0, 0.0, #ti_tab_pressed
		[
			(try_begin),
				(this_or_next|eq, "$talk_context", 19),
				(eq, "$talk_context", 18),
				(display_message, "str_cannot_leave_now"),
			(else_try),
				(this_or_next|eq, "$g_mt_mode", 0),
				(eq, "$g_mt_mode", 1),
				(mission_enable_talk),
				(set_trigger_result, 1),
			(else_try),
				(display_message, "str_cannot_leave_now"),
			(try_end),
			
			###Begin Blackjack
			###BLACKJACK BEGIN
		  (eq, "$black_jack",0),#plus blackjack
          (set_trigger_result,1),
		  ###BLACKJACK END
		  ###End Blackjack
		],

		[]),

		(-30.0, 0.0, 0.0,
		[
			(try_begin),
				(eq, "$g_defending_against_siege", 0),
				(assign, "$g_leave_town", 1),
			(try_end)
		],

		[
			(try_begin),
				(eq, "$talk_context", 19),
				(call_script, "script_deduct_casualties_from_garrison"),
				(jump_to_menu, "mnu_sneak_into_town_caught_dispersed_guards"),
			(try_end),
			(mission_enable_talk)
		]),

		(0.0, 0.0, ti_once,
		[],

		[
			(party_slot_eq, "$current_town", slot_party_type, 3),
			(call_script, "script_town_init_doors", 0),
			(try_begin),
				(eq, "$town_nighttime", 0),
				(play_sound, "snd_town_ambiance", 2),
			(try_end),
			(store_current_scene, ":current_scene"),
			(try_begin),
				(this_or_next|eq, ":current_scene", "scn_acre_center"),
				(this_or_next|eq, ":current_scene", "scn_venice_center"),
				(this_or_next|eq, ":current_scene", "scn_walls_scot"),
				(eq, ":current_scene", "scn_walls_mann"),
				(play_sound, "snd_sea_ambiance", 2),
			(try_end)
		]),

		(3.0, 0.0, 0.0,
		[
			(call_script, "script_tick_town_walkers")
		],

		[]),

		(2.0, 0.0, 0.0,
		[
			(call_script, "script_center_ambiance_sounds")
		],

		[]),

		(1.0, 0.0, 0.0,
		[
			(this_or_next|eq, "$talk_context", 18),
			(eq, "$talk_context", 19)
		],

		[
			(call_script, "script_neutral_behavior_in_fight"),
			(mission_disable_talk)
		]),

		(1.0, 0.0, ti_once,
		[
			(eq, "$talk_context", 19)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(assign, reg6, ":player_agent_no"),
			(call_script, "script_activate_town_guard"),
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_position, 4, ":player_agent_no"),
			(try_for_range, ":troop", "trp_npc1", "trp_heroes_end"),
				(troop_slot_ge, ":troop", 149, 2),
				(str_store_troop_name, 4, ":troop"),
				(display_message, "str_s4_joins_prison_break"),
				(store_current_scene, ":current_scene"),
				(modify_visitors_at_site, ":current_scene"),
				(store_current_scene, ":current_scene"),
				(modify_visitors_at_site, ":current_scene"),
				(add_visitors_to_current_scene, 24, ":troop", 1, 0, 0),
				(troop_set_slot, ":troop", slot_troop_will_join_prison_break, 1),
			(try_end)
		]),

		(3.0, 0.0, 0.0,
		[
			(main_hero_fallen, 0)
		],

		[
			(try_begin),
				(this_or_next|eq, "$talk_context", 18),
				(eq, "$talk_context", 19),
				(call_script, "script_deduct_casualties_from_garrison"),
				(jump_to_menu, "mnu_captivity_start_castle_defeat"),
				(assign, ":var_1", "trp_heroes_end"),
				(try_for_range, ":troop", "trp_npc1", ":var_1"),
					(troop_set_slot, ":troop", slot_troop_mission_participation, 0),
				(try_end),
				(mission_enable_talk),
				(finish_mission, 0),
			(else_try),
				(set_trigger_result, 1),
			(try_end)
		]),

		(3.0, 0.0, 0.0,
		[
			(eq, "$talk_context", 19),
			(neg|main_hero_fallen, 0),
			(store_mission_timer_a, ":mission_timer_a"),
			(ge, ":mission_timer_a", 10),
			(all_enemies_defeated)
		],

		[
			(call_script, "script_deduct_casualties_from_garrison"),
			(try_for_agents, ":var_1"),
				(agent_get_troop_id, ":troop_id_var_1", ":var_1"),
				(troop_slot_ge, ":troop_id_var_1", 149, 2),
				(try_begin),
					(agent_is_alive, ":var_1"),
					(troop_set_slot, ":troop_id_var_1", slot_troop_mission_participation, 4),
				(else_try),
					(troop_set_slot, ":troop_id_var_1", slot_troop_mission_participation, 5),
				(try_end),
			(try_end),
			(jump_to_menu, "mnu_sneak_into_town_caught_ran_away"),
			(mission_enable_talk),
			(finish_mission, 0)
		]),

		(-26.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(store_trigger_param_2, ":trigger_param_2"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(agent_get_troop_id, ":troop_id_trigger_param_2", ":trigger_param_2"),
			(try_begin),
				(this_or_next|eq, ":troop_id_trigger_param_1", "trp_teutonic_prison_guard"),
				(this_or_next|eq, ":troop_id_trigger_param_1", "trp_lithuanian_prison_guard"),
				(this_or_next|eq, ":troop_id_trigger_param_1", "trp_tatar_prison_guard"),
				(this_or_next|eq, ":troop_id_trigger_param_1", "trp_danish_prison_guard"),
				(this_or_next|eq, ":troop_id_trigger_param_1", "trp_polish_prison_guard"),
				(this_or_next|eq, ":troop_id_trigger_param_1", "trp_hre_prison_guard"),
				(this_or_next|eq, ":troop_id_trigger_param_1", "trp_hungarian_prison_guard"),
				(this_or_next|eq, ":troop_id_trigger_param_1", "trp_russian_prison_guard"),
				(this_or_next|eq, ":troop_id_trigger_param_1", "trp_english_prison_guard"),
				(this_or_next|eq, ":troop_id_trigger_param_1", "trp_french_prison_guard"),
				(this_or_next|eq, ":troop_id_trigger_param_1", "trp_swedish_prison_guard"),
				(this_or_next|eq, ":troop_id_trigger_param_1", "trp_norwegian_prison_guard"),
				(this_or_next|eq, ":troop_id_trigger_param_1", "trp_scottish_prison_guard"),
				(eq, ":troop_id_trigger_param_1", "trp_irish_prison_guard"),
				(eq, ":troop_id_trigger_param_2", "trp_player"),
				(display_message, "@You got keys of dungeon."),
			(try_end)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_set_matching_sexy_boots", ":trigger_param_1")
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$sp_shield_bash", 1),
			(game_key_is_down, 7),
			(game_key_clicked, 6),
			(neg|main_hero_fallen),
		],

		[
		(call_script, "script_shield_bash"),
		]),

			##AI kicking begin
		   (2, 0, 3, #AI kicking
       [], [
	(get_player_agent_no,":player"),
	(try_for_agents, ":agent"),
		(neq, ":agent", ":player"),
		(agent_is_alive, ":agent"),
		(neq, ":agent", -1),
		(agent_is_human, ":agent"),#Only humans can kick....FOR NOW
		(agent_is_active, ":agent"),
		(agent_slot_eq, ":agent", slot_agent_is_running_away, 0),#Isn't fleeing the battle.
		##He's an eligible human.  Now see if he's in a position to kick.
		(agent_get_attack_action, ":attack_action", ":agent"), #returned values: free = 0, readying_attack = 1, releasing_attack = 2, completing_attack_after_hit = 3, attack_parried = 4, reloading = 5, after_release = 6, cancelling_attack = 7
		(agent_get_defend_action, ":defend_action", ":agent"),#
		(this_or_next|eq,":attack_action",4),#Just got parried
		(this_or_next|eq,":defend_action",1),#Parrying an enemy
		##So he'll only try to kick if he just parried an enemy attack, or his own attack just got parried.
		(agent_get_team, ":team", ":agent"),
		(assign, ":maximum_distance", 100),
		#Target Acquisition
		(agent_ai_get_look_target,":suspect",":agent"),
		(gt,":suspect",0),#Make sure there is someone.
		(agent_is_alive, ":suspect"),
		(agent_is_human, ":suspect"),#Only kick humans
		(agent_is_active, ":suspect"),
		(agent_get_team, ":suspect_team", ":suspect"),
		(neq, ":suspect_team", ":team"),#Friends don't let friends kick friends.
		(agent_get_position, pos1, ":agent"),#Distance check
		(agent_get_position, pos2, ":suspect"),
		(neg|position_is_behind_position, pos2, pos1), #Suspect can't be behind kicker.
		(get_distance_between_positions, ":distance", pos1, pos2),
		(le, ":distance", ":maximum_distance"),
		#Check chance
		(store_random_in_range,":kickchance", 1, 10),
		(try_begin),
			(eq,":kickchance",1), #10% chance per check
				#(display_message, "@Agent kicks."),
				(agent_set_animation, ":agent", "anim_prepare_kick_0"),
				(agent_deliver_damage_to_agent, ":agent", ":suspect", 3),
				(agent_set_animation, ":suspect", "anim_strike3_abdomen_front"),#Get Kicked
			(try_end),
	   (try_end),]),
	   
	   ##AI Kicking end
		
		
		(0.25, 0.0, 4.0,
		[
			(eq, "$sp_shield_bash_ai", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(neq, ":var_2", ":player_agent_no"),
				(agent_is_alive, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_active, ":var_2"), #Test to see if it stops AI from shield bashing (new addition v3)
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(store_skill_level, ":skill_level_shield_troop_id_var_2", "skl_shield", ":troop_id_var_2"),
				(store_proficiency_level, ":proficiency_level_troop_id_var_2_0", ":troop_id_var_2", 0),
				(ge, ":skill_level_shield_troop_id_var_2", 4),
				(ge, ":proficiency_level_troop_id_var_2_0", 200),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(le, ":horse_var_2", 0),
				(try_begin),
					(neg|agent_slot_ge, ":var_2", 50, 1),
					(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
					(agent_get_wielded_item, ":wielded_item_var_2_1", ":var_2", 1),
					(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
					(eq, ":type_wielded_item_var_2_1", 7),
					(agent_get_attack_action, ":attack_action_var_2", ":var_2"),
					(eq, ":attack_action_var_2", 0),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_position, 1, ":var_2"),
					(assign, ":value", -1),
					(assign, ":value_2", 125),
					(try_for_agents, ":var_13"),
						(agent_is_alive, ":var_13"),
						(agent_is_human, ":var_13"),
						(agent_get_position, 2, ":var_13"),
						(neg|position_is_behind_position, 2, 1),
						(agent_get_team, ":team_var_13", ":var_13"),
						(neq, ":team_var_13", ":team_var_2"),
						(try_begin),
							(eq, ":team_var_2", 0),
							(assign, ":value_3", 2),
						(else_try),
							(eq, ":team_var_2", 2),
							(assign, ":value_3", 0),
						(else_try),
							(eq, ":team_var_2", 1),
							(assign, ":value_3", 3),
						(else_try),
							(eq, ":team_var_2", 3),
							(assign, ":value_3", 1),
						(try_end),
						(neq, ":team_var_13", ":value_3"),
						(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
						(le, ":distance_between_positions_1_2", ":value_2"),
						(assign, ":value_2", ":distance_between_positions_1_2"),
						(assign, ":value", ":var_13"),
					(try_end),
					(ge, ":value", 0),
					(agent_get_horse, ":horse_var_2", ":value"),
					(eq, ":horse_var_2", -1),
					(store_random_in_range, ":random_in_range_15_26", 15, 26),
					(agent_set_slot, ":var_2", 50, ":random_in_range_15_26"),
					(agent_set_animation, ":var_2", "anim_shield_bash"),
					(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
					(troop_get_type, ":type_wielded_item_var_2_1", ":troop_id_var_2"),
					(try_begin),
						(eq, ":type_wielded_item_var_2_1", 0),
						(agent_play_sound, ":var_2", "snd_man_yell"),
					(else_try),
						(eq, ":type_wielded_item_var_2_1", 1),
						(agent_play_sound, ":var_2", "snd_woman_yell"),
					(try_end),
					(agent_play_sound, ":value", "snd_wooden_hit_low_armor_high_damage"),
					(agent_get_defend_action, ":attack_action_var_2", ":value"),
					(try_begin),
						(eq, ":attack_action_var_2", 2),
						(neg|position_is_behind_position, 1, 2),
						(agent_get_wielded_item, ":wielded_item_var_2_1", ":value", 1),
						(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
						(eq, ":type_wielded_item_var_2_1", 7),
						(agent_set_animation, ":value", "anim_shield_bash"),
					(else_try),
						(agent_set_animation, ":value", "anim_shield_strike"),
					(try_end),
				(try_end),
				(agent_get_slot, ":var_2_50", ":var_2", 50),
				(val_sub, ":var_2_50", 1),
				(val_max, ":var_2_50", 0),
				(agent_set_slot, ":var_2", 50, ":var_2_50"),
			(try_end)
		])
	] ),

	("village_center", 0, -1,
	"village center",
	[(0, mtef_scene_source|mtef_team_0, 0, 0, 1, []),
	(1, mtef_scene_source|mtef_team_0, 0, 0, 1, []),
	(2, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, []),
	(3, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, []),
	(4, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, []),
	(5, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, []),
	(6, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, []),
	(7, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, []),
	(8, mtef_visitor_source, af_override_horse, 0, 1, []),
	(9, mtef_visitor_source, af_override_horse, 0, 1, []),
	(10, mtef_visitor_source, af_override_horse, 0, 1, []),
	(11, mtef_visitor_source, af_override_horse, 0, 1, []),
	(12, mtef_visitor_source, af_override_horse, 0, 1, []),
	(13, mtef_visitor_source, 0, 0, 1, []),
	(14, mtef_visitor_source, 0, 0, 1, []),
	(15, mtef_visitor_source, 0, 0, 1, []),
	(16, mtef_visitor_source, af_override_horse, 0, 1, []),
	(17, mtef_visitor_source, af_override_horse, 0, 1, []),
	(18, mtef_visitor_source, af_override_horse, 0, 1, []),
	(19, mtef_visitor_source, af_override_horse, 0, 1, []),
	(20, mtef_visitor_source, af_override_horse, 0, 1, []),
	(21, mtef_visitor_source, af_override_horse, 0, 1, []),
	(22, mtef_visitor_source, af_override_horse, 0, 1, []),
	(23, mtef_visitor_source, af_override_horse, 0, 1, []),
	(24, mtef_visitor_source, af_override_horse, 0, 1, []),
	(25, mtef_visitor_source, af_override_horse, 0, 1, []),
	(26, mtef_visitor_source, af_override_horse, 0, 1, []),
	(27, mtef_visitor_source, af_override_horse, 0, 1, []),
	(28, mtef_visitor_source, af_override_horse, 0, 1, []),
	(29, mtef_visitor_source, af_override_horse, 0, 1, []),
	(30, mtef_visitor_source, af_override_horse, 0, 1, []),
	(31, mtef_visitor_source, af_override_horse, 0, 1, []),
	(32, mtef_visitor_source, af_override_horse, 0, 1, []),
	(33, mtef_visitor_source, af_override_horse, 0, 1, []),
	(34, mtef_visitor_source, af_override_horse, 0, 1, []),
	(35, mtef_visitor_source, af_override_horse, 0, 1, []),
	(36, mtef_visitor_source, af_override_horse, 0, 1, []),
	(37, mtef_visitor_source, af_override_horse, 0, 1, []),
	(38, mtef_visitor_source, af_override_horse, 0, 1, []),
	(39, mtef_visitor_source, af_override_horse, 0, 1, []),
	(40, mtef_visitor_source, af_override_horse, 0, 1, []),
	(41, mtef_visitor_source, af_override_horse, 0, 1, []),
	(42, mtef_visitor_source, af_override_horse, 0, 1, []),
	(43, mtef_visitor_source, af_override_horse, 0, 1, []),
	(44, mtef_visitor_source, af_override_horse, 0, 1, []),
	(45, mtef_visitor_source, af_override_horse, 0, 1, []),
	(46, mtef_visitor_source, af_override_horse, 0, 1, []),
	(47, mtef_visitor_source, af_override_horse, 0, 1, [])],
	[
		(-19.0, 0.0, 0.0,
		[],

		[
			(assign, "$tom_sand_storm", 0),
			(call_script, "script_change_rain_or_snow"),
			(set_fixed_point_multiplier, 100),
			(try_begin),
				(is_currently_night),
				#(set_shader_param_float, "@vFresnelMultiplier", 15),
			(else_try),
				#(set_shader_param_float, "@vFresnelMultiplier", 50),
			(try_end)
		]),

		(1.0, 0.0, ti_once,
		[],

		[
			(store_current_scene, ":current_scene"),
			(scene_set_slot, ":current_scene", slot_scene_visited, 1),
			(call_script, "script_init_town_walker_agents"),
			(call_script, "script_music_set_situation_with_culture", 65536)
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_change_banners_and_chest")
		]),

		(-22.0, 0.0, 0.0,
		[
			(set_trigger_result, 1)
		],

		[]),

		(-21.0, 0.0, 0.0,
		[
			(try_begin),
				(check_quest_active, "qst_hunt_down_fugitive"),
				(neg|check_quest_succeeded, "qst_hunt_down_fugitive"),
				(neg|check_quest_failed, "qst_hunt_down_fugitive"),
				(quest_slot_eq, "qst_hunt_down_fugitive", slot_quest_current_state, 1),
				(try_begin),
					(call_script, "script_cf_troop_agent_is_alive", "trp_fugitive"),
					(call_script, "script_fail_quest", "qst_hunt_down_fugitive"),
				(else_try),
					(call_script, "script_succeed_quest", "qst_hunt_down_fugitive"),
				(try_end),
			(try_end),
			(set_trigger_result, 1)
		],

		[]),

		(-30.0, 0.0, 0.0,
		[
			(try_begin),
				(assign, "$g_leave_town", 1),
			(try_end)
		],

		[]),

		(3.0, 0.0, 0.0,
		[
			(call_script, "script_tick_town_walkers")
		],

		[]),

		(2.0, 0.0, 0.0,
		[
			(call_script, "script_center_ambiance_sounds")
		],

		[]),

		(1.0, 0.0, ti_once,
		[
			(check_quest_active, "qst_hunt_down_fugitive"),
			(neg|check_quest_succeeded, "qst_hunt_down_fugitive"),
			(neg|check_quest_failed, "qst_hunt_down_fugitive"),
			(quest_slot_eq, "qst_hunt_down_fugitive", slot_quest_current_state, 1),
			(assign, ":value", 0),
			(try_begin),
				(call_script, "script_cf_troop_agent_is_alive", "trp_fugitive"),
			(else_try),
				(assign, ":value", 1),
			(try_end),
			(this_or_next|main_hero_fallen),
			(eq, ":value", 1)
		],

		[
			(try_begin),
				(main_hero_fallen),
				(jump_to_menu, "mnu_village_hunt_down_fugitive_defeated"),
				(call_script, "script_fail_quest", "qst_hunt_down_fugitive"),
				(finish_mission, 4),
			(else_try),
				(call_script, "script_change_player_relation_with_center", "$current_town", -2),
				(call_script, "script_succeed_quest", "qst_hunt_down_fugitive"),
			(try_end)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_set_matching_sexy_boots", ":trigger_param_1")
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$sp_shield_bash", 1),
			(game_key_is_down, 7),
			(game_key_clicked, 6),
			(neg|main_hero_fallen),
		],

		[
		(call_script, "script_shield_bash"),
		]),

			##AI kicking begin
		   (2, 0, 3, #AI kicking
       [], [
	(get_player_agent_no,":player"),
	(try_for_agents, ":agent"),
		(neq, ":agent", ":player"),
		(agent_is_alive, ":agent"),
		(neq, ":agent", -1),
		(agent_is_human, ":agent"),#Only humans can kick....FOR NOW
		(agent_is_active, ":agent"),
		(agent_slot_eq, ":agent", slot_agent_is_running_away, 0),#Isn't fleeing the battle.
		##He's an eligible human.  Now see if he's in a position to kick.
		(agent_get_attack_action, ":attack_action", ":agent"), #returned values: free = 0, readying_attack = 1, releasing_attack = 2, completing_attack_after_hit = 3, attack_parried = 4, reloading = 5, after_release = 6, cancelling_attack = 7
		(agent_get_defend_action, ":defend_action", ":agent"),#
		(this_or_next|eq,":attack_action",4),#Just got parried
		(this_or_next|eq,":defend_action",1),#Parrying an enemy
		##So he'll only try to kick if he just parried an enemy attack, or his own attack just got parried.
		(agent_get_team, ":team", ":agent"),
		(assign, ":maximum_distance", 100),
		#Target Acquisition
		(agent_ai_get_look_target,":suspect",":agent"),
		(gt,":suspect",0),#Make sure there is someone.
		(agent_is_alive, ":suspect"),
		(agent_is_human, ":suspect"),#Only kick humans
		(agent_is_active, ":suspect"),
		(agent_get_team, ":suspect_team", ":suspect"),
		(neq, ":suspect_team", ":team"),#Friends don't let friends kick friends.
		(agent_get_position, pos1, ":agent"),#Distance check
		(agent_get_position, pos2, ":suspect"),
		(neg|position_is_behind_position, pos2, pos1), #Suspect can't be behind kicker.
		(get_distance_between_positions, ":distance", pos1, pos2),
		(le, ":distance", ":maximum_distance"),
		#Check chance
		(store_random_in_range,":kickchance", 1, 10),
		(try_begin),
			(eq,":kickchance",1), #10% chance per check
				#(display_message, "@Agent kicks."),
				(agent_set_animation, ":agent", "anim_prepare_kick_0"),
				(agent_deliver_damage_to_agent, ":agent", ":suspect", 3),
				(agent_set_animation, ":suspect", "anim_strike3_abdomen_front"),#Get Kicked
			(try_end),
	   (try_end),]),
	   
	   ##AI Kicking end
		
		
		(0.25, 0.0, 4.0,
		[
			(eq, "$sp_shield_bash_ai", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(neq, ":var_2", ":player_agent_no"),
				(agent_is_alive, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_active, ":var_2"), #Test to see if it stops AI from shield bashing (new addition v3)
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(store_skill_level, ":skill_level_shield_troop_id_var_2", "skl_shield", ":troop_id_var_2"),
				(store_proficiency_level, ":proficiency_level_troop_id_var_2_0", ":troop_id_var_2", 0),
				(ge, ":skill_level_shield_troop_id_var_2", 4),
				(ge, ":proficiency_level_troop_id_var_2_0", 200),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(le, ":horse_var_2", 0),
				(try_begin),
					(neg|agent_slot_ge, ":var_2", 50, 1),
					(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
					(agent_get_wielded_item, ":wielded_item_var_2_1", ":var_2", 1),
					(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
					(eq, ":type_wielded_item_var_2_1", 7),
					(agent_get_attack_action, ":attack_action_var_2", ":var_2"),
					(eq, ":attack_action_var_2", 0),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_position, 1, ":var_2"),
					(assign, ":value", -1),
					(assign, ":value_2", 125),
					(try_for_agents, ":var_13"),
						(agent_is_alive, ":var_13"),
						(agent_is_human, ":var_13"),
						(agent_get_position, 2, ":var_13"),
						(neg|position_is_behind_position, 2, 1),
						(agent_get_team, ":team_var_13", ":var_13"),
						(neq, ":team_var_13", ":team_var_2"),
						(try_begin),
							(eq, ":team_var_2", 0),
							(assign, ":value_3", 2),
						(else_try),
							(eq, ":team_var_2", 2),
							(assign, ":value_3", 0),
						(else_try),
							(eq, ":team_var_2", 1),
							(assign, ":value_3", 3),
						(else_try),
							(eq, ":team_var_2", 3),
							(assign, ":value_3", 1),
						(try_end),
						(neq, ":team_var_13", ":value_3"),
						(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
						(le, ":distance_between_positions_1_2", ":value_2"),
						(assign, ":value_2", ":distance_between_positions_1_2"),
						(assign, ":value", ":var_13"),
					(try_end),
					(ge, ":value", 0),
					(agent_get_horse, ":horse_var_2", ":value"),
					(eq, ":horse_var_2", -1),
					(store_random_in_range, ":random_in_range_15_26", 15, 26),
					(agent_set_slot, ":var_2", 50, ":random_in_range_15_26"),
					(agent_set_animation, ":var_2", "anim_shield_bash"),
					(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
					(troop_get_type, ":type_wielded_item_var_2_1", ":troop_id_var_2"),
					(try_begin),
						(eq, ":type_wielded_item_var_2_1", 0),
						(agent_play_sound, ":var_2", "snd_man_yell"),
					(else_try),
						(eq, ":type_wielded_item_var_2_1", 1),
						(agent_play_sound, ":var_2", "snd_woman_yell"),
					(try_end),
					(agent_play_sound, ":value", "snd_wooden_hit_low_armor_high_damage"),
					(agent_get_defend_action, ":attack_action_var_2", ":value"),
					(try_begin),
						(eq, ":attack_action_var_2", 2),
						(neg|position_is_behind_position, 1, 2),
						(agent_get_wielded_item, ":wielded_item_var_2_1", ":value", 1),
						(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
						(eq, ":type_wielded_item_var_2_1", 7),
						(agent_set_animation, ":value", "anim_shield_bash"),
					(else_try),
						(agent_set_animation, ":value", "anim_shield_strike"),
					(try_end),
				(try_end),
				(agent_get_slot, ":var_2_50", ":var_2", 50),
				(val_sub, ":var_2_50", 1),
				(val_max, ":var_2_50", 0),
				(agent_set_slot, ":var_2", 50, ":var_2_50"),
			(try_end)
		])
	] ),

	("home_visit", mtf_arena_fight|mtf_team_fight, -1,
	"Nice house, mate!",
	[(0, mtef_scene_source|mtef_team_0, 0, 0, 1, []),
	(1, mtef_scene_source|mtef_team_0, 0, 0, 1, []),
	(2, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, []),
	(3, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, []),
	(4, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, []),
	(5, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, []),
	(6, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, []),
	(7, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, [])],
	[
		(-19.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_change_banners_and_chest")
		]),

		(-22.0, 0.0, 0.0,
		[
			(set_trigger_result, 1)
		],

		[]),

		(-21.0, 0.0, 0.0,
		[
			(set_trigger_result, 1)
		],

		[]),

		(2.0, 0.0, 0.0,
		[
			(call_script, "script_center_ambiance_sounds")
		],

		[]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_set_matching_sexy_boots", ":trigger_param_1")
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$sp_shield_bash", 1),
			(game_key_is_down, 7),
			(game_key_clicked, 6),
			(neg|main_hero_fallen),
		],

		[
		(call_script, "script_shield_bash"),
		]),

			##AI kicking begin
		   (2, 0, 3, #AI kicking
       [], [
	(get_player_agent_no,":player"),
	(try_for_agents, ":agent"),
		(neq, ":agent", ":player"),
		(agent_is_alive, ":agent"),
		(neq, ":agent", -1),
		(agent_is_human, ":agent"),#Only humans can kick....FOR NOW
		(agent_is_active, ":agent"),
		(agent_slot_eq, ":agent", slot_agent_is_running_away, 0),#Isn't fleeing the battle.
		##He's an eligible human.  Now see if he's in a position to kick.
		(agent_get_attack_action, ":attack_action", ":agent"), #returned values: free = 0, readying_attack = 1, releasing_attack = 2, completing_attack_after_hit = 3, attack_parried = 4, reloading = 5, after_release = 6, cancelling_attack = 7
		(agent_get_defend_action, ":defend_action", ":agent"),#
		(this_or_next|eq,":attack_action",4),#Just got parried
		(this_or_next|eq,":defend_action",1),#Parrying an enemy
		##So he'll only try to kick if he just parried an enemy attack, or his own attack just got parried.
		(agent_get_team, ":team", ":agent"),
		(assign, ":maximum_distance", 100),
		#Target Acquisition
		(agent_ai_get_look_target,":suspect",":agent"),
		(gt,":suspect",0),#Make sure there is someone.
		(agent_is_alive, ":suspect"),
		(agent_is_human, ":suspect"),#Only kick humans
		(agent_is_active, ":suspect"),
		(agent_get_team, ":suspect_team", ":suspect"),
		(neq, ":suspect_team", ":team"),#Friends don't let friends kick friends.
		(agent_get_position, pos1, ":agent"),#Distance check
		(agent_get_position, pos2, ":suspect"),
		(neg|position_is_behind_position, pos2, pos1), #Suspect can't be behind kicker.
		(get_distance_between_positions, ":distance", pos1, pos2),
		(le, ":distance", ":maximum_distance"),
		#Check chance
		(store_random_in_range,":kickchance", 1, 10),
		(try_begin),
			(eq,":kickchance",1), #10% chance per check
				#(display_message, "@Agent kicks."),
				(agent_set_animation, ":agent", "anim_prepare_kick_0"),
				(agent_deliver_damage_to_agent, ":agent", ":suspect", 3),
				(agent_set_animation, ":suspect", "anim_strike3_abdomen_front"),#Get Kicked
			(try_end),
	   (try_end),]),
	   
	   ##AI Kicking end
		
		
		(0.25, 0.0, 4.0,
		[
			(eq, "$sp_shield_bash_ai", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(neq, ":var_2", ":player_agent_no"),
				(agent_is_alive, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_active, ":var_2"), #Test to see if it stops AI from shield bashing (new addition v3)
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(store_skill_level, ":skill_level_shield_troop_id_var_2", "skl_shield", ":troop_id_var_2"),
				(store_proficiency_level, ":proficiency_level_troop_id_var_2_0", ":troop_id_var_2", 0),
				(ge, ":skill_level_shield_troop_id_var_2", 4),
				(ge, ":proficiency_level_troop_id_var_2_0", 200),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(le, ":horse_var_2", 0),
				(try_begin),
					(neg|agent_slot_ge, ":var_2", 50, 1),
					(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
					(agent_get_wielded_item, ":wielded_item_var_2_1", ":var_2", 1),
					(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
					(eq, ":type_wielded_item_var_2_1", 7),
					(agent_get_attack_action, ":attack_action_var_2", ":var_2"),
					(eq, ":attack_action_var_2", 0),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_position, 1, ":var_2"),
					(assign, ":value", -1),
					(assign, ":value_2", 125),
					(try_for_agents, ":var_13"),
						(agent_is_alive, ":var_13"),
						(agent_is_human, ":var_13"),
						(agent_get_position, 2, ":var_13"),
						(neg|position_is_behind_position, 2, 1),
						(agent_get_team, ":team_var_13", ":var_13"),
						(neq, ":team_var_13", ":team_var_2"),
						(try_begin),
							(eq, ":team_var_2", 0),
							(assign, ":value_3", 2),
						(else_try),
							(eq, ":team_var_2", 2),
							(assign, ":value_3", 0),
						(else_try),
							(eq, ":team_var_2", 1),
							(assign, ":value_3", 3),
						(else_try),
							(eq, ":team_var_2", 3),
							(assign, ":value_3", 1),
						(try_end),
						(neq, ":team_var_13", ":value_3"),
						(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
						(le, ":distance_between_positions_1_2", ":value_2"),
						(assign, ":value_2", ":distance_between_positions_1_2"),
						(assign, ":value", ":var_13"),
					(try_end),
					(ge, ":value", 0),
					(agent_get_horse, ":horse_var_2", ":value"),
					(eq, ":horse_var_2", -1),
					(store_random_in_range, ":random_in_range_15_26", 15, 26),
					(agent_set_slot, ":var_2", 50, ":random_in_range_15_26"),
					(agent_set_animation, ":var_2", "anim_shield_bash"),
					(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
					(troop_get_type, ":type_wielded_item_var_2_1", ":troop_id_var_2"),
					(try_begin),
						(eq, ":type_wielded_item_var_2_1", 0),
						(agent_play_sound, ":var_2", "snd_man_yell"),
					(else_try),
						(eq, ":type_wielded_item_var_2_1", 1),
						(agent_play_sound, ":var_2", "snd_woman_yell"),
					(try_end),
					(agent_play_sound, ":value", "snd_wooden_hit_low_armor_high_damage"),
					(agent_get_defend_action, ":attack_action_var_2", ":value"),
					(try_begin),
						(eq, ":attack_action_var_2", 2),
						(neg|position_is_behind_position, 1, 2),
						(agent_get_wielded_item, ":wielded_item_var_2_1", ":value", 1),
						(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
						(eq, ":type_wielded_item_var_2_1", 7),
						(agent_set_animation, ":value", "anim_shield_bash"),
					(else_try),
						(agent_set_animation, ":value", "anim_shield_strike"),
					(try_end),
				(try_end),
				(agent_get_slot, ":var_2_50", ":var_2", 50),
				(val_sub, ":var_2_50", 1),
				(val_max, ":var_2_50", 0),
				(agent_set_slot, ":var_2", 50, ":var_2_50"),
		(try_end),	
		])
	]),

	("manor_center", 0, -1,
	"manor center",
	[(0, mtef_scene_source|mtef_team_0, 0, 0, 1, []),
	(1, mtef_scene_source|mtef_team_0, 0, 0, 1, []),
	(2, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, []),
	(3, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, []),
	(4, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, []),
	(5, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, []),
	(6, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, []),
	(7, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, []),
	(8, mtef_visitor_source, af_override_horse, 0, 1, []),
	(9, mtef_visitor_source, af_override_horse, 0, 1, []),
	(10, mtef_visitor_source, af_override_horse, 0, 1, []),
	(11, mtef_visitor_source, af_override_horse, 0, 1, []),
	(12, mtef_visitor_source, af_override_horse, 0, 1, []),
	(13, mtef_visitor_source, 0, 0, 1, []),
	(14, mtef_visitor_source, 0, 0, 1, []),
	(15, mtef_visitor_source, 0, 0, 1, []),
	(16, mtef_visitor_source, af_override_horse, 0, 1, []),
	(17, mtef_visitor_source, af_override_horse, 0, 1, []),
	(18, mtef_visitor_source, af_override_horse, 0, 1, []),
	(19, mtef_visitor_source, af_override_horse, 0, 1, []),
	(20, mtef_visitor_source, af_override_horse, 0, 1, []),
	(21, mtef_visitor_source, af_override_horse, 0, 1, []),
	(22, mtef_visitor_source, af_override_horse, 0, 1, []),
	(23, mtef_visitor_source, af_override_horse, 0, 1, []),
	(24, mtef_visitor_source, af_override_horse, 0, 1, []),
	(25, mtef_visitor_source, af_override_horse, 0, 1, []),
	(26, mtef_visitor_source, af_override_horse, 0, 1, []),
	(27, mtef_visitor_source, af_override_horse, 0, 1, []),
	(28, mtef_visitor_source, af_override_horse, 0, 1, []),
	(29, mtef_visitor_source, af_override_horse, 0, 1, []),
	(30, mtef_visitor_source, af_override_horse, 0, 1, []),
	(31, mtef_visitor_source, af_override_horse, 0, 1, []),
	(32, mtef_visitor_source, af_override_horse, 0, 1, []),
	(33, mtef_visitor_source, af_override_horse, 0, 1, []),
	(34, mtef_visitor_source, af_override_horse, 0, 1, []),
	(35, mtef_visitor_source, af_override_horse, 0, 1, []),
	(36, mtef_visitor_source, af_override_horse, 0, 1, []),
	(37, mtef_visitor_source, af_override_horse, 0, 1, []),
	(38, mtef_visitor_source, af_override_horse, 0, 1, []),
	(39, mtef_visitor_source, af_override_horse, 0, 1, []),
	(40, mtef_visitor_source, af_override_horse, 0, 1, []),
	(41, mtef_visitor_source, af_override_horse, 0, 1, []),
	(42, mtef_visitor_source, af_override_horse, 0, 1, []),
	(43, mtef_visitor_source, af_override_horse, 0, 1, []),
	(44, mtef_visitor_source, af_override_horse, 0, 1, []),
	(45, mtef_visitor_source, af_override_horse, 0, 1, []),
	(46, mtef_visitor_source, af_override_horse, 0, 1, []),
	(47, mtef_visitor_source, af_override_horse, 0, 1, []),
	(48, mtef_visitor_source, af_override_horse, 0, 1, []),
	(49, mtef_visitor_source, af_override_horse, 0, 1, []),
	(50, mtef_visitor_source, af_override_horse, 0, 1, []),
	(51, mtef_visitor_source, af_override_horse, 0, 1, []),
	(52, mtef_visitor_source, af_override_horse, 0, 1, []),
	(53, mtef_visitor_source, af_override_horse, 0, 1, []),
	(54, mtef_visitor_source, af_override_horse, 0, 1, []),
	(55, mtef_visitor_source, af_override_horse, 0, 1, []),
	(56, mtef_visitor_source, af_override_horse, 0, 1, []),
	(57, mtef_visitor_source, af_override_horse, 0, 1, []),
	(58, mtef_visitor_source, af_override_horse, 0, 1, []),
	(59, mtef_visitor_source, af_override_horse, 0, 1, []),
	(60, mtef_visitor_source, af_override_horse, 0, 1, []),
	(61, mtef_visitor_source, af_override_horse, 0, 1, []),
	(62, mtef_visitor_source, af_override_horse, 0, 1, []),
	(63, mtef_visitor_source, af_override_horse, 0, 1, []),
	(64, mtef_visitor_source, af_override_horse, 0, 1, []),
	(65, mtef_visitor_source, af_override_horse, 0, 1, []),
	(66, mtef_visitor_source, af_override_horse, 0, 1, []),
	(67, mtef_visitor_source, af_override_horse, 0, 1, []),
	(68, mtef_visitor_source, af_override_horse, 0, 1, []),
	(69, mtef_visitor_source, af_override_horse, 0, 1, []),
	(70, mtef_visitor_source, af_override_horse, 0, 1, []),
	(71, mtef_visitor_source, af_override_horse, 0, 1, []),
	(72, mtef_visitor_source, af_override_horse, 0, 1, []),
	(73, mtef_visitor_source, af_override_horse, 0, 1, []),
	(74, mtef_visitor_source, af_override_horse, 0, 1, []),
	(75, mtef_visitor_source, af_override_horse, 0, 1, []),
	(76, mtef_visitor_source, af_override_horse, 0, 1, []),
	(77, mtef_visitor_source, af_override_horse, 0, 1, []),
	(78, mtef_visitor_source, af_override_horse, 0, 1, []),
	(79, mtef_visitor_source, af_override_horse, 0, 1, []),
	(80, mtef_visitor_source, af_override_horse, 0, 1, []),
	(81, mtef_visitor_source, af_override_horse, 0, 1, []),
	(82, mtef_visitor_source, af_override_horse, 0, 1, []),
	(83, mtef_visitor_source, af_override_horse, 0, 1, []),
	(84, mtef_visitor_source, af_override_horse, 0, 1, []),
	(85, mtef_visitor_source, af_override_horse, 0, 1, []),
	(86, mtef_visitor_source, af_override_horse, 0, 1, []),
	(87, mtef_visitor_source, af_override_horse, 0, 1, []),
	(88, mtef_visitor_source, af_override_horse, 0, 1, []),
	(89, mtef_visitor_source, af_override_horse, 0, 1, []),
	(90, mtef_visitor_source, af_override_horse, 0, 1, []),
	(91, mtef_visitor_source, af_override_horse, 0, 1, []),
	(92, mtef_visitor_source, af_override_horse, 0, 1, []),
	(93, mtef_visitor_source, af_override_horse, 0, 1, []),
	(94, mtef_visitor_source, af_override_horse, 0, 1, []),
	(95, mtef_visitor_source, af_override_horse, 0, 1, []),
	(96, mtef_visitor_source, af_override_horse, 0, 1, []),
	(97, mtef_visitor_source, af_override_horse, 0, 1, []),
	(98, mtef_visitor_source, af_override_horse, 0, 1, []),
	(99, mtef_visitor_source, af_override_horse, 0, 1, [])],
	[
		(-19.0, 0.0, ti_once,
		[],

		[
			(call_script, "script_remove_manor_objects")
		]),

		(1.0, 0.0, ti_once,
		[],

		[
			(store_current_scene, ":current_scene"),
			(scene_set_slot, ":current_scene", slot_scene_visited, 1),
			(call_script, "script_init_manor_walker_agents")
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_change_banners_and_chest")
		]),

		(-22.0, 0.0, 0.0,
		[
			(set_trigger_result, 1)
		],

		[]),

		(-21.0, 0.0, 0.0,
		[
			(set_trigger_result, 1)
		],

		[]),

		(3.0, 0.0, 0.0,
		[
			(call_script, "script_tick_manor_walkers")
		],

		[]),

		(2.0, 0.0, 0.0,
		[
			(call_script, "script_center_ambiance_sounds")
		],

		[]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_set_matching_sexy_boots", ":trigger_param_1")
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$sp_shield_bash", 1),
			(game_key_is_down, 7),
			(game_key_clicked, 6),
			(neg|main_hero_fallen),
		],

		[
		(call_script, "script_shield_bash"),
		]),

			##AI kicking begin
		   (2, 0, 3, #AI kicking
       [], [
	(get_player_agent_no,":player"),
	(try_for_agents, ":agent"),
		(neq, ":agent", ":player"),
		(agent_is_alive, ":agent"),
		(neq, ":agent", -1),
		(agent_is_human, ":agent"),#Only humans can kick....FOR NOW
		(agent_is_active, ":agent"),
		(agent_slot_eq, ":agent", slot_agent_is_running_away, 0),#Isn't fleeing the battle.
		##He's an eligible human.  Now see if he's in a position to kick.
		(agent_get_attack_action, ":attack_action", ":agent"), #returned values: free = 0, readying_attack = 1, releasing_attack = 2, completing_attack_after_hit = 3, attack_parried = 4, reloading = 5, after_release = 6, cancelling_attack = 7
		(agent_get_defend_action, ":defend_action", ":agent"),#
		(this_or_next|eq,":attack_action",4),#Just got parried
		(this_or_next|eq,":defend_action",1),#Parrying an enemy
		##So he'll only try to kick if he just parried an enemy attack, or his own attack just got parried.
		(agent_get_team, ":team", ":agent"),
		(assign, ":maximum_distance", 100),
		#Target Acquisition
		(agent_ai_get_look_target,":suspect",":agent"),
		(gt,":suspect",0),#Make sure there is someone.
		(agent_is_alive, ":suspect"),
		(agent_is_human, ":suspect"),#Only kick humans
		(agent_is_active, ":suspect"),
		(agent_get_team, ":suspect_team", ":suspect"),
		(neq, ":suspect_team", ":team"),#Friends don't let friends kick friends.
		(agent_get_position, pos1, ":agent"),#Distance check
		(agent_get_position, pos2, ":suspect"),
		(neg|position_is_behind_position, pos2, pos1), #Suspect can't be behind kicker.
		(get_distance_between_positions, ":distance", pos1, pos2),
		(le, ":distance", ":maximum_distance"),
		#Check chance
		(store_random_in_range,":kickchance", 1, 10),
		(try_begin),
			(eq,":kickchance",1), #10% chance per check
				#(display_message, "@Agent kicks."),
				(agent_set_animation, ":agent", "anim_prepare_kick_0"),
				(agent_deliver_damage_to_agent, ":agent", ":suspect", 3),
				(agent_set_animation, ":suspect", "anim_strike3_abdomen_front"),#Get Kicked
			(try_end),
	   (try_end),]),
	   
	   ##AI Kicking end
		
		
		(0.25, 0.0, 4.0,
		[
			(eq, "$sp_shield_bash_ai", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(neq, ":var_2", ":player_agent_no"),
				(agent_is_alive, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_active, ":var_2"), #Test to see if it stops AI from shield bashing (new addition v3)
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(store_skill_level, ":skill_level_shield_troop_id_var_2", "skl_shield", ":troop_id_var_2"),
				(store_proficiency_level, ":proficiency_level_troop_id_var_2_0", ":troop_id_var_2", 0),
				(ge, ":skill_level_shield_troop_id_var_2", 4),
				(ge, ":proficiency_level_troop_id_var_2_0", 200),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(le, ":horse_var_2", 0),
				(try_begin),
					(neg|agent_slot_ge, ":var_2", 50, 1),
					(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
					(agent_get_wielded_item, ":wielded_item_var_2_1", ":var_2", 1),
					(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
					(eq, ":type_wielded_item_var_2_1", 7),
					(agent_get_attack_action, ":attack_action_var_2", ":var_2"),
					(eq, ":attack_action_var_2", 0),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_position, 1, ":var_2"),
					(assign, ":value", -1),
					(assign, ":value_2", 125),
					(try_for_agents, ":var_13"),
						(agent_is_alive, ":var_13"),
						(agent_is_human, ":var_13"),
						(agent_get_position, 2, ":var_13"),
						(neg|position_is_behind_position, 2, 1),
						(agent_get_team, ":team_var_13", ":var_13"),
						(neq, ":team_var_13", ":team_var_2"),
						(try_begin),
							(eq, ":team_var_2", 0),
							(assign, ":value_3", 2),
						(else_try),
							(eq, ":team_var_2", 2),
							(assign, ":value_3", 0),
						(else_try),
							(eq, ":team_var_2", 1),
							(assign, ":value_3", 3),
						(else_try),
							(eq, ":team_var_2", 3),
							(assign, ":value_3", 1),
						(try_end),
						(neq, ":team_var_13", ":value_3"),
						(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
						(le, ":distance_between_positions_1_2", ":value_2"),
						(assign, ":value_2", ":distance_between_positions_1_2"),
						(assign, ":value", ":var_13"),
					(try_end),
					(ge, ":value", 0),
					(agent_get_horse, ":horse_var_2", ":value"),
					(eq, ":horse_var_2", -1),
					(store_random_in_range, ":random_in_range_15_26", 15, 26),
					(agent_set_slot, ":var_2", 50, ":random_in_range_15_26"),
					(agent_set_animation, ":var_2", "anim_shield_bash"),
					(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
					(troop_get_type, ":type_wielded_item_var_2_1", ":troop_id_var_2"),
					(try_begin),
						(eq, ":type_wielded_item_var_2_1", 0),
						(agent_play_sound, ":var_2", "snd_man_yell"),
					(else_try),
						(eq, ":type_wielded_item_var_2_1", 1),
						(agent_play_sound, ":var_2", "snd_woman_yell"),
					(try_end),
					(agent_play_sound, ":value", "snd_wooden_hit_low_armor_high_damage"),
					(agent_get_defend_action, ":attack_action_var_2", ":value"),
					(try_begin),
						(eq, ":attack_action_var_2", 2),
						(neg|position_is_behind_position, 1, 2),
						(agent_get_wielded_item, ":wielded_item_var_2_1", ":value", 1),
						(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
						(eq, ":type_wielded_item_var_2_1", 7),
						(agent_set_animation, ":value", "anim_shield_bash"),
					(else_try),
						(agent_set_animation, ":value", "anim_shield_strike"),
					(try_end),
				(try_end),
				(agent_get_slot, ":var_2_50", ":var_2", 50),
				(val_sub, ":var_2_50", 1),
				(val_max, ":var_2_50", 0),
				(agent_set_slot, ":var_2", 50, ":var_2_50"),
			(try_end)
		])
	] + crouching_triggers ),

	("manor_attack_bandits", mtf_battle_mode, 8,
	"You lead your men to battle.",
	[(3, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(1, mtef_team_0|mtef_use_exact_number, 0, aif_start_alarmed, 7, []),
	(1, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, [])],
	[
	
    (7, 0, ti_once,
    [],
    [
	(call_script, "script_assign_traits"),
    ]),


    (0, 0, 1, 
    [
    ],
    [
	(call_script, "script_stumbling"),
    ]),






#Decapitations next level right here.
(ti_on_agent_hit, 0, 0, [(eq, "$dynamic_decap", 1),],
[
   (store_trigger_param_1, ":victim_agent"),
   (store_trigger_param_2, ":attacker_agent"),
   (store_trigger_param_3, ":damage"),
   (assign, ":attacker_item", reg0), ### Transfer the item ID to make sure it dosn't change while the script is running
   (copy_position, pos5, pos0), ### Transfer the position of the hit to make sure it dosn't change while the script is running
   (neq, ":victim_agent", -1),
   (try_begin), #-- Decapitations --#
      (agent_is_human, ":victim_agent"),
	  (ge, ":attacker_item", 0),
	  (assign, ":run", 0), ### Reset the run test variable
#	  (try_begin), ### Special weapons that can decap, ovevrrides the below conditions
#		  (this_or_next|eq, ":attacker_item", "itm_supercrossbow"),
#		  (eq, ":attacker_item", "itm_supersledge"),
#		  (assign, ":run", 1),
	  (try_begin),
		  #(neq, ":attacker_item", "itm_mace_1"), ### List of weapons that cannot decapitate
		  #(neq, ":attacker_item", "itm_mace_2"), ### This would be easier to do with a preperty check (for damage type), but I don't know if that is possible or not
		  #(neq, ":attacker_item", "itm_mace_3"),
		  #(neq, ":attacker_item", "itm_staff"), #Keeping active incase of script errors
		  (agent_get_action_dir, ":attack_dir", ":attacker_agent"), ### Makes sure the attack is either a left or right swing
		  (this_or_next|eq, ":attack_dir", 1), ### Right swing
		  (eq, ":attack_dir", 2), ### Left swing
		  (assign, ":run", 1),
	  (try_end),
	  (eq, ":run", 1), ### One of the checks were true, continue to run script
	  #(assign, reg1, ":damage"), #Debug messages
	  #(display_message, "@Damage: {reg1}"),
	  
	  (assign, ":run", 0), ### Reset the run test variable
	  (try_begin),
		(ge, ":damage", "$decap_damage"), ### 30 Minimum damage required to decapitate an agent
		(assign, ":run", 1),
		
#	  (else_try),  ### If debugging mode is on, this bypasses the damage requirement check
#		  (eq,"$g_decapitations_debugging", 1),
#		  (assign, ":run", 1),
#		  (display_message, "@Decap minimum DMG req bypassed"),
	  (try_end),
	  (eq, ":run", 1),
	  
	  (store_agent_hit_points, ":hp", ":victim_agent", 1),
	  (val_add, ":hp", 10), ### 10 Victim must have the negative of this hp or below after hit for the script to move on (never put this value below 0 since the agent has to be absolutley positvely dead)!
	  (ge, ":damage", ":hp"),
	  
	  
	  ### Compare the hit position to the agent's position
      (agent_get_position, pos4, ":victim_agent"),
      (get_distance_between_positions, ":distance", pos4, pos5), 
	  (agent_get_horse, ":is_mounted", ":victim_agent"),
	  (try_begin), ### If the agent is on horseback, these values are used (note that these values will not be exactly correct if the horse is very large or very small)
		(ge, ":is_mounted", 0), ### Will be -1 if no horse is to be found, so anything above means that the agent is mounted
		(assign, ":min_distance", 240), ### Minimum distance from the agent's horse's hooves from which the hit is valid (240 is an approximate value)
		(assign, ":max_distance", 260), ### Maximum distance from the agent's horse's hooves to which the hit is valid (260 is an approximate value)
	  (else_try),  ### If the agent is on foot, these values are used
	    (assign, ":min_distance", 160), ### Minimum distance from the agent's feet from which the hit is valid (160 = slightly below the neck)
	    (assign, ":max_distance", 176), ### Maximum distance from the agent's feet to which the hit is valid (176 = near the nose)
	  (try_end),
      (is_between, ":distance", ":min_distance", ":max_distance"), ### Check to see if the hit is within the allowed area
	  
	  
	  (assign, ":run", 0), ### Default variable value before damage test
	  (try_begin),
		  (store_div, ":chance", ":damage", "$decap_damage_divider"), ### Chance of decap is damage / 4 right now. Lower this value for higher chances of decapitation (or press M+Right Ctrl for debug more if you just want to test easy decaps in-game).
		  
		  #(assign, reg1, ":chance"), #Debug messages
		  #(display_message, "@Decap chance is: {reg1}"),
		  (store_random_in_range, ":diceroll", 0, "$decap_randomizer"), ### Randomizer, 0-100
		  
		  #(assign, reg1, ":diceroll"), #Debug messages
		  #(display_message, "@Diceroll: {reg1}"),
		  (le, ":diceroll", ":chance"), ### ":diceroll" must be less than or equal to ":chance", if it is, decapitation occurs!
		  
		  (assign, ":run", 1), ### SUCCESS!
		  
#     (else_try),  ### If debugging mode is on, bypass chance calculation
#		  (eq,"$g_decapitations_debugging", 1),
#		  (assign, ":run", 1),
#		  (display_message, "@Decap chance calc bypassed"),
	  (try_end),  
	  (eq, ":run", 1), ### Time for the fun stuff!

	  ### Gender test for spawning the right head type
	  (assign, ":head_type", "itm_cut_off_head_male"),
	  (agent_get_troop_id, ":victim_troop", ":victim_agent"),
	  (try_begin),
	    (ge, ":victim_troop", 0),
		(troop_get_type,":victim_gender",":victim_troop"),
		(eq, ":victim_gender", 1),
		(assign, ":head_type", "itm_cut_off_head_female"),
	  (try_end),
	  
	  ### Randomize the spawned head's and/or helmet's position and orientation
	  (store_random_in_range, ":z_rotation", 0, 360),
	  (store_random_in_range, ":y_rotation", -60, 60),
	  (store_random_in_range, ":x_pos", -90, 90),
	  (store_random_in_range, ":y_pos", -90, 90),
	  (position_rotate_z, pos4,":z_rotation"),
	  (position_rotate_y, pos4,":y_rotation"),
	  (position_move_x, pos4, ":x_pos"),
	  (position_move_y, pos4, ":y_pos"),
	  (position_set_z_to_ground_level, pos4),
	  (position_move_z, pos4, 5),
	  (set_spawn_position, pos4),
	  (assign, ":prunetime", 360), ### This is the time in seconds before the spawned head or helmet gets pruned (removed). Recommended to keep it above 0 to make sure it gets removed eventually or when the scene resets, to prevent performance issues.
	  
	  #(spawn_item, ":head_type", 0, ":prunetime"), ### This is the old way of spawning the head on the ground with the helmet, disabled because of the new dynamic heads. You can comment away (disable) the dynamic heads spawning further down and uncomment this line for a less performance-needing approach (with no physics involved).
	  
	  ### Does the agent have a helmet or hat equipped?
      (agent_get_item_slot, ":item", ":victim_agent", 4), #head slot
      (try_begin),
         (ge, ":item", 1), ### Does it?
         (agent_unequip_item, ":victim_agent", ":item"), ### Yes it does. Unequip it to allow replacement by the invisible helmet further down
		 (try_begin),
			 ### Don't spawn items with "itp_attatch_armature" flag: rigging causes floating bugs
			 ### This would be much better to do with an item flag check, but I haven't found any way to do that
			 #(neq, ":item", "itm_with_itp_attatch_armature"),
			 #(neg|is_between,":item","start_of_itm_range_with_itp_attatch_armature","end_of_itm_range_with_itp_attatch_armature"),
			#(set_spawn_position, pos4),
			(spawn_item, ":item", 0, ":prunetime"), ### Spawns the agent's currently equipped headgear on the dropped head's position
		 (try_end),
      (try_end),
	  
	  (agent_equip_item, ":victim_agent", "itm_invisible_head"), ### Put an invisible helmet on the agent's head to "remove" it
	  
	  
	  (agent_get_position, pos4, ":victim_agent"), ### Refreshes the agent's position
	  (position_move_z, pos4, ":min_distance"), ### Move to the where the neck used to be attached
	  
	  
	  ### Blood effects! The last variable is the strength. Lower or increase it for more/less blood (or tweak the particle effects themselves in "module_particle_systems.py").
      (particle_system_burst, "psys_blood_decapitation", pos4, 40), 
	  (particle_system_burst, "psys_game_blood", pos4, 10),
	  (particle_system_burst, "psys_game_blood_2", pos4, 10),
	  
	  (play_sound_at_position, "snd_decapitation_battle", pos4), ### Play some nasty sounds
	  
	  
	  ### Dynamic head spawning! See the bottom of "module_scene_props.py" for physics-related options and more.
	  (position_move_z, pos4, 20),
	  (set_spawn_position, pos4),
	  (assign, ":head_type", "spr_head_dynamic_male"),
	  (try_begin), ### Gender check (for determening the type of head)
		(eq, ":victim_gender", 1),
		(assign, ":head_type", "spr_head_dynamic_female"),
	  (try_end),
	  (spawn_scene_prop, ":head_type"),
	  
		#Addition check if we should allow the message to appears
			(eq, "$allow_decap_mess", 1), #Possible script error

	  ### This below is for the text that shows up when somebody is decapitated.
	  
	  ### Who decapitated who?
		(agent_get_troop_id, ":attacker_troop", ":attacker_agent"),
		(str_store_troop_name, s0, ":attacker_troop"),

		(agent_get_troop_id, ":victim_troop", ":victim_agent"),
		(str_store_troop_name, s1, ":victim_troop"),

	  
	  ### Colour check (friend or foe?)
	  (get_player_agent_no, ":my_agent"),
	  (agent_get_team, ":my_team", ":my_agent"),
	  (agent_get_team, ":victim_team", ":victim_agent"),
	  (try_begin), ### Display it!
		  (neq, ":my_team", ":victim_team"),
		  (display_message, "@>>> {s0} decapitated {s1}!", 0xFF33DD11), ## Green
	  (else_try),
		  (display_message, "@>>> {s0} decapitated {s1}!", 0xFFFF4422), ## Red
	  (try_end),
   (try_end), #-- Decapitations END --#
   
   ]),













			##################################################
##### troop_ratio_bar
##################################################
      (0, 0, ti_once, [
	  (eq, "$use_troopbars", 1),
	  ], [
	  (start_presentation, "prsnt_troop_ratio_bar"),
	  ]),
##################################################
##### troop_ratio_bar
##################################################
	
			#Voice-over for Infantry, archers & Cavalry
		
		(0.0, 0.3, 0.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 29) #Everyone!
		],

		[
		(call_script, "script_identify_battle_voices_all")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 30) #Infantry
		],

		[
		(call_script, "script_identify_battle_voices_inf")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 31) #Archers
		],

		[
		(call_script, "script_identify_battle_voices_archers")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 32) #Cavalry
		],

		[
		(call_script, "script_identify_battle_voices_cav")
		]),
		#Voice-over for Infantry, archers & Cavalry	
	
		#####Engage SP Music Tracks FIELD BATTLES
	#####MUSICBOX
	(ti_before_mission_start, 0, ti_once, [ #680 #(ti_after_mission_start, 0, 680, [ #680
	(eq, "$additional_music", 1), #Obtained from Mod Options, affects mission templates, range: ALL SP Hostile music, co-op variant is additional_music_coop.
	],
		
  [
    ##(play_track, "track_silence", 1), #Stop current module track
		   (music_set_situation, mtf_sit_fight), #Field
   #(music_set_situation, mtf_sit_siege), #Siege probably don't use
	(assign, "$music_timer", 0), #Patch
  #Randomize chance is 1 in a 5 (20%)
  
  #Field related extend to sieges
  (store_random_in_range, ":randomizer", 0, 2), #50% Chance of randomization
  (try_begin),
  (eq, ":randomizer", 0),
  (store_random_in_range, ":euro_randomizernext", 1, 12),
  (store_random_in_range, ":medi_randomizer", 1, 8),
  (store_random_in_range, ":arab_randomizer", 1, 9),
  (assign, "$track_count_field", ":euro_randomizernext"),
  (assign, "$track_count_field_medi", ":medi_randomizer"),
  (assign, "$track_count_field_arabs", ":arab_randomizer"),
  (try_end),
  #Field related extend to sieges
  ]),
	
	(0, 0, 3, [ #680 #(ti_after_mission_start, 0, 680, [ #680
	(eq, "$additional_music", 1), #Obtained from Mod Options, affects mission templates, range: ALL SP Hostile music, co-op variant is additional_music_coop.
	],
		
  [
		  #(display_message, "@Executing music code"),
		  (store_mission_timer_b, ":time_msec"),
		  #(assign, reg10, ":time_msec"),
          #(str_clear, s10),
          #(str_store_string, s10, "@Mission timer B for music: {reg10}"),
		  #(display_message, s10),
			#if next action time is lower than current time, play the sound
			(ge, ":time_msec", "$music_timer"),
			(reset_mission_timer_b), #Resetting mission timer, too.
			(assign, "$music_timer", 0),# Resetting value when track ends.
		
  #Euro only
     (try_begin),
      (ge, "$track_count_field", 11),
      (assign, "$track_count_field", 1),
    (else_try),
      (val_add, "$track_count_field", 1),
	  (ge, "$track_count_field", 11),
	  (assign, "$track_count_field", 1),
    (try_end),
  #Euro only
  
  #Mediterrain only
  
       (try_begin),
      (ge, "$track_count_field_medi", 8),
      (assign, "$track_count_field_medi", 1),
    (else_try),
      (val_add, "$track_count_field_medi", 1),
	  (ge, "$track_count_field_medi", 8),
	  (assign, "$track_count_field_medi", 1),
    (try_end),
  #Mediterrain only
  
  
  #Arabs only

       (try_begin),
      (ge, "$track_count_field_arabs", 8),
      (assign, "$track_count_field_arabs", 1),
    (else_try),
      (val_add, "$track_count_field_arabs", 1),
	  (ge, "$track_count_field_arabs", 8),
	  (assign, "$track_count_field_arabs", 1),
    (try_end),
	#Arabs only
  
  #Pause between music length in seconds
  #(val_add, "$music_timer", 2),# 5 seconds added
  #Pause between music length in seconds
  
	(party_get_current_terrain, ":current_terrain_main_party", "p_main_party"), #Co-Op variant of this trigger should use scenes in_between rather than terrain because player can't obtain terrain in co-op sessions.
	(try_begin),
	(this_or_next|eq, ":current_terrain_main_party", 1), #rt_mountain
	(this_or_next|eq, ":current_terrain_main_party", 2), #rt_steppe
	(eq, ":current_terrain_main_party", 10), #rt_steppe_forest
	#Begin mediterrain music 5 tracks total
	(try_begin),
	(eq, "$track_count_field_medi", 1), #
	(play_track, "track_medib1", 2),
	(val_add, "$music_timer", 206),# 1 second added
	(else_try),
	
	(eq, "$track_count_field_medi", 2), #
	(play_track, "track_medib3", 2),
	(val_add, "$music_timer", 209),#
	(else_try),
	
	(eq, "$track_count_field_medi", 3), #
	(play_track, "track_medib4", 2),
	(val_add, "$music_timer", 237),#
	(else_try),

	(eq, "$track_count_field_medi", 4), #
	(play_track, "track_medib5", 2),
	(val_add, "$music_timer", 229),#
	(else_try),
	(eq, "$track_count_field_medi", 5), #
	(play_track, "track_medib6", 2),
	(val_add, "$music_timer", 127),#
	(else_try),
	(eq, "$track_count_field_medi", 6), #
	(play_track, "track_medib7", 2),
	(val_add, "$music_timer", 161),#
	
	(else_try),
	(eq, "$track_count_field_medi", 7), #
	(play_track, "track_medib8", 2),
	(val_add, "$music_timer", 250),#
	(try_end),
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 3), #rt_plain
	(this_or_next|eq, ":current_terrain_main_party", 11), #rt_forest
	(eq, ":current_terrain_main_party", 9), #rt_mountain_forest
	#Begin Euro Music
	(try_begin),
	(eq, "$track_count_field", 1), #
	(play_track, "track_eurob1", 2),
	(val_add, "$music_timer", 319),#
	(else_try),
	(eq, "$track_count_field", 2), #
	(play_track, "track_eurob2", 2),
	(val_add, "$music_timer", 279),#
	(else_try),
	
	(eq, "$track_count_field", 3), #
	(play_track, "track_eurob3", 2),
	(val_add, "$music_timer", 248),#
	(else_try),
	
	(eq, "$track_count_field", 4), #
	(play_track, "track_eurob4", 2),
	(val_add, "$music_timer", 332),#
	(else_try),
	
	(eq, "$track_count_field", 5), #
	(play_track, "track_eurob5", 2),
	(val_add, "$music_timer", 93),#
		(else_try),
	
	(eq, "$track_count_field", 6), #
	(play_track, "track_eurob6", 2),
	(val_add, "$music_timer", 76),#
		(else_try),
	
	(eq, "$track_count_field", 7), #
	(play_track, "track_eurob7", 2),
	(val_add, "$music_timer", 80),#
		(else_try),
	
	(eq, "$track_count_field", 8), #
	(play_track, "track_eurob8", 2),
	(val_add, "$music_timer", 58),#
		(else_try),
	
	(eq, "$track_count_field", 9), #
	(play_track, "track_eurob9", 2),
	(val_add, "$music_timer", 58),#
		(else_try),
	
#	(eq, "$track_count_field", 10), #
#	(play_track, "track_eurob10"),
#	(val_add, "$music_timer", 123),#
#		(else_try),
	
	(eq, "$track_count_field", 10), #
	(play_track, "track_eurob11", 2),
	(val_add, "$music_timer", 335),#
	(try_end),
	
	
	
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 4), #rt_snow
	(this_or_next|eq, ":current_terrain_main_party", 12), #rt_snow_forest
	(eq, ":current_terrain_main_party", 7), #rt_bridge
	#Begin Euro Music
	(try_begin),
	(eq, "$track_count_field", 1), #
	(play_track, "track_eurob1", 2),
	(val_add, "$music_timer", 319),#
	(else_try),
	(eq, "$track_count_field", 2), #
	(play_track, "track_eurob2", 2),
	(val_add, "$music_timer", 279),#
	(else_try),
	
	(eq, "$track_count_field", 3), #
	(play_track, "track_eurob3", 2),
	(val_add, "$music_timer", 248),#
	(else_try),
	
	(eq, "$track_count_field", 4), #
	(play_track, "track_eurob4", 2),
	(val_add, "$music_timer", 332),#
	(else_try),
	
	(eq, "$track_count_field", 5), #
	(play_track, "track_eurob5", 2),
	(val_add, "$music_timer", 93),#
		(else_try),
	
	(eq, "$track_count_field", 6), #
	(play_track, "track_eurob6", 2),
	(val_add, "$music_timer", 76),#
		(else_try),
	
	(eq, "$track_count_field", 7), #
	(play_track, "track_eurob7", 2),
	(val_add, "$music_timer", 80),#
		(else_try),
	
	(eq, "$track_count_field", 8), #
	(play_track, "track_eurob8", 2),
	(val_add, "$music_timer", 58),#
		(else_try),
	
	(eq, "$track_count_field", 9), #
	(play_track, "track_eurob9", 2),
	(val_add, "$music_timer", 58),#
		(else_try),
	
#	(eq, "$track_count_field", 10), #
#	(play_track, "track_eurob10"),
#	(val_add, "$music_timer", 123),#
#		(else_try),
	
	(eq, "$track_count_field", 10), #
	(play_track, "track_eurob11", 2),
	(val_add, "$music_timer", 335),#
	(try_end),
	
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 5), #rt_desert
	(eq, ":current_terrain_main_party", 13), #rt_desert_forest
	#Begin arab music
	(try_begin),
	(eq, "$track_count_field_arabs", 1), #
	(play_track, "track_arabb1", 2),
	(val_add, "$music_timer", 262),#
	(else_try),
	(eq, "$track_count_field_arabs", 2), #
	(play_track, "track_arabb2", 2),
	(val_add, "$music_timer", 291),#
	#(else_try),
	#(eq, "$track_count_field_arabs", 3), #
	#(play_track, "track_arabb3"),
	(else_try),
	(eq, "$track_count_field_arabs", 3), #
	(play_track, "track_arabb4", 2),
	(val_add, "$music_timer", 104),#
	(else_try),
	
	(eq, "$track_count_field_arabs", 4), #
	(play_track, "track_arabb5", 2),
	(val_add, "$music_timer", 76),#
		(else_try),
	
	(eq, "$track_count_field_arabs", 5), #
	(play_track, "track_arabb6", 2),
	(val_add, "$music_timer", 218),#
	
			(else_try),
	(eq, "$track_count_field_arabs", 6), #
	(play_track, "track_arabb8", 2),
	(val_add, "$music_timer", 209),#
			(else_try),
	(eq, "$track_count_field_arabs", 7), #
	(play_track, "track_arabb9", 2),
	(val_add, "$music_timer", 103),#
	#	(else_try),
	#
	#(eq, "$track_count_field_arabs", 7), #
	#(play_track, "track_arabb7"),
	(try_end),
	(try_end),
  ]),
	
	#####MUSICBOX END
	#####Camera mode by Rubik None-Coop Version Begin
		(0, 0, 0, [(eq, "$extended_camera_mode", 1)],
  [
    (get_player_agent_no, ":player_agent"),
    (agent_get_look_position, pos1, ":player_agent"),
    (position_move_z, pos1, "$g_camera_z"),
    (position_move_y, pos1, "$g_camera_y"),
    (agent_get_horse, ":horse_agent", ":player_agent"),
    (try_begin),
      (ge, ":horse_agent", 0),
      (position_move_z, pos1, 80),
    (try_end),
    (mission_cam_set_position, pos1),
    (try_begin),
      (key_is_down, key_left_control),
      (assign, ":move_val", 50),
    (else_try),
      (assign, ":move_val", 10),
    (try_end),
    (try_begin),
      (key_clicked, key_up),
      (mission_cam_set_mode, 1),
      (val_add, "$g_camera_z", ":move_val"),
    (else_try),
      (key_clicked, key_down),
      (mission_cam_set_mode, 1),
      (val_sub, "$g_camera_z", ":move_val"),
    (else_try),
      (key_clicked, key_left),
      (mission_cam_set_mode, 1),
      (val_add, "$g_camera_y", ":move_val"),
    (else_try),
      (key_clicked, key_right),
      (mission_cam_set_mode, 1),
      (val_sub, "$g_camera_y", ":move_val"),
    (try_end),
    (try_begin),
      (this_or_next|game_key_clicked, gk_view_char),
      (this_or_next|game_key_clicked, gk_zoom),
      (game_key_clicked, gk_cam_toggle),
      (mission_cam_set_mode, 0),
    (try_end),
  ]),
  #####Camera mode by Rubik None-Coop Version End
  
  
###########Torch by troycall/Envious Arm begin

																	#(-25.0, 0.0, 0.0, #Enabling this forces random chance to be 100%
																	#(ti_on_agent_spawn, 0, 0, #Enabling this forces random chance to be 100%
																	(20, 0, ti_once, #Proper one, but reinforcements do not get assigned torches.
        [
          (mission_tpl_are_all_agents_spawned), #From VC Header_Operations to prevent weird behavior.
          (is_currently_night) #Check if currently night time
        ],
        [

		  ####DEFAULT
		   #(try_for_agents, ":agent"),
            #(agent_get_wielded_item, ":item", ":agent", 1),
            #(gt, ":item", -1),
            #(agent_unequip_item, ":agent", ":item"),
            #(agent_equip_item, ":agent", "itm_torch"),
            #(agent_set_wielded_item, ":agent", "itm_torch"),           
          #(try_end),
		  ####END DEFAULT
		  
		  (try_for_agents, ":agent"), #Try for agents...
		  #Extension
		  (agent_is_alive, ":agent"), #For performance reasons
		  #End
		  (agent_is_human, ":agent"), #Performance
          (agent_is_non_player, ":agent"), #Uncommenting this includes player on spawning with torch, may be necessary to uncomment at module_coop_mission_templates.
		  


		 ##########Default Order
		 #######		  (agent_is_human, ":agent"), #Performance
         #######(agent_is_non_player, ":agent"), #Uncommenting this includes player on spawning with torch, may be necessary to uncomment at module_coop_mission_templates.
		 #######
		 ########Extension
		 #######(agent_is_active, ":agent"), #For performance reasons
		 #######(agent_is_alive, ":agent"), #For performance reasons
		 ########End
		  ############
		  		  
				#  (try_begin),
				  
		#		          (agent_get_wielded_item, ":rhand", ":agent", 0),  #Right hand
		#  (assign, ":rhanditem", 0), # Preparing local variable.
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000000000100),
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000004000000),
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000008000000),
		#  (neg|item_has_capability, ":rhanditem", 0x0000000170000000),
		# 

		  #
		  
          #BEGIN DEBUG
          #(assign, reg10, ":agent"),
          #(str_clear, s10),
          #(str_store_string, s10, "@New agent: {reg10}"),
          #END DEBUG
		  #(agent_get_wielded_item, ":rhanditem", ":agent", 0),  #Obtain right hand item
         (agent_get_wielded_item, ":rhanditem", ":agent", 0),  #Obtain right hand item
          (agent_get_wielded_item, ":item", ":agent", 1), # Left hand: shield or -1
          #BEGIN DEBUG
          #(assign, reg10, ":item"),
          #(str_store_string, s10, "@{s10}. LH: {reg10}"),
		  #(display_message, "@Main block Phase A finalized"),
          #END DEBUG
		  #(item_get_type, ":type", ":rhanditem"), #If right hand item is polearm, stop reading rest of code.
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_club_with_spike_head", "itm_wooden_shield"),
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_light_lance", "itm_wooden_shield"),
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_light_lance", "itm_wooden_shield"),
          (try_begin),
		  (neg|is_between, ":rhanditem", "itm_club_with_spike_head", "itm_wooden_shield"),
		  (neg|is_between, ":rhanditem", "itm_lance_banner_jer", "itm_cross_end"), #Update item slots
		  #(neg|troop_has_item_equipped, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		  #(neq, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		  
		# (neg|eq, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		    (gt, ":item", -1), #Check if the agent wields any item in the left hand, this or next.
            #(neq, ":item", -1),# Check if the agent wields any item in the left hand
            (neq, ":item", "itm_torch"), #If agent is using torch, ignore him.
            #(display_message, "@PASSED neg tests"), #Debug message

			
            (store_random_in_range, ":chance", 1, 101), # Chance of item being assigned
            (try_begin),
			  (le, ":chance", "$torch_chance"), #25% = 25
				#lt           = neg | ge # less than		-- (lt,<value>,<value>),
				#neq          = neg | eq # not equal to		-- (neq,<value>,<value>),
				#le           = neg | gt # less or equal to	-- (le,<value>,<value>),
              (agent_unequip_item, ":agent", ":item"),
			  
              #BEGIN DEBUG
              #(str_store_item_name, s11, ":item"),
              #(str_store_string, s10, "@{s10}. Removed item: {s11}"),
			  #(display_message, "@(agent_unequip_item, :agent, :item PASSED."),
              #END DEBUG

               
                (agent_equip_item, ":agent", "itm_torch"), #Tell agent to equip the item
                 #(display_message, "@(agent_equip_item, :agent, :item PASSED."),
                  (agent_set_wielded_item, ":agent", "itm_torch"), #Required for infantry only, cavarly can work without it.
                  #(display_message, "@(agent_set_wielded_item, :agent, :item PASSED."),
                 
                 
                  #BEGIN DEBUG
                #(else_try),
                  #(str_store_string, s10, "@{s10}. Failed random chance."),
                (try_end),
               
              #(else_try),
                #(str_store_string, s10, "@{s10}. Invalid agent for torch"),
              (try_end),
             
              #(display_message, s10),
			  (try_end),
              #END DEBUG
			#  (try_end),
      ]),
	  
###########Torch by troycall/Envious Arm end


		(-19.0, 0.0, ti_once,
		[],

		[
			(call_script, "script_remove_manor_objects")
		]),

		(-28.0, 0.3, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(store_trigger_param_2, ":trigger_param_2"),
			(store_trigger_param_3, ":trigger_param_3"),
			(assign, ":var_4", reg0),
			(agent_is_human, ":trigger_param_1"),
			(agent_is_alive, ":trigger_param_1"), #this addition
			(agent_is_active, ":trigger_param_1"), #This addition, i disabled tihs whole mission template to fix the bug too.
			(get_player_agent_no, ":player_agent_no"),
			(try_begin),
				(eq, "$tom_weapon_break", 1),
				(eq, ":trigger_param_1", ":player_agent_no"),
				(store_random_in_range, ":random_in_range_0_1000", 0, 1000),
				(eq, ":random_in_range_0_1000", 1),
				(store_random_in_range, ":random_in_range_4_8", 4, 8),
				(troop_get_inventory_slot, ":inventory_slot_player_random_in_range_4_8", "trp_player", ":random_in_range_4_8"),
				(gt, ":inventory_slot_player_random_in_range_4_8", 0),
				(str_store_item_name, 20, ":inventory_slot_player_random_in_range_4_8"),
				(troop_get_inventory_slot_modifier, ":inventory_slot_modifier_player_random_in_range_4_8", "trp_player", ":random_in_range_4_8"),
				(try_begin),
					(eq, ":inventory_slot_modifier_player_random_in_range_4_8", 6),
					(display_message, "@Your {s20} is too crappy to fall apart!", 0x00ff0000),
				(else_try),
					(troop_add_item, "trp_broken_items", ":inventory_slot_player_random_in_range_4_8", ":inventory_slot_modifier_player_random_in_range_4_8"),
					(troop_set_inventory_slot_modifier, "trp_player", ":random_in_range_4_8", 6),
					(display_message, "@Your {s20} cracks!", 0x00ff0000),
				(try_end),
			(try_end),
			(try_begin),
				(eq, "$tom_weapon_break", 1),
				(eq, ":trigger_param_2", ":player_agent_no"),
				(is_between, ":var_4", 1, "itm_cross_end"), #Previously itm_items_end
				(neg|is_between, ":var_4", "itm_light_lance", "itm_wooden_shield"),
				(item_get_type, ":type_var_4", ":var_4"),
				(ge, ":trigger_param_3", 10),
				(neq, ":type_var_4", 10),
				(neq, ":type_var_4", 8),
				(neq, ":type_var_4", 9),
				(neq, ":type_var_4", 5),
				(neq, ":type_var_4", 6),
				(store_random_in_range, ":random_in_range_0_1000", 0, 600),
				(eq, ":random_in_range_0_1000", 1),
				(assign, ":value", -1),
				(try_for_range, ":random_in_range_4_8", 0, 4),
					(troop_get_inventory_slot, ":inventory_slot_player_random_in_range_4_8_2", "trp_player", ":random_in_range_4_8"),
					(eq, ":inventory_slot_player_random_in_range_4_8_2", ":var_4"),
					(assign, ":value", ":random_in_range_4_8"),
				(try_end),
				(gt, ":value", 0),
				(str_store_item_name, 20, ":var_4"),
				(troop_get_inventory_slot_modifier, ":inventory_slot_modifier_player_random_in_range_4_8", "trp_player", ":value"),
				(try_begin),
					(eq, ":inventory_slot_modifier_player_random_in_range_4_8", 6),
					(display_message, "@Your {s20} falls apart!", 0x00ff0000),
					(agent_unequip_item, ":player_agent_no", ":var_4"),
					(troop_remove_item, "trp_player", ":var_4"),
					(troop_remove_item, "trp_broken_items", ":var_4"),
				(else_try),
					(troop_add_item, "trp_broken_items", ":var_4", ":inventory_slot_modifier_player_random_in_range_4_8"),
					(troop_set_inventory_slot_modifier, "trp_player", ":value", 6),
					(display_message, "@Your {s20} cracks!", 0x00ff0000),
				(try_end),
			(try_end),
			(agent_get_horse, ":horse_trigger_param_2", ":trigger_param_2"),
			(try_begin),
				(eq, "$tom_lance_breaking", 1),
				(gt, ":horse_trigger_param_2", 0),
				(this_or_next|is_between, ":var_4", "itm_light_lance", "itm_spear_a"), #Updated item slots
				(is_between, ":var_4", "itm_lance_banner_jer", "itm_pike_banner_teu"), #Updated item slots
				(ge, ":trigger_param_3", 50),
				(store_random_in_range, ":random_in_range_0_100", 0, 100),
				(gt, ":random_in_range_0_100", 20),
				(try_begin),
					(eq, ":trigger_param_2", ":player_agent_no"),
					(display_message, "@You broke your lance!", 0x00ff0000),
				(try_end),
				########Add effects on weapon break *Lances*
        (agent_get_position, pos1, ":trigger_param_2"),
		(agent_play_sound, ":trigger_param_1", "snd_shield_broken"),
		(particle_system_burst, "psys_lanse", pos1, 10),
        (particle_system_burst, "psys_lanse_straw", pos1, 30),
                ####Extend to Lanse_Blood
		#(particle_system_burst, "psys_lanse_blood", pos1, 10),
        #(particle_system_burst, "psys_lanse_blood", pos1, 30),
		        ########End Effects
				(agent_unequip_item, ":trigger_param_2", ":var_4"),
			(else_try),
				(this_or_next|is_between, ":var_4", "itm_bamboo_spear", "itm_wooden_shield"), #Updated item slots
				(is_between, ":var_4", "itm_pike_banner_teu", "itm_items_end"), #Updated item slots
				(le, ":horse_trigger_param_2", 0),
				(ge, ":trigger_param_3", 8),
				(store_random_in_range, ":random_in_range_0_100", 0, 100),
				(ge, ":random_in_range_0_100", 90),
				(try_begin),
					(eq, ":trigger_param_2", ":player_agent_no"),
					(display_message, "@You broke your spear!", 0x00ff0000),
				(try_end),
				########Add effects on weapon break *Spears*
        (agent_get_position, pos1, ":trigger_param_2"),
		(agent_play_sound, ":trigger_param_1", "snd_shield_broken"),
		(store_random_in_range, ":psys_to_use", "psys_lanse", "psys_lanse_blood"),
		(particle_system_burst, ":psys_to_use", pos1, 7), #Default = 10 (Higher = Bigger Particles)
        (particle_system_burst, ":psys_to_use", pos1, 21), #Default = 30 (Higher = Bigger Particles)
                ####Extend to Lanse_Blood
		#(particle_system_burst, "psys_lanse_blood", pos1, 10),
        #(particle_system_burst, "psys_lanse_blood", pos1, 30),
		        ########End Effects
				(agent_unequip_item, ":trigger_param_2", ":var_4"),
			(try_end),
			###Envfix weapon breaking patch start here
		]),

		(-21.0, 0.0, 0.0,
		[],

		[
			(try_begin),
				(eq, "$g_battle_won", 1),
				(call_script, "script_count_mission_casualties_from_agents"),
				(finish_mission, 0),
			(else_try),
				(eq, "$pin_player_fallen", 1),
				(eq, "$g_battle_won", 0),
				(call_script, "script_simulate_retreat", 5, 20, 1),
				(str_store_string, 5, "str_retreat"),
				(call_script, "script_count_mission_casualties_from_agents"),
				(set_mission_result, -1),
				(finish_mission, 0),
			(else_try),
				(eq, "$pin_player_fallen", 1),
				(eq, "$g_battle_won", -1),
				(call_script, "script_count_mission_casualties_from_agents"),
				(finish_mission, 0),
			(else_try),
				(call_script, "script_cf_check_enemies_nearby"),
				(question_box, "str_do_you_want_to_retreat"),
			(else_try),
				(get_player_agent_no, ":player_agent_no"),
				(neg|agent_is_alive, ":player_agent_no"),
				(call_script, "script_cf_check_enemies_nearby"),
				(question_box, "str_do_you_want_to_retreat"),
			(else_try),
				(display_message, "str_can_not_retreat"),
			(try_end)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(call_script, "script_troop_agent_set_banner", "tableau_game_troop_label_banner", ":trigger_param_1", ":troop_id_trigger_param_1")
		]),

		(-8.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(eq, ":trigger_param_1", 0),
			(assign, "$pin_player_fallen", 0),
			(str_store_string, 5, "str_retreat"),
			(call_script, "script_simulate_retreat", 10, 20, 1),
			(assign, "$g_battle_result", -1),
			(call_script, "script_count_mission_casualties_from_agents"),
			(finish_mission, 0)
		]),

		(0.0, 0.0, ti_once,
		[],

		[
			(assign, "$g_battle_won", 0),
			(assign, "$defender_reinforcement_stage", 0),
			(assign, "$attacker_reinforcement_stage", 0),
			(try_begin),
				(eq, "$g_mt_mode", 2),
				(add_reinforcements_to_entry, 1, 6),
			(else_try),
				(add_reinforcements_to_entry, 1, 40),
			(try_end),
						(try_begin),
			(eq, "$additional_music", 0),
			(call_script, "script_combat_music_set_situation_with_culture"),
			(try_end),
			(assign, "$dmod_current_agent", -1),
			(assign, "$dmod_move_camera", -1)
		]),

		(30.0, 0.0, 0.0,
		[],

		[]),

		(2.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_check_friendly_kills")
		]),

		(5.0, 60.0, ti_once,
		[
			(store_mission_timer_a, reg1),
			(ge, reg1, 10),
			(all_enemies_defeated, 5),
			(set_mission_result, 1),
			(display_message, "str_msg_battle_won"),

			(assign, "$g_battle_won", 1),
			(assign, "$g_battle_result", 1),
			#(play_sound, "snd_won_battle"), #Moved to victorious main menu
			(call_script, "script_play_victorious_sound")
		],

		[
			(call_script, "script_count_mission_casualties_from_agents"),
			(finish_mission, 1)
		]),

		(10.0, 0.0, 0.0, # Battle won/lost messages!
		[],

		[
			(eq, "$g_battle_won", 1),
			#(play_sound, "snd_won_battle"), #Moved to victorious main menu
			(display_message, "str_msg_battle_won")
		]),

		(1.0, 60.0, ti_once,
		[
			(store_mission_timer_a, reg1),
			(ge, reg1, 10),
			(main_hero_fallen),
			(assign, ":var_1", 0),
			(try_for_agents, ":var_2"),
				(agent_is_ally, ":var_2"),
				(agent_is_alive, ":var_2"),
				(val_add, ":var_1", 1),
			(try_end),
			(eq, ":var_1", 0),
			(set_mission_result, -1),
			(try_begin),
			(eq, "$colored_messages", 1),
			(display_message, "@Battle lost...", 0x00f78078),
			(else_try),
			(display_message, "@Battle lost..."),
			(try_end),
			(assign, "$g_battle_won", -1),
			(assign, "$g_battle_result", -1)
		],

		[
			(call_script, "script_count_mission_casualties_from_agents"),
			(finish_mission, 0)
		]),

		(10.0, 0.0, 0.0, # Battle won/lost messages!
		[],

		[
			(eq, "$g_battle_won", -1),
						(try_begin),
			(eq, "$colored_messages", 1),
			(display_message, "@Battle lost! Press tab key to leave...", 0x00f78078),
			(else_try),
			(display_message, "@Battle lost! Press tab key to leave..."),
			(try_end),
			#(play_sound, "snd_battle_sounds"), #Moved to your companions carry you away from the fighting menu
			#Add losing sound here
			
			#End add losing sound
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(gt, "$dmod_current_agent", 0),
			(eq, "$setting_use_dmod", 1),
			(eq, "$dmod_move_camera", 1),
			(agent_get_position, 1, "$dmod_current_agent"),
			(position_move_z, 1, 300),
			(position_move_y, 1, -300),
			(agent_get_horse, ":horse_l_dmod_current_agent", "$dmod_current_agent"),
			(try_begin),
				(ge, ":horse_l_dmod_current_agent", 0),
			(try_end),
			(try_begin),
				(eq, "$pop_camera_on", 1),
				(assign, "$pop_camera_on", 0),
			(try_end),
			(mission_cam_set_position, 1),
			(mission_cam_set_mode, 1),
			(set_fixed_point_multiplier, 100)
		],

		[]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(eq, "$setting_use_dmod", 1),
			(key_clicked, 238),
			(main_hero_fallen),
			(call_script, "script_dmod_cycle_forwards")
		],

		[]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(eq, "$setting_use_dmod", 1),
			(key_clicked, 239),
			(main_hero_fallen),
			(call_script, "script_dmod_cycle_backwards")
		],

		[]),

		(0.0, 0.0, ti_once,
		[],

		[
			(assign, "$pop_camera_on", 0),
			(assign, "$pop_camera_mouse_center_x", 500),
			(assign, "$pop_camera_mouse_center_y", 375),
			(assign, "$pop_camera_mouse_x", "$pop_camera_mouse_center_x"),
			(assign, "$pop_camera_mouse_y", "$pop_camera_mouse_center_y"),
			(assign, "$pop_camera_mouse_counter", 0)
		]),

		(0.0, 4.0, ti_once,
		[
			(eq, "$enable_deahtcam", 1),
			(main_hero_fallen),
			(eq, "$pop_camera_on", 0),
			(assign, "$tom_sand_storm", 0)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_position, 1, ":player_agent_no"),
			(position_get_x, ":position_x_1", 1),
			(position_get_y, ":position_y_1", 1),
			(init_position, 47),
			(position_set_x, 47, ":position_x_1"),
			(position_set_y, 47, ":position_y_1"),
			(position_set_z_to_ground_level, 47),
			(position_move_z, 47, 250),
			(mission_cam_set_mode, 1, 0, 0),
			(mission_cam_set_position, 47),
			(assign, "$pop_camera_rotx", 0),
			(assign, "$pop_camera_on", 1)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(this_or_next|eq, "$dmod_move_camera", 1),
			(eq, "$pop_camera_on", 1),
			(this_or_next|game_key_clicked, 0),
			(this_or_next|game_key_is_down, 0),
			(this_or_next|game_key_clicked, 1),
			(this_or_next|game_key_is_down, 1),
			(this_or_next|game_key_clicked, 2),
			(this_or_next|game_key_is_down, 2),
			(this_or_next|game_key_clicked, 3),
			(game_key_is_down, 3)
		],

		[
			(try_begin),
				(eq, "$dmod_move_camera", 1),
				(mission_cam_set_mode, 1, 0, 0),
				(assign, "$pop_camera_rotx", 0),
				(assign, "$pop_camera_on", 1),
				(assign, "$dmod_move_camera", 0),
			(try_end),
			(mission_cam_get_position, 47),
			(assign, ":value", 0),
			(assign, ":value_2", 0),
			(try_begin),
				(this_or_next|game_key_clicked, 0),
				(game_key_is_down, 0),
				(assign, ":value_2", 10),
			(try_end),
			(try_begin),
				(this_or_next|game_key_clicked, 1),
				(game_key_is_down, 1),
				(assign, ":value_2", -10),
			(try_end),
			(try_begin),
				(this_or_next|game_key_clicked, 2),
				(game_key_is_down, 2),
				(assign, ":value", -10),
			(try_end),
			(try_begin),
				(this_or_next|game_key_clicked, 3),
				(game_key_is_down, 3),
				(assign, ":value", 10),
			(try_end),
			(position_move_x, 47, ":value"),
			(position_move_y, 47, ":value_2"),
			(mission_cam_set_position, 47)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(eq, "$pop_camera_on", 1),
			(neg|is_presentation_active, "prsnt_battle"),
			(mouse_get_position, 1),
			(set_fixed_point_multiplier, 1000),
			(position_get_x, reg1, 1),
			(position_get_y, reg2, 1),
			(set_fixed_point_multiplier, 100),
			(this_or_next|neq, reg1, "$pop_camera_mouse_center_x"),
			(neq, reg2, "$pop_camera_mouse_center_y")
		],

		[
			(assign, ":value", 1),
			(try_begin),
				(eq, reg1, "$pop_camera_mouse_x"),
				(eq, reg2, "$pop_camera_mouse_y"),
				(val_add, "$pop_camera_mouse_counter", 1),
				(try_begin),
					(gt, "$pop_camera_mouse_counter", 50),
					(assign, "$pop_camera_mouse_center_x", reg1),
					(assign, "$pop_camera_mouse_center_y", reg2),
					(assign, "$pop_camera_mouse_counter", 0),
				(try_end),
				(assign, ":value", 0),
			(try_end),
			(eq, ":value", 1),
			(assign, "$pop_camera_mouse_counter", 0),
			(assign, "$pop_camera_mouse_x", reg1),
			(assign, "$pop_camera_mouse_y", reg2),
			(mission_cam_get_position, 47),
			(store_sub, ":value_2", "$pop_camera_mouse_center_x", reg1),
			(store_sub, ":value_3", reg2, "$pop_camera_mouse_center_y"),
			(try_for_range, ":number", 0, 2),
				(try_begin),
					(eq, ":number", 1),
					(assign, ":value_2", ":value_3"),
				(try_end),
				(this_or_next|lt, ":value_2", -2),
				(gt, ":value_2", 2),
				(assign, ":value_4", 1),
				(try_begin),
					(lt, ":value_2", 0),
					(assign, ":value_4", -1),
				(try_end),
				(val_abs, ":value_2"),
				(val_sub, ":value_2", 2),
				(convert_to_fixed_point, ":value_2"),
				(store_sqrt, ":value_2", ":value_2"),
				(convert_from_fixed_point, ":value_2"),
				(val_clamp, ":value_2", 1, 64),
				(val_mul, ":value_2", ":value_4"),
				(try_begin),
					(eq, ":number", 0),
					(store_mul, ":value_5", "$pop_camera_rotx", -1),
					(position_rotate_x, 47, ":value_5"),
					(position_rotate_z, 47, ":value_2"),
					(position_rotate_x, 47, "$pop_camera_rotx"),
				(try_end),
				(try_begin),
					(eq, ":number", 1),
					(position_rotate_x, 47, ":value_2"),
					(val_add, "$pop_camera_rotx", ":value_2"),
				(try_end),
			(try_end),
			(mission_cam_set_position, 47)
		]),

		(1.0, 4.0, ti_once,
		[
			(main_hero_fallen)
		],

		[
			(assign, "$pin_player_fallen", 1),
			(neq, "$use_player_auxiliary", 1),
			(display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
			(display_message, "@If you choose to watch the fight you can use the mouse scroll up and down to switch between troop view or AWDS keys for free camera view.")
		]),

		(-22.0, 0.0, 0.0,
		[],

		[
			(display_message, "str_use_baggage_for_inventory")
		]),

		(0.0, 0.0, 0.0,
		[],

		[
			(game_key_clicked, 22),
			(neg|is_presentation_active, "prsnt_battle"),
			(start_presentation, "prsnt_battle")
		]),

		(0.1, 0.0, 0.0,
		[],

		[
			(is_presentation_active, "prsnt_battle"),
			(call_script, "script_update_order_panel_statistics_and_map")
		]),

		(0.0, 0.0, ti_once,
		[],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_team, ":team_player_agent_no", ":player_agent_no"),
			(set_show_messages, 0),
			(team_give_order, ":team_player_agent_no", 9, 0),
			(set_show_messages, 1)
		]),

		(0.0, 0.0, ti_once,
		[
			(eq, 0, 1),
			(eq, "$enable_deahtcam", 1),
			(main_hero_fallen)
		],

		[
			(assign, "$fclock", 1),
			(call_script, "script_player_order_formations", 2),
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_team, ":team_player_agent_no", ":player_agent_no"),
			(team_give_order, ":team_player_agent_no", 9, 2)
		]),

		(0.0, 0.0, 5.0,
		[],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_non_player, ":var_2"), #Agent must not be a player V1.0998D2
				(neq, ":player_agent_no", ":var_2"),
				(agent_slot_eq, ":var_2", 100, 0),
				(agent_is_alive, ":var_2"),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(agent_get_ammo, ":ammo_var_2", ":var_2"),
				(le, ":ammo_var_2", 0),
				(try_begin),
					(gt, ":horse_var_2", 0),
					(neg|troop_is_guarantee_ranged, ":troop_id_var_2"),
					(agent_get_wielded_item, ":wielded_item_var_2_0", ":var_2", 0),
					(neg|is_between, ":wielded_item_var_2_0", "itm_light_lance", "itm_spear_a"),
					(try_for_range, ":item", "itm_light_lance", "itm_spear_a"),
						(agent_set_wielded_item, ":var_2", ":item"),
					(try_end),
				(else_try),
					(eq, "$tom_use_banners", 1),
					(try_for_range, ":item", 1198, 1202),
						(agent_set_wielded_item, ":var_2", ":item"),
					(try_end),
					(agent_get_wielded_item, ":item", ":var_2", 0),
					(is_between, ":item", 1198, 1202),
				(else_try),
					(neg|troop_is_guarantee_ranged, ":troop_id_var_2"),
					(le, ":horse_var_2", 0),
					(agent_get_wielded_item, ":wielded_item_var_2_0", ":var_2", 0),
					(is_between, ":wielded_item_var_2_0", "itm_light_lance", "itm_spear_a"),
					(try_for_range, reg0, 0, 4),
						(agent_get_item_slot, ":item", ":var_2", reg0),
						(is_between, ":item", 1, "itm_cross_end"), #Previously itm_items_end
						(neg|is_between, ":item", "itm_light_lance", "itm_bamboo_spear"),
						(item_get_type, ":type_item", ":item"),
						(this_or_next|eq, ":type_item", 3),
						(this_or_next|eq, ":type_item", 4),
						(eq, ":type_item", 2),
						(agent_set_wielded_item, ":var_2", ":item"),
					(try_end),
				(else_try),
					(neg|troop_is_guarantee_ranged, ":troop_id_var_2"),
					(le, ":horse_var_2", 0),
					(agent_get_wielded_item, ":wielded_item_var_2_0", ":var_2", 0),
					(neg|is_between, ":wielded_item_var_2_0", "itm_bamboo_spear", "itm_wooden_shield"),
					(try_for_range, ":item", "itm_bamboo_spear", "itm_wooden_shield"),
						(agent_set_wielded_item, ":var_2", ":item"),
					(try_end),
				(else_try),
					(troop_is_guarantee_ranged, ":troop_id_var_2"),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_division, ":division_var_2", ":var_2"),
					(team_get_hold_fire_order, ":hold_fire_order_team_var_2_division_var_2", ":team_var_2", ":division_var_2"),
					(neq, ":hold_fire_order_team_var_2_division_var_2", 1),
					(is_between, ":wielded_item_var_2_0", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_0", ":wielded_item_var_2_0"),
					(this_or_next|le, ":wielded_item_var_2_0", -1),
					(this_or_next|neq, ":type_wielded_item_var_2_0", 10),
					(this_or_next|neq, ":type_wielded_item_var_2_0", 9),
					(neq, ":type_wielded_item_var_2_0", 8),
					(call_script, "script_get_closest_enemy_distance_new", ":var_2", ":team_var_2", 300),
					(assign, ":var_13", reg1),
					(gt, ":var_13", 300),
					(assign, ":value", 4),
					(try_for_range, reg0, 0, ":value"),
						(agent_get_item_slot, ":item_slot_var_2_reg0", ":var_2", reg0),
						(is_between, ":item_slot_var_2_reg0", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_0", ":item_slot_var_2_reg0"),
						(this_or_next|eq, ":type_wielded_item_var_2_0", 10),
						(this_or_next|eq, ":type_wielded_item_var_2_0", 8),
						(eq, ":type_wielded_item_var_2_0", 9),
						(agent_set_wielded_item, ":var_2", ":item_slot_var_2_reg0"),
						(assign, ":value", -1),
					(try_end),
				(try_end),
			(try_end)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_is_human, ":trigger_param_1"),
			(agent_is_non_player, ":trigger_param_1"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(lt, ":troop_id_trigger_param_1", "trp_kidnapped_girl"),
			(try_for_range, reg0, 0, 4),
				(agent_get_item_slot, ":item_slot_trigger_param_1_reg0", ":trigger_param_1", reg0),
				(is_between, ":item_slot_trigger_param_1_reg0", 1, "itm_cross_end"), #Previously itm_items_end
				(agent_unequip_item, ":trigger_param_1", ":item_slot_trigger_param_1_reg0"),
			(try_end),
			(try_for_range, reg0, 0, 2),
				(agent_get_wielded_item, ":item_slot_trigger_param_1_reg0", ":trigger_param_1", reg0),
				(is_between, ":item_slot_trigger_param_1_reg0", 1, "itm_cross_end"), #Previously itm_items_end
				(agent_unequip_item, ":trigger_param_1", ":item_slot_trigger_param_1_reg0"),
			(try_end),
			(assign, ":var_4", 0),
			(assign, ":var_5", 25),
			(assign, ":var_6", 50),
			(assign, ":var_7", 75),
			(assign, ":var_8", 100),
			(assign, ":var_18", 125),
			(assign, ":var_10", 150),
			(assign, ":var_11", 175),
			(assign, ":var_12", 200),
			(assign, ":value", 0),
			(assign, ":value_2", 0),
			(assign, ":value_3", 0),
			(assign, ":value_4", 0),
			(assign, ":value_5", 0),
			(assign, ":value_6", 0),
			(assign, ":value_7", 0),
			(assign, ":value_8", 0),
			(assign, ":value_9", 0),
			(troop_get_inventory_capacity, ":inventory_capacity_troop_id_trigger_param_1", ":troop_id_trigger_param_1"),
			(try_for_range, ":localvariable", 0, ":inventory_capacity_troop_id_trigger_param_1"),
				(troop_get_inventory_slot, ":inventory_slot_troop_id_trigger_param_1_localvariable", ":troop_id_trigger_param_1", ":localvariable"),
				(is_between, ":inventory_slot_troop_id_trigger_param_1_localvariable", 1, "itm_cross_end"), #Previously itm_items_end
				(item_get_type, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
				(try_begin),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 4),
					(val_add, ":var_4", 1),
					(troop_set_slot, "trp_items_array", slot_troop_relations_begin, ":var_4"),
					(troop_set_slot, "trp_items_array", ":var_4", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 2),
					(val_add, ":var_5", 1),
					(troop_set_slot, "trp_items_array", slot_troop_last_quest_betrayed, ":var_5"),
					(troop_set_slot, "trp_items_array", ":var_5", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_2", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 7),
					(val_add, ":var_6", 1),
					(troop_set_slot, "trp_items_array", slot_troop_recruitment_random, ":var_6"),
					(troop_set_slot, "trp_items_array", ":var_6", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_3", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 3),
					(val_add, ":var_7", 1),
					(troop_set_slot, "trp_items_array", slot_troop_personalitymatch_object, ":var_7"),
					(troop_set_slot, "trp_items_array", ":var_7", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_4", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 10),
					(val_add, ":var_8", 1),
					(troop_set_slot, "trp_items_array", 100, ":var_8"),
					(troop_set_slot, "trp_items_array", ":var_8", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_5", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 6),
					(val_add, ":var_18", 1),
					(troop_set_slot, "trp_items_array", slot_troop_rehire_speech, ":var_18"),
					(troop_set_slot, "trp_items_array", ":var_18", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_6", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 5),
					(val_add, ":var_10", 1),
					(troop_set_slot, "trp_items_array", slot_troop_days_on_mission, ":var_10"),
					(troop_set_slot, "trp_items_array", ":var_10", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_7", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 8),
					(val_add, ":var_11", 1),
					(troop_set_slot, "trp_items_array", 175, ":var_11"),
					(troop_set_slot, "trp_items_array", ":var_11", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_8", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 9),
					(val_add, ":var_12", 1),
					(troop_set_slot, "trp_items_array", 200, ":var_12"),
					(troop_set_slot, "trp_items_array", ":var_12", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_9", 1),
				(try_end),
			(try_end),
			(try_begin),
				(eq, ":value", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_relations_begin),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 1, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_2", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_last_quest_betrayed),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 26, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_3", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_recruitment_random),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 51, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_4", 1),
				(try_begin),
					(eq, ":value_2", 1),
					(store_random_in_range, ":random_in_range_0_100", 0, 100),
					(lt, ":random_in_range_0_100", 65),
				(else_try),
					(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_personalitymatch_object),
					(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 76, ":items_array_relations_begin"),
					(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
					(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
				(try_end),
			(try_end),
			(try_begin),
				(eq, ":value_5", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", 100),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 101, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_6", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_rehire_speech),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 126, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_7", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_days_on_mission),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 151, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_8", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", 175),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 176, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_9", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", 200),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 201, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end)
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(assign, "$tom_sand_storm", 0),
			(call_script, "script_change_rain_or_snow"),
			(set_fixed_point_multiplier, 100),
			(try_begin),
				(is_currently_night),
				#(set_shader_param_float, "@vFresnelMultiplier", 15),
			(else_try),
				#(set_shader_param_float, "@vFresnelMultiplier", 50),
			(try_end)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$tom_sand_storm", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_position, 0, ":player_agent_no"),
			(position_set_z_to_ground_level, 0),
			(position_get_z, ":position_z_0", 0),
			(val_add, ":position_z_0", 400),
			(position_set_z, 0, ":position_z_0"),
			(particle_system_burst, "psys_desert_storm", 0, 2),
			(set_fixed_point_multiplier, 100)
		]),

#		(0.0, 2.0, ti_once,
#		[
#			(eq, "$tom_use_banners", 1)
#		],
#
#		[
#			(call_script, "script_set_flag_carriers")
#		]),

		(10.0, 0.0, 0.0,
		[
			(eq, "$tom_use_banners", 1),
			(eq, "$tom_bonus_banners", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_range, ":value"),
				(agent_slot_eq, ":value", 107, 1),
				(agent_is_alive, ":value"),
				(agent_is_active, ":value"),
				(agent_get_team, ":team_value", ":value"),
				(agent_get_position, 1, ":value"),
				(try_for_range, ":value_2"),
					(neq, ":value_2", ":value"),
					(agent_get_team, ":team_value_2", ":value_2"),
					(eq, ":team_value", ":team_value_2"),
					(agent_is_alive, ":value_2"),
					(agent_is_active, ":value_2"),
					(agent_is_human, ":value_2"),
					(agent_get_position, 2, ":value_2"),
					(get_distance_between_positions_in_meters, ":distance_between_positions_in_meters_1_2", 1, 2),
					(le, ":distance_between_positions_in_meters_1_2", 10),
					(store_agent_hit_points, ":agent_hit_points_value_2", ":value_2"),
					(val_add, ":agent_hit_points_value_2", 2),
					(val_min, ":agent_hit_points_value_2", 101),
					(agent_set_hit_points, ":value_2", ":agent_hit_points_value_2"),
					(try_begin),
						(eq, ":value_2", ":player_agent_no"),
						(display_message, "@You feel secured standing near the banner, healing some of your HP.", 0x006495ed),
					(try_end),
				(try_end),
			(try_end),
			(assign, ":value", ":player_agent_no"),
			(agent_is_alive, ":value"),
			(agent_get_wielded_item, ":wielded_item_value_0", ":value", 0),
			(is_between, ":wielded_item_value_0", 1198, 1202),
			(agent_get_team, ":team_value", ":value"),
			(agent_get_position, 1, ":value"),
			(try_for_range, ":value_2"),
				(neq, ":value_2", ":value"),
				(agent_get_team, ":team_value_2", ":value_2"),
				(eq, ":team_value", ":team_value_2"),
				(agent_is_alive, ":value_2"),
				(agent_is_active, ":value_2"),
				(agent_is_human, ":value_2"),
				(agent_get_position, 2, ":value_2"),
				(get_distance_between_positions_in_meters, ":distance_between_positions_in_meters_1_2", 1, 2),
				(le, ":distance_between_positions_in_meters_1_2", 10),
				(store_agent_hit_points, ":agent_hit_points_value_2", ":value_2"),
				(try_begin),
					(eq, ":wielded_item_value_0", 1201),
					(val_add, ":agent_hit_points_value_2", 1),
				(try_end),
				(val_add, ":agent_hit_points_value_2", 5),
				(val_max, ":agent_hit_points_value_2", 101),
				(agent_set_hit_points, ":value_2", ":agent_hit_points_value_2"),
			(try_end)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$tom_sand_storm", 3)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_position, 0, ":player_agent_no"),
			(position_set_z_to_ground_level, 0),
			(position_get_z, ":position_z_0", 0),
			(val_add, ":position_z_0", 2100),
			(position_set_z, 0, ":position_z_0"),
			(particle_system_burst, "psys_rain", 0, 1),
			(set_fixed_point_multiplier, 100)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$tom_sand_storm", 2)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_position, 0, ":player_agent_no"),
			(position_set_z_to_ground_level, 0),
			(position_get_z, ":position_z_0", 0),
			(val_add, ":position_z_0", 2000),
			(position_set_z, 0, ":position_z_0"),
			(particle_system_burst, "psys_blizzard", 0, 1),
			(set_fixed_point_multiplier, 100)
		]),

		(8.0, 0.0, 0.0,
		[
			(eq, "$tom_sand_storm", 3)
		],

		[
			(store_random_in_range, ":random_in_range_0_100", 0, 100),
			(try_begin),
				(ge, ":random_in_range_0_100", 90),
				(play_sound, "snd_thunder"),
			(try_end)
		]),

		(0.0, 0.0, ti_once,
		[
			(eq, "$tom_sand_storm", 2)
		],

		[
			(play_sound, "snd_wind")
		]),

		(0.0, 0.0, ti_once,
		[
			(eq, "$tom_sand_storm", 1)
		],

		[
			(play_sound, "snd_wind")
		]),

		(1.0, 0.0, ti_once,
		[
			(neq, "$g_battle_result", 0),
			(get_player_agent_no, ":player_agent_no"),
			(agent_is_alive, ":player_agent_no"),
			(agent_get_troop_id, ":troop_id_player_agent_no", ":player_agent_no"),
			(eq, ":troop_id_player_agent_no", "trp_player")
		],

		[
			(call_script, "script_freelancer_keep_field_loot")
		]),

		(0.0, 1.5, 0.0,
		[
			(key_clicked, 20),
			(get_player_agent_no, ":player_agent_no"),
			(agent_is_alive, ":player_agent_no"),
			(agent_set_animation, ":player_agent_no", "anim_cheer", 1),
			(agent_play_sound, ":player_agent_no", "snd_man_victory")
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_team, ":team_player_agent_no", ":player_agent_no"),
			(agent_get_position, 1, ":player_agent_no"),
			(try_for_agents, ":var_3"),
				(agent_is_alive, ":var_3"),
				(agent_is_human, ":var_3"),
				(agent_get_team, ":team_var_3", ":var_3"),
				(eq, ":team_var_3", ":team_player_agent_no"),
				(agent_get_position, 0, ":var_3"),
				(get_distance_between_positions_in_meters, ":distance_between_positions_in_meters_0_1", 0, 1),
				(lt, ":distance_between_positions_in_meters_0_1", 20),
				(agent_set_animation, ":var_3", "anim_cheer", 1),
				(agent_play_sound, ":var_3", "snd_man_victory"),
				(agent_get_slot, ":var_3_courage_score", ":var_3", slot_agent_courage_score),
				(val_add, ":var_3_courage_score", 5),
				(val_min, ":var_3_courage_score", 9600),
				(agent_set_slot, ":var_3", slot_agent_courage_score, ":var_3_courage_score"),
			(try_end),
			(display_message, "@Huzzah! You encourage your nearby troops.")
		]),

		(0.0, 1.7, 0.0,
		[
			(eq, "$tom_yell_smelly_peasents", 1)
		],

		[
			(call_script, "script_tom_command_cheer"),
			(assign, "$tom_yell_smelly_peasents", 0)
		]),

		(-26.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(store_trigger_param_2, ":trigger_param_2"),
			(neg|agent_is_ally, ":trigger_param_1"),
			(agent_is_human, ":trigger_param_1"),
			(eq, ":trigger_param_2", "$fplayer_agent_no"),
			(val_add, "$killcount", 1)
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_clear_troop_array", "trp_lances_troop_in_combat", 0, "$lance_troop_serving")
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_is_human, ":trigger_param_1"),
			(get_player_agent_no, ":player_agent_no"),
			(neq, ":trigger_param_1", ":player_agent_no"),
			(agent_get_party_id, ":party_id_trigger_param_1", ":trigger_param_1"),
			(eq, ":party_id_trigger_param_1", "p_main_party"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(call_script, "script_search_for_troop", ":troop_id_trigger_param_1"),
			(agent_set_slot, ":trigger_param_1", 102, reg0)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_set_matching_sexy_boots", ":trigger_param_1")
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$sp_shield_bash", 1),
			(game_key_is_down, 7),
			(game_key_clicked, 6),
			(neg|main_hero_fallen),
		],

		[
		(call_script, "script_shield_bash"),
		]),

			##AI kicking begin
		   (2, 0, 3, #AI kicking
       [], [
	(get_player_agent_no,":player"),
	(try_for_agents, ":agent"),
		(neq, ":agent", ":player"),
		(agent_is_alive, ":agent"),
		(neq, ":agent", -1),
		(agent_is_human, ":agent"),#Only humans can kick....FOR NOW
		(agent_is_active, ":agent"),
		(agent_slot_eq, ":agent", slot_agent_is_running_away, 0),#Isn't fleeing the battle.
		##He's an eligible human.  Now see if he's in a position to kick.
		(agent_get_attack_action, ":attack_action", ":agent"), #returned values: free = 0, readying_attack = 1, releasing_attack = 2, completing_attack_after_hit = 3, attack_parried = 4, reloading = 5, after_release = 6, cancelling_attack = 7
		(agent_get_defend_action, ":defend_action", ":agent"),#
		(this_or_next|eq,":attack_action",4),#Just got parried
		(this_or_next|eq,":defend_action",1),#Parrying an enemy
		##So he'll only try to kick if he just parried an enemy attack, or his own attack just got parried.
		(agent_get_team, ":team", ":agent"),
		(assign, ":maximum_distance", 100),
		#Target Acquisition
		(agent_ai_get_look_target,":suspect",":agent"),
		(gt,":suspect",0),#Make sure there is someone.
		(agent_is_alive, ":suspect"),
		(agent_is_human, ":suspect"),#Only kick humans
		(agent_is_active, ":suspect"),
		(agent_get_team, ":suspect_team", ":suspect"),
		(neq, ":suspect_team", ":team"),#Friends don't let friends kick friends.
		(agent_get_position, pos1, ":agent"),#Distance check
		(agent_get_position, pos2, ":suspect"),
		(neg|position_is_behind_position, pos2, pos1), #Suspect can't be behind kicker.
		(get_distance_between_positions, ":distance", pos1, pos2),
		(le, ":distance", ":maximum_distance"),
		#Check chance
		(store_random_in_range,":kickchance", 1, 10),
		(try_begin),
			(eq,":kickchance",1), #10% chance per check
				#(display_message, "@Agent kicks."),
				(agent_set_animation, ":agent", "anim_prepare_kick_0"),
				(agent_deliver_damage_to_agent, ":agent", ":suspect", 3),
				(agent_set_animation, ":suspect", "anim_strike3_abdomen_front"),#Get Kicked
			(try_end),
	   (try_end),]),
	   
	   ##AI Kicking end
		
		
		(0.25, 0.0, 4.0,
		[
			(eq, "$sp_shield_bash_ai", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(neq, ":var_2", ":player_agent_no"),
				(agent_is_alive, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_active, ":var_2"), #Test to see if it stops AI from shield bashing (new addition v3)
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(store_skill_level, ":skill_level_shield_troop_id_var_2", "skl_shield", ":troop_id_var_2"),
				(store_proficiency_level, ":proficiency_level_troop_id_var_2_0", ":troop_id_var_2", 0),
				(ge, ":skill_level_shield_troop_id_var_2", 4),
				(ge, ":proficiency_level_troop_id_var_2_0", 200),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(le, ":horse_var_2", 0),
				(try_begin),
					(neg|agent_slot_ge, ":var_2", 50, 1),
					(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
					(agent_get_wielded_item, ":wielded_item_var_2_1", ":var_2", 1),
					(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
					(eq, ":type_wielded_item_var_2_1", 7),
					(agent_get_attack_action, ":attack_action_var_2", ":var_2"),
					(eq, ":attack_action_var_2", 0),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_position, 1, ":var_2"),
					(assign, ":value", -1),
					(assign, ":value_2", 125),
					(try_for_agents, ":var_13"),
						(agent_is_alive, ":var_13"),
						(agent_is_human, ":var_13"),
						(agent_get_position, 2, ":var_13"),
						(neg|position_is_behind_position, 2, 1),
						(agent_get_team, ":team_var_13", ":var_13"),
						(neq, ":team_var_13", ":team_var_2"),
						(try_begin),
							(eq, ":team_var_2", 0),
							(assign, ":value_3", 2),
						(else_try),
							(eq, ":team_var_2", 2),
							(assign, ":value_3", 0),
						(else_try),
							(eq, ":team_var_2", 1),
							(assign, ":value_3", 3),
						(else_try),
							(eq, ":team_var_2", 3),
							(assign, ":value_3", 1),
						(try_end),
						(neq, ":team_var_13", ":value_3"),
						(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
						(le, ":distance_between_positions_1_2", ":value_2"),
						(assign, ":value_2", ":distance_between_positions_1_2"),
						(assign, ":value", ":var_13"),
					(try_end),
					(ge, ":value", 0),
					(agent_get_horse, ":horse_var_2", ":value"),
					(eq, ":horse_var_2", -1),
					(store_random_in_range, ":random_in_range_15_26", 15, 26),
					(agent_set_slot, ":var_2", 50, ":random_in_range_15_26"),
					(agent_set_animation, ":var_2", "anim_shield_bash"),
					(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
					(troop_get_type, ":type_wielded_item_var_2_1", ":troop_id_var_2"),
					(try_begin),
						(eq, ":type_wielded_item_var_2_1", 0),
						(agent_play_sound, ":var_2", "snd_man_yell"),
					(else_try),
						(eq, ":type_wielded_item_var_2_1", 1),
						(agent_play_sound, ":var_2", "snd_woman_yell"),
					(try_end),
					(agent_play_sound, ":value", "snd_wooden_hit_low_armor_high_damage"),
					(agent_get_defend_action, ":attack_action_var_2", ":value"),
					(try_begin),
						(eq, ":attack_action_var_2", 2),
						(neg|position_is_behind_position, 1, 2),
						(agent_get_wielded_item, ":wielded_item_var_2_1", ":value", 1),
						(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
						(eq, ":type_wielded_item_var_2_1", 7),
						(agent_set_animation, ":value", "anim_shield_bash"),
					(else_try),
						(agent_set_animation, ":value", "anim_shield_strike"),
					(try_end),
				(try_end),
				(agent_get_slot, ":var_2_50", ":var_2", 50),
				(val_sub, ":var_2_50", 1),
				(val_max, ":var_2_50", 0),
				(agent_set_slot, ":var_2", 50, ":var_2_50"),
			(try_end)
		])
	] ),

	("bandits_at_night", 0, -1,
	"Default town visit",
	[(0, mtef_scene_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, [itm_priest_robe_1, itm_priest_cap_1, itm_shoes, itm_sword_type_xii, itm_talak_buckler, itm_throwing_daggers]),
	(1, mtef_scene_source|mtef_team_0, 0, 0, 1, []),
	(2, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, []),
	(3, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, []),
	(4, mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
	(5, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, []),
	(6, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, []),
	(7, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, []),
	(8, mtef_scene_source, af_override_horse, 0, 1, []),
	(9, mtef_visitor_source, af_override_horse, 0, 1, []),
	(10, mtef_visitor_source, af_override_horse, 0, 1, []),
	(11, mtef_visitor_source, af_override_horse, aif_start_alarmed, 1, []),
	(12, mtef_visitor_source, af_override_horse, 0, 1, []),
	(13, mtef_scene_source, 0, 0, 1, []),
	(14, mtef_scene_source, 0, 0, 1, []),
	(15, mtef_scene_source, 0, 0, 1, []),
	(16, mtef_visitor_source, af_override_horse, 0, 1, []),
	(17, mtef_visitor_source, af_override_horse, 0, 1, []),
	(18, mtef_visitor_source, af_override_horse, 0, 1, []),
	(19, mtef_visitor_source, af_override_horse, 0, 1, []),
	(20, mtef_visitor_source, af_override_horse, 0, 1, []),
	(21, mtef_visitor_source, af_override_horse, 0, 1, []),
	(22, mtef_visitor_source, af_override_horse, 0, 1, []),
	(23, mtef_visitor_source, af_override_horse, 0, 1, []),
	(24, mtef_visitor_source, af_override_horse, 0, 1, []),
	(25, mtef_visitor_source, af_override_horse, 0, 1, []),
	(26, mtef_visitor_source, af_override_horse, 0, 1, []),
	(27, mtef_visitor_source, af_override_horse, aif_start_alarmed, 1, []),
	(28, mtef_visitor_source, af_override_horse, aif_start_alarmed, 1, []),
	(29, mtef_visitor_source, af_override_horse, 0, 1, []),
	(30, mtef_visitor_source, af_override_horse, 0, 1, []),
	(31, mtef_visitor_source, af_override_horse, 0, 1, []),
	(32, mtef_visitor_source, af_override_horse, 0, 1, []),
	(33, mtef_visitor_source, af_override_horse, 0, 1, []),
	(34, mtef_visitor_source, af_override_horse, 0, 1, []),
	(35, mtef_visitor_source, af_override_horse, 0, 1, []),
	(36, mtef_visitor_source, af_override_horse, 0, 1, []),
	(37, mtef_visitor_source, af_override_horse, 0, 1, []),
	(38, mtef_visitor_source, af_override_horse, 0, 1, []),
	(39, mtef_visitor_source, af_override_horse, 0, 1, []),
	(40, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(41, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(42, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(43, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(44, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(45, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(46, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(47, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, [])],
	[
		(-19.0, 0.0, 0.0,
		[],

		[
			(assign, "$tom_sand_storm", 0),
			(call_script, "script_change_rain_or_snow"),
			(set_fixed_point_multiplier, 100),
			(try_begin),
				(is_currently_night),
				#(set_shader_param_float, "@vFresnelMultiplier", 15),
			(else_try),
				#(set_shader_param_float, "@vFresnelMultiplier", 50),
			(try_end)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(neq, ":troop_id_trigger_param_1", "trp_player"),
			(agent_set_team, ":trigger_param_1", 1)
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_change_banners_and_chest")
		]),

		(-22.0, 0.0, 0.0,
		[
			(display_message, "str_cant_use_inventory_now")
		],

		[]),

		(-21.0, 0.0, 0.0,
		[
			(display_message, "str_cannot_leave_now")
		],

		[]),

		(-30.0, 0.0, 0.0,
		[
			(try_begin),
				(eq, "$g_defending_against_siege", 0),
				(assign, "$g_leave_town", 1),
			(try_end)
		],

		[]),

		(0.0, 0.0, ti_once,
		[],

		[
			(call_script, "script_music_set_situation_with_culture", 4096),
			(set_party_battle_mode),
			(party_slot_eq, "$current_town", slot_party_type, 3),
			(call_script, "script_town_init_doors", 0)
		]),

		(1.0, 4.0, ti_once,
		[
			(store_mission_timer_a, ":mission_timer_a"),
			(ge, ":mission_timer_a", 5),
			(this_or_next|main_hero_fallen),
			(num_active_teams_le, 1)
		],

		[
			(try_begin),
				(main_hero_fallen),
				(jump_to_menu, "mnu_town_bandits_failed"),
			(else_try),
				(jump_to_menu, "mnu_town_bandits_succeeded"),
			(try_end),
			(finish_mission)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_set_matching_sexy_boots", ":trigger_param_1")
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$sp_shield_bash", 1),
			(game_key_is_down, 7),
			(game_key_clicked, 6),
			(neg|main_hero_fallen),
		],

		[
		(call_script, "script_shield_bash"),
		]),

			##AI kicking begin
		   (2, 0, 3, #AI kicking
       [], [
	(get_player_agent_no,":player"),
	(try_for_agents, ":agent"),
		(neq, ":agent", ":player"),
		(agent_is_alive, ":agent"),
		(neq, ":agent", -1),
		(agent_is_human, ":agent"),#Only humans can kick....FOR NOW
		(agent_is_active, ":agent"),
		(agent_slot_eq, ":agent", slot_agent_is_running_away, 0),#Isn't fleeing the battle.
		##He's an eligible human.  Now see if he's in a position to kick.
		(agent_get_attack_action, ":attack_action", ":agent"), #returned values: free = 0, readying_attack = 1, releasing_attack = 2, completing_attack_after_hit = 3, attack_parried = 4, reloading = 5, after_release = 6, cancelling_attack = 7
		(agent_get_defend_action, ":defend_action", ":agent"),#
		(this_or_next|eq,":attack_action",4),#Just got parried
		(this_or_next|eq,":defend_action",1),#Parrying an enemy
		##So he'll only try to kick if he just parried an enemy attack, or his own attack just got parried.
		(agent_get_team, ":team", ":agent"),
		(assign, ":maximum_distance", 100),
		#Target Acquisition
		(agent_ai_get_look_target,":suspect",":agent"),
		(gt,":suspect",0),#Make sure there is someone.
		(agent_is_alive, ":suspect"),
		(agent_is_human, ":suspect"),#Only kick humans
		(agent_is_active, ":suspect"),
		(agent_get_team, ":suspect_team", ":suspect"),
		(neq, ":suspect_team", ":team"),#Friends don't let friends kick friends.
		(agent_get_position, pos1, ":agent"),#Distance check
		(agent_get_position, pos2, ":suspect"),
		(neg|position_is_behind_position, pos2, pos1), #Suspect can't be behind kicker.
		(get_distance_between_positions, ":distance", pos1, pos2),
		(le, ":distance", ":maximum_distance"),
		#Check chance
		(store_random_in_range,":kickchance", 1, 10),
		(try_begin),
			(eq,":kickchance",1), #10% chance per check
				#(display_message, "@Agent kicks."),
				(agent_set_animation, ":agent", "anim_prepare_kick_0"),
				(agent_deliver_damage_to_agent, ":agent", ":suspect", 3),
				(agent_set_animation, ":suspect", "anim_strike3_abdomen_front"),#Get Kicked
			(try_end),
	   (try_end),]),
	   
	   ##AI Kicking end
		
		
		(0.25, 0.0, 4.0,
		[
			(eq, "$sp_shield_bash_ai", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(neq, ":var_2", ":player_agent_no"),
				(agent_is_alive, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_active, ":var_2"), #Test to see if it stops AI from shield bashing (new addition v3)
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(store_skill_level, ":skill_level_shield_troop_id_var_2", "skl_shield", ":troop_id_var_2"),
				(store_proficiency_level, ":proficiency_level_troop_id_var_2_0", ":troop_id_var_2", 0),
				(ge, ":skill_level_shield_troop_id_var_2", 4),
				(ge, ":proficiency_level_troop_id_var_2_0", 200),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(le, ":horse_var_2", 0),
				(try_begin),
					(neg|agent_slot_ge, ":var_2", 50, 1),
					(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
					(agent_get_wielded_item, ":wielded_item_var_2_1", ":var_2", 1),
					(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
					(eq, ":type_wielded_item_var_2_1", 7),
					(agent_get_attack_action, ":attack_action_var_2", ":var_2"),
					(eq, ":attack_action_var_2", 0),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_position, 1, ":var_2"),
					(assign, ":value", -1),
					(assign, ":value_2", 125),
					(try_for_agents, ":var_13"),
						(agent_is_alive, ":var_13"),
						(agent_is_human, ":var_13"),
						(agent_get_position, 2, ":var_13"),
						(neg|position_is_behind_position, 2, 1),
						(agent_get_team, ":team_var_13", ":var_13"),
						(neq, ":team_var_13", ":team_var_2"),
						(try_begin),
							(eq, ":team_var_2", 0),
							(assign, ":value_3", 2),
						(else_try),
							(eq, ":team_var_2", 2),
							(assign, ":value_3", 0),
						(else_try),
							(eq, ":team_var_2", 1),
							(assign, ":value_3", 3),
						(else_try),
							(eq, ":team_var_2", 3),
							(assign, ":value_3", 1),
						(try_end),
						(neq, ":team_var_13", ":value_3"),
						(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
						(le, ":distance_between_positions_1_2", ":value_2"),
						(assign, ":value_2", ":distance_between_positions_1_2"),
						(assign, ":value", ":var_13"),
					(try_end),
					(ge, ":value", 0),
					(agent_get_horse, ":horse_var_2", ":value"),
					(eq, ":horse_var_2", -1),
					(store_random_in_range, ":random_in_range_15_26", 15, 26),
					(agent_set_slot, ":var_2", 50, ":random_in_range_15_26"),
					(agent_set_animation, ":var_2", "anim_shield_bash"),
					(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
					(troop_get_type, ":type_wielded_item_var_2_1", ":troop_id_var_2"),
					(try_begin),
						(eq, ":type_wielded_item_var_2_1", 0),
						(agent_play_sound, ":var_2", "snd_man_yell"),
					(else_try),
						(eq, ":type_wielded_item_var_2_1", 1),
						(agent_play_sound, ":var_2", "snd_woman_yell"),
					(try_end),
					(agent_play_sound, ":value", "snd_wooden_hit_low_armor_high_damage"),
					(agent_get_defend_action, ":attack_action_var_2", ":value"),
					(try_begin),
						(eq, ":attack_action_var_2", 2),
						(neg|position_is_behind_position, 1, 2),
						(agent_get_wielded_item, ":wielded_item_var_2_1", ":value", 1),
						(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
						(eq, ":type_wielded_item_var_2_1", 7),
						(agent_set_animation, ":value", "anim_shield_bash"),
					(else_try),
						(agent_set_animation, ":value", "anim_shield_strike"),
					(try_end),
				(try_end),
				(agent_get_slot, ":var_2_50", ":var_2", 50),
				(val_sub, ":var_2_50", 1),
				(val_max, ":var_2_50", 0),
				(agent_set_slot, ":var_2", 50, ":var_2_50"),
			(try_end)
		])
	] ),

	("village_training", mtf_arena_fight|mtf_team_fight, -1,
	"village training",
	[(2, mtef_visitor_source|mtef_team_0, af_override_everything, aif_start_alarmed, 1, [itm_practice_staff, itm_practice_boots]),
	(4, mtef_visitor_source|mtef_team_1, af_override_everything, aif_start_alarmed, 1, [itm_practice_staff, itm_practice_boots])],
	[
		(-19.0, 0.0, 0.0,
		[],

		[
			(assign, "$tom_sand_storm", 0),
			(call_script, "script_change_rain_or_snow"),
			(set_fixed_point_multiplier, 100),
			(try_begin),
				(is_currently_night),
				#(set_shader_param_float, "@vFresnelMultiplier", 15),
			(else_try),
				#(set_shader_param_float, "@vFresnelMultiplier", 50),
			(try_end)
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(assign, "$g_train_peasants_against_bandits_training_succeeded", 0),
			(call_script, "script_change_banners_and_chest")
		]),

		(-21.0, 0.0, 0.0,
		[],

		[
			(question_box, "str_give_up_fight")
		]),

		(-8.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(eq, ":trigger_param_1", 0),
			(finish_mission)
		]),

		(-22.0, 0.0, 0.0,
		[
			(display_message, "str_cant_use_inventory_now")
		],

		[]),

		(1.0, 4.0, ti_once,
		[
			(this_or_next|main_hero_fallen),
			(num_active_teams_le, 1)
		],

		[
			(try_begin),
				(neg|main_hero_fallen),
				(assign, "$g_train_peasants_against_bandits_training_succeeded", 1),
			(try_end),
			(finish_mission)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_set_matching_sexy_boots", ":trigger_param_1")
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$sp_shield_bash", 1),
			(game_key_is_down, 7),
			(game_key_clicked, 6),
			(neg|main_hero_fallen),
		],

		[
		(call_script, "script_shield_bash"),
		]),

			##AI kicking begin
		   (2, 0, 3, #AI kicking
       [], [
	(get_player_agent_no,":player"),
	(try_for_agents, ":agent"),
		(neq, ":agent", ":player"),
		(agent_is_alive, ":agent"),
		(neq, ":agent", -1),
		(agent_is_human, ":agent"),#Only humans can kick....FOR NOW
		(agent_is_active, ":agent"),
		(agent_slot_eq, ":agent", slot_agent_is_running_away, 0),#Isn't fleeing the battle.
		##He's an eligible human.  Now see if he's in a position to kick.
		(agent_get_attack_action, ":attack_action", ":agent"), #returned values: free = 0, readying_attack = 1, releasing_attack = 2, completing_attack_after_hit = 3, attack_parried = 4, reloading = 5, after_release = 6, cancelling_attack = 7
		(agent_get_defend_action, ":defend_action", ":agent"),#
		(this_or_next|eq,":attack_action",4),#Just got parried
		(this_or_next|eq,":defend_action",1),#Parrying an enemy
		##So he'll only try to kick if he just parried an enemy attack, or his own attack just got parried.
		(agent_get_team, ":team", ":agent"),
		(assign, ":maximum_distance", 100),
		#Target Acquisition
		(agent_ai_get_look_target,":suspect",":agent"),
		(gt,":suspect",0),#Make sure there is someone.
		(agent_is_alive, ":suspect"),
		(agent_is_human, ":suspect"),#Only kick humans
		(agent_is_active, ":suspect"),
		(agent_get_team, ":suspect_team", ":suspect"),
		(neq, ":suspect_team", ":team"),#Friends don't let friends kick friends.
		(agent_get_position, pos1, ":agent"),#Distance check
		(agent_get_position, pos2, ":suspect"),
		(neg|position_is_behind_position, pos2, pos1), #Suspect can't be behind kicker.
		(get_distance_between_positions, ":distance", pos1, pos2),
		(le, ":distance", ":maximum_distance"),
		#Check chance
		(store_random_in_range,":kickchance", 1, 10),
		(try_begin),
			(eq,":kickchance",1), #10% chance per check
				#(display_message, "@Agent kicks."),
				(agent_set_animation, ":agent", "anim_prepare_kick_0"),
				(agent_deliver_damage_to_agent, ":agent", ":suspect", 3),
				(agent_set_animation, ":suspect", "anim_strike3_abdomen_front"),#Get Kicked
			(try_end),
	   (try_end),]),
	   
	   ##AI Kicking end
		
		
		(0.25, 0.0, 4.0,
		[
			(eq, "$sp_shield_bash_ai", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(neq, ":var_2", ":player_agent_no"),
				(agent_is_alive, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_active, ":var_2"), #Test to see if it stops AI from shield bashing (new addition v3)
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(store_skill_level, ":skill_level_shield_troop_id_var_2", "skl_shield", ":troop_id_var_2"),
				(store_proficiency_level, ":proficiency_level_troop_id_var_2_0", ":troop_id_var_2", 0),
				(ge, ":skill_level_shield_troop_id_var_2", 4),
				(ge, ":proficiency_level_troop_id_var_2_0", 200),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(le, ":horse_var_2", 0),
				(try_begin),
					(neg|agent_slot_ge, ":var_2", 50, 1),
					(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
					(agent_get_wielded_item, ":wielded_item_var_2_1", ":var_2", 1),
					(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
					(eq, ":type_wielded_item_var_2_1", 7),
					(agent_get_attack_action, ":attack_action_var_2", ":var_2"),
					(eq, ":attack_action_var_2", 0),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_position, 1, ":var_2"),
					(assign, ":value", -1),
					(assign, ":value_2", 125),
					(try_for_agents, ":var_13"),
						(agent_is_alive, ":var_13"),
						(agent_is_human, ":var_13"),
						(agent_get_position, 2, ":var_13"),
						(neg|position_is_behind_position, 2, 1),
						(agent_get_team, ":team_var_13", ":var_13"),
						(neq, ":team_var_13", ":team_var_2"),
						(try_begin),
							(eq, ":team_var_2", 0),
							(assign, ":value_3", 2),
						(else_try),
							(eq, ":team_var_2", 2),
							(assign, ":value_3", 0),
						(else_try),
							(eq, ":team_var_2", 1),
							(assign, ":value_3", 3),
						(else_try),
							(eq, ":team_var_2", 3),
							(assign, ":value_3", 1),
						(try_end),
						(neq, ":team_var_13", ":value_3"),
						(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
						(le, ":distance_between_positions_1_2", ":value_2"),
						(assign, ":value_2", ":distance_between_positions_1_2"),
						(assign, ":value", ":var_13"),
					(try_end),
					(ge, ":value", 0),
					(agent_get_horse, ":horse_var_2", ":value"),
					(eq, ":horse_var_2", -1),
					(store_random_in_range, ":random_in_range_15_26", 15, 26),
					(agent_set_slot, ":var_2", 50, ":random_in_range_15_26"),
					(agent_set_animation, ":var_2", "anim_shield_bash"),
					(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
					(troop_get_type, ":type_wielded_item_var_2_1", ":troop_id_var_2"),
					(try_begin),
						(eq, ":type_wielded_item_var_2_1", 0),
						(agent_play_sound, ":var_2", "snd_man_yell"),
					(else_try),
						(eq, ":type_wielded_item_var_2_1", 1),
						(agent_play_sound, ":var_2", "snd_woman_yell"),
					(try_end),
					(agent_play_sound, ":value", "snd_wooden_hit_low_armor_high_damage"),
					(agent_get_defend_action, ":attack_action_var_2", ":value"),
					(try_begin),
						(eq, ":attack_action_var_2", 2),
						(neg|position_is_behind_position, 1, 2),
						(agent_get_wielded_item, ":wielded_item_var_2_1", ":value", 1),
						(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
						(eq, ":type_wielded_item_var_2_1", 7),
						(agent_set_animation, ":value", "anim_shield_bash"),
					(else_try),
						(agent_set_animation, ":value", "anim_shield_strike"),
					(try_end),
				(try_end),
				(agent_get_slot, ":var_2_50", ":var_2", 50),
				(val_sub, ":var_2_50", 1),
				(val_max, ":var_2_50", 0),
				(agent_set_slot, ":var_2", 50, ":var_2_50"),
			(try_end)
		])
	] + crouching_triggers ),

	("visit_town_castle", 0, -1,
	"You enter the halls of the lord.",
	[(0, mtef_scene_source|mtef_team_0, af_override_weapons|af_override_head|af_override_horse, 0, 1, []),
	(1, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, []),
	(2, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, []),
	(3, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, []),
	(4, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, []),
	(5, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(6, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(7, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(8, mtef_visitor_source, af_override_horse, 0, 1, []),
	(9, mtef_visitor_source, af_override_horse, 0, 1, []),
	(10, mtef_scene_source, af_override_horse, 0, 1, []),
	(11, mtef_scene_source, af_override_horse, 0, 1, []),
	(12, mtef_visitor_source, af_override_horse, 0, 1, []),
	(13, mtef_visitor_source, 0, 0, 1, []),
	(14, mtef_visitor_source, 0, 0, 1, []),
	(15, mtef_visitor_source, 0, 0, 1, []),
	(16, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, []),
	(17, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, []),
	(18, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, []),
	(19, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, []),
	(20, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, []),
	(21, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, []),
	(22, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, []),
	(23, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, []),
	(24, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, []),
	(25, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, []),
	(26, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, []),
	(27, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, []),
	(28, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, []),
	(29, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, []),
	(30, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, []),
	(31, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, [])],
	[
		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_init_town_agent", ":trigger_param_1")
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_change_banners_and_chest")
		]),

		(-22.0, 0.0, 0.0,
		[
			(set_trigger_result, 1)
		],

		[]),

		(-21.0, 0.0, 0.0,
		[
			(neq, "$talk_context", 18),
			(set_trigger_result, 1)
		],

		[]),

		(-30.0, 0.0, 0.0,
		[
			(eq, "$talk_context", 18)
		],

		[
			(display_message, "str_leaving_area_during_prison_break"),
			(set_jump_mission, "mt_sneak_caught_fight")
		]),

		(0.0, 0.0, ti_once,
		[],

		[
			(try_begin),
				(eq, "$talk_context", 1),
				(try_begin),
					(store_faction_of_party, ":faction_of_party_current_town", "$current_town"),
					(faction_slot_eq, ":faction_of_party_current_town", slot_faction_ai_state, 6),
					(faction_slot_eq, ":faction_of_party_current_town", slot_faction_ai_object, "$current_town"),
					(call_script, "script_music_set_situation_with_culture", 16777216),
				(try_end),
			(else_try),
				(call_script, "script_music_set_situation_with_culture", 0),
			(try_end)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_set_matching_sexy_boots", ":trigger_param_1")
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$sp_shield_bash", 1),
			(game_key_is_down, 7),
			(game_key_clicked, 6),
			(neg|main_hero_fallen),
		],

		[
		(call_script, "script_shield_bash"),
		]),

			##AI kicking begin
		   (2, 0, 3, #AI kicking
       [], [
	(get_player_agent_no,":player"),
	(try_for_agents, ":agent"),
		(neq, ":agent", ":player"),
		(agent_is_alive, ":agent"),
		(neq, ":agent", -1),
		(agent_is_human, ":agent"),#Only humans can kick....FOR NOW
		(agent_is_active, ":agent"),
		(agent_slot_eq, ":agent", slot_agent_is_running_away, 0),#Isn't fleeing the battle.
		##He's an eligible human.  Now see if he's in a position to kick.
		(agent_get_attack_action, ":attack_action", ":agent"), #returned values: free = 0, readying_attack = 1, releasing_attack = 2, completing_attack_after_hit = 3, attack_parried = 4, reloading = 5, after_release = 6, cancelling_attack = 7
		(agent_get_defend_action, ":defend_action", ":agent"),#
		(this_or_next|eq,":attack_action",4),#Just got parried
		(this_or_next|eq,":defend_action",1),#Parrying an enemy
		##So he'll only try to kick if he just parried an enemy attack, or his own attack just got parried.
		(agent_get_team, ":team", ":agent"),
		(assign, ":maximum_distance", 100),
		#Target Acquisition
		(agent_ai_get_look_target,":suspect",":agent"),
		(gt,":suspect",0),#Make sure there is someone.
		(agent_is_alive, ":suspect"),
		(agent_is_human, ":suspect"),#Only kick humans
		(agent_is_active, ":suspect"),
		(agent_get_team, ":suspect_team", ":suspect"),
		(neq, ":suspect_team", ":team"),#Friends don't let friends kick friends.
		(agent_get_position, pos1, ":agent"),#Distance check
		(agent_get_position, pos2, ":suspect"),
		(neg|position_is_behind_position, pos2, pos1), #Suspect can't be behind kicker.
		(get_distance_between_positions, ":distance", pos1, pos2),
		(le, ":distance", ":maximum_distance"),
		#Check chance
		(store_random_in_range,":kickchance", 1, 10),
		(try_begin),
			(eq,":kickchance",1), #10% chance per check
				#(display_message, "@Agent kicks."),
				(agent_set_animation, ":agent", "anim_prepare_kick_0"),
				(agent_deliver_damage_to_agent, ":agent", ":suspect", 3),
				(agent_set_animation, ":suspect", "anim_strike3_abdomen_front"),#Get Kicked
			(try_end),
	   (try_end),]),
	   
	   ##AI Kicking end
		
		
		(0.25, 0.0, 4.0,
		[
			(eq, "$sp_shield_bash_ai", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(neq, ":var_2", ":player_agent_no"),
				(agent_is_alive, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_active, ":var_2"), #Test to see if it stops AI from shield bashing (new addition v3)
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(store_skill_level, ":skill_level_shield_troop_id_var_2", "skl_shield", ":troop_id_var_2"),
				(store_proficiency_level, ":proficiency_level_troop_id_var_2_0", ":troop_id_var_2", 0),
				(ge, ":skill_level_shield_troop_id_var_2", 4),
				(ge, ":proficiency_level_troop_id_var_2_0", 200),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(le, ":horse_var_2", 0),
				(try_begin),
					(neg|agent_slot_ge, ":var_2", 50, 1),
					(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
					(agent_get_wielded_item, ":wielded_item_var_2_1", ":var_2", 1),
					(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
					(eq, ":type_wielded_item_var_2_1", 7),
					(agent_get_attack_action, ":attack_action_var_2", ":var_2"),
					(eq, ":attack_action_var_2", 0),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_position, 1, ":var_2"),
					(assign, ":value", -1),
					(assign, ":value_2", 125),
					(try_for_agents, ":var_13"),
						(agent_is_alive, ":var_13"),
						(agent_is_human, ":var_13"),
						(agent_get_position, 2, ":var_13"),
						(neg|position_is_behind_position, 2, 1),
						(agent_get_team, ":team_var_13", ":var_13"),
						(neq, ":team_var_13", ":team_var_2"),
						(try_begin),
							(eq, ":team_var_2", 0),
							(assign, ":value_3", 2),
						(else_try),
							(eq, ":team_var_2", 2),
							(assign, ":value_3", 0),
						(else_try),
							(eq, ":team_var_2", 1),
							(assign, ":value_3", 3),
						(else_try),
							(eq, ":team_var_2", 3),
							(assign, ":value_3", 1),
						(try_end),
						(neq, ":team_var_13", ":value_3"),
						(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
						(le, ":distance_between_positions_1_2", ":value_2"),
						(assign, ":value_2", ":distance_between_positions_1_2"),
						(assign, ":value", ":var_13"),
					(try_end),
					(ge, ":value", 0),
					(agent_get_horse, ":horse_var_2", ":value"),
					(eq, ":horse_var_2", -1),
					(store_random_in_range, ":random_in_range_15_26", 15, 26),
					(agent_set_slot, ":var_2", 50, ":random_in_range_15_26"),
					(agent_set_animation, ":var_2", "anim_shield_bash"),
					(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
					(troop_get_type, ":type_wielded_item_var_2_1", ":troop_id_var_2"),
					(try_begin),
						(eq, ":type_wielded_item_var_2_1", 0),
						(agent_play_sound, ":var_2", "snd_man_yell"),
					(else_try),
						(eq, ":type_wielded_item_var_2_1", 1),
						(agent_play_sound, ":var_2", "snd_woman_yell"),
					(try_end),
					(agent_play_sound, ":value", "snd_wooden_hit_low_armor_high_damage"),
					(agent_get_defend_action, ":attack_action_var_2", ":value"),
					(try_begin),
						(eq, ":attack_action_var_2", 2),
						(neg|position_is_behind_position, 1, 2),
						(agent_get_wielded_item, ":wielded_item_var_2_1", ":value", 1),
						(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
						(eq, ":type_wielded_item_var_2_1", 7),
						(agent_set_animation, ":value", "anim_shield_bash"),
					(else_try),
						(agent_set_animation, ":value", "anim_shield_strike"),
					(try_end),
				(try_end),
				(agent_get_slot, ":var_2_50", ":var_2", 50),
				(val_sub, ":var_2_50", 1),
				(val_max, ":var_2_50", 0),
				(agent_set_slot, ":var_2", 50, ":var_2_50"),
			(try_end)
		])
	] + crouching_triggers ),

	("back_alley_kill_local_merchant", mtf_battle_mode, -1,
	"You enter the back alley",
	[(0, mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
	(3, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, [])],
	[
					
	    (7, 0, ti_once,
    [],
    [
	(call_script, "script_assign_traits"),
    ]),


    (0, 0, 1, 
    [
    ],
    [
	(call_script, "script_stumbling"),
    ]),







#Decapitations next level right here.
(ti_on_agent_hit, 0, 0, [(eq, "$dynamic_decap", 1),],
[
   (store_trigger_param_1, ":victim_agent"),
   (store_trigger_param_2, ":attacker_agent"),
   (store_trigger_param_3, ":damage"),
   (assign, ":attacker_item", reg0), ### Transfer the item ID to make sure it dosn't change while the script is running
   (copy_position, pos5, pos0), ### Transfer the position of the hit to make sure it dosn't change while the script is running
   (neq, ":victim_agent", -1),
   (try_begin), #-- Decapitations --#
      (agent_is_human, ":victim_agent"),
	  (ge, ":attacker_item", 0),
	  (assign, ":run", 0), ### Reset the run test variable
#	  (try_begin), ### Special weapons that can decap, ovevrrides the below conditions
#		  (this_or_next|eq, ":attacker_item", "itm_supercrossbow"),
#		  (eq, ":attacker_item", "itm_supersledge"),
#		  (assign, ":run", 1),
	  (try_begin),
		  #(neq, ":attacker_item", "itm_mace_1"), ### List of weapons that cannot decapitate
		  #(neq, ":attacker_item", "itm_mace_2"), ### This would be easier to do with a preperty check (for damage type), but I don't know if that is possible or not
		  #(neq, ":attacker_item", "itm_mace_3"),
		  #(neq, ":attacker_item", "itm_staff"), #Keeping active incase of script errors
		  (agent_get_action_dir, ":attack_dir", ":attacker_agent"), ### Makes sure the attack is either a left or right swing
		  (this_or_next|eq, ":attack_dir", 1), ### Right swing
		  (eq, ":attack_dir", 2), ### Left swing
		  (assign, ":run", 1),
	  (try_end),
	  (eq, ":run", 1), ### One of the checks were true, continue to run script
	  #(assign, reg1, ":damage"), #Debug messages
	  #(display_message, "@Damage: {reg1}"),
	  
	  (assign, ":run", 0), ### Reset the run test variable
	  (try_begin),
		(ge, ":damage", "$decap_damage"), ### 30 Minimum damage required to decapitate an agent
		(assign, ":run", 1),
		
#	  (else_try),  ### If debugging mode is on, this bypasses the damage requirement check
#		  (eq,"$g_decapitations_debugging", 1),
#		  (assign, ":run", 1),
#		  (display_message, "@Decap minimum DMG req bypassed"),
	  (try_end),
	  (eq, ":run", 1),
	  
	  (store_agent_hit_points, ":hp", ":victim_agent", 1),
	  (val_add, ":hp", 10), ### 10 Victim must have the negative of this hp or below after hit for the script to move on (never put this value below 0 since the agent has to be absolutley positvely dead)!
	  (ge, ":damage", ":hp"),
	  
	  
	  ### Compare the hit position to the agent's position
      (agent_get_position, pos4, ":victim_agent"),
      (get_distance_between_positions, ":distance", pos4, pos5), 
	  (agent_get_horse, ":is_mounted", ":victim_agent"),
	  (try_begin), ### If the agent is on horseback, these values are used (note that these values will not be exactly correct if the horse is very large or very small)
		(ge, ":is_mounted", 0), ### Will be -1 if no horse is to be found, so anything above means that the agent is mounted
		(assign, ":min_distance", 240), ### Minimum distance from the agent's horse's hooves from which the hit is valid (240 is an approximate value)
		(assign, ":max_distance", 260), ### Maximum distance from the agent's horse's hooves to which the hit is valid (260 is an approximate value)
	  (else_try),  ### If the agent is on foot, these values are used
	    (assign, ":min_distance", 160), ### Minimum distance from the agent's feet from which the hit is valid (160 = slightly below the neck)
	    (assign, ":max_distance", 176), ### Maximum distance from the agent's feet to which the hit is valid (176 = near the nose)
	  (try_end),
      (is_between, ":distance", ":min_distance", ":max_distance"), ### Check to see if the hit is within the allowed area
	  
	  
	  (assign, ":run", 0), ### Default variable value before damage test
	  (try_begin),
		  (store_div, ":chance", ":damage", "$decap_damage_divider"), ### Chance of decap is damage / 4 right now. Lower this value for higher chances of decapitation (or press M+Right Ctrl for debug more if you just want to test easy decaps in-game).
		  
		  #(assign, reg1, ":chance"), #Debug messages
		  #(display_message, "@Decap chance is: {reg1}"),
		  (store_random_in_range, ":diceroll", 0, "$decap_randomizer"), ### Randomizer, 0-100
		  
		  #(assign, reg1, ":diceroll"), #Debug messages
		  #(display_message, "@Diceroll: {reg1}"),
		  (le, ":diceroll", ":chance"), ### ":diceroll" must be less than or equal to ":chance", if it is, decapitation occurs!
		  
		  (assign, ":run", 1), ### SUCCESS!
		  
#     (else_try),  ### If debugging mode is on, bypass chance calculation
#		  (eq,"$g_decapitations_debugging", 1),
#		  (assign, ":run", 1),
#		  (display_message, "@Decap chance calc bypassed"),
	  (try_end),  
	  (eq, ":run", 1), ### Time for the fun stuff!

	  ### Gender test for spawning the right head type
	  (assign, ":head_type", "itm_cut_off_head_male"),
	  (agent_get_troop_id, ":victim_troop", ":victim_agent"),
	  (try_begin),
	    (ge, ":victim_troop", 0),
		(troop_get_type,":victim_gender",":victim_troop"),
		(eq, ":victim_gender", 1),
		(assign, ":head_type", "itm_cut_off_head_female"),
	  (try_end),
	  
	  ### Randomize the spawned head's and/or helmet's position and orientation
	  (store_random_in_range, ":z_rotation", 0, 360),
	  (store_random_in_range, ":y_rotation", -60, 60),
	  (store_random_in_range, ":x_pos", -90, 90),
	  (store_random_in_range, ":y_pos", -90, 90),
	  (position_rotate_z, pos4,":z_rotation"),
	  (position_rotate_y, pos4,":y_rotation"),
	  (position_move_x, pos4, ":x_pos"),
	  (position_move_y, pos4, ":y_pos"),
	  (position_set_z_to_ground_level, pos4),
	  (position_move_z, pos4, 5),
	  (set_spawn_position, pos4),
	  (assign, ":prunetime", 360), ### This is the time in seconds before the spawned head or helmet gets pruned (removed). Recommended to keep it above 0 to make sure it gets removed eventually or when the scene resets, to prevent performance issues.
	  
	  #(spawn_item, ":head_type", 0, ":prunetime"), ### This is the old way of spawning the head on the ground with the helmet, disabled because of the new dynamic heads. You can comment away (disable) the dynamic heads spawning further down and uncomment this line for a less performance-needing approach (with no physics involved).
	  
	  ### Does the agent have a helmet or hat equipped?
      (agent_get_item_slot, ":item", ":victim_agent", 4), #head slot
      (try_begin),
         (ge, ":item", 1), ### Does it?
         (agent_unequip_item, ":victim_agent", ":item"), ### Yes it does. Unequip it to allow replacement by the invisible helmet further down
		 (try_begin),
			 ### Don't spawn items with "itp_attatch_armature" flag: rigging causes floating bugs
			 ### This would be much better to do with an item flag check, but I haven't found any way to do that
			 #(neq, ":item", "itm_with_itp_attatch_armature"),
			 #(neg|is_between,":item","start_of_itm_range_with_itp_attatch_armature","end_of_itm_range_with_itp_attatch_armature"),
			#(set_spawn_position, pos4),
			(spawn_item, ":item", 0, ":prunetime"), ### Spawns the agent's currently equipped headgear on the dropped head's position
		 (try_end),
      (try_end),
	  
	  (agent_equip_item, ":victim_agent", "itm_invisible_head"), ### Put an invisible helmet on the agent's head to "remove" it
	  
	  
	  (agent_get_position, pos4, ":victim_agent"), ### Refreshes the agent's position
	  (position_move_z, pos4, ":min_distance"), ### Move to the where the neck used to be attached
	  
	  
	  ### Blood effects! The last variable is the strength. Lower or increase it for more/less blood (or tweak the particle effects themselves in "module_particle_systems.py").
      (particle_system_burst, "psys_blood_decapitation", pos4, 40), 
	  (particle_system_burst, "psys_game_blood", pos4, 10),
	  (particle_system_burst, "psys_game_blood_2", pos4, 10),
	  
	  (play_sound_at_position, "snd_decapitation_battle", pos4), ### Play some nasty sounds
	  
	  
	  ### Dynamic head spawning! See the bottom of "module_scene_props.py" for physics-related options and more.
	  (position_move_z, pos4, 20),
	  (set_spawn_position, pos4),
	  (assign, ":head_type", "spr_head_dynamic_male"),
	  (try_begin), ### Gender check (for determening the type of head)
		(eq, ":victim_gender", 1),
		(assign, ":head_type", "spr_head_dynamic_female"),
	  (try_end),
	  (spawn_scene_prop, ":head_type"),
	  
		#Addition check if we should allow the message to appears
			(eq, "$allow_decap_mess", 1), #Possible script error

	  ### This below is for the text that shows up when somebody is decapitated.
	  
	  ### Who decapitated who?
		(agent_get_troop_id, ":attacker_troop", ":attacker_agent"),
		(str_store_troop_name, s0, ":attacker_troop"),

		(agent_get_troop_id, ":victim_troop", ":victim_agent"),
		(str_store_troop_name, s1, ":victim_troop"),

	  
	  ### Colour check (friend or foe?)
	  (get_player_agent_no, ":my_agent"),
	  (agent_get_team, ":my_team", ":my_agent"),
	  (agent_get_team, ":victim_team", ":victim_agent"),
	  (try_begin), ### Display it!
		  (neq, ":my_team", ":victim_team"),
		  (display_message, "@>>> {s0} decapitated {s1}!", 0xFF33DD11), ## Green
	  (else_try),
		  (display_message, "@>>> {s0} decapitated {s1}!", 0xFFFF4422), ## Red
	  (try_end),
   (try_end), #-- Decapitations END --#
   
   ]),








	
###Voice-over for Infantry, archers & Cavalry
		
		(0.0, 0.3, 0.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 29) #Everyone!
		],

		[
		(call_script, "script_identify_battle_voices_all")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 30) #Infantry
		],

		[
		(call_script, "script_identify_battle_voices_inf")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 31) #Archers
		],

		[
		(call_script, "script_identify_battle_voices_archers")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 32) #Cavalry
		],

		[
		(call_script, "script_identify_battle_voices_cav")
		]),
		###Voice-over for Infantry, archers & Cavalry	
		
		
		
		
			#####Camera mode by Rubik None-Coop Version Begin
		(0, 0, 0, [(eq, "$extended_camera_mode", 1)],
  [
    (get_player_agent_no, ":player_agent"),
    (agent_get_look_position, pos1, ":player_agent"),
    (position_move_z, pos1, "$g_camera_z"),
    (position_move_y, pos1, "$g_camera_y"),
    (agent_get_horse, ":horse_agent", ":player_agent"),
    (try_begin),
      (ge, ":horse_agent", 0),
      (position_move_z, pos1, 80),
    (try_end),
    (mission_cam_set_position, pos1),
    (try_begin),
      (key_is_down, key_left_control),
      (assign, ":move_val", 50),
    (else_try),
      (assign, ":move_val", 10),
    (try_end),
    (try_begin),
      (key_clicked, key_up),
      (mission_cam_set_mode, 1),
      (val_add, "$g_camera_z", ":move_val"),
    (else_try),
      (key_clicked, key_down),
      (mission_cam_set_mode, 1),
      (val_sub, "$g_camera_z", ":move_val"),
    (else_try),
      (key_clicked, key_left),
      (mission_cam_set_mode, 1),
      (val_add, "$g_camera_y", ":move_val"),
    (else_try),
      (key_clicked, key_right),
      (mission_cam_set_mode, 1),
      (val_sub, "$g_camera_y", ":move_val"),
    (try_end),
    (try_begin),
      (this_or_next|game_key_clicked, gk_view_char),
      (this_or_next|game_key_clicked, gk_zoom),
      (game_key_clicked, gk_cam_toggle),
      (mission_cam_set_mode, 0),
    (try_end),
  ]),
  #####Camera mode by Rubik None-Coop Version End
		
		
###########Torch by troycall/Envious Arm begin

																	#(-25.0, 0.0, 0.0, #Enabling this forces random chance to be 100%
																	#(ti_on_agent_spawn, 0, 0, #Enabling this forces random chance to be 100%
																	(20, 0, ti_once, #Proper one, but reinforcements do not get assigned torches.
        [
          (mission_tpl_are_all_agents_spawned), #From VC Header_Operations to prevent weird behavior.
          (is_currently_night) #Check if currently night time
        ],
        [

		  ####DEFAULT
		   #(try_for_agents, ":agent"),
            #(agent_get_wielded_item, ":item", ":agent", 1),
            #(gt, ":item", -1),
            #(agent_unequip_item, ":agent", ":item"),
            #(agent_equip_item, ":agent", "itm_torch"),
            #(agent_set_wielded_item, ":agent", "itm_torch"),           
          #(try_end),
		  ####END DEFAULT
		  
		  (try_for_agents, ":agent"), #Try for agents...
		  #Extension
		  (agent_is_alive, ":agent"), #For performance reasons
		  #End
		  (agent_is_human, ":agent"), #Performance
          (agent_is_non_player, ":agent"), #Uncommenting this includes player on spawning with torch, may be necessary to uncomment at module_coop_mission_templates.
		  


		 ##########Default Order
		 #######		  (agent_is_human, ":agent"), #Performance
         #######(agent_is_non_player, ":agent"), #Uncommenting this includes player on spawning with torch, may be necessary to uncomment at module_coop_mission_templates.
		 #######
		 ########Extension
		 #######(agent_is_active, ":agent"), #For performance reasons
		 #######(agent_is_alive, ":agent"), #For performance reasons
		 ########End
		  ############
		  		  
				#  (try_begin),
				  
		#		          (agent_get_wielded_item, ":rhand", ":agent", 0),  #Right hand
		#  (assign, ":rhanditem", 0), # Preparing local variable.
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000000000100),
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000004000000),
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000008000000),
		#  (neg|item_has_capability, ":rhanditem", 0x0000000170000000),
		# 

		  #
		  
          #BEGIN DEBUG
          #(assign, reg10, ":agent"),
          #(str_clear, s10),
          #(str_store_string, s10, "@New agent: {reg10}"),
          #END DEBUG
		  #(agent_get_wielded_item, ":rhanditem", ":agent", 0),  #Obtain right hand item
         (agent_get_wielded_item, ":rhanditem", ":agent", 0),  #Obtain right hand item
          (agent_get_wielded_item, ":item", ":agent", 1), # Left hand: shield or -1
          #BEGIN DEBUG
          #(assign, reg10, ":item"),
          #(str_store_string, s10, "@{s10}. LH: {reg10}"),
		  #(display_message, "@Main block Phase A finalized"),
          #END DEBUG
		  #(item_get_type, ":type", ":rhanditem"), #If right hand item is polearm, stop reading rest of code.
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_club_with_spike_head", "itm_wooden_shield"),
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_light_lance", "itm_wooden_shield"),
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_light_lance", "itm_wooden_shield"),
          (try_begin),
		  (neg|is_between, ":rhanditem", "itm_club_with_spike_head", "itm_wooden_shield"),
		  (neg|is_between, ":rhanditem", "itm_lance_banner_jer", "itm_cross_end"), #Update item slots
		  #(neg|troop_has_item_equipped, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		  #(neq, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		  
		# (neg|eq, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		    (gt, ":item", -1), #Check if the agent wields any item in the left hand, this or next.
            #(neq, ":item", -1),# Check if the agent wields any item in the left hand
            (neq, ":item", "itm_torch"), #If agent is using torch, ignore him.
            #(display_message, "@PASSED neg tests"), #Debug message

			
            (store_random_in_range, ":chance", 1, 101), # Chance of item being assigned
            (try_begin),
			  (le, ":chance", "$torch_chance"), #25% = 25
				#lt           = neg | ge # less than		-- (lt,<value>,<value>),
				#neq          = neg | eq # not equal to		-- (neq,<value>,<value>),
				#le           = neg | gt # less or equal to	-- (le,<value>,<value>),
              (agent_unequip_item, ":agent", ":item"),
			  
              #BEGIN DEBUG
              #(str_store_item_name, s11, ":item"),
              #(str_store_string, s10, "@{s10}. Removed item: {s11}"),
			  #(display_message, "@(agent_unequip_item, :agent, :item PASSED."),
              #END DEBUG

               
                (agent_equip_item, ":agent", "itm_torch"), #Tell agent to equip the item
                 #(display_message, "@(agent_equip_item, :agent, :item PASSED."),
                  (agent_set_wielded_item, ":agent", "itm_torch"), #Required for infantry only, cavarly can work without it.
                  #(display_message, "@(agent_set_wielded_item, :agent, :item PASSED."),
                 
                 
                  #BEGIN DEBUG
                #(else_try),
                  #(str_store_string, s10, "@{s10}. Failed random chance."),
                (try_end),
               
              #(else_try),
                #(str_store_string, s10, "@{s10}. Invalid agent for torch"),
              (try_end),
             
              #(display_message, s10),
			  (try_end),
              #END DEBUG
			#  (try_end),
      ]),
	  
###########Torch by troycall/Envious Arm end


		(-22.0, 0.0, 0.0,
		[
			(display_message, "str_cant_use_inventory_now")
		],

		[]),

		(-21.0, 0.0, 0.0,
		[
			(display_message, "str_cannot_leave_now")
		],

		[]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_change_banners_and_chest")
		]),

		(0.0, 0.0, ti_once,
		[],

		[
			(call_script, "script_music_set_situation_with_culture", 4096)
		]),

		(0.0, 0.0, ti_once,
		[
			(store_mission_timer_a, ":mission_timer_a"),
			(ge, ":mission_timer_a", 1),
			(assign, ":value", 0),
			(assign, ":value_2", 0),
			(assign, ":value", 0),
			(assign, ":value_3", -1),
			(assign, ":value_4", -1),
			(try_for_agents, ":var_6"),
				(agent_get_troop_id, ":troop_id_var_6", ":var_6"),
				(try_begin),
					(eq, ":troop_id_var_6", "trp_local_merchant"),
					(store_agent_hit_points, ":value", ":var_6"),
					(assign, ":value_3", ":var_6"),
				(else_try),
					(eq, ":troop_id_var_6", "trp_player"),
					(store_agent_hit_points, ":value_2", ":var_6"),
					(assign, ":value_4", ":var_6"),
				(try_end),
			(try_end),
			(ge, ":value_4", 0),
			(ge, ":value_3", 0),
			(agent_is_alive, ":value_4"),
			(agent_is_alive, ":value_3"),
			(is_between, ":value", 1, 30),
			(gt, ":value_2", 50),
			(start_mission_conversation, "trp_local_merchant")
		],

		[]),

		(1.0, 4.0, ti_once,
		[
			(assign, ":value", 0),
			(try_begin),
				(call_script, "script_cf_troop_agent_is_alive", "trp_local_merchant"),
			(else_try),
				(assign, ":value", 1),
			(try_end),
			(this_or_next|main_hero_fallen),
			(eq, ":value", 1)
		],

		[
			(try_begin),
				(main_hero_fallen),
				(call_script, "script_fail_quest", "qst_kill_local_merchant"),
			(else_try),
				(call_script, "script_change_player_relation_with_center", "$current_town", -4),
				(call_script, "script_succeed_quest", "qst_kill_local_merchant"),
			(try_end),
			(finish_mission)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_set_matching_sexy_boots", ":trigger_param_1")
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$sp_shield_bash", 1),
			(game_key_is_down, 7),
			(game_key_clicked, 6),
			(neg|main_hero_fallen),
		],

		[
		(call_script, "script_shield_bash"),
		]),

			##AI kicking begin
		   (2, 0, 3, #AI kicking
       [], [
	(get_player_agent_no,":player"),
	(try_for_agents, ":agent"),
		(neq, ":agent", ":player"),
		(agent_is_alive, ":agent"),
		(neq, ":agent", -1),
		(agent_is_human, ":agent"),#Only humans can kick....FOR NOW
		(agent_is_active, ":agent"),
		(agent_slot_eq, ":agent", slot_agent_is_running_away, 0),#Isn't fleeing the battle.
		##He's an eligible human.  Now see if he's in a position to kick.
		(agent_get_attack_action, ":attack_action", ":agent"), #returned values: free = 0, readying_attack = 1, releasing_attack = 2, completing_attack_after_hit = 3, attack_parried = 4, reloading = 5, after_release = 6, cancelling_attack = 7
		(agent_get_defend_action, ":defend_action", ":agent"),#
		(this_or_next|eq,":attack_action",4),#Just got parried
		(this_or_next|eq,":defend_action",1),#Parrying an enemy
		##So he'll only try to kick if he just parried an enemy attack, or his own attack just got parried.
		(agent_get_team, ":team", ":agent"),
		(assign, ":maximum_distance", 100),
		#Target Acquisition
		(agent_ai_get_look_target,":suspect",":agent"),
		(gt,":suspect",0),#Make sure there is someone.
		(agent_is_alive, ":suspect"),
		(agent_is_human, ":suspect"),#Only kick humans
		(agent_is_active, ":suspect"),
		(agent_get_team, ":suspect_team", ":suspect"),
		(neq, ":suspect_team", ":team"),#Friends don't let friends kick friends.
		(agent_get_position, pos1, ":agent"),#Distance check
		(agent_get_position, pos2, ":suspect"),
		(neg|position_is_behind_position, pos2, pos1), #Suspect can't be behind kicker.
		(get_distance_between_positions, ":distance", pos1, pos2),
		(le, ":distance", ":maximum_distance"),
		#Check chance
		(store_random_in_range,":kickchance", 1, 10),
		(try_begin),
			(eq,":kickchance",1), #10% chance per check
				#(display_message, "@Agent kicks."),
				(agent_set_animation, ":agent", "anim_prepare_kick_0"),
				(agent_deliver_damage_to_agent, ":agent", ":suspect", 3),
				(agent_set_animation, ":suspect", "anim_strike3_abdomen_front"),#Get Kicked
			(try_end),
	   (try_end),]),
	   
	   ##AI Kicking end
		
		
		(0.25, 0.0, 4.0,
		[
			(eq, "$sp_shield_bash_ai", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(neq, ":var_2", ":player_agent_no"),
				(agent_is_alive, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_active, ":var_2"), #Test to see if it stops AI from shield bashing (new addition v3)
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(store_skill_level, ":skill_level_shield_troop_id_var_2", "skl_shield", ":troop_id_var_2"),
				(store_proficiency_level, ":proficiency_level_troop_id_var_2_0", ":troop_id_var_2", 0),
				(ge, ":skill_level_shield_troop_id_var_2", 4),
				(ge, ":proficiency_level_troop_id_var_2_0", 200),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(le, ":horse_var_2", 0),
				(try_begin),
					(neg|agent_slot_ge, ":var_2", 50, 1),
					(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
					(agent_get_wielded_item, ":wielded_item_var_2_1", ":var_2", 1),
					(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
					(eq, ":type_wielded_item_var_2_1", 7),
					(agent_get_attack_action, ":attack_action_var_2", ":var_2"),
					(eq, ":attack_action_var_2", 0),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_position, 1, ":var_2"),
					(assign, ":value", -1),
					(assign, ":value_2", 125),
					(try_for_agents, ":var_13"),
						(agent_is_alive, ":var_13"),
						(agent_is_human, ":var_13"),
						(agent_get_position, 2, ":var_13"),
						(neg|position_is_behind_position, 2, 1),
						(agent_get_team, ":team_var_13", ":var_13"),
						(neq, ":team_var_13", ":team_var_2"),
						(try_begin),
							(eq, ":team_var_2", 0),
							(assign, ":value_3", 2),
						(else_try),
							(eq, ":team_var_2", 2),
							(assign, ":value_3", 0),
						(else_try),
							(eq, ":team_var_2", 1),
							(assign, ":value_3", 3),
						(else_try),
							(eq, ":team_var_2", 3),
							(assign, ":value_3", 1),
						(try_end),
						(neq, ":team_var_13", ":value_3"),
						(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
						(le, ":distance_between_positions_1_2", ":value_2"),
						(assign, ":value_2", ":distance_between_positions_1_2"),
						(assign, ":value", ":var_13"),
					(try_end),
					(ge, ":value", 0),
					(agent_get_horse, ":horse_var_2", ":value"),
					(eq, ":horse_var_2", -1),
					(store_random_in_range, ":random_in_range_15_26", 15, 26),
					(agent_set_slot, ":var_2", 50, ":random_in_range_15_26"),
					(agent_set_animation, ":var_2", "anim_shield_bash"),
					(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
					(troop_get_type, ":type_wielded_item_var_2_1", ":troop_id_var_2"),
					(try_begin),
						(eq, ":type_wielded_item_var_2_1", 0),
						(agent_play_sound, ":var_2", "snd_man_yell"),
					(else_try),
						(eq, ":type_wielded_item_var_2_1", 1),
						(agent_play_sound, ":var_2", "snd_woman_yell"),
					(try_end),
					(agent_play_sound, ":value", "snd_wooden_hit_low_armor_high_damage"),
					(agent_get_defend_action, ":attack_action_var_2", ":value"),
					(try_begin),
						(eq, ":attack_action_var_2", 2),
						(neg|position_is_behind_position, 1, 2),
						(agent_get_wielded_item, ":wielded_item_var_2_1", ":value", 1),
						(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
						(eq, ":type_wielded_item_var_2_1", 7),
						(agent_set_animation, ":value", "anim_shield_bash"),
					(else_try),
						(agent_set_animation, ":value", "anim_shield_strike"),
					(try_end),
				(try_end),
				(agent_get_slot, ":var_2_50", ":var_2", 50),
				(val_sub, ":var_2_50", 1),
				(val_max, ":var_2_50", 0),
				(agent_set_slot, ":var_2", 50, ":var_2_50"),
			(try_end)
		])
	] + crouching_triggers ),

	("back_alley_revolt", mtf_battle_mode, 8,
	"You lead your men to battle.",
	[(0, mtef_team_0|mtef_use_exact_number, af_override_weapons|af_override_head|af_override_horse, aif_start_alarmed, 4, [itm_quarter_staff]),
	(3, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, [])],
	[
					
	
	    (7, 0, ti_once,
    [],
    [
	(call_script, "script_assign_traits"),
    ]),


    (0, 0, 1, 
    [
    ],
    [
	(call_script, "script_stumbling"),
    ]),







#Decapitations next level right here.
(ti_on_agent_hit, 0, 0, [(eq, "$dynamic_decap", 1),],
[
   (store_trigger_param_1, ":victim_agent"),
   (store_trigger_param_2, ":attacker_agent"),
   (store_trigger_param_3, ":damage"),
   (assign, ":attacker_item", reg0), ### Transfer the item ID to make sure it dosn't change while the script is running
   (copy_position, pos5, pos0), ### Transfer the position of the hit to make sure it dosn't change while the script is running
   (neq, ":victim_agent", -1),
   (try_begin), #-- Decapitations --#
      (agent_is_human, ":victim_agent"),
	  (ge, ":attacker_item", 0),
	  (assign, ":run", 0), ### Reset the run test variable
#	  (try_begin), ### Special weapons that can decap, ovevrrides the below conditions
#		  (this_or_next|eq, ":attacker_item", "itm_supercrossbow"),
#		  (eq, ":attacker_item", "itm_supersledge"),
#		  (assign, ":run", 1),
	  (try_begin),
		  #(neq, ":attacker_item", "itm_mace_1"), ### List of weapons that cannot decapitate
		  #(neq, ":attacker_item", "itm_mace_2"), ### This would be easier to do with a preperty check (for damage type), but I don't know if that is possible or not
		  #(neq, ":attacker_item", "itm_mace_3"),
		  #(neq, ":attacker_item", "itm_staff"), #Keeping active incase of script errors
		  (agent_get_action_dir, ":attack_dir", ":attacker_agent"), ### Makes sure the attack is either a left or right swing
		  (this_or_next|eq, ":attack_dir", 1), ### Right swing
		  (eq, ":attack_dir", 2), ### Left swing
		  (assign, ":run", 1),
	  (try_end),
	  (eq, ":run", 1), ### One of the checks were true, continue to run script
	  #(assign, reg1, ":damage"), #Debug messages
	  #(display_message, "@Damage: {reg1}"),
	  
	  (assign, ":run", 0), ### Reset the run test variable
	  (try_begin),
		(ge, ":damage", "$decap_damage"), ### 30 Minimum damage required to decapitate an agent
		(assign, ":run", 1),
		
#	  (else_try),  ### If debugging mode is on, this bypasses the damage requirement check
#		  (eq,"$g_decapitations_debugging", 1),
#		  (assign, ":run", 1),
#		  (display_message, "@Decap minimum DMG req bypassed"),
	  (try_end),
	  (eq, ":run", 1),
	  
	  (store_agent_hit_points, ":hp", ":victim_agent", 1),
	  (val_add, ":hp", 10), ### 10 Victim must have the negative of this hp or below after hit for the script to move on (never put this value below 0 since the agent has to be absolutley positvely dead)!
	  (ge, ":damage", ":hp"),
	  
	  
	  ### Compare the hit position to the agent's position
      (agent_get_position, pos4, ":victim_agent"),
      (get_distance_between_positions, ":distance", pos4, pos5), 
	  (agent_get_horse, ":is_mounted", ":victim_agent"),
	  (try_begin), ### If the agent is on horseback, these values are used (note that these values will not be exactly correct if the horse is very large or very small)
		(ge, ":is_mounted", 0), ### Will be -1 if no horse is to be found, so anything above means that the agent is mounted
		(assign, ":min_distance", 240), ### Minimum distance from the agent's horse's hooves from which the hit is valid (240 is an approximate value)
		(assign, ":max_distance", 260), ### Maximum distance from the agent's horse's hooves to which the hit is valid (260 is an approximate value)
	  (else_try),  ### If the agent is on foot, these values are used
	    (assign, ":min_distance", 160), ### Minimum distance from the agent's feet from which the hit is valid (160 = slightly below the neck)
	    (assign, ":max_distance", 176), ### Maximum distance from the agent's feet to which the hit is valid (176 = near the nose)
	  (try_end),
      (is_between, ":distance", ":min_distance", ":max_distance"), ### Check to see if the hit is within the allowed area
	  
	  
	  (assign, ":run", 0), ### Default variable value before damage test
	  (try_begin),
		  (store_div, ":chance", ":damage", "$decap_damage_divider"), ### Chance of decap is damage / 4 right now. Lower this value for higher chances of decapitation (or press M+Right Ctrl for debug more if you just want to test easy decaps in-game).
		  
		  #(assign, reg1, ":chance"), #Debug messages
		  #(display_message, "@Decap chance is: {reg1}"),
		  (store_random_in_range, ":diceroll", 0, "$decap_randomizer"), ### Randomizer, 0-100
		  
		  #(assign, reg1, ":diceroll"), #Debug messages
		  #(display_message, "@Diceroll: {reg1}"),
		  (le, ":diceroll", ":chance"), ### ":diceroll" must be less than or equal to ":chance", if it is, decapitation occurs!
		  
		  (assign, ":run", 1), ### SUCCESS!
		  
#     (else_try),  ### If debugging mode is on, bypass chance calculation
#		  (eq,"$g_decapitations_debugging", 1),
#		  (assign, ":run", 1),
#		  (display_message, "@Decap chance calc bypassed"),
	  (try_end),  
	  (eq, ":run", 1), ### Time for the fun stuff!

	  ### Gender test for spawning the right head type
	  (assign, ":head_type", "itm_cut_off_head_male"),
	  (agent_get_troop_id, ":victim_troop", ":victim_agent"),
	  (try_begin),
	    (ge, ":victim_troop", 0),
		(troop_get_type,":victim_gender",":victim_troop"),
		(eq, ":victim_gender", 1),
		(assign, ":head_type", "itm_cut_off_head_female"),
	  (try_end),
	  
	  ### Randomize the spawned head's and/or helmet's position and orientation
	  (store_random_in_range, ":z_rotation", 0, 360),
	  (store_random_in_range, ":y_rotation", -60, 60),
	  (store_random_in_range, ":x_pos", -90, 90),
	  (store_random_in_range, ":y_pos", -90, 90),
	  (position_rotate_z, pos4,":z_rotation"),
	  (position_rotate_y, pos4,":y_rotation"),
	  (position_move_x, pos4, ":x_pos"),
	  (position_move_y, pos4, ":y_pos"),
	  (position_set_z_to_ground_level, pos4),
	  (position_move_z, pos4, 5),
	  (set_spawn_position, pos4),
	  (assign, ":prunetime", 360), ### This is the time in seconds before the spawned head or helmet gets pruned (removed). Recommended to keep it above 0 to make sure it gets removed eventually or when the scene resets, to prevent performance issues.
	  
	  #(spawn_item, ":head_type", 0, ":prunetime"), ### This is the old way of spawning the head on the ground with the helmet, disabled because of the new dynamic heads. You can comment away (disable) the dynamic heads spawning further down and uncomment this line for a less performance-needing approach (with no physics involved).
	  
	  ### Does the agent have a helmet or hat equipped?
      (agent_get_item_slot, ":item", ":victim_agent", 4), #head slot
      (try_begin),
         (ge, ":item", 1), ### Does it?
         (agent_unequip_item, ":victim_agent", ":item"), ### Yes it does. Unequip it to allow replacement by the invisible helmet further down
		 (try_begin),
			 ### Don't spawn items with "itp_attatch_armature" flag: rigging causes floating bugs
			 ### This would be much better to do with an item flag check, but I haven't found any way to do that
			 #(neq, ":item", "itm_with_itp_attatch_armature"),
			 #(neg|is_between,":item","start_of_itm_range_with_itp_attatch_armature","end_of_itm_range_with_itp_attatch_armature"),
			#(set_spawn_position, pos4),
			(spawn_item, ":item", 0, ":prunetime"), ### Spawns the agent's currently equipped headgear on the dropped head's position
		 (try_end),
      (try_end),
	  
	  (agent_equip_item, ":victim_agent", "itm_invisible_head"), ### Put an invisible helmet on the agent's head to "remove" it
	  
	  
	  (agent_get_position, pos4, ":victim_agent"), ### Refreshes the agent's position
	  (position_move_z, pos4, ":min_distance"), ### Move to the where the neck used to be attached
	  
	  
	  ### Blood effects! The last variable is the strength. Lower or increase it for more/less blood (or tweak the particle effects themselves in "module_particle_systems.py").
      (particle_system_burst, "psys_blood_decapitation", pos4, 40), 
	  (particle_system_burst, "psys_game_blood", pos4, 10),
	  (particle_system_burst, "psys_game_blood_2", pos4, 10),
	  
	  (play_sound_at_position, "snd_decapitation_battle", pos4), ### Play some nasty sounds
	  
	  
	  ### Dynamic head spawning! See the bottom of "module_scene_props.py" for physics-related options and more.
	  (position_move_z, pos4, 20),
	  (set_spawn_position, pos4),
	  (assign, ":head_type", "spr_head_dynamic_male"),
	  (try_begin), ### Gender check (for determening the type of head)
		(eq, ":victim_gender", 1),
		(assign, ":head_type", "spr_head_dynamic_female"),
	  (try_end),
	  (spawn_scene_prop, ":head_type"),
	  
		#Addition check if we should allow the message to appears
			(eq, "$allow_decap_mess", 1), #Possible script error

	  ### This below is for the text that shows up when somebody is decapitated.
	  
	  ### Who decapitated who?
		(agent_get_troop_id, ":attacker_troop", ":attacker_agent"),
		(str_store_troop_name, s0, ":attacker_troop"),

		(agent_get_troop_id, ":victim_troop", ":victim_agent"),
		(str_store_troop_name, s1, ":victim_troop"),

	  
	  ### Colour check (friend or foe?)
	  (get_player_agent_no, ":my_agent"),
	  (agent_get_team, ":my_team", ":my_agent"),
	  (agent_get_team, ":victim_team", ":victim_agent"),
	  (try_begin), ### Display it!
		  (neq, ":my_team", ":victim_team"),
		  (display_message, "@>>> {s0} decapitated {s1}!", 0xFF33DD11), ## Green
	  (else_try),
		  (display_message, "@>>> {s0} decapitated {s1}!", 0xFFFF4422), ## Red
	  (try_end),
   (try_end), #-- Decapitations END --#
   
   ]),



	#AI Sound horn!
			(0.0, 0.0, 2.0,
		[
			##(store_random_in_range, ":horn_chance", 0, 22),
			#(eq, ":horn_chance", 0),
		],
		[
			(call_script, "script_formation_ai_sound_horn"),
		]),
	#AI Sound horn end!










###Voice-over for Infantry, archers & Cavalry
		
		(0.0, 0.3, 0.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 29) #Everyone!
		],

		[
		(call_script, "script_identify_battle_voices_all")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 30) #Infantry
		],

		[
		(call_script, "script_identify_battle_voices_inf")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 31) #Archers
		],

		[
		(call_script, "script_identify_battle_voices_archers")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 32) #Cavalry
		],

		[
		(call_script, "script_identify_battle_voices_cav")
		]),
		###Voice-over for Infantry, archers & Cavalry	
		
		
		
					#####MUSICBOX SIEGE VARIANT
	(ti_after_mission_start, 0, ti_once, [ #680 #(ti_after_mission_start, 0, 680, [ #680
 #Obtained from Mod Options, affects mission templates, range: ALL SP Hostile music, co-op variant is additional_music_coop.
 (eq, "$additional_music", 1),
	],
		
  [
    ##(play_track, "track_silence", 1), #Stop current module track
		   (music_set_situation, mtf_sit_fight), #Field
   #(music_set_situation, mtf_sit_siege), #Siege probably don't use
	(assign, "$music_timer", 0), #Patch
  #Randomize chance is 1 in a 5 (20%)
  
  #Field related extend to sieges
  (store_random_in_range, ":randomizer", 0, 2), #50% Chance of randomization
  (try_begin),
  (eq, ":randomizer", 0),
  (store_random_in_range, ":euro_randomizernext", 1, 11),
  (store_random_in_range, ":medi_randomizer", 1, 6),
  (store_random_in_range, ":arab_randomizer", 1, 8),
  (assign, "$track_count_field_siege", ":euro_randomizernext"),
  (assign, "$track_count_field_medi_siege", ":medi_randomizer"),
  (assign, "$track_count_field_arabs_siege", ":arab_randomizer"),
  (try_end),
  #Field related extend to sieges
  ]),
	
	(0, 0, 3, [ #680 #(ti_after_mission_start, 0, 680, [ #680
	(eq, "$additional_music", 1),
	 #Obtained from Mod Options, affects mission templates, range: ALL SP Hostile music, co-op variant is additional_music_coop.
	],
		
  [
		  #(display_message, "@Executing music code"),
		  (store_mission_timer_b, ":time_msec"),
		  #(assign, reg10, ":time_msec"),
          #(str_clear, s10),
          #(str_store_string, s10, "@Mission timer B for music: {reg10}"),
		  #(display_message, s10),
			#if next action time is lower than current time, play the sound
			(ge, ":time_msec", "$music_timer"),
			(reset_mission_timer_b), #Resetting mission timer, too.
			(assign, "$music_timer", 0),# Resetting value when track ends.
		
  #Euro only
     (try_begin),
      (ge, "$track_count_field_siege", 11),
      (assign, "$track_count_field_siege", 1),
    (else_try),
      (val_add, "$track_count_field_siege", 1),
	  (ge, "$track_count_field_siege", 11),
	  (assign, "$track_count_field_siege", 1),
    (try_end),
  #Euro only
  
  #Mediterrain only
  
       (try_begin),
      (ge, "$track_count_field_medi_siege", 6),
      (assign, "$track_count_field_medi_siege", 1),
    (else_try),
      (val_add, "$track_count_field_medi_siege", 1),
	  (ge, "$track_count_field_medi_siege", 6),
	  (assign, "$track_count_field_medi_siege", 1),
    (try_end),
  #Mediterrain only
  
  
  #Arabs only

       (try_begin),
      (ge, "$track_count_field_arabs_siege", 8),
      (assign, "$track_count_field_arabs_siege", 1),
    (else_try),
      (val_add, "$track_count_field_arabs_siege", 1),
	  (ge, "$track_count_field_arabs_siege", 8),
	  (assign, "$track_count_field_arabs_siege", 1),
    (try_end),
	#Arabs only
  
  #Pause between music length in seconds
  #(val_add, "$music_timer", 2),# 5 seconds added
  #Pause between music length in seconds
  
	(party_get_current_terrain, ":current_terrain_main_party", "p_main_party"), #Co-Op variant of this trigger should use scenes in_between rather than terrain because player can't obtain terrain in co-op sessions.
	(try_begin),
	(this_or_next|eq, ":current_terrain_main_party", 1), #rt_mountain
	(this_or_next|eq, ":current_terrain_main_party", 2), #rt_steppe
	(eq, ":current_terrain_main_party", 10), #rt_steppe_forest
	#Begin mediterrain music 5 tracks total
	(try_begin),
	(eq, "$track_count_field_medi_siege", 1), #
	(play_track, "track_medib3", 2),
	(val_add, "$music_timer", 209),# 1 second added
	(else_try),
	
	(eq, "$track_count_field_medi_siege", 2), #
	(play_track, "track_medib4", 2),
	(val_add, "$music_timer", 237),#
	(else_try),
	
	(eq, "$track_count_field_medi_siege", 3), #
	(play_track, "track_medib5", 2),
	(val_add, "$music_timer", 229),#
	(else_try),

	(eq, "$track_count_field_medi_siege", 4), #
	(play_track, "track_medis1", 2),
	(val_add, "$music_timer", 195),#
	(else_try),
	(eq, "$track_count_field_medi_siege", 5), #
	(play_track, "track_medis2", 2),
	(val_add, "$music_timer", 66),#
	(try_end),
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 3), #rt_plain
	(this_or_next|eq, ":current_terrain_main_party", 11), #rt_forest
	(eq, ":current_terrain_main_party", 9), #rt_mountain_forest
	#Begin Euro Music
	(try_begin),
	(eq, "$track_count_field_siege", 1), #
	(play_track, "track_euros1", 2),
	(val_add, "$music_timer", 162),#
	(else_try),
	(eq, "$track_count_field_siege", 2), #
	(play_track, "track_euros2", 2),
	(val_add, "$music_timer", 221),#
	(else_try),
	
	(eq, "$track_count_field_siege", 3), #
	(play_track, "track_euros3", 2),
	(val_add, "$music_timer", 190),#
	(else_try),
	
	(eq, "$track_count_field_siege", 4), #
	(play_track, "track_euros4", 2),
	(val_add, "$music_timer", 317),#
	(else_try),
	
	(eq, "$track_count_field_siege", 5), #
	(play_track, "track_euros5", 2),
	(val_add, "$music_timer", 59),#
		(else_try),
	
	(eq, "$track_count_field_siege", 6), #
	(play_track, "track_euros6", 2),
	(val_add, "$music_timer", 59),#
		(else_try),
	
	(eq, "$track_count_field_siege", 7), #
	(play_track, "track_euros7", 2),
	(val_add, "$music_timer", 85),#
		(else_try),
	
	(eq, "$track_count_field_siege", 8), #
	(play_track, "track_euros8", 2),
	(val_add, "$music_timer", 82),#
		(else_try),
	
	(eq, "$track_count_field_siege", 9), #
	(play_track, "track_euros9", 2),
	(val_add, "$music_timer", 199),#
		(else_try),
	
	(eq, "$track_count_field_siege", 10), #
	(play_track, "track_euros10", 2),
	(val_add, "$music_timer", 281),#
	(try_end),
	
	
	
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 4), #rt_snow
	(this_or_next|eq, ":current_terrain_main_party", 12), #rt_snow_forest
	(eq, ":current_terrain_main_party", 7), #rt_bridge
	#Begin Euro Music
	(try_begin),
	(eq, "$track_count_field_siege", 1), #
	(play_track, "track_euros1", 2),
	(val_add, "$music_timer", 162),#
	(else_try),
	(eq, "$track_count_field_siege", 2), #
	(play_track, "track_euros2", 2),
	(val_add, "$music_timer", 221),#
	(else_try),
	
	(eq, "$track_count_field_siege", 3), #
	(play_track, "track_euros3", 2),
	(val_add, "$music_timer", 190),#
	(else_try),
	
	(eq, "$track_count_field_siege", 4), #
	(play_track, "track_euros4", 2),
	(val_add, "$music_timer", 317),#
	(else_try),
	
	(eq, "$track_count_field_siege", 5), #
	(play_track, "track_euros5", 2),
	(val_add, "$music_timer", 59),#
		(else_try),
	
	(eq, "$track_count_field_siege", 6), #
	(play_track, "track_euros6", 2),
	(val_add, "$music_timer", 59),#
		(else_try),
	
	(eq, "$track_count_field_siege", 7), #
	(play_track, "track_euros7", 2),
	(val_add, "$music_timer", 85),#
		(else_try),
	
	(eq, "$track_count_field_siege", 8), #
	(play_track, "track_euros8", 2),
	(val_add, "$music_timer", 82),#
		(else_try),
	
	(eq, "$track_count_field_siege", 9), #
	(play_track, "track_euros9", 2),
	(val_add, "$music_timer", 199),#
		(else_try),
	
	(eq, "$track_count_field_siege", 10), #
	(play_track, "track_euros10", 2),
	(val_add, "$music_timer", 281),#
	(try_end),
	
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 5), #rt_desert
	(eq, ":current_terrain_main_party", 13), #rt_desert_forest
	#Begin arab music
	(try_begin),
	(eq, "$track_count_field_arabs_siege", 1), #
	(play_track, "track_arabs1",  2),
	(val_add, "$music_timer", 198),#
	(else_try),
	(eq, "$track_count_field_arabs_siege", 2), #
	(play_track, "track_arabs2", 2),
	(val_add, "$music_timer", 112),#
	
	(else_try),
	(eq, "$track_count_field_arabs_siege", 3), #
	(play_track, "track_medis1", 2),
	(val_add, "$music_timer", 195),#
	(else_try),
	
	(eq, "$track_count_field_arabs_siege", 4), #
	(play_track, "track_arabs4", 2),
	(val_add, "$music_timer", 79),#
		(else_try),
	
	(eq, "$track_count_field_arabs_siege", 5), #
	(play_track, "track_arabs5", 2),
	(val_add, "$music_timer", 394),#
	
			(else_try),
	(eq, "$track_count_field_arabs_siege", 6), #
	(play_track, "track_arabs3", 2),
	(val_add, "$music_timer", 80),#
			(else_try),
	(eq, "$track_count_field_arabs_siege", 7), #
	(play_track, "track_medis2", 2),
	(val_add, "$music_timer", 66),#
	(try_end),
	(try_end),
	
  ]),
	
	#####MUSICBOX END
	
			#####Camera mode by Rubik None-Coop Version Begin
		(0, 0, 0, [(eq, "$extended_camera_mode", 1)],
  [
    (get_player_agent_no, ":player_agent"),
    (agent_get_look_position, pos1, ":player_agent"),
    (position_move_z, pos1, "$g_camera_z"),
    (position_move_y, pos1, "$g_camera_y"),
    (agent_get_horse, ":horse_agent", ":player_agent"),
    (try_begin),
      (ge, ":horse_agent", 0),
      (position_move_z, pos1, 80),
    (try_end),
    (mission_cam_set_position, pos1),
    (try_begin),
      (key_is_down, key_left_control),
      (assign, ":move_val", 50),
    (else_try),
      (assign, ":move_val", 10),
    (try_end),
    (try_begin),
      (key_clicked, key_up),
      (mission_cam_set_mode, 1),
      (val_add, "$g_camera_z", ":move_val"),
    (else_try),
      (key_clicked, key_down),
      (mission_cam_set_mode, 1),
      (val_sub, "$g_camera_z", ":move_val"),
    (else_try),
      (key_clicked, key_left),
      (mission_cam_set_mode, 1),
      (val_add, "$g_camera_y", ":move_val"),
    (else_try),
      (key_clicked, key_right),
      (mission_cam_set_mode, 1),
      (val_sub, "$g_camera_y", ":move_val"),
    (try_end),
    (try_begin),
      (this_or_next|game_key_clicked, gk_view_char),
      (this_or_next|game_key_clicked, gk_zoom),
      (game_key_clicked, gk_cam_toggle),
      (mission_cam_set_mode, 0),
    (try_end),
  ]),
  #####Camera mode by Rubik None-Coop Version End
		
		
###########Torch by troycall/Envious Arm begin

																	#(-25.0, 0.0, 0.0, #Enabling this forces random chance to be 100%
																	#(ti_on_agent_spawn, 0, 0, #Enabling this forces random chance to be 100%
																	(20, 0, ti_once, #Proper one, but reinforcements do not get assigned torches.
        [
          (mission_tpl_are_all_agents_spawned), #From VC Header_Operations to prevent weird behavior.
          (is_currently_night) #Check if currently night time
        ],
        [

		  ####DEFAULT
		   #(try_for_agents, ":agent"),
            #(agent_get_wielded_item, ":item", ":agent", 1),
            #(gt, ":item", -1),
            #(agent_unequip_item, ":agent", ":item"),
            #(agent_equip_item, ":agent", "itm_torch"),
            #(agent_set_wielded_item, ":agent", "itm_torch"),           
          #(try_end),
		  ####END DEFAULT
		  
		  (try_for_agents, ":agent"), #Try for agents...
		  #Extension
		  (agent_is_alive, ":agent"), #For performance reasons
		  #End
		  (agent_is_human, ":agent"), #Performance
          (agent_is_non_player, ":agent"), #Uncommenting this includes player on spawning with torch, may be necessary to uncomment at module_coop_mission_templates.
		  


		 ##########Default Order
		 #######		  (agent_is_human, ":agent"), #Performance
         #######(agent_is_non_player, ":agent"), #Uncommenting this includes player on spawning with torch, may be necessary to uncomment at module_coop_mission_templates.
		 #######
		 ########Extension
		 #######(agent_is_active, ":agent"), #For performance reasons
		 #######(agent_is_alive, ":agent"), #For performance reasons
		 ########End
		  ############
		  		  
				#  (try_begin),
				  
		#		          (agent_get_wielded_item, ":rhand", ":agent", 0),  #Right hand
		#  (assign, ":rhanditem", 0), # Preparing local variable.
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000000000100),
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000004000000),
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000008000000),
		#  (neg|item_has_capability, ":rhanditem", 0x0000000170000000),
		# 

		  #
		  
          #BEGIN DEBUG
          #(assign, reg10, ":agent"),
          #(str_clear, s10),
          #(str_store_string, s10, "@New agent: {reg10}"),
          #END DEBUG
		  #(agent_get_wielded_item, ":rhanditem", ":agent", 0),  #Obtain right hand item
         (agent_get_wielded_item, ":rhanditem", ":agent", 0),  #Obtain right hand item
          (agent_get_wielded_item, ":item", ":agent", 1), # Left hand: shield or -1
          #BEGIN DEBUG
          #(assign, reg10, ":item"),
          #(str_store_string, s10, "@{s10}. LH: {reg10}"),
		  #(display_message, "@Main block Phase A finalized"),
          #END DEBUG
		  #(item_get_type, ":type", ":rhanditem"), #If right hand item is polearm, stop reading rest of code.
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_club_with_spike_head", "itm_wooden_shield"),
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_light_lance", "itm_wooden_shield"),
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_light_lance", "itm_wooden_shield"),
          (try_begin),
		  (neg|is_between, ":rhanditem", "itm_club_with_spike_head", "itm_wooden_shield"),
		  (neg|is_between, ":rhanditem", "itm_lance_banner_jer", "itm_cross_end"), #Update item slots
		  #(neg|troop_has_item_equipped, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		  #(neq, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		  
		# (neg|eq, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		    (gt, ":item", -1), #Check if the agent wields any item in the left hand, this or next.
            #(neq, ":item", -1),# Check if the agent wields any item in the left hand
            (neq, ":item", "itm_torch"), #If agent is using torch, ignore him.
            #(display_message, "@PASSED neg tests"), #Debug message

			
            (store_random_in_range, ":chance", 1, 101), # Chance of item being assigned
            (try_begin),
			  (le, ":chance", "$torch_chance"), #25% = 25
				#lt           = neg | ge # less than		-- (lt,<value>,<value>),
				#neq          = neg | eq # not equal to		-- (neq,<value>,<value>),
				#le           = neg | gt # less or equal to	-- (le,<value>,<value>),
              (agent_unequip_item, ":agent", ":item"),
			  
              #BEGIN DEBUG
              #(str_store_item_name, s11, ":item"),
              #(str_store_string, s10, "@{s10}. Removed item: {s11}"),
			  #(display_message, "@(agent_unequip_item, :agent, :item PASSED."),
              #END DEBUG

               
                (agent_equip_item, ":agent", "itm_torch"), #Tell agent to equip the item
                 #(display_message, "@(agent_equip_item, :agent, :item PASSED."),
                  (agent_set_wielded_item, ":agent", "itm_torch"), #Required for infantry only, cavarly can work without it.
                  #(display_message, "@(agent_set_wielded_item, :agent, :item PASSED."),
                 
                 
                  #BEGIN DEBUG
                #(else_try),
                  #(str_store_string, s10, "@{s10}. Failed random chance."),
                (try_end),
               
              #(else_try),
                #(str_store_string, s10, "@{s10}. Invalid agent for torch"),
              (try_end),
             
              #(display_message, s10),
			  (try_end),
              #END DEBUG
			#  (try_end),
      ]),
	  
###########Torch by troycall/Envious Arm end


		(-22.0, 0.0, 0.0,
		[
			(display_message, "str_cant_use_inventory_now")
		],

		[]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(call_script, "script_troop_agent_set_banner", "tableau_game_troop_label_banner", ":trigger_param_1", ":troop_id_trigger_param_1")
		]),

		(-21.0, 0.0, 0.0,
		[],

		[
			(question_box, "str_do_you_want_to_retreat")
		]),

		(-8.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(eq, ":trigger_param_1", 0),
			(jump_to_menu, "mnu_collect_taxes_failed"),
			(finish_mission)
		]),

		(-21.0, 0.0, 0.0,
		[
			(display_message, "str_cannot_leave_now")
		],

		[]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_change_banners_and_chest")
		]),

		(0.0, 0.0, ti_once,
		[],

		[
					(try_begin),
			(eq, "$additional_music", 0),
			(call_script, "script_music_set_situation_with_culture", 1024),
			(try_end),
		]),

		(1.0, 4.0, ti_once,
		[
			(this_or_next|main_hero_fallen),
			(num_active_teams_le, 1)
		],

		[
			(try_begin),
				(main_hero_fallen),
				(jump_to_menu, "mnu_collect_taxes_failed"),
			(else_try),
				(jump_to_menu, "mnu_collect_taxes_rebels_killed"),
			(try_end),
			(finish_mission)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_set_matching_sexy_boots", ":trigger_param_1")
		]),

			(0.0, 0.0, 0.0,
		[
			(eq, "$sp_shield_bash", 1),
			(game_key_is_down, 7),
			(game_key_clicked, 6),
			(neg|main_hero_fallen),
		],

		[
		(call_script, "script_shield_bash"),
		]),

			##AI kicking begin
		   (2, 0, 3, #AI kicking
       [], [
	(get_player_agent_no,":player"),
	(try_for_agents, ":agent"),
		(neq, ":agent", ":player"),
		(agent_is_alive, ":agent"),
		(neq, ":agent", -1),
		(agent_is_human, ":agent"),#Only humans can kick....FOR NOW
		(agent_is_active, ":agent"),
		(agent_slot_eq, ":agent", slot_agent_is_running_away, 0),#Isn't fleeing the battle.
		##He's an eligible human.  Now see if he's in a position to kick.
		(agent_get_attack_action, ":attack_action", ":agent"), #returned values: free = 0, readying_attack = 1, releasing_attack = 2, completing_attack_after_hit = 3, attack_parried = 4, reloading = 5, after_release = 6, cancelling_attack = 7
		(agent_get_defend_action, ":defend_action", ":agent"),#
		(this_or_next|eq,":attack_action",4),#Just got parried
		(this_or_next|eq,":defend_action",1),#Parrying an enemy
		##So he'll only try to kick if he just parried an enemy attack, or his own attack just got parried.
		(agent_get_team, ":team", ":agent"),
		(assign, ":maximum_distance", 100),
		#Target Acquisition
		(agent_ai_get_look_target,":suspect",":agent"),
		(gt,":suspect",0),#Make sure there is someone.
		(agent_is_alive, ":suspect"),
		(agent_is_human, ":suspect"),#Only kick humans
		(agent_is_active, ":suspect"),
		(agent_get_team, ":suspect_team", ":suspect"),
		(neq, ":suspect_team", ":team"),#Friends don't let friends kick friends.
		(agent_get_position, pos1, ":agent"),#Distance check
		(agent_get_position, pos2, ":suspect"),
		(neg|position_is_behind_position, pos2, pos1), #Suspect can't be behind kicker.
		(get_distance_between_positions, ":distance", pos1, pos2),
		(le, ":distance", ":maximum_distance"),
		#Check chance
		(store_random_in_range,":kickchance", 1, 10),
		(try_begin),
			(eq,":kickchance",1), #10% chance per check
				#(display_message, "@Agent kicks."),
				(agent_set_animation, ":agent", "anim_prepare_kick_0"),
				(agent_deliver_damage_to_agent, ":agent", ":suspect", 3),
				(agent_set_animation, ":suspect", "anim_strike3_abdomen_front"),#Get Kicked
			(try_end),
	   (try_end),]),
	   
	   ##AI Kicking end
		
		
		(0.25, 0.0, 4.0,
		[
			(eq, "$sp_shield_bash_ai", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(neq, ":var_2", ":player_agent_no"),
				(agent_is_alive, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_active, ":var_2"), #Test to see if it stops AI from shield bashing (new addition v3)
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(store_skill_level, ":skill_level_shield_troop_id_var_2", "skl_shield", ":troop_id_var_2"),
				(store_proficiency_level, ":proficiency_level_troop_id_var_2_0", ":troop_id_var_2", 0),
				(ge, ":skill_level_shield_troop_id_var_2", 4),
				(ge, ":proficiency_level_troop_id_var_2_0", 200),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(le, ":horse_var_2", 0),
				(try_begin),
					(neg|agent_slot_ge, ":var_2", 50, 1),
					(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
					(agent_get_wielded_item, ":wielded_item_var_2_1", ":var_2", 1),
					(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
					(eq, ":type_wielded_item_var_2_1", 7),
					(agent_get_attack_action, ":attack_action_var_2", ":var_2"),
					(eq, ":attack_action_var_2", 0),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_position, 1, ":var_2"),
					(assign, ":value", -1),
					(assign, ":value_2", 125),
					(try_for_agents, ":var_13"),
						(agent_is_alive, ":var_13"),
						(agent_is_human, ":var_13"),
						(agent_get_position, 2, ":var_13"),
						(neg|position_is_behind_position, 2, 1),
						(agent_get_team, ":team_var_13", ":var_13"),
						(neq, ":team_var_13", ":team_var_2"),
						(try_begin),
							(eq, ":team_var_2", 0),
							(assign, ":value_3", 2),
						(else_try),
							(eq, ":team_var_2", 2),
							(assign, ":value_3", 0),
						(else_try),
							(eq, ":team_var_2", 1),
							(assign, ":value_3", 3),
						(else_try),
							(eq, ":team_var_2", 3),
							(assign, ":value_3", 1),
						(try_end),
						(neq, ":team_var_13", ":value_3"),
						(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
						(le, ":distance_between_positions_1_2", ":value_2"),
						(assign, ":value_2", ":distance_between_positions_1_2"),
						(assign, ":value", ":var_13"),
					(try_end),
					(ge, ":value", 0),
					(agent_get_horse, ":horse_var_2", ":value"),
					(eq, ":horse_var_2", -1),
					(store_random_in_range, ":random_in_range_15_26", 15, 26),
					(agent_set_slot, ":var_2", 50, ":random_in_range_15_26"),
					(agent_set_animation, ":var_2", "anim_shield_bash"),
					(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
					(troop_get_type, ":type_wielded_item_var_2_1", ":troop_id_var_2"),
					(try_begin),
						(eq, ":type_wielded_item_var_2_1", 0),
						(agent_play_sound, ":var_2", "snd_man_yell"),
					(else_try),
						(eq, ":type_wielded_item_var_2_1", 1),
						(agent_play_sound, ":var_2", "snd_woman_yell"),
					(try_end),
					(agent_play_sound, ":value", "snd_wooden_hit_low_armor_high_damage"),
					(agent_get_defend_action, ":attack_action_var_2", ":value"),
					(try_begin),
						(eq, ":attack_action_var_2", 2),
						(neg|position_is_behind_position, 1, 2),
						(agent_get_wielded_item, ":wielded_item_var_2_1", ":value", 1),
						(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
						(eq, ":type_wielded_item_var_2_1", 7),
						(agent_set_animation, ":value", "anim_shield_bash"),
					(else_try),
						(agent_set_animation, ":value", "anim_shield_strike"),
					(try_end),
				(try_end),
				(agent_get_slot, ":var_2_50", ":var_2", 50),
				(val_sub, ":var_2_50", 1),
				(val_max, ":var_2_50", 0),
				(agent_set_slot, ":var_2", 50, ":var_2_50"),
			(try_end)
		])
	] + crouching_triggers ),

	("lead_charge", mtf_battle_mode, 8,
	"You lead your men to battle.",
	[(1, mtef_defenders|mtef_team_0, 0, aif_start_alarmed, 12, []),
	(0, mtef_defenders|mtef_team_0, 0, aif_start_alarmed, 0, []),
	(4, mtef_attackers|mtef_team_1, 0, aif_start_alarmed, 12, []),
	(4, mtef_attackers|mtef_team_1, 0, aif_start_alarmed, 0, [])],
	[
	
    (7, 0, ti_once,
    [],
    [
	(call_script, "script_assign_traits"),
    ]),


    (0, 0, 1, 
    [
    ],
    [
	(call_script, "script_stumbling"),
    ]),

#    (1, 0, 5, 
#    [
#      (game_key_is_down, 1),
#      (neg|key_is_down, 42),
#      (neg|main_hero_fallen),
#    ],
#    [
#      (get_player_agent_no, ":var0"),
#      (agent_get_horse, ":var1", ":var0"),
#      (eq, ":var1", -1),
#      (store_skill_level, ":var2", "skl_athletics", "trp_player"),
#      (store_random_in_range, ":var3", 0, 100),
#      (try_begin),
#        (val_mul, ":var2", 3),
#        (store_sub, ":var4", 23, ":var2"),
#        (lt, ":var3", ":var4"),
#        (agent_set_animation, ":var0", "anim_strike_fall_back_rise"),
#        (display_message, "@You stumble and fall!", 0x00FF0000),
#        (try_begin),
#          (eq, "$character_gender", 0),
#          (agent_play_sound, ":var0", "snd_man_yell"),
#        (else_try),
#          (eq, "$character_gender", 1),
#          (agent_play_sound, ":var0", "snd_woman_yell"),
#        (else_try),
#          (agent_play_sound, ":var0", "snd_man_yell"),
#        (try_end),
#      (try_end),
#    ]),






#Decapitations next level right here.
(ti_on_agent_hit, 0, 0, [(eq, "$dynamic_decap", 1),],
[
   (store_trigger_param_1, ":victim_agent"),
   (store_trigger_param_2, ":attacker_agent"),
   (store_trigger_param_3, ":damage"),
   (assign, ":attacker_item", reg0), ### Transfer the item ID to make sure it dosn't change while the script is running
   (copy_position, pos5, pos0), ### Transfer the position of the hit to make sure it dosn't change while the script is running
   #(neq, ":victim_agent", -1),
   (try_begin), #-- Decapitations --#
   	#(agent_is_alive, ":victim_agent"), #Test fix
	#(neq, ":victim_agent", 0), #Test fix
	#(agent_is_active, ":victim_agent"), #Test fix
      (agent_is_human, ":victim_agent"),
	  (ge, ":attacker_item", 0),
	  (assign, ":run", 0), ### Reset the run test variable
#	  (try_begin), ### Special weapons that can decap, ovevrrides the below conditions
#		  (this_or_next|eq, ":attacker_item", "itm_supercrossbow"),
#		  (eq, ":attacker_item", "itm_supersledge"),
#		  (assign, ":run", 1),
	  (try_begin),
		  #(neq, ":attacker_item", "itm_mace_1"), ### List of weapons that cannot decapitate
		  #(neq, ":attacker_item", "itm_mace_2"), ### This would be easier to do with a preperty check (for damage type), but I don't know if that is possible or not
		  #(neq, ":attacker_item", "itm_mace_3"),
		  #(neq, ":attacker_item", "itm_staff"), #Keeping active incase of script errors
		  (agent_get_action_dir, ":attack_dir", ":attacker_agent"), ### Makes sure the attack is either a left or right swing
		  (this_or_next|eq, ":attack_dir", 1), ### Right swing
		  (eq, ":attack_dir", 2), ### Left swing
		  (assign, ":run", 1),
	  (try_end),
	  (eq, ":run", 1), ### One of the checks were true, continue to run script
	  #(assign, reg1, ":damage"), #Debug messages
	  #(display_message, "@Damage: {reg1}"),
	  
	  (assign, ":run", 0), ### Reset the run test variable
	  (try_begin),
		(ge, ":damage", "$decap_damage"), ### 30 Minimum damage required to decapitate an agent
		(assign, ":run", 1),
		
#	  (else_try),  ### If debugging mode is on, this bypasses the damage requirement check
#		  (eq,"$g_decapitations_debugging", 1),
#		  (assign, ":run", 1),
#		  (display_message, "@Decap minimum DMG req bypassed"),
	  (try_end),
	  (eq, ":run", 1),
	  
	  (store_agent_hit_points, ":hp", ":victim_agent", 1),
	  (val_add, ":hp", 10), ### 10 Victim must have the negative of this hp or below after hit for the script to move on (never put this value below 0 since the agent has to be absolutley positvely dead)!
	  (ge, ":damage", ":hp"),
	  
	  
	  ### Compare the hit position to the agent's position
      (agent_get_position, pos4, ":victim_agent"),
      (get_distance_between_positions, ":distance", pos4, pos5), 
	  (agent_get_horse, ":is_mounted", ":victim_agent"),
	  (try_begin), ### If the agent is on horseback, these values are used (note that these values will not be exactly correct if the horse is very large or very small)
		(ge, ":is_mounted", 0), ### Will be -1 if no horse is to be found, so anything above means that the agent is mounted
		(assign, ":min_distance", 240), ### Minimum distance from the agent's horse's hooves from which the hit is valid (240 is an approximate value)
		(assign, ":max_distance", 260), ### Maximum distance from the agent's horse's hooves to which the hit is valid (260 is an approximate value)
	  (else_try),  ### If the agent is on foot, these values are used
	    (assign, ":min_distance", 160), ### Minimum distance from the agent's feet from which the hit is valid (160 = slightly below the neck)
	    (assign, ":max_distance", 176), ### Maximum distance from the agent's feet to which the hit is valid (176 = near the nose)
	  (try_end),
      (is_between, ":distance", ":min_distance", ":max_distance"), ### Check to see if the hit is within the allowed area
	  
	  
	  (assign, ":run", 0), ### Default variable value before damage test
	  (try_begin),
		  (store_div, ":chance", ":damage", "$decap_damage_divider"), ### Chance of decap is damage / 4 right now. Lower this value for higher chances of decapitation (or press M+Right Ctrl for debug more if you just want to test easy decaps in-game).
		  
		  #(assign, reg1, ":chance"), #Debug messages
		  #(display_message, "@Decap chance is: {reg1}"),
		  (store_random_in_range, ":diceroll", 0, "$decap_randomizer"), ### Randomizer, 0-100
		  
		  #(assign, reg1, ":diceroll"), #Debug messages
		  #(display_message, "@Diceroll: {reg1}"),
		  (le, ":diceroll", ":chance"), ### ":diceroll" must be less than or equal to ":chance", if it is, decapitation occurs!
		  
		  (assign, ":run", 1), ### SUCCESS!
		  
#     (else_try),  ### If debugging mode is on, bypass chance calculation
#		  (eq,"$g_decapitations_debugging", 1),
#		  (assign, ":run", 1),
#		  (display_message, "@Decap chance calc bypassed"),
	  (try_end),  
	  (eq, ":run", 1), ### Time for the fun stuff!

	  ### Gender test for spawning the right head type
	  (assign, ":head_type", "itm_cut_off_head_male"),
	  (agent_get_troop_id, ":victim_troop", ":victim_agent"),
	  (try_begin),
	    (ge, ":victim_troop", 0),
		(troop_get_type,":victim_gender",":victim_troop"),
		(eq, ":victim_gender", 1),
		(assign, ":head_type", "itm_cut_off_head_female"),
	  (try_end),
	  
	  ### Randomize the spawned head's and/or helmet's position and orientation
	  (store_random_in_range, ":z_rotation", 0, 360),
	  (store_random_in_range, ":y_rotation", -60, 60),
	  (store_random_in_range, ":x_pos", -90, 90),
	  (store_random_in_range, ":y_pos", -90, 90),
	  (position_rotate_z, pos4,":z_rotation"),
	  (position_rotate_y, pos4,":y_rotation"),
	  (position_move_x, pos4, ":x_pos"),
	  (position_move_y, pos4, ":y_pos"),
	  (position_set_z_to_ground_level, pos4),
	  (position_move_z, pos4, 5),
	  (set_spawn_position, pos4),
	  (assign, ":prunetime", 360), ### This is the time in seconds before the spawned head or helmet gets pruned (removed). Recommended to keep it above 0 to make sure it gets removed eventually or when the scene resets, to prevent performance issues.
	  
	  #(spawn_item, ":head_type", 0, ":prunetime"), ### This is the old way of spawning the head on the ground with the helmet, disabled because of the new dynamic heads. You can comment away (disable) the dynamic heads spawning further down and uncomment this line for a less performance-needing approach (with no physics involved).
	  
	  ### Does the agent have a helmet or hat equipped?
      (agent_get_item_slot, ":item", ":victim_agent", 4), #head slot
      (try_begin),
         (ge, ":item", 1), ### Does it?
         (agent_unequip_item, ":victim_agent", ":item"), ### Yes it does. Unequip it to allow replacement by the invisible helmet further down
		 (try_begin),
			 ### Don't spawn items with "itp_attatch_armature" flag: rigging causes floating bugs
			 ### This would be much better to do with an item flag check, but I haven't found any way to do that
			 #(neq, ":item", "itm_with_itp_attatch_armature"),
			 #(neg|is_between,":item","start_of_itm_range_with_itp_attatch_armature","end_of_itm_range_with_itp_attatch_armature"),
			#(set_spawn_position, pos4),
			(spawn_item, ":item", 0, ":prunetime"), ### Spawns the agent's currently equipped headgear on the dropped head's position
		 (try_end),
      (try_end),
	  
	  (agent_equip_item, ":victim_agent", "itm_invisible_head"), ### Put an invisible helmet on the agent's head to "remove" it
	  
	  
	  (agent_get_position, pos4, ":victim_agent"), ### Refreshes the agent's position
	  (position_move_z, pos4, ":min_distance"), ### Move to the where the neck used to be attached
	  
	  
	  ### Blood effects! The last variable is the strength. Lower or increase it for more/less blood (or tweak the particle effects themselves in "module_particle_systems.py").
      (particle_system_burst, "psys_blood_decapitation", pos4, 40), 
	  (particle_system_burst, "psys_game_blood", pos4, 10),
	  (particle_system_burst, "psys_game_blood_2", pos4, 10),
	  
	  (play_sound_at_position, "snd_decapitation_battle", pos4), ### Play some nasty sounds
	  
	  
	  ### Dynamic head spawning! See the bottom of "module_scene_props.py" for physics-related options and more.
	  (position_move_z, pos4, 20),
	  (set_spawn_position, pos4),
	  (assign, ":head_type", "spr_head_dynamic_male"),
	  (try_begin), ### Gender check (for determening the type of head)
		(eq, ":victim_gender", 1),
		(assign, ":head_type", "spr_head_dynamic_female"),
	  (try_end),
	  (spawn_scene_prop, ":head_type"),
	  
		#Addition check if we should allow the message to appears
			(eq, "$allow_decap_mess", 1), #Possible script error

	  ### This below is for the text that shows up when somebody is decapitated.
	  
	  ### Who decapitated who?
		(agent_get_troop_id, ":attacker_troop", ":attacker_agent"),
		(str_store_troop_name, s0, ":attacker_troop"),

		(agent_get_troop_id, ":victim_troop", ":victim_agent"),
		(str_store_troop_name, s1, ":victim_troop"),

	  
	  ### Colour check (friend or foe?)
	  (get_player_agent_no, ":my_agent"),
	  (agent_get_team, ":my_team", ":my_agent"),
	  (agent_get_team, ":victim_team", ":victim_agent"),
	  (try_begin), ### Display it!
		  (neq, ":my_team", ":victim_team"),
		  (display_message, "@>>> {s0} decapitated {s1}!", 0xFF33DD11), ## Green
	  (else_try),
		  (display_message, "@>>> {s0} decapitated {s1}!", 0xFFFF4422), ## Red
	  (try_end),
   (try_end), #-- Decapitations END --#
   
   ]),



	#AI Sound horn!
			(0.0, 0.0, 2.0,
		[
			##(store_random_in_range, ":horn_chance", 0, 22),
			#(eq, ":horn_chance", 0),
		],
		[
			(call_script, "script_formation_ai_sound_horn"),
		]),
	#AI Sound horn end!










	
#	      (15, 0, ti_once, [
#	  
#	  ], [
#	  (try_for_agents, ":unused"),
#	  (display_message, "@Counting agents using RGL_LOG.txt"),
#	  (try_end),
#	  ]),
	
		##################################################
##### troop_ratio_bar
##################################################
      (0, 0, ti_once, [
	  (eq, "$use_troopbars", 1),
	  ], [
	  (start_presentation, "prsnt_troop_ratio_bar"),
	  ]),
##################################################
##### troop_ratio_bar
##################################################
		
			#####Camera mode by Rubik None-Coop Version Begin
		(0, 0, 0, [(eq, "$extended_camera_mode", 1)],
  [
    (get_player_agent_no, ":player_agent"),
    (agent_get_look_position, pos1, ":player_agent"),
    (position_move_z, pos1, "$g_camera_z"),
    (position_move_y, pos1, "$g_camera_y"),
    (agent_get_horse, ":horse_agent", ":player_agent"),
    (try_begin),
      (ge, ":horse_agent", 0),
      (position_move_z, pos1, 80),
    (try_end),
    (mission_cam_set_position, pos1),
    (try_begin),
      (key_is_down, key_left_control),
      (assign, ":move_val", 50),
    (else_try),
      (assign, ":move_val", 10),
    (try_end),
    (try_begin),
      (key_clicked, key_up),
      (mission_cam_set_mode, 1),
      (val_add, "$g_camera_z", ":move_val"),
    (else_try),
      (key_clicked, key_down),
      (mission_cam_set_mode, 1),
      (val_sub, "$g_camera_z", ":move_val"),
    (else_try),
      (key_clicked, key_left),
      (mission_cam_set_mode, 1),
      (val_add, "$g_camera_y", ":move_val"),
    (else_try),
      (key_clicked, key_right),
      (mission_cam_set_mode, 1),
      (val_sub, "$g_camera_y", ":move_val"),
    (try_end),
    (try_begin),
      (this_or_next|game_key_clicked, gk_view_char),
      (this_or_next|game_key_clicked, gk_zoom),
      (game_key_clicked, gk_cam_toggle),
      (mission_cam_set_mode, 0),
    (try_end),
  ]),
  #####Camera mode by Rubik None-Coop Version End
		
	#####Engage SP Music Tracks FIELD BATTLES
	#####MUSICBOX
	(ti_before_mission_start, 0, ti_once, [ #680 #(ti_after_mission_start, 0, 680, [ #680
	#(call_script, "script_sa_mod_replacement_materials"),
	(eq, "$additional_music", 1), #Obtained from Mod Options, affects mission templates, range: ALL SP Hostile music, co-op variant is additional_music_coop.
	],
		
  [
   # #(play_track, "track_silence", 1), #No longer needed.
   (music_set_situation, mtf_sit_fight), #Field
   #(music_set_situation, mtf_sit_siege), #Siege probably don't use
   	   #(music_set_situation, mtf_sit_fight), #Field
   #(music_set_situation, mtf_sit_siege), #Siege probably don't use
	(assign, "$music_timer", 0), #Patch
	
  #Randomize chance is 1 in a 5 (20%)
  (store_random_in_range, ":randomizer", 0, 2), #50% Chance of randomization
  (try_begin),
  (eq, ":randomizer", 0),
  (store_random_in_range, ":euro_randomizernext", 1, 12),
  (store_random_in_range, ":medi_randomizer", 1, 8),
  (store_random_in_range, ":arab_randomizer", 1, 9),
  (assign, "$track_count_field", ":euro_randomizernext"),
  (assign, "$track_count_field_medi", ":medi_randomizer"),
  (assign, "$track_count_field_arabs", ":arab_randomizer"),
  (try_end),
  #Field related extend to sieges
  ]),
	
	(0, 0, 3, [ #680 #(ti_after_mission_start, 0, 680, [ #680
	(eq, "$additional_music", 1), #Obtained from Mod Options, affects mission templates, range: ALL SP Hostile music, co-op variant is additional_music_coop.
	],
		
  [
		  #(display_message, "@Executing music code"),
		  (store_mission_timer_b, ":time_msec"),
		  #(assign, reg10, ":time_msec"),
          #(str_clear, s10),
          #(str_store_string, s10, "@Mission timer B for music: {reg10}"),
		  #(display_message, s10),
			#if next action time is lower than current time, play the sound
			(ge, ":time_msec", "$music_timer"),
			(reset_mission_timer_b), #Resetting mission timer, too.
			(assign, "$music_timer", 0),# Resetting value when track ends.
		
  #Euro only
     (try_begin),
      (ge, "$track_count_field", 11),
      (assign, "$track_count_field", 1),
    (else_try),
      (val_add, "$track_count_field", 1),
	  (ge, "$track_count_field", 11),
	  (assign, "$track_count_field", 1),
    (try_end),
  #Euro only
  
  #Mediterrain only
  
       (try_begin),
      (ge, "$track_count_field_medi", 8),
      (assign, "$track_count_field_medi", 1),
    (else_try),
      (val_add, "$track_count_field_medi", 1),
	  (ge, "$track_count_field_medi", 8),
	  (assign, "$track_count_field_medi", 1),
    (try_end),
  #Mediterrain only
  
  
  #Arabs only

       (try_begin),
      (ge, "$track_count_field_arabs", 8),
      (assign, "$track_count_field_arabs", 1),
    (else_try),
      (val_add, "$track_count_field_arabs", 1),
	  (ge, "$track_count_field_arabs", 8),
	  (assign, "$track_count_field_arabs", 1),
    (try_end),
	#Arabs only
  
  #Pause between music length in seconds
  #(val_add, "$music_timer", 2),# 5 seconds added
  #Pause between music length in seconds
  
	(party_get_current_terrain, ":current_terrain_main_party", "p_main_party"), #Co-Op variant of this trigger should use scenes in_between rather than terrain because player can't obtain terrain in co-op sessions.
	(try_begin),
	(this_or_next|eq, ":current_terrain_main_party", 1), #rt_mountain
	(this_or_next|eq, ":current_terrain_main_party", 2), #rt_steppe
	(eq, ":current_terrain_main_party", 10), #rt_steppe_forest
	#Begin mediterrain music 5 tracks total
	(try_begin),
	(eq, "$track_count_field_medi", 1), #
	(play_track, "track_medib1", 2),
	(val_add, "$music_timer", 206),# 1 second added
	(else_try),
	
	(eq, "$track_count_field_medi", 2), #
	(play_track, "track_medib3", 2),
	(val_add, "$music_timer", 209),#
	(else_try),
	
	(eq, "$track_count_field_medi", 3), #
	(play_track, "track_medib4", 2),
	(val_add, "$music_timer", 237),#
	(else_try),

	(eq, "$track_count_field_medi", 4), #
	(play_track, "track_medib5", 2),
	(val_add, "$music_timer", 229),#
	(else_try),
	(eq, "$track_count_field_medi", 5), #
	(play_track, "track_medib6", 2),
	(val_add, "$music_timer", 127),#
	(else_try),
	(eq, "$track_count_field_medi", 6), #
	(play_track, "track_medib7", 2),
	(val_add, "$music_timer", 161),#
	
	(else_try),
	(eq, "$track_count_field_medi", 7), #
	(play_track, "track_medib8", 2),
	(val_add, "$music_timer", 250),#
	(try_end),
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 3), #rt_plain
	(this_or_next|eq, ":current_terrain_main_party", 11), #rt_forest
	(eq, ":current_terrain_main_party", 9), #rt_mountain_forest
	#Begin Euro Music
	(try_begin),
	(eq, "$track_count_field", 1), #
	(play_track, "track_eurob1", 2),
	(val_add, "$music_timer", 319),#
	(else_try),
	(eq, "$track_count_field", 2), #
	(play_track, "track_eurob2", 2),
	(val_add, "$music_timer", 279),#
	(else_try),
	
	(eq, "$track_count_field", 3), #
	(play_track, "track_eurob3", 2),
	(val_add, "$music_timer", 248),#
	(else_try),
	
	(eq, "$track_count_field", 4), #
	(play_track, "track_eurob4", 2),
	(val_add, "$music_timer", 332),#
	(else_try),
	
	(eq, "$track_count_field", 5), #
	(play_track, "track_eurob5", 2),
	(val_add, "$music_timer", 93),#
		(else_try),
	
	(eq, "$track_count_field", 6), #
	(play_track, "track_eurob6", 2),
	(val_add, "$music_timer", 76),#
		(else_try),
	
	(eq, "$track_count_field", 7), #
	(play_track, "track_eurob7", 2),
	(val_add, "$music_timer", 80),#
		(else_try),
	
	(eq, "$track_count_field", 8), #
	(play_track, "track_eurob8", 2),
	(val_add, "$music_timer", 58),#
		(else_try),
	
	(eq, "$track_count_field", 9), #
	(play_track, "track_eurob9", 2),
	(val_add, "$music_timer", 58),#
		(else_try),
	
#	(eq, "$track_count_field", 10), #
#	(play_track, "track_eurob10"),
#	(val_add, "$music_timer", 123),#
#		(else_try),
	
	(eq, "$track_count_field", 10), #
	(play_track, "track_eurob11", 2),
	(val_add, "$music_timer", 335),#
	(try_end),
	
	
	
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 4), #rt_snow
	(this_or_next|eq, ":current_terrain_main_party", 12), #rt_snow_forest
	(eq, ":current_terrain_main_party", 7), #rt_bridge
	#Begin Euro Music
	(try_begin),
	(eq, "$track_count_field", 1), #
	(play_track, "track_eurob1", 2),
	(val_add, "$music_timer", 319),#
	(else_try),
	(eq, "$track_count_field", 2), #
	(play_track, "track_eurob2", 2),
	(val_add, "$music_timer", 279),#
	(else_try),
	
	(eq, "$track_count_field", 3), #
	(play_track, "track_eurob3", 2),
	(val_add, "$music_timer", 248),#
	(else_try),
	
	(eq, "$track_count_field", 4), #
	(play_track, "track_eurob4", 2),
	(val_add, "$music_timer", 332),#
	(else_try),
	
	(eq, "$track_count_field", 5), #
	(play_track, "track_eurob5", 2),
	(val_add, "$music_timer", 93),#
		(else_try),
	
	(eq, "$track_count_field", 6), #
	(play_track, "track_eurob6", 2),
	(val_add, "$music_timer", 76),#
		(else_try),
	
	(eq, "$track_count_field", 7), #
	(play_track, "track_eurob7", 2),
	(val_add, "$music_timer", 80),#
		(else_try),
	
	(eq, "$track_count_field", 8), #
	(play_track, "track_eurob8", 2),
	(val_add, "$music_timer", 58),#
		(else_try),
	
	(eq, "$track_count_field", 9), #
	(play_track, "track_eurob9", 2),
	(val_add, "$music_timer", 58),#
		(else_try),
	
#	(eq, "$track_count_field", 10), #
#	(play_track, "track_eurob10"),
#	(val_add, "$music_timer", 123),#
#		(else_try),
	
	(eq, "$track_count_field", 10), #
	(play_track, "track_eurob11", 2),
	(val_add, "$music_timer", 335),#
	(try_end),
	
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 5), #rt_desert
	(eq, ":current_terrain_main_party", 13), #rt_desert_forest
	#Begin arab music
	(try_begin),
	(eq, "$track_count_field_arabs", 1), #
	(play_track, "track_arabb1", 2),
	(val_add, "$music_timer", 262),#
	(else_try),
	(eq, "$track_count_field_arabs", 2), #
	(play_track, "track_arabb2", 2),
	(val_add, "$music_timer", 291),#
	#(else_try),
	#(eq, "$track_count_field_arabs", 3), #
	#(play_track, "track_arabb3"),
	(else_try),
	(eq, "$track_count_field_arabs", 3), #
	(play_track, "track_arabb4", 2),
	(val_add, "$music_timer", 104),#
	(else_try),
	
	(eq, "$track_count_field_arabs", 4), #
	(play_track, "track_arabb5", 2),
	(val_add, "$music_timer", 76),#
		(else_try),
	
	(eq, "$track_count_field_arabs", 5), #
	(play_track, "track_arabb6", 2),
	(val_add, "$music_timer", 218),#
	
			(else_try),
	(eq, "$track_count_field_arabs", 6), #
	(play_track, "track_arabb8", 2),
	(val_add, "$music_timer", 209),#
			(else_try),
	(eq, "$track_count_field_arabs", 7), #
	(play_track, "track_arabb9", 2),
	(val_add, "$music_timer", 103),#
	#	(else_try),
	#
	#(eq, "$track_count_field_arabs", 7), #
	#(play_track, "track_arabb7"),
	(try_end),
	(try_end),
	
  ]),
	
	#####MUSICBOX END
	
###########Torch by troycall/Envious Arm begin

																	#(-25.0, 0.0, 0.0, #Enabling this forces random chance to be 100%
																	#(ti_on_agent_spawn, 0, 0, #Enabling this forces random chance to be 100%
																	(20, 0, ti_once, #Proper one, but reinforcements do not get assigned torches.
        [
          (mission_tpl_are_all_agents_spawned), #From VC Header_Operations to prevent weird behavior.
          (is_currently_night) #Check if currently night time
        ],
        [

		  ####DEFAULT
		   #(try_for_agents, ":agent"),
            #(agent_get_wielded_item, ":item", ":agent", 1),
            #(gt, ":item", -1),
            #(agent_unequip_item, ":agent", ":item"),
            #(agent_equip_item, ":agent", "itm_torch"),
            #(agent_set_wielded_item, ":agent", "itm_torch"),           
          #(try_end),
		  ####END DEFAULT
		  
		  (try_for_agents, ":agent"), #Try for agents...
		  #Extension
		  (agent_is_alive, ":agent"), #For performance reasons
		  #End
		  (agent_is_human, ":agent"), #Performance
          (agent_is_non_player, ":agent"), #Uncommenting this includes player on spawning with torch, may be necessary to uncomment at module_coop_mission_templates.
		  


		 ##########Default Order
		 #######		  (agent_is_human, ":agent"), #Performance
         #######(agent_is_non_player, ":agent"), #Uncommenting this includes player on spawning with torch, may be necessary to uncomment at module_coop_mission_templates.
		 #######
		 ########Extension
		 #######(agent_is_active, ":agent"), #For performance reasons
		 #######(agent_is_alive, ":agent"), #For performance reasons
		 ########End
		  ############
		  		  
				#  (try_begin),
				  
		#		          (agent_get_wielded_item, ":rhand", ":agent", 0),  #Right hand
		#  (assign, ":rhanditem", 0), # Preparing local variable.
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000000000100),
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000004000000),
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000008000000),
		#  (neg|item_has_capability, ":rhanditem", 0x0000000170000000),
		# 

		  #
		  
          #BEGIN DEBUG
          #(assign, reg10, ":agent"),
          #(str_clear, s10),
          #(str_store_string, s10, "@New agent: {reg10}"),
          #END DEBUG
		  #(agent_get_wielded_item, ":rhanditem", ":agent", 0),  #Obtain right hand item
         (agent_get_wielded_item, ":rhanditem", ":agent", 0),  #Obtain right hand item
          (agent_get_wielded_item, ":item", ":agent", 1), # Left hand: shield or -1
          #BEGIN DEBUG
          #(assign, reg10, ":item"),
          #(str_store_string, s10, "@{s10}. LH: {reg10}"),
		  #(display_message, "@Main block Phase A finalized"),
          #END DEBUG
		  #(item_get_type, ":type", ":rhanditem"), #If right hand item is polearm, stop reading rest of code.
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_club_with_spike_head", "itm_wooden_shield"),
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_light_lance", "itm_wooden_shield"),
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_light_lance", "itm_wooden_shield"),
          (try_begin),
		  (neg|is_between, ":rhanditem", "itm_club_with_spike_head", "itm_wooden_shield"),
		  (neg|is_between, ":rhanditem", "itm_lance_banner_jer", "itm_cross_end"), #Update item slots
		  #(neg|eq, ":rhanditem", "itm_lance_banner_jer", "itm_items_end"), #Update item slots
		  #(neg|is_between, ":rhanditem", "itm_lance_banner_jer", "itm_cross_end"), #Update item slots
		  #(neg|troop_has_item_equipped, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		  #(neq, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		  
		# (neg|eq, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		    (gt, ":item", -1), #Check if the agent wields any item in the left hand, this or next.
            #(neq, ":item", -1),# Check if the agent wields any item in the left hand
            (neq, ":item", "itm_torch"), #If agent is using torch, ignore him.
            #(display_message, "@PASSED neg tests"), #Debug message

			
            (store_random_in_range, ":chance", 1, 101), # Chance of item being assigned
            (try_begin),
			  (le, ":chance", "$torch_chance"), #25% = 25
				#lt           = neg | ge # less than		-- (lt,<value>,<value>),
				#neq          = neg | eq # not equal to		-- (neq,<value>,<value>),
				#le           = neg | gt # less or equal to	-- (le,<value>,<value>),
              (agent_unequip_item, ":agent", ":item"),
			  
              #BEGIN DEBUG
              #(str_store_item_name, s11, ":item"),
              #(str_store_string, s10, "@{s10}. Removed item: {s11}"),
			  #(display_message, "@(agent_unequip_item, :agent, :item PASSED."),
              #END DEBUG

               
                (agent_equip_item, ":agent", "itm_torch"), #Tell agent to equip the item
                 #(display_message, "@(agent_equip_item, :agent, :item PASSED."),
                  (agent_set_wielded_item, ":agent", "itm_torch"), #Required for infantry only, cavarly can work without it.
                  #(display_message, "@(agent_set_wielded_item, :agent, :item PASSED."),
                 
                 
                  #BEGIN DEBUG
                #(else_try),
                  #(str_store_string, s10, "@{s10}. Failed random chance."),
                (try_end),
               
              #(else_try),
                #(str_store_string, s10, "@{s10}. Invalid agent for torch"),
              (try_end),
             
              #(display_message, s10),
			  (try_end),
              #END DEBUG
			#  (try_end),
      ]),
	  
###########Torch by troycall/Envious Arm end


		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_agent_reassign_team", ":trigger_param_1"),
			(assign, ":var_2", 5000),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(store_character_level, ":character_level_troop_id_trigger_param_1", ":troop_id_trigger_param_1"),
			(val_mul, ":character_level_troop_id_trigger_param_1", 35),
			(val_add, ":var_2", ":character_level_troop_id_trigger_param_1"),
			(store_random_in_range, ":random_in_range_0_3000", 0, 3000),
			(val_add, ":var_2", ":random_in_range_0_3000"),
			(agent_get_party_id, ":party_id_trigger_param_1", ":trigger_param_1"),
			(ge, ":party_id_trigger_param_1", 0),
			(party_get_morale, ":morale_party_id_trigger_param_1", ":party_id_trigger_param_1"),
			(store_sub, ":value", ":morale_party_id_trigger_param_1", 70),
			(val_mul, ":value", 30),
			(val_add, ":var_2", ":value"),
			(agent_set_slot, ":trigger_param_1", slot_agent_courage_score, ":var_2")
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(call_script, "script_troop_agent_set_banner", "tableau_game_troop_label_banner", ":trigger_param_1", ":troop_id_trigger_param_1")
		]),

		(-26.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(store_trigger_param_2, ":trigger_param_2"),
			(store_trigger_param_3, ":trigger_param_3"),
			(try_begin),
				(ge, ":trigger_param_1", 0),
				(neg|agent_is_ally, ":trigger_param_1"),
				(agent_is_human, ":trigger_param_1"),
				(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
				(party_add_members, "p_total_enemy_casualties", ":troop_id_trigger_param_1", 1),
				(eq, ":trigger_param_3", 1),
				(party_wound_members, "p_total_enemy_casualties", ":troop_id_trigger_param_1", 1),
			(try_end),
			(call_script, "script_apply_death_effect_on_courage_scores", ":trigger_param_1", ":trigger_param_2")
		]),

#Checkpt above no decap error
		(-21.0, 0.0, 0.0,
		[],

		[
			(try_begin),
				(eq, "$g_battle_won", 1),
				(call_script, "script_count_mission_casualties_from_agents"),
				(finish_mission, 0),
			(else_try),
				(eq, "$pin_player_fallen", 1),
				(eq, "$g_battle_won", 0),
				(call_script, "script_simulate_retreat", 5, 20, 1),
				(str_store_string, 5, "str_retreat"),
				(call_script, "script_count_mission_casualties_from_agents"),
				(set_mission_result, -1),
				(finish_mission, 0),
			(else_try),
				(eq, "$pin_player_fallen", 1),
				(eq, "$g_battle_won", -1),
				(call_script, "script_count_mission_casualties_from_agents"),
				(finish_mission, 0),
			(else_try),
				(call_script, "script_cf_check_enemies_nearby"),
				(question_box, "str_do_you_want_to_retreat"),
			(else_try),
				(get_player_agent_no, ":player_agent_no"),
				(neg|agent_is_alive, ":player_agent_no"),
				(call_script, "script_cf_check_enemies_nearby"),
				(question_box, "str_do_you_want_to_retreat"),
			(else_try),
				(display_message, "str_can_not_retreat"),
			(try_end)
		]),
		
		(-28.0, 0.3, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(store_trigger_param_2, ":trigger_param_2"),
			(store_trigger_param_3, ":trigger_param_3"),
			(assign, ":var_4", reg0),
			(agent_is_human, ":trigger_param_1"),
			(agent_is_alive, ":trigger_param_1"), #this addition
			(agent_is_active, ":trigger_param_1"), #This addition, i disabled tihs whole mission template to fix the bug too.
			(get_player_agent_no, ":player_agent_no"),
			(try_begin),
				(eq, "$tom_weapon_break", 1),
				(eq, ":trigger_param_1", ":player_agent_no"),
				(store_random_in_range, ":random_in_range_0_1000", 0, 1000),
				(eq, ":random_in_range_0_1000", 1),
				(store_random_in_range, ":random_in_range_4_8", 4, 8),
				(troop_get_inventory_slot, ":inventory_slot_player_random_in_range_4_8", "trp_player", ":random_in_range_4_8"),
				(gt, ":inventory_slot_player_random_in_range_4_8", 0),
				(str_store_item_name, 20, ":inventory_slot_player_random_in_range_4_8"),
				(troop_get_inventory_slot_modifier, ":inventory_slot_modifier_player_random_in_range_4_8", "trp_player", ":random_in_range_4_8"),
				(try_begin),
					(eq, ":inventory_slot_modifier_player_random_in_range_4_8", 6),
					(display_message, "@Your {s20} is too crappy to fall apart!", 0x00ff0000),
				(else_try),
					(troop_add_item, "trp_broken_items", ":inventory_slot_player_random_in_range_4_8", ":inventory_slot_modifier_player_random_in_range_4_8"),
					(troop_set_inventory_slot_modifier, "trp_player", ":random_in_range_4_8", 6),
					(display_message, "@Your {s20} cracks!", 0x00ff0000),
				(try_end),
			(try_end),
			(try_begin),
				(eq, "$tom_weapon_break", 1),
				(eq, ":trigger_param_2", ":player_agent_no"),
				(is_between, ":var_4", 1, "itm_cross_end"), #Previously itm_items_end
				(neg|is_between, ":var_4", "itm_light_lance", "itm_wooden_shield"),
				(item_get_type, ":type_var_4", ":var_4"),
				(ge, ":trigger_param_3", 10),
				(neq, ":type_var_4", 10),
				(neq, ":type_var_4", 8),
				(neq, ":type_var_4", 9),
				(neq, ":type_var_4", 5),
				(neq, ":type_var_4", 6),
				(store_random_in_range, ":random_in_range_0_1000", 0, 600),
				(eq, ":random_in_range_0_1000", 1),
				(assign, ":value", -1),
				(try_for_range, ":random_in_range_4_8", 0, 4),
					(troop_get_inventory_slot, ":inventory_slot_player_random_in_range_4_8_2", "trp_player", ":random_in_range_4_8"),
					(eq, ":inventory_slot_player_random_in_range_4_8_2", ":var_4"),
					(assign, ":value", ":random_in_range_4_8"),
				(try_end),
				(gt, ":value", 0),
				(str_store_item_name, 20, ":var_4"),
				(troop_get_inventory_slot_modifier, ":inventory_slot_modifier_player_random_in_range_4_8", "trp_player", ":value"),
				(try_begin),
					(eq, ":inventory_slot_modifier_player_random_in_range_4_8", 6),
					(display_message, "@Your {s20} falls apart!", 0x00ff0000),
					(agent_unequip_item, ":player_agent_no", ":var_4"),
					(troop_remove_item, "trp_player", ":var_4"),
					(troop_remove_item, "trp_broken_items", ":var_4"),
				(else_try),
					(troop_add_item, "trp_broken_items", ":var_4", ":inventory_slot_modifier_player_random_in_range_4_8"),
					(troop_set_inventory_slot_modifier, "trp_player", ":value", 6),
					(display_message, "@Your {s20} cracks!", 0x00ff0000),
				(try_end),
			(try_end),
			(agent_get_horse, ":horse_trigger_param_2", ":trigger_param_2"),
			(try_begin),
				(eq, "$tom_lance_breaking", 1),
				(gt, ":horse_trigger_param_2", 0),
				(this_or_next|is_between, ":var_4", "itm_light_lance", "itm_spear_a"), #Updated item slots
				(is_between, ":var_4", "itm_lance_banner_jer", "itm_pike_banner_teu"), #Updated item slots
				(ge, ":trigger_param_3", 50),
				(store_random_in_range, ":random_in_range_0_100", 0, 100),
				(gt, ":random_in_range_0_100", 20),
				(try_begin),
					(eq, ":trigger_param_2", ":player_agent_no"),
					(display_message, "@You broke your lance!", 0x00ff0000),
				(try_end),
				########Add effects on weapon break *Lances*
        (agent_get_position, pos1, ":trigger_param_2"),
		(agent_play_sound, ":trigger_param_1", "snd_shield_broken"),
		(particle_system_burst, "psys_lanse", pos1, 10),
        (particle_system_burst, "psys_lanse_straw", pos1, 30),
                ####Extend to Lanse_Blood
		#(particle_system_burst, "psys_lanse_blood", pos1, 10),
        #(particle_system_burst, "psys_lanse_blood", pos1, 30),
		        ########End Effects
				(agent_unequip_item, ":trigger_param_2", ":var_4"),
			(else_try),
				(this_or_next|is_between, ":var_4", "itm_bamboo_spear", "itm_wooden_shield"), #Updated item slots
				(is_between, ":var_4", "itm_pike_banner_teu", "itm_items_end"), #Updated item slots
				(le, ":horse_trigger_param_2", 0),
				(ge, ":trigger_param_3", 8),
				(store_random_in_range, ":random_in_range_0_100", 0, 100),
				(ge, ":random_in_range_0_100", 90),
				(try_begin),
					(eq, ":trigger_param_2", ":player_agent_no"),
					(display_message, "@You broke your spear!", 0x00ff0000),
				(try_end),
				########Add effects on weapon break *Spears*
        (agent_get_position, pos1, ":trigger_param_2"),
		(agent_play_sound, ":trigger_param_1", "snd_shield_broken"),
		(store_random_in_range, ":psys_to_use", "psys_lanse", "psys_lanse_blood"),
		(particle_system_burst, ":psys_to_use", pos1, 7), #Default = 10 (Higher = Bigger Particles)
        (particle_system_burst, ":psys_to_use", pos1, 21), #Default = 30 (Higher = Bigger Particles)
                ####Extend to Lanse_Blood
		#(particle_system_burst, "psys_lanse_blood", pos1, 10),
        #(particle_system_burst, "psys_lanse_blood", pos1, 30),
		        ########End Effects
				(agent_unequip_item, ":trigger_param_2", ":var_4"),
			(try_end),
			###Envfix weapon breaking patch start here
		]),
		(0.2, 0.0, ti_once,
		[],

		[
			(assign, "$spear_in_position", 0),
			(try_for_agents, ":var_1"),
				(agent_set_slot, ":var_1", slot_agent_bought_horse, 0),
				(agent_set_slot, ":var_1", 27, 0),
				(agent_set_slot, ":var_1", 28, 0),
				(agent_set_slot, ":var_1", 29, 0),
				(agent_set_slot, ":var_1", 30, 0),
			(try_end)
		]),
#
#Checkpt seems error is not prevalent yet...
		(0.5, 0.0, 0.0,
		[
			(eq, "$setting_use_spearwall", 1)
		],

		[
			(set_fixed_point_multiplier, 100),
			(try_for_agents, ":var_1"),
				(agent_is_alive, ":var_1"),
				(agent_get_slot, ":var_1_27", ":var_1", 27),
				(agent_get_slot, ":var_1_28", ":var_1", 28),
				(agent_get_slot, ":var_1_29", ":var_1", 29),
				(agent_get_position, 1, ":var_1"),
				(position_get_x, ":position_x_1", 1),
				(position_get_y, ":position_y_1", 1),
				(position_get_z, ":position_z_1", 1),
				(position_set_x, 2, ":var_1_27"),
				(position_set_y, 2, ":var_1_28"),
				(position_set_z, 2, ":var_1_29"),
				(position_set_x, 1, ":position_x_1"),
				(position_set_y, 1, ":position_y_1"),
				(position_set_z, 1, ":position_z_1"),
				(agent_get_speed, 5, ":var_1"),
				(call_script, "script_vector_length", 5),
				(assign, ":var_8", reg0),
				(agent_set_slot, ":var_1", 27, ":position_x_1"),
				(agent_set_slot, ":var_1", 28, ":position_y_1"),
				(agent_set_slot, ":var_1", 29, ":position_z_1"),
				(agent_set_slot, ":var_1", 30, ":var_8"),
			(try_end),
			(set_fixed_point_multiplier, 100)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$spear_in_position", 1),
			(this_or_next|game_key_clicked, 6),
			(this_or_next|game_key_clicked, 7),
			(this_or_next|game_key_clicked, 7),
			(this_or_next|game_key_clicked, 0),
			(this_or_next|game_key_clicked, 1),
			(this_or_next|game_key_clicked, 2),
			(this_or_next|game_key_clicked, 3),
			(this_or_next|game_key_clicked, 14),
			(this_or_next|game_key_clicked, 15),
			(this_or_next|game_key_clicked, 4),
			(game_key_clicked, 17)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_is_alive, ":player_agent_no"),
			(display_message, "@Releasing spear.", 0x006495ed),
			(agent_set_animation, ":player_agent_no", "anim_release_thrust_staff"),
			(assign, "$spear_in_position", 0)
		]),

		(0.2, 0.0, 0.0,
		[
			(eq, "$setting_use_spearwall", 1)
		],

		[
			(try_for_agents, ":var_1"),
				(agent_get_horse, ":horse_var_1", ":var_1"),
				(le, ":horse_var_1", 0),
				(agent_get_slot, ":var_1_bought_horse", ":var_1", slot_agent_bought_horse),
				(lt, ":var_1_bought_horse", 10),
				(val_add, ":var_1_bought_horse", 2),
				(agent_set_slot, ":var_1", slot_agent_bought_horse, ":var_1_bought_horse"),
			(try_end)
		]),

		(3.0, 0.0, 0.0,
		[
			(eq, "$spear_in_position", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_is_alive, ":player_agent_no"),
			(agent_set_animation, ":player_agent_no", "anim_spearwall_hold")
		]),

		(0.1, 0.0, 0.0,
		[
			(eq, "$setting_use_spearwall", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_team, ":team_player_agent_no", ":player_agent_no"),
			(try_for_agents, ":var_3"),
				(agent_is_alive, ":var_3"),
				(neq, ":var_3", ":player_agent_no"),
				(agent_is_human, ":var_3"),
				(agent_get_horse, ":horse_var_3", ":var_3"),
				(le, ":horse_var_3", 0),
				(agent_get_slot, ":var_3_bought_horse", ":var_3", slot_agent_bought_horse),
				(ge, ":var_3_bought_horse", 10),
				(agent_get_simple_behavior, ":simple_behavior_var_3", ":var_3"),
				(agent_get_team, ":team_var_3", ":var_3"),
				(agent_get_class, ":class_var_3", ":var_3"),
				(team_get_movement_order, ":movement_order_team_var_3_class_var_3", ":team_var_3", ":class_var_3"),
				(assign, ":value", 0),
				(try_begin),
					(neq, ":team_var_3", ":team_player_agent_no"),
					(this_or_next|eq, ":simple_behavior_var_3", 0),
					(this_or_next|eq, ":simple_behavior_var_3", 9),
					(eq, ":simple_behavior_var_3", 1),
					(assign, ":value", 1),
				(else_try),
					(this_or_next|eq, ":movement_order_team_var_3_class_var_3", 0),
					(eq, ":movement_order_team_var_3_class_var_3", 11),
					(this_or_next|eq, ":simple_behavior_var_3", 0),
					(this_or_next|eq, ":simple_behavior_var_3", 9),
					(this_or_next|eq, ":simple_behavior_var_3", 4),
					(eq, ":simple_behavior_var_3", 1),
					(assign, ":value", 1),
				(try_end),
				(eq, ":value", 1),
				(agent_get_troop_id, ":troop_id_var_3", ":var_3"),
				(store_proficiency_level, ":proficiency_level_troop_id_var_3_2", ":troop_id_var_3", 2),
				(store_character_level, ":character_level_troop_id_var_3", ":troop_id_var_3"),
				(ge, ":character_level_troop_id_var_3", 12),
				(ge, ":proficiency_level_troop_id_var_3_2", 120),
				(neg|troop_is_mounted, ":troop_id_var_3"),
				(agent_slot_eq, ":var_3", slot_agent_is_running_away, 0),
				(assign, ":value", 0),
				(agent_get_wielded_item, ":wielded_item_var_3_0", ":var_3", 0),
				(agent_get_wielded_item, ":wielded_item_var_3_1", ":var_3", 1),
				(assign, ":value_2", 145),
				(try_for_range, ":item", "itm_bamboo_spear", "itm_wooden_shield"),
					(this_or_next|eq, ":wielded_item_var_3_0", ":item"),
					(eq, ":wielded_item_var_3_1", ":item"),
					(assign, ":value", 1),
					(try_begin),
						(eq, ":item", "itm_bamboo_spear"),
						(assign, ":value_2", 200),
					(else_try),
						(eq, ":item", "itm_spear_a"),
						(assign, ":value_2", 156),
					(else_try),
						(eq, ":item", "itm_spear_b"),
						(assign, ":value_2", 155),
					(else_try),
						(eq, ":item", "itm_spear_c"),
						(assign, ":value_2", 135),
					(else_try),
						(eq, ":item", "itm_spear_d"),
						(assign, ":value_2", 143),
					(else_try),
						(eq, ":item", "itm_spear_e"),
						(assign, ":value_2", 142),
					(else_try),
						(eq, ":item", "itm_spear_f"),
						(assign, ":value_2", 146),
					(else_try),
						(eq, ":item", "itm_spear_g"),
						(assign, ":value_2", 142),
					(else_try),
						(eq, ":item", "itm_spear_h"),
						(assign, ":value_2", 145),
					(else_try),
						(eq, ":item", "itm_spear_i"),
						(assign, ":value_2", 141),
					(else_try),
						(eq, ":item", "itm_spear_j"),
						(assign, ":value_2", 170),
					(else_try),
						(eq, ":item", "itm_spear_k"),
						(assign, ":value_2", 160),
					(else_try),
						(eq, ":item", "itm_spear_l"),
						(assign, ":value_2", 170),
					(else_try),
						(eq, ":item", "itm_spear_m"),
						(assign, ":value_2", 160),
					(else_try),
						(eq, ":item", "itm_spear_n"),
						(assign, ":value_2", 175),
					(else_try),
						(eq, ":item", "itm_spear_o"),
						(assign, ":value_2", 150),
					(else_try),
						(eq, ":item", "itm_spear_p"),
						(assign, ":value_2", 160),
					(try_end),
				(try_end),
				(eq, ":value", 1),
				(assign, ":value_3", -1),
				(agent_get_position, 1, ":var_3"),
				(try_for_agents, ":var_19"),
					(agent_is_alive, ":var_19"),
					(neg|agent_is_human, ":var_19"),
					(agent_get_rider, ":rider_var_19", ":var_19"),
					(ge, ":rider_var_19", 0),
					(agent_get_team, ":team_rider_var_19", ":rider_var_19"),
					(teams_are_enemies, ":team_var_3", ":team_rider_var_19"),
					(agent_get_position, 2, ":var_19"),
					(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
					(lt, ":distance_between_positions_1_2", ":value_2"),
					(neg|position_is_behind_position, 2, 1),
					(agent_get_slot, ":var_19_30", ":var_19", 30),
					(gt, ":var_19_30", 0),
					(assign, ":value_3", ":var_19"),
				(try_end),
				(gt, ":value_3", -1),
				(agent_play_sound, ":value_3", "snd_metal_hit_high_armor_high_damage"),
				(store_agent_hit_points, ":agent_hit_points_value_3_0", ":value_3", 0),
				(store_agent_hit_points, ":agent_hit_points_value_3_1", ":value_3", 1),
				(assign, reg22, ":var_19_30"),
				(val_mul, ":var_19_30", 10),
				(val_sub, ":agent_hit_points_value_3_0", ":var_19_30"),
				(val_max, ":agent_hit_points_value_3_0", 0),
				(agent_set_slot, ":var_3", slot_agent_bought_horse, 0),
				(agent_get_horse, ":horse_player_agent_no", ":player_agent_no"),
				(agent_get_position, 2, ":value_3"),
				(agent_set_look_target_position, ":var_3", 2),
				(agent_set_attack_action, ":var_3", 0, 0),
				(agent_deliver_damage_to_agent, ":var_3", ":value_3"),
				(agent_deliver_damage_to_agent, ":var_3", ":value_3"),
				(agent_deliver_damage_to_agent, ":var_3", ":value_3"),
				(agent_deliver_damage_to_agent, ":var_3", ":value_3"),
				(agent_get_troop_id, ":troop_id_var_3", ":var_3"),
				(str_store_troop_name, 21, ":troop_id_var_3"),
				(agent_get_troop_id, ":troop_id_value_3", ":value_3"),
				(str_store_troop_name, 20, ":troop_id_value_3"),
				(store_agent_hit_points, ":agent_hit_points_value_3_0", ":value_3", 1),
				(val_sub, ":agent_hit_points_value_3_1", ":agent_hit_points_value_3_0"),
				(assign, reg1, ":agent_hit_points_value_3_1"),
				(try_begin),
					(eq, ":value_3", ":horse_player_agent_no"),
					(display_message, "@Your horse received {reg1} damage from a braced spear!", 0x00ff4040),
				(try_end),
			(try_end),
			(set_fixed_point_multiplier, 100)
		]),

		(0.1, 0.0, 0.0,
		[
			(eq, "$spear_in_position", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_is_alive, ":player_agent_no"),
			(store_agent_hit_points, ":agent_hit_points_player_agent_no_1", ":player_agent_no", 1),
			(lt, ":agent_hit_points_player_agent_no_1", "$spear_hp"),
			(display_message, "@The injury causes your grip on the spear to slip!", 0x00ff4040),
			(agent_set_animation, ":player_agent_no", "anim_release_thrust_staff"),
			(assign, "$spear_in_position", 0),
			(set_fixed_point_multiplier, 100)
		]),

		(0.1, 0.0, 0.0,
		[
			(eq, "$spear_in_position", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_is_alive, ":player_agent_no"),
			(agent_get_slot, ":player_agent_no_bought_horse", ":player_agent_no", slot_agent_bought_horse),
			(ge, ":player_agent_no_bought_horse", 10),
			(assign, ":value", -1),
			(agent_get_position, 1, ":player_agent_no"),
			(try_for_agents, ":var_4"),
				(agent_is_alive, ":var_4"),
				(neg|agent_is_human, ":var_4"),
				(agent_get_rider, ":rider_var_4", ":var_4"),
				(ge, ":rider_var_4", 0),
				(neg|agent_is_ally, ":rider_var_4"),
				(agent_get_position, 2, ":var_4"),
				(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
				(lt, ":distance_between_positions_1_2", "$spear_dist"),
				(neg|position_is_behind_position, 2, 1),
				(agent_get_slot, ":var_4_30", ":var_4", 30),
				(ge, ":var_4_30", 120),
				(assign, ":value", ":var_4"),
			(try_end),
			(gt, ":value", -1),
			(agent_play_sound, ":value", "snd_metal_hit_high_armor_high_damage"),
			(store_agent_hit_points, ":agent_hit_points_value_0", ":value", 0),
			(store_agent_hit_points, ":agent_hit_points_value_1", ":value", 1),
			(val_div, ":var_4_30", 2),
			(val_sub, ":var_4_30", 15),
			(val_sub, ":agent_hit_points_value_0", ":var_4_30"),
			(val_max, ":agent_hit_points_value_0", 0),
			(agent_set_hit_points, ":value", ":agent_hit_points_value_0", 0),
			(agent_deliver_damage_to_agent, ":value", ":value"),
			(agent_set_slot, ":player_agent_no", slot_agent_bought_horse, 0),
			(store_agent_hit_points, ":agent_hit_points_value_0", ":value", 1),
			(val_sub, ":agent_hit_points_value_1", ":agent_hit_points_value_0"),
			(assign, reg1, ":agent_hit_points_value_1"),
			(display_message, "@Spear-wall dealt {reg1} damage!"),
			(set_fixed_point_multiplier, 100)
		]),

		(0.0, 0.0, 2.0,
		[
			(key_clicked, 48),
			(eq, "$setting_use_spearwall", 1)
		],

		[
			(assign, ":value", 0),
			(get_player_agent_no, ":player_agent_no"),
			(agent_is_alive, ":player_agent_no"),
			(agent_get_wielded_item, ":wielded_item_player_agent_no_0", ":player_agent_no", 0),
			(agent_get_wielded_item, ":wielded_item_player_agent_no_1", ":player_agent_no", 1),
			(assign, "$spear_dist", 145),
			(try_for_range, ":item", "itm_bamboo_spear", "itm_wooden_shield"),
				(this_or_next|eq, ":wielded_item_player_agent_no_0", ":item"),
				(eq, ":wielded_item_player_agent_no_1", ":item"),
				(assign, ":value", 1),
				(try_begin),
					(eq, ":item", "itm_bamboo_spear"),
					(assign, "$spear_dist", 200),
				(else_try),
					(eq, ":item", "itm_spear_a"),
					(assign, "$spear_dist", 156),
				(else_try),
					(eq, ":item", "itm_spear_b"),
					(assign, "$spear_dist", 155),
				(else_try),
					(eq, ":item", "itm_spear_c"),
					(assign, "$spear_dist", 135),
				(else_try),
					(eq, ":item", "itm_spear_d"),
					(assign, "$spear_dist", 143),
				(else_try),
					(eq, ":item", "itm_spear_e"),
					(assign, "$spear_dist", 142),
				(else_try),
					(eq, ":item", "itm_spear_f"),
					(assign, "$spear_dist", 146),
				(else_try),
					(eq, ":item", "itm_spear_g"),
					(assign, "$spear_dist", 142),
				(else_try),
					(eq, ":item", "itm_spear_h"),
					(assign, "$spear_dist", 145),
				(else_try),
					(eq, ":item", "itm_spear_i"),
					(assign, "$spear_dist", 141),
				(else_try),
					(eq, ":item", "itm_spear_j"),
					(assign, "$spear_dist", 170),
				(else_try),
					(eq, ":item", "itm_spear_k"),
					(assign, "$spear_dist", 160),
				(else_try),
					(eq, ":item", "itm_spear_l"),
					(assign, "$spear_dist", 170),
				(else_try),
					(eq, ":item", "itm_spear_m"),
					(assign, "$spear_dist", 160),
				(else_try),
					(eq, ":item", "itm_spear_n"),
					(assign, "$spear_dist", 175),
				(else_try),
					(eq, ":item", "itm_spear_o"),
					(assign, "$spear_dist", 150),
				(else_try),
					(eq, ":item", "itm_spear_p"),
					(assign, "$spear_dist", 160),
				(try_end),
			(try_end),
			(eq, ":value", 1),
			(agent_get_horse, ":horse_player_agent_no", ":player_agent_no"),
			(le, ":horse_player_agent_no", 0),
			(neq, "$spear_in_position", 1),
			(display_message, "@Bracing spear for charge.", 0x006495ed),
			(agent_set_animation, ":player_agent_no", "anim_spearwall_hold"),
			(assign, "$spear_in_position", 1),
			(store_agent_hit_points, "$spear_hp", ":player_agent_no", 1),
			(set_fixed_point_multiplier, 100)
		]),

		(-8.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(eq, ":trigger_param_1", 0),
			(assign, "$pin_player_fallen", 0),
			(try_begin),
				(store_mission_timer_a, ":mission_timer_a"),
				(gt, ":mission_timer_a", 20),
				(str_store_string, 5, "str_retreat"),
				(call_script, "script_simulate_retreat", 10, 20, 1),
			(try_end),
			(call_script, "script_count_mission_casualties_from_agents"),
			(finish_mission, 0)
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(team_set_relation, 0, 2, 1),
			(team_set_relation, 1, 3, 1),
			(call_script, "script_place_player_banner_near_inventory_bms"),
			(party_clear, "p_routed_enemies"),
			(assign, "$g_latest_order_1", 1),
			(assign, "$g_latest_order_2", 1),
			(assign, "$g_latest_order_3", 1),
			(assign, "$g_latest_order_4", 1)
		]),

		(0.0, 0.0, ti_once,
		[],

		[
			(assign, "$g_battle_won", 0),
			(assign, "$defender_reinforcement_stage", 0),
			(assign, "$attacker_reinforcement_stage", 0),
			(call_script, "script_place_player_banner_near_inventory"),
			(try_begin),
			(eq, "$additional_music", 0),
			(call_script, "script_combat_music_set_situation_with_culture"),
			(try_end),
			(assign, "$g_defender_reinforcement_limit", "$g_reinforcement_waves"),
			(assign, "$dmod_current_agent", -1),
			(assign, "$dmod_move_camera", -1)
		]),

		(30.0, 0.0, 0.0,
		[],

		[]),

		(2.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_check_friendly_kills")
		]),
#Checkpt2 below no decap error
		(1.0, 0.0, 5.0,
		[
			(call_script, "script_party_count_members_with_full_health", "p_collective_enemy"),
			(assign, ":var_1", reg0),
			(assign, ":var_2", 0),
			(try_for_agents, ":var_3"),
				(agent_is_human, ":var_3"),
				(agent_get_party_id, ":party_id_var_3", ":var_3"),
				(try_begin),
					(neq, ":party_id_var_3", "p_main_party"),
					(neg|agent_is_ally, ":var_3"),
					(val_add, ":var_2", 1),
				(try_end),
			(try_end),
			(store_sub, ":value", ":var_1", ":var_2"),
			(try_begin),
				(lt, ":value", 15),
				(ge, "$defender_reinforcement_stage", 2),
				(eq, "$defender_reinforcement_limit_increased", 0),
				(val_add, "$g_defender_reinforcement_limit", 1),
				(assign, "$defender_reinforcement_limit_increased", 1),
			(try_end),
			(lt, "$defender_reinforcement_stage", "$g_defender_reinforcement_limit"),
			(store_mission_timer_a, ":mission_timer_a"),
			(ge, ":mission_timer_a", 10),
			(store_normalized_team_count, ":normalized_team_count_0", 0),
			(lt, ":normalized_team_count_0", 6)
		],

		[
			(add_reinforcements_to_entry, 0, 7),
			(assign, "$defender_reinforcement_limit_increased", 0),
			(val_add, "$defender_reinforcement_stage", 1)
		]),

		(1.0, 0.0, 5.0,
		[
			(lt, "$attacker_reinforcement_stage", "$g_reinforcement_waves"),
			(store_mission_timer_a, ":mission_timer_a"),
			(ge, ":mission_timer_a", 10),
			(store_normalized_team_count, ":normalized_team_count_1", 1),
			(lt, ":normalized_team_count_1", 6)
		],

		[
			(add_reinforcements_to_entry, 3, 7),
			(val_add, "$attacker_reinforcement_stage", 1)
		]),

		(5.0, 60.0, ti_once,
		[
			(store_mission_timer_a, reg1),
			(ge, reg1, 10),
			(all_enemies_defeated, 5),
			(set_mission_result, 1),
			(display_message, "str_msg_battle_won"),
			#(play_sound, "snd_won_battle"), #Moved to victorious main menu
			(assign, "$g_battle_won", 1),
			(assign, "$g_battle_result", 1),
			(call_script, "script_play_victorious_sound")
		],

		[
			(call_script, "script_count_mission_casualties_from_agents"),
			(finish_mission, 1)
		]),

		(10.0, 0.0, 0.0, # Battle won/lost messages!
		[],

		[
			(eq, "$g_battle_won", 1),
			#(play_sound, "snd_won_battle"), #Moved to victorious main menu
			(display_message, "str_msg_battle_won")
		]),

		(1.0, 60.0, ti_once,
		[
			(store_mission_timer_a, reg1),
			(ge, reg1, 10),
			(main_hero_fallen),
			(assign, ":var_1", 0),
			(try_for_agents, ":var_2"),
				(agent_is_ally, ":var_2"),
				(agent_is_alive, ":var_2"),
				(val_add, ":var_1", 1),
			(try_end),
			(eq, ":var_1", 0),
			(set_mission_result, -1),
						(try_begin),
			(eq, "$colored_messages", 1),
			(display_message, "@Battle lost...", 0x00f78078),
			(else_try),
			(display_message, "@Battle lost..."),
			(try_end),
			(assign, "$g_battle_won", -1),
			(assign, "$g_battle_result", -1)
		],

		[
			(call_script, "script_count_mission_casualties_from_agents"),
			(finish_mission, 0)
		]),

		(10.0, 0.0, 0.0, # Battle won/lost messages!
		[],

		[
			(eq, "$g_battle_won", -1),
						(try_begin),
			(eq, "$colored_messages", 1),
			(display_message, "@Battle lost! Press tab key to leave...", 0x00f78078),
			(else_try),
			(display_message, "@Battle lost! Press tab key to leave..."),
			(try_end),
			#(play_sound, "snd_battle_sounds"), #Moved to your companions carry you away from the fighting menu
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(gt, "$dmod_current_agent", 0),
			(eq, "$setting_use_dmod", 1),
			(eq, "$dmod_move_camera", 1),
			(agent_get_position, 1, "$dmod_current_agent"),
			(position_move_z, 1, 300),
			(position_move_y, 1, -300),
			(agent_get_horse, ":horse_l_dmod_current_agent", "$dmod_current_agent"),
			(try_begin),
				(ge, ":horse_l_dmod_current_agent", 0),
			(try_end),
			(try_begin),
				(eq, "$pop_camera_on", 1),
				(assign, "$pop_camera_on", 0),
			(try_end),
			(mission_cam_set_position, 1),
			(mission_cam_set_mode, 1),
			(set_fixed_point_multiplier, 100)
		],

		[]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(eq, "$setting_use_dmod", 1),
			(key_clicked, 238),
			(main_hero_fallen),
			(call_script, "script_dmod_cycle_forwards")
		],

		[]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(eq, "$setting_use_dmod", 1),
			(key_clicked, 239),
			(main_hero_fallen),
			(call_script, "script_dmod_cycle_backwards")
		],

		[]),

		(0.0, 0.0, ti_once,
		[],

		[
			(assign, "$pop_camera_on", 0),
			(assign, "$pop_camera_mouse_center_x", 500),
			(assign, "$pop_camera_mouse_center_y", 375),
			(assign, "$pop_camera_mouse_x", "$pop_camera_mouse_center_x"),
			(assign, "$pop_camera_mouse_y", "$pop_camera_mouse_center_y"),
			(assign, "$pop_camera_mouse_counter", 0)
		]),

		(0.0, 4.0, ti_once,
		[
			(eq, "$enable_deahtcam", 1),
			(main_hero_fallen),
			(eq, "$pop_camera_on", 0),
			(assign, "$tom_sand_storm", 0)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_position, 1, ":player_agent_no"),
			(position_get_x, ":position_x_1", 1),
			(position_get_y, ":position_y_1", 1),
			(init_position, 47),
			(position_set_x, 47, ":position_x_1"),
			(position_set_y, 47, ":position_y_1"),
			(position_set_z_to_ground_level, 47),
			(position_move_z, 47, 250),
			(mission_cam_set_mode, 1, 0, 0),
			(mission_cam_set_position, 47),
			(assign, "$pop_camera_rotx", 0),
			(assign, "$pop_camera_on", 1)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(this_or_next|eq, "$dmod_move_camera", 1),
			(eq, "$pop_camera_on", 1),
			(this_or_next|game_key_clicked, 0),
			(this_or_next|game_key_is_down, 0),
			(this_or_next|game_key_clicked, 1),
			(this_or_next|game_key_is_down, 1),
			(this_or_next|game_key_clicked, 2),
			(this_or_next|game_key_is_down, 2),
			(this_or_next|game_key_clicked, 3),
			(game_key_is_down, 3)
		],

		[
			(try_begin),
				(eq, "$dmod_move_camera", 1),
				(mission_cam_set_mode, 1, 0, 0),
				(assign, "$pop_camera_rotx", 0),
				(assign, "$pop_camera_on", 1),
				(assign, "$dmod_move_camera", 0),
			(try_end),
			(mission_cam_get_position, 47),
			(assign, ":value", 0),
			(assign, ":value_2", 0),
			(try_begin),
				(this_or_next|game_key_clicked, 0),
				(game_key_is_down, 0),
				(assign, ":value_2", 10),
			(try_end),
			(try_begin),
				(this_or_next|game_key_clicked, 1),
				(game_key_is_down, 1),
				(assign, ":value_2", -10),
			(try_end),
			(try_begin),
				(this_or_next|game_key_clicked, 2),
				(game_key_is_down, 2),
				(assign, ":value", -10),
			(try_end),
			(try_begin),
				(this_or_next|game_key_clicked, 3),
				(game_key_is_down, 3),
				(assign, ":value", 10),
			(try_end),
			(position_move_x, 47, ":value"),
			(position_move_y, 47, ":value_2"),
			(mission_cam_set_position, 47)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(eq, "$pop_camera_on", 1),
			(neg|is_presentation_active, "prsnt_battle"),
			(mouse_get_position, 1),
			(set_fixed_point_multiplier, 1000),
			(position_get_x, reg1, 1),
			(position_get_y, reg2, 1),
			(set_fixed_point_multiplier, 100),
			(this_or_next|neq, reg1, "$pop_camera_mouse_center_x"),
			(neq, reg2, "$pop_camera_mouse_center_y")
		],

		[
			(assign, ":value", 1),
			(try_begin),
				(eq, reg1, "$pop_camera_mouse_x"),
				(eq, reg2, "$pop_camera_mouse_y"),
				(val_add, "$pop_camera_mouse_counter", 1),
				(try_begin),
					(gt, "$pop_camera_mouse_counter", 50),
					(assign, "$pop_camera_mouse_center_x", reg1),
					(assign, "$pop_camera_mouse_center_y", reg2),
					(assign, "$pop_camera_mouse_counter", 0),
				(try_end),
				(assign, ":value", 0),
			(try_end),
			(eq, ":value", 1),
			(assign, "$pop_camera_mouse_counter", 0),
			(assign, "$pop_camera_mouse_x", reg1),
			(assign, "$pop_camera_mouse_y", reg2),
			(mission_cam_get_position, 47),
			(store_sub, ":value_2", "$pop_camera_mouse_center_x", reg1),
			(store_sub, ":value_3", reg2, "$pop_camera_mouse_center_y"),
			(try_for_range, ":number", 0, 2),
				(try_begin),
					(eq, ":number", 1),
					(assign, ":value_2", ":value_3"),
				(try_end),
				(this_or_next|lt, ":value_2", -2),
				(gt, ":value_2", 2),
				(assign, ":value_4", 1),
				(try_begin),
					(lt, ":value_2", 0),
					(assign, ":value_4", -1),
				(try_end),
				(val_abs, ":value_2"),
				(val_sub, ":value_2", 2),
				(convert_to_fixed_point, ":value_2"),
				(store_sqrt, ":value_2", ":value_2"),
				(convert_from_fixed_point, ":value_2"),
				(val_clamp, ":value_2", 1, 64),
				(val_mul, ":value_2", ":value_4"),
				(try_begin),
					(eq, ":number", 0),
					(store_mul, ":value_5", "$pop_camera_rotx", -1),
					(position_rotate_x, 47, ":value_5"),
					(position_rotate_z, 47, ":value_2"),
					(position_rotate_x, 47, "$pop_camera_rotx"),
				(try_end),
				(try_begin),
					(eq, ":number", 1),
					(position_rotate_x, 47, ":value_2"),
					(val_add, "$pop_camera_rotx", ":value_2"),
				(try_end),
			(try_end),
			(mission_cam_set_position, 47)
		]),

		(1.0, 4.0, ti_once,
		[
			(main_hero_fallen)
		],

		[
			(assign, "$pin_player_fallen", 1),
			(neq, "$use_player_auxiliary", 1),
			(display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
			(display_message, "@If you choose to watch the fight you can use the mouse scroll up and down to switch between troop view or AWDS keys for free camera view.")
		]),

		(-22.0, 0.0, 0.0,
		[],

		[
			(display_message, "str_use_baggage_for_inventory")
		]),

		(3.0, 0.0, 0.0,
		[
			(call_script, "script_apply_effect_of_other_people_on_courage_scores")
		],

		[]),

		(3.0, 0.0, 0.0,
		[
			(try_for_agents, ":var_1"),
				(agent_is_human, ":var_1"),
				(agent_is_alive, ":var_1"),
				(store_mission_timer_a, ":mission_timer_a"),
				(ge, ":mission_timer_a", 3),
				(call_script, "script_decide_run_away_or_not", ":var_1", ":mission_timer_a"),
			(try_end)
		],

		[]),

		(0.0, 0.0, 0.0,
		[],

		[
			(game_key_clicked, 22),
			(neg|is_presentation_active, "prsnt_battle"),
			(start_presentation, "prsnt_battle")
		]),

		(0.1, 0.0, 0.0,
		[],

		[
			(is_presentation_active, "prsnt_battle"),
			(call_script, "script_update_order_panel_statistics_and_map")
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_set_matching_sexy_boots", ":trigger_param_1")
		]),


		
		
		(0.0, 0.0, 0.0,
		[
			(eq, "$sp_shield_bash", 1),
			(game_key_is_down, 7),
			(game_key_clicked, 6),
			(neg|main_hero_fallen),
		],

		[
		(call_script, "script_shield_bash"),
		]),

			##AI kicking begin
		   (2, 0, 3, #AI kicking
       [], [
	(get_player_agent_no,":player"),
	(try_for_agents, ":agent"),
		(neq, ":agent", ":player"),
		(agent_is_alive, ":agent"),
		(neq, ":agent", -1),
		(agent_is_human, ":agent"),#Only humans can kick....FOR NOW
		(agent_is_active, ":agent"),
		(agent_slot_eq, ":agent", slot_agent_is_running_away, 0),#Isn't fleeing the battle.
		##He's an eligible human.  Now see if he's in a position to kick.
		(agent_get_attack_action, ":attack_action", ":agent"), #returned values: free = 0, readying_attack = 1, releasing_attack = 2, completing_attack_after_hit = 3, attack_parried = 4, reloading = 5, after_release = 6, cancelling_attack = 7
		(agent_get_defend_action, ":defend_action", ":agent"),#
		(this_or_next|eq,":attack_action",4),#Just got parried
		(this_or_next|eq,":defend_action",1),#Parrying an enemy
		##So he'll only try to kick if he just parried an enemy attack, or his own attack just got parried.
		(agent_get_team, ":team", ":agent"),
		(assign, ":maximum_distance", 100),
		#Target Acquisition
		(agent_ai_get_look_target,":suspect",":agent"),
		(gt,":suspect",0),#Make sure there is someone.
		(agent_is_alive, ":suspect"),
		(agent_is_human, ":suspect"),#Only kick humans
		(agent_is_active, ":suspect"),
		(agent_get_team, ":suspect_team", ":suspect"),
		(neq, ":suspect_team", ":team"),#Friends don't let friends kick friends.
		(agent_get_position, pos1, ":agent"),#Distance check
		(agent_get_position, pos2, ":suspect"),
		(neg|position_is_behind_position, pos2, pos1), #Suspect can't be behind kicker.
		(get_distance_between_positions, ":distance", pos1, pos2),
		(le, ":distance", ":maximum_distance"),
		#Check chance
		(store_random_in_range,":kickchance", 1, 10),
		(try_begin),
			(eq,":kickchance",1), #10% chance per check
				#(display_message, "@Agent kicks."),
				(agent_set_animation, ":agent", "anim_prepare_kick_0"),
				(agent_deliver_damage_to_agent, ":agent", ":suspect", 3),
				(agent_set_animation, ":suspect", "anim_strike3_abdomen_front"),#Get Kicked
			(try_end),
	   (try_end),]),
	   
	   ##AI Kicking end
		
		
		(0.25, 0.0, 4.0,
		[
			(eq, "$sp_shield_bash_ai", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(neq, ":var_2", ":player_agent_no"),
				(agent_is_alive, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_active, ":var_2"), #Test to see if it stops AI from shield bashing (new addition v3)
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(store_skill_level, ":skill_level_shield_troop_id_var_2", "skl_shield", ":troop_id_var_2"),
				(store_proficiency_level, ":proficiency_level_troop_id_var_2_0", ":troop_id_var_2", 0),
				(ge, ":skill_level_shield_troop_id_var_2", 4),
				(ge, ":proficiency_level_troop_id_var_2_0", 200),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(le, ":horse_var_2", 0),
				(try_begin),
					(neg|agent_slot_ge, ":var_2", 50, 1),
					(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
					(agent_get_wielded_item, ":wielded_item_var_2_1", ":var_2", 1),
					(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
					(eq, ":type_wielded_item_var_2_1", 7),
					(agent_get_attack_action, ":attack_action_var_2", ":var_2"),
					(eq, ":attack_action_var_2", 0),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_position, 1, ":var_2"),
					(assign, ":value", -1),
					(assign, ":value_2", 125),
					(try_for_agents, ":var_13"),
						(agent_is_alive, ":var_13"),
						(agent_is_human, ":var_13"),
						(agent_get_position, 2, ":var_13"),
						(neg|position_is_behind_position, 2, 1),
						(agent_get_team, ":team_var_13", ":var_13"),
						(neq, ":team_var_13", ":team_var_2"),
						(try_begin),
							(eq, ":team_var_2", 0),
							(assign, ":value_3", 2),
						(else_try),
							(eq, ":team_var_2", 2),
							(assign, ":value_3", 0),
						(else_try),
							(eq, ":team_var_2", 1),
							(assign, ":value_3", 3),
						(else_try),
							(eq, ":team_var_2", 3),
							(assign, ":value_3", 1),
						(try_end),
						(neq, ":team_var_13", ":value_3"),
						(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
						(le, ":distance_between_positions_1_2", ":value_2"),
						(assign, ":value_2", ":distance_between_positions_1_2"),
						(assign, ":value", ":var_13"),
					(try_end),
					(ge, ":value", 0),
					(agent_get_horse, ":horse_var_2", ":value"),
					(eq, ":horse_var_2", -1),
					(store_random_in_range, ":random_in_range_15_26", 15, 26),
					(agent_set_slot, ":var_2", 50, ":random_in_range_15_26"),
					(agent_set_animation, ":var_2", "anim_shield_bash"),
					(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
					(troop_get_type, ":type_wielded_item_var_2_1", ":troop_id_var_2"),
					(try_begin),
						(eq, ":type_wielded_item_var_2_1", 0),
						(agent_play_sound, ":var_2", "snd_man_yell"),
					(else_try),
						(eq, ":type_wielded_item_var_2_1", 1),
						(agent_play_sound, ":var_2", "snd_woman_yell"),
					(try_end),
					(agent_play_sound, ":value", "snd_wooden_hit_low_armor_high_damage"),
					(agent_get_defend_action, ":attack_action_var_2", ":value"),
					(try_begin),
						(eq, ":attack_action_var_2", 2),
						(neg|position_is_behind_position, 1, 2),
						(agent_get_wielded_item, ":wielded_item_var_2_1", ":value", 1),
						(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
						(eq, ":type_wielded_item_var_2_1", 7),
						(agent_set_animation, ":value", "anim_shield_bash"),
					(else_try),
						(agent_set_animation, ":value", "anim_shield_strike"),
					(try_end),
				(try_end),
				(agent_get_slot, ":var_2_50", ":var_2", 50),
				(val_sub, ":var_2_50", 1),
				(val_max, ":var_2_50", 0),
				(agent_set_slot, ":var_2", 50, ":var_2_50"),
			(try_end)
		]),

		(0.0, 0.0, ti_once,
		[
			(eq, 0, 1),
			(eq, "$enable_deahtcam", 1),
			(main_hero_fallen)
		],

		[
			(assign, "$fclock", 1),
			(call_script, "script_player_order_formations", 2),
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_team, ":team_player_agent_no", ":player_agent_no"),
			(team_give_order, ":team_player_agent_no", 9, 2)
		]),

		(0.0, 0.0, 5.0,
		[],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_non_player, ":var_2"), #Agent must not be a player V1.0998D2
				(neq, ":player_agent_no", ":var_2"),
				(agent_slot_eq, ":var_2", 100, 0),
				(agent_is_alive, ":var_2"),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(agent_get_ammo, ":ammo_var_2", ":var_2"),
				(le, ":ammo_var_2", 0),
				(try_begin),
					(gt, ":horse_var_2", 0),
					(neg|troop_is_guarantee_ranged, ":troop_id_var_2"),
					(agent_get_wielded_item, ":wielded_item_var_2_0", ":var_2", 0),
					(neg|is_between, ":wielded_item_var_2_0", "itm_light_lance", "itm_spear_a"),
					(try_for_range, ":item", "itm_light_lance", "itm_spear_a"),
						(agent_set_wielded_item, ":var_2", ":item"),
					(try_end),
				(else_try),
					(eq, "$tom_use_banners", 1),
					(try_for_range, ":item", 1198, 1202),
						(agent_set_wielded_item, ":var_2", ":item"),
					(try_end),
					(agent_get_wielded_item, ":item", ":var_2", 0),
					(is_between, ":item", 1198, 1202),
				(else_try),
					(neg|troop_is_guarantee_ranged, ":troop_id_var_2"),
					(le, ":horse_var_2", 0),
					(agent_get_wielded_item, ":wielded_item_var_2_0", ":var_2", 0),
					(is_between, ":wielded_item_var_2_0", "itm_light_lance", "itm_spear_a"),
					(try_for_range, reg0, 0, 4),
						(agent_get_item_slot, ":item", ":var_2", reg0),
						(is_between, ":item", 1, "itm_cross_end"), #Previously itm_items_end
						(neg|is_between, ":item", "itm_light_lance", "itm_bamboo_spear"),
						(item_get_type, ":type_item", ":item"),
						(this_or_next|eq, ":type_item", 3),
						(this_or_next|eq, ":type_item", 4),
						(eq, ":type_item", 2),
						(agent_set_wielded_item, ":var_2", ":item"),
					(try_end),
				(else_try),
					(neg|troop_is_guarantee_ranged, ":troop_id_var_2"),
					(le, ":horse_var_2", 0),
					(agent_get_wielded_item, ":wielded_item_var_2_0", ":var_2", 0),
					(neg|is_between, ":wielded_item_var_2_0", "itm_bamboo_spear", "itm_wooden_shield"),
					(try_for_range, ":item", "itm_bamboo_spear", "itm_wooden_shield"),
						(agent_set_wielded_item, ":var_2", ":item"),
					(try_end),
				(else_try),
					(troop_is_guarantee_ranged, ":troop_id_var_2"),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_division, ":division_var_2", ":var_2"),
					(team_get_hold_fire_order, ":hold_fire_order_team_var_2_division_var_2", ":team_var_2", ":division_var_2"),
					(neq, ":hold_fire_order_team_var_2_division_var_2", 1),
					(is_between, ":wielded_item_var_2_0", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_0", ":wielded_item_var_2_0"),
					(this_or_next|le, ":wielded_item_var_2_0", -1),
					(this_or_next|neq, ":type_wielded_item_var_2_0", 10),
					(this_or_next|neq, ":type_wielded_item_var_2_0", 9),
					(neq, ":type_wielded_item_var_2_0", 8),
					(call_script, "script_get_closest_enemy_distance_new", ":var_2", ":team_var_2", 300),
					(assign, ":var_13", reg1),
					(gt, ":var_13", 300),
					(assign, ":value", 4),
					(try_for_range, reg0, 0, ":value"),
						(agent_get_item_slot, ":item_slot_var_2_reg0", ":var_2", reg0),
						(is_between, ":item_slot_var_2_reg0", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_0", ":item_slot_var_2_reg0"),
						(this_or_next|eq, ":type_wielded_item_var_2_0", 10),
						(this_or_next|eq, ":type_wielded_item_var_2_0", 8),
						(eq, ":type_wielded_item_var_2_0", 9),
						(agent_set_wielded_item, ":var_2", ":item_slot_var_2_reg0"),
						(assign, ":value", -1),
					(try_end),
				(try_end),
			(try_end)
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(assign, "$gk_order", 0),
			(assign, "$gk_order_hold_over_there", 0),
			(assign, "$autorotate_at_player", 1),
			(assign, "$fclock", 1),
			(try_for_range, ":number", 0, 4),
				(try_for_range, ":number_2", 84, 93),
					(team_set_slot, ":number", ":number_2", -1),
				(try_end),
			(try_end),
			(neq, "$new_session", 1),
			(call_script, "script_init_item_score"),
			(assign, "$new_session", 1)
		]),

		(0.0, 0.4, ti_once,
		[],

		[
			(get_player_agent_no, "$fplayer_agent_no"),
			(agent_get_team, "$fplayer_team_no", "$fplayer_agent_no"),
			(call_script, "script_store_battlegroup_data"),
			(try_for_agents, ":var_1"),
				(agent_is_human, ":var_1"),
				(agent_get_team, ":team_var_1", ":var_1"),
				(agent_get_troop_id, ":troop_id_var_1", ":var_1"),
				(store_faction_of_troop, ":faction_of_troop_troop_id_var_1", ":troop_id_var_1"),
				(team_get_slot, ":team_var_1_1", ":team_var_1", 1),
				(val_add, ":team_var_1_1", ":faction_of_troop_troop_id_var_1"),
				(team_set_slot, ":team_var_1", 1, ":team_var_1_1"),
			(try_end),
			(try_for_range, ":number", 0, 4),
				(team_slot_ge, ":number", 4, 1),
				(team_get_leader, ":leader_number", ":number"),
				(try_begin),
					(ge, ":leader_number", 0),
					(agent_get_troop_id, ":troop_id_leader_number", ":leader_number"),
					(store_faction_of_troop, ":faction_of_troop_troop_id_leader_number", ":troop_id_leader_number"),
				(else_try),
					(team_get_slot, ":number_4", ":number", 4),
					(team_get_slot, ":team_var_1_1", ":number", 1),
					(store_mul, ":faction_of_troop_troop_id_leader_number", ":team_var_1_1", 10),
					(val_div, ":faction_of_troop_troop_id_leader_number", ":number_4"),
					(val_add, ":faction_of_troop_troop_id_leader_number", 5),
					(val_div, ":faction_of_troop_troop_id_leader_number", 10),
				(try_end),
				(team_set_slot, ":number", 1, ":faction_of_troop_troop_id_leader_number"),
			(try_end),
			(display_message, "@Forming ranks."),
			(assign, ":value", 0),
			(try_for_range, ":number_2", 0, 9),
				(store_add, ":value_2", 84, ":number_2"),
				(this_or_next|team_slot_eq, "$fplayer_team_no", ":value_2", 2),
				(team_slot_eq, "$fplayer_team_no", ":value_2", 5),
				(store_add, ":value_2", 12, ":number_2"),
				(team_get_slot, reg0, "$fplayer_team_no", ":value_2"),
				(lt, ":value", reg0),
				(assign, ":value", reg0),
			(try_end),
			(assign, ":value_3", 0),
			(try_begin),
				(gt, ":value", 0),
				(val_mul, ":value", 2),
				(convert_to_fixed_point, ":value"),
				(store_sqrt, ":value_3", ":value"),
				(convert_from_fixed_point, ":value_3"),
				(val_sub, ":value_3", 1),
				(store_mul, reg0, 2, 50),
				(val_add, reg0, 300),
				(val_mul, ":value_3", reg0),
				(store_mul, ":value_4", 2, 50),
				(val_add, ":value_4", 67),
				(val_mul, ":value_4", 2),
				(val_sub, ":value_3", ":value_4"),
				(try_begin),
					(gt, ":value_3", 0),
					(agent_get_position, 49, "$fplayer_agent_no"),
					(copy_position, 2, 49),
					(call_script, "script_team_get_position_of_enemies", 60, "$fplayer_team_no", 9),
					(call_script, "script_point_y_toward_position", 2, 60),
					(position_move_y, 2, ":value_3"),
					(agent_set_position, "$fplayer_agent_no", 2),
				(try_end),
			(try_end),
			(call_script, "script_division_reset_places"),
			(try_for_range, ":number_2", 0, 9),
				(store_add, ":value_2", 12, ":number_2"),
				(team_slot_ge, "$fplayer_team_no", ":value_2", 1),
				(store_add, ":value_2", 84, ":number_2"),
				(try_begin),
					(team_slot_eq, "$fplayer_team_no", ":value_2", 1),
					(call_script, "script_player_attempt_formation", ":number_2", 1),
				(else_try),
					(this_or_next|team_slot_eq, "$fplayer_team_no", ":value_2", 2),
					(team_slot_eq, "$fplayer_team_no", ":value_2", 5),
					(call_script, "script_player_attempt_formation", ":number_2", 4),
				(else_try),
					(call_script, "script_get_default_formation", "$fplayer_team_no"),
					(call_script, "script_player_attempt_formation", ":number_2", reg0),
				(try_end),
			(try_end),
			(try_begin),
				(gt, ":value_3", 0),
				(agent_set_position, "$fplayer_agent_no", 49),
			(try_end)
		]),

		
		
		
		#Voice-over for Infantry, archers & Cavalry
		
		(0.0, 0.3, 0.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 29) #Everyone!
		],

		[
		(call_script, "script_identify_battle_voices_all")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 30) #Infantry
		],

		[
		(call_script, "script_identify_battle_voices_inf")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 31) #Archers
		],

		[
		(call_script, "script_identify_battle_voices_archers")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 32) #Cavalry
		],

		[
		(call_script, "script_identify_battle_voices_cav")
		]),
		#Voice-over for Infantry, archers & Cavalry	
#		
#		
#		
#		
#		
#		
		(0.0, 0.3, 0.0,
		[
			(game_key_clicked, 23)
		],

		[
			(eq, "$gk_order", 23),
			(try_begin),
				(game_key_is_down, 23),
				(assign, "$gk_order_hold_over_there", 1),
				(assign, "$gk_order", 0),
				(assign, "$holdit", 0),
			(else_try),
				(eq, "$holdit", 1),
				(assign, "$fclock", 1),
				(call_script, "script_player_order_formations", 0),
				(assign, "$gk_order", 0),
				(assign, "$holdit", 0),
			(try_end)
		]),

		(0.0, 0.0, 0.0,
		[
			(game_key_clicked, 23)
		],

		[
			(try_begin),
				(neq, "$gk_order", 23),
				(neq, "$gk_order", 24),
				(neq, "$gk_order", 25),
				(assign, "$gk_order", 23),
				(assign, "$holdit", 0),
			(else_try),
				(eq, "$gk_order", 23),
				(assign, "$holdit", 1),
				(call_script, "script_first_formation_member_sound_horn"),
			(else_try),
				(eq, "$gk_order", 24),
				(assign, "$fclock", 1),
				(call_script, "script_player_order_formations", 5),
				(assign, "$gk_order", 0),
			(else_try),
				(eq, "$gk_order", 25),
				(assign, "$gk_order", 0),
			(try_end)
		]),

		(0.0, 0.0, 0.0,
		[
			(game_key_clicked, 24)
		],

		[
			(try_begin),
				(neq, "$gk_order", 23),
				(neq, "$gk_order", 24),
				(neq, "$gk_order", 25),
				(assign, "$gk_order", 24),
			(else_try),
				(eq, "$gk_order", 23),
				(assign, "$fclock", 1),
				(call_script, "script_first_formation_member_sound_horn"),
				(call_script, "script_player_order_formations", 1),
				(assign, "$gk_order", 0),
			(else_try),
				(eq, "$gk_order", 24),
				(assign, "$fclock", 1),
				(call_script, "script_player_order_formations", 6),
				(assign, "$gk_order", 0),
			(else_try),
				(eq, "$gk_order", 25),
				(assign, "$gk_order", 0),
			(try_end)
		]),

		(0.0, 0.0, 0.0,
		[
			(game_key_clicked, 25)
		],

		[
			(try_begin),
				(neq, "$gk_order", 23),
				(neq, "$gk_order", 24),
				(neq, "$gk_order", 25),
				(assign, "$gk_order", 25),
			(else_try),
				(eq, "$gk_order", 23),
				(assign, "$fclock", 1),
				(call_script, "script_first_formation_member_sound_horn"),
				(call_script, "script_player_order_formations", 2),
				(assign, "$tom_yell_smelly_peasents", 1),
				(assign, "$gk_order", 0),
			(else_try),
				(eq, "$gk_order", 24),
				(assign, "$fclock", 1),
				(call_script, "script_player_order_formations", 8),
				(assign, "$gk_order", 0),
			(else_try),
				(eq, "$gk_order", 25),
				(assign, "$gk_order", 0),
			(try_end)
		]),

		(0.0, 0.0, 0.0,
		[
			(game_key_clicked, 26)
		],

		[
			(try_begin),
				(eq, "$gk_order", 0),
				(assign, "$gk_order", 26),
				(start_presentation, "prsnt_order_display"),
			(else_try),
				(eq, "$gk_order", 23),
				(assign, "$fclock", 1),
				(call_script, "script_first_formation_member_sound_horn"),
				(call_script, "script_player_order_formations", 11),
				(assign, "$gk_order", 0),
			(else_try),
				(eq, "$gk_order", 24),
				(assign, "$fclock", 1),
				(call_script, "script_player_order_formations", 7),
				(assign, "$gk_order", 0),
			(else_try),
				(eq, "$gk_order", 25),
				(assign, "$gk_order", 0),
			(else_try),
				(eq, "$gk_order", 26),
				(call_script, "script_division_reset_places"),
				(try_for_range, ":number", 0, 9),
					(class_is_listening_order, "$fplayer_team_no", ":number"),
					(store_add, ":value", 12, ":number"),
					(team_slot_ge, "$fplayer_team_no", ":value", 1),
					(assign, "$fclock", 1),
					(call_script, "script_player_attempt_formation", ":number", 2),
					(call_script, "script_first_formation_member_sound_horn"),
				(try_end),
				(assign, "$gk_order", 0),
				(start_presentation, "prsnt_order_display"),
			(try_end)
		]),

		(0.0, 0.0, 0.0,
		[
			(game_key_clicked, 27)
		],

		[
			(try_begin),
				(eq, "$gk_order", 23),
				(assign, "$fclock", 1),
				(call_script, "script_first_formation_member_sound_horn"),
				(call_script, "script_player_order_formations", 14),
				(assign, "$gk_order", 0),
			(else_try),
				(eq, "$gk_order", 24),
				(assign, "$gk_order", 0),
			(else_try),
				(eq, "$gk_order", 26),
				(call_script, "script_division_reset_places"),
				(try_for_range, ":number", 0, 9),
					(class_is_listening_order, "$fplayer_team_no", ":number"),
					(store_add, ":value", 12, ":number"),
					(team_slot_ge, "$fplayer_team_no", ":value", 1),
					(assign, "$fclock", 1),
					(call_script, "script_player_attempt_formation", ":number", 3),
					(call_script, "script_first_formation_member_sound_horn"),
				(try_end),
				(assign, "$gk_order", 0),
				(start_presentation, "prsnt_order_display"),
			(try_end)
		]),

		(0.0, 0.0, 0.0,
		[
			(game_key_clicked, 28)
		],

		[
			(try_begin),
				(eq, "$gk_order", 24),
				(assign, "$fclock", 1),
				(call_script, "script_player_order_formations", 4),
				(assign, "$gk_order", 0),
			(else_try),
				(eq, "$gk_order", 26),
				(call_script, "script_division_reset_places"),
				(try_for_range, ":number", 0, 9),
					(class_is_listening_order, "$fplayer_team_no", ":number"),
					(store_add, ":value", 12, ":number"),
					(team_slot_ge, "$fplayer_team_no", ":value", 1),
					(assign, "$fclock", 1),
					(call_script, "script_player_attempt_formation", ":number", 4),
					(call_script, "script_first_formation_member_sound_horn"),
				(try_end),
				(assign, "$gk_order", 0),
				(start_presentation, "prsnt_order_display"),
			(try_end)
		]),

		(0.0, 0.0, 0.0,
		[
		#(key_clicked, 63), #63
		#(display_message, "@Main block Phase A finalized"),
		(key_clicked, 65), #63
		],

		[
			(eq, "$gk_order", 26),
			(call_script, "script_division_reset_places"),
			(try_for_range, ":number", 0, 9),
				(class_is_listening_order, "$fplayer_team_no", ":number"),
				(store_add, ":value", 12, ":number"),
				(team_slot_ge, "$fplayer_team_no", ":value", 1),
				(assign, "$fclock", 1),
				(call_script, "script_player_attempt_formation", ":number", 5),
				(call_script, "script_first_formation_member_sound_horn"),
			(try_end),
			(assign, "$gk_order", 0),
			(start_presentation, "prsnt_order_display")
		]),

		(0.0, 0.0, 0.0,
		[
			(key_clicked, 66)
		],

		[
			(eq, "$gk_order", 26),
			(assign, "$fclock", 1),
			(call_script, "script_player_order_formations", 2),
			(call_script, "script_first_formation_member_sound_horn"),
			(assign, "$gk_order", 0),
			(start_presentation, "prsnt_order_display")
		]),

		(0.0, 0.0, 0.0,
		[
			(this_or_next|game_key_clicked, 30),
			(this_or_next|game_key_clicked, 31),
			(this_or_next|game_key_clicked, 32),
			(this_or_next|game_key_clicked, 33),
			(this_or_next|game_key_clicked, 34),
			(this_or_next|game_key_clicked, 35),
			(this_or_next|game_key_clicked, 36),
			(this_or_next|game_key_clicked, 37),
			(this_or_next|game_key_clicked, 38),
			(this_or_next|game_key_clicked, 39),
			(this_or_next|game_key_clicked, 40),
			(game_key_clicked, 29)
		],

		[
			(assign, "$gk_order", 0),
			(start_presentation, "prsnt_order_display")
		]),

		(0.0, 0.0, 0.0,
		[
			(key_is_down, 1),
			(is_presentation_active, "prsnt_order_display")
		],

		[
			(assign, "$gk_order", 0),
			(presentation_set_duration, 0)
		]),

		(0.5, 0.0, 0.0,
		[
			(eq, "$gk_order_hold_over_there", 1),
			(neg|game_key_is_down, 23)
		],

		[
			(set_fixed_point_multiplier, 100),
			(assign, "$fclock", 1),
			(call_script, "script_team_get_position_of_enemies", 60, "$fplayer_team_no", 9),
			(assign, ":var_1", 0),
			(try_for_range, ":number", 0, 9),
				(class_is_listening_order, "$fplayer_team_no", ":number"),
				(store_add, ":value", 12, ":number"),
				(team_slot_ge, "$fplayer_team_no", ":value", 1),
				(val_add, ":var_1", 1),
			(try_end),
			(gt, ":var_1", 0),
			(agent_get_position, 49, "$fplayer_agent_no"),
			(call_script, "script_division_reset_places"),
			(try_for_range, ":number", 0, 9),
				(class_is_listening_order, "$fplayer_team_no", ":number"),
				(store_add, ":value", 12, ":number"),
				(team_get_slot, ":fplayer_team_no_value", "$fplayer_team_no", ":value"),
				(gt, ":fplayer_team_no_value", 0),
				(store_add, ":value", 93, ":number"),
				(team_get_slot, ":fplayer_team_no_value_2", "$fplayer_team_no", ":value"),
				(team_get_order_position, 2, "$fplayer_team_no", ":number"),
				(call_script, "script_point_y_toward_position", 2, 60),
				(try_begin),
					(gt, ":var_1", 1),
					(agent_set_position, "$fplayer_agent_no", 2),
					(call_script, "script_player_attempt_formation", ":number", ":fplayer_team_no_value_2"),
				(else_try),
					(neq, ":fplayer_team_no_value_2", 0),
					(call_script, "script_set_formation_position", "$fplayer_team_no", ":number", 2),
					(store_add, ":value", 102, ":number"),
					(team_get_slot, ":fplayer_team_no_value_3", "$fplayer_team_no", ":value"),
					(try_begin),
						(store_add, ":value", 84, ":number"),
						(team_get_slot, ":fplayer_team_no_value_4", "$fplayer_team_no", ":value"),
						(neq, ":fplayer_team_no_value_4", 2),
						(neq, ":fplayer_team_no_value_4", 5),
						(call_script, "script_get_centering_amount", ":fplayer_team_no_value_2", ":fplayer_team_no_value", ":fplayer_team_no_value_3"),
						(try_begin),
							(eq, ":fplayer_team_no_value_4", 1),
							(val_mul, reg0, -1),
							(assign, ":value_2", "script_form_archers"),
						(else_try),
							(assign, ":value_2", "script_form_infantry"),
						(try_end),
						(position_move_x, 2, reg0),
					(else_try),
						(assign, ":value_2", "script_form_cavalry"),
					(try_end),
					(copy_position, 1, 2),
					(call_script, ":value_2", "$fplayer_team_no", ":number", "$fplayer_agent_no", ":fplayer_team_no_value_3", ":fplayer_team_no_value_2"),
				(try_end),
				(store_add, ":value", 111, ":number"),
				(team_set_slot, "$fplayer_team_no", ":value", 0),
			(try_end),
			(agent_set_position, "$fplayer_agent_no", 49),
			(assign, "$gk_order_hold_over_there", 0)
		]),

		(1.0, 0.0, 0.0,
		[
			(neg|key_is_down, 65),
			(neg|key_is_down, 66),
			(neg|game_key_is_down, 23),
			(neg|game_key_is_down, 24),
			(neg|game_key_is_down, 25),
			(neg|game_key_is_down, 26),
			(neg|game_key_is_down, 27),
			(neg|game_key_is_down, 28)
		],

		[
			(set_fixed_point_multiplier, 100),
			(store_mod, ":value", "$fclock", 5),
			(store_mod, ":value_2", "$fclock", 10),
			(try_begin),
				(eq, ":value_2", 0),
				(try_for_range, ":number", 0, 4),
					(try_for_range, ":number_2", 0, 9),
						(store_add, ":value_3", 84, ":number_2"),
						(this_or_next|team_slot_eq, ":number", ":value_3", 4),
						(team_slot_eq, ":number", ":value_3", 5),
						(team_set_slot, ":number", ":value_3", -1),
					(try_end),
				(try_end),
			(try_end),
			(call_script, "script_store_battlegroup_data"),
			(call_script, "script_team_get_position_of_enemies", 60, "$fplayer_team_no", 9),
			(try_begin),
				(eq, reg0, 0),
				(try_for_range, ":number_2", 0, 9),
					(call_script, "script_formation_end", "$fplayer_team_no", ":number_2"),
				(try_end),
			(else_try),
				(assign, "$autorotate_at_player", 0),
				(call_script, "script_division_reset_places"),
				(try_for_range, ":number_2", 0, 9),
					(store_add, ":value_3", 12, ":number_2"),
					(team_get_slot, ":fplayer_team_no_value_3", "$fplayer_team_no", ":value_3"),
					(gt, ":fplayer_team_no_value_3", 0),
					(try_begin),
						(store_add, ":value_3", 111, ":number_2"),
						(team_slot_eq, "$fplayer_team_no", ":value_3", 1),
						(call_script, "script_battlegroup_place_around_leader", "$fplayer_team_no", ":number_2"),
						(team_set_slot, "$fplayer_team_no", ":value_3", 1),
					(else_try),
						(eq, ":value", 0),
						(store_add, ":value_3", 93, ":number_2"),
						(team_get_slot, ":fplayer_team_no_value_3_2", "$fplayer_team_no", ":value_3"),
						(neq, ":fplayer_team_no_value_3_2", 0),
						(team_get_movement_order, reg0, "$fplayer_team_no", ":number_2"),
						(neq, reg0, 11),
						(call_script, "script_get_formation_position", 1, "$fplayer_team_no", ":number_2"),
						(store_add, ":value_3", 102, ":number_2"),
						(team_get_slot, ":fplayer_team_no_value_3_3", "$fplayer_team_no", ":value_3"),
						(store_add, ":value_3", 84, ":number_2"),
						(team_get_slot, ":fplayer_team_no_value_3_4", "$fplayer_team_no", ":value_3"),
						(try_begin),
							(neq, ":fplayer_team_no_value_3_4", 2),
							(neq, ":fplayer_team_no_value_3_4", 5),
							(position_move_y, 1, -2000),
						(try_end),
						(call_script, "script_point_y_toward_position", 1, 60),
						(try_begin),
							(neq, ":fplayer_team_no_value_3_4", 2),
							(neq, ":fplayer_team_no_value_3_4", 5),
							(position_move_y, 1, 2000),
						(try_end),
						(call_script, "script_set_formation_position", "$fplayer_team_no", ":number_2", 1),
						(try_begin),
							(neq, ":fplayer_team_no_value_3_4", 2),
							(neq, ":fplayer_team_no_value_3_4", 5),
							(call_script, "script_get_centering_amount", ":fplayer_team_no_value_3_2", ":fplayer_team_no_value_3", ":fplayer_team_no_value_3_3"),
							(try_begin),
								(eq, ":fplayer_team_no_value_3_4", 1),
								(val_mul, reg0, -1),
							(try_end),
							(position_move_x, 1, reg0),
						(try_end),
						(try_begin),
							(eq, ":fplayer_team_no_value_3_4", 1),
							(call_script, "script_form_archers", "$fplayer_team_no", ":number_2", "$fplayer_agent_no", ":fplayer_team_no_value_3_3", ":fplayer_team_no_value_3_2"),
						(else_try),
							(this_or_next|eq, ":fplayer_team_no_value_3_4", 2),
							(eq, ":fplayer_team_no_value_3_4", 5),
							(call_script, "script_form_cavalry", "$fplayer_team_no", ":number_2", "$fplayer_agent_no", ":fplayer_team_no_value_3_3"),
						(else_try),
							(call_script, "script_form_infantry", "$fplayer_team_no", ":number_2", "$fplayer_agent_no", ":fplayer_team_no_value_3_3", ":fplayer_team_no_value_3_2"),
						(try_end),
					(try_end),
				(try_end),
				(assign, "$autorotate_at_player", 1),
			(try_end),
			(val_add, "$fclock", 1)
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(assign, "$cur_casualties", 0),
			(assign, "$prev_casualties", 0),
			(assign, "$ranged_clock", 1),
			(assign, "$battle_phase", 1),
			(assign, "$clock_reset", 0),
			(try_for_range, ":number", 0, 4),
				(team_set_slot, ":number", 2, 1),
			(try_end),
			(init_position, 41),
			(init_position, 42),
			(init_position, 43),
			(init_position, 44)
		]),

		(0.0, 0.5, ti_once,
		[],

		[
			(try_for_agents, ":var_1"),
				(agent_set_slot, ":var_1", slot_agent_is_running_away, 0),
			(try_end),
			(set_fixed_point_multiplier, 100),
			(call_script, "script_battlegroup_get_position", 45, 0, 9),
			(call_script, "script_battlegroup_get_position", 46, 1, 9),
			(call_script, "script_battlegroup_get_position", 47, 2, 9),
			(call_script, "script_battlegroup_get_position", 48, 3, 9),
			(call_script, "script_field_tactics", 1)
		]),

		(1.0, 0.5, 0.0,
		[],

		[
			(try_begin),
				(call_script, "script_cf_count_casualties"),
				(assign, "$cur_casualties", reg0),
				(assign, "$battle_phase", 3),
			(try_end),
			(set_fixed_point_multiplier, 100),
			(call_script, "script_store_battlegroup_data"),
			(try_begin),
				(ge, "$battle_phase", 3),
				(eq, "$clock_reset", 0),
				(call_script, "script_field_tactics", 1),
				(assign, "$ranged_clock", 0),
				(assign, "$clock_reset", 1),
			(else_try),
				(ge, "$battle_phase", 2),
				(store_mod, reg0, "$ranged_clock", 5),
				(eq, reg0, 0),
				(call_script, "script_field_tactics", 1),
				(team_set_slot, 0, 3, "$defender_reinforcement_stage"),
				(team_set_slot, 1, 3, "$attacker_reinforcement_stage"),
			(else_try),
				(call_script, "script_field_tactics", 0),
			(try_end),
			(try_begin),
				(eq, "$battle_phase", 1),
				(assign, ":value", 0),
				(try_for_range, ":number", 0, 4),
					(neq, ":number", "$fplayer_team_no"),
					(team_slot_ge, ":number", 4, 1),
					(call_script, "script_battlegroup_get_position", 1, ":number", 1),
					(team_get_order_position, 0, ":number", 1),
					(get_distance_between_positions, reg0, 0, 1),
					(gt, reg0, 500),
					(assign, ":value", 1),
					(try_begin),
						(store_random_in_range, ":random_in_range_0_100", 0, 100),
						(lt, ":random_in_range_0_100", 15),
						(play_sound_at_position, "snd_horn", 1),
					(try_end),
				(try_end),
				(eq, ":value", 0),
				(assign, "$battle_phase", 2),
			(try_end),
			(val_add, "$ranged_clock", 1)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_is_human, ":trigger_param_1"),
			(agent_is_non_player, ":trigger_param_1"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(lt, ":troop_id_trigger_param_1", "trp_kidnapped_girl"),
			(try_for_range, reg0, 0, 4),
				(agent_get_item_slot, ":item_slot_trigger_param_1_reg0", ":trigger_param_1", reg0),
				(is_between, ":item_slot_trigger_param_1_reg0", 1, "itm_cross_end"), #Previously itm_items_end
				(agent_unequip_item, ":trigger_param_1", ":item_slot_trigger_param_1_reg0"),
			(try_end),
			(try_for_range, reg0, 0, 2),
				(agent_get_wielded_item, ":item_slot_trigger_param_1_reg0", ":trigger_param_1", reg0),
				(is_between, ":item_slot_trigger_param_1_reg0", 1, "itm_cross_end"), #Previously itm_items_end
				(agent_unequip_item, ":trigger_param_1", ":item_slot_trigger_param_1_reg0"),
			(try_end),
			(assign, ":var_4", 0),
			(assign, ":var_5", 25),
			(assign, ":var_6", 50),
			(assign, ":var_7", 75),
			(assign, ":var_8", 100),
			(assign, ":var_18", 125),
			(assign, ":var_10", 150),
			(assign, ":var_11", 175),
			(assign, ":var_12", 200),
			(assign, ":value", 0),
			(assign, ":value_2", 0),
			(assign, ":value_3", 0),
			(assign, ":value_4", 0),
			(assign, ":value_5", 0),
			(assign, ":value_6", 0),
			(assign, ":value_7", 0),
			(assign, ":value_8", 0),
			(assign, ":value_9", 0),
			(troop_get_inventory_capacity, ":inventory_capacity_troop_id_trigger_param_1", ":troop_id_trigger_param_1"),
			(try_for_range, ":localvariable", 0, ":inventory_capacity_troop_id_trigger_param_1"),
				(troop_get_inventory_slot, ":inventory_slot_troop_id_trigger_param_1_localvariable", ":troop_id_trigger_param_1", ":localvariable"),
				(is_between, ":inventory_slot_troop_id_trigger_param_1_localvariable", 1, "itm_cross_end"), #Previously itm_items_end
				(item_get_type, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
				(try_begin),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 4),
					(val_add, ":var_4", 1),
					(troop_set_slot, "trp_items_array", slot_troop_relations_begin, ":var_4"),
					(troop_set_slot, "trp_items_array", ":var_4", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 2),
					(val_add, ":var_5", 1),
					(troop_set_slot, "trp_items_array", slot_troop_last_quest_betrayed, ":var_5"),
					(troop_set_slot, "trp_items_array", ":var_5", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_2", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 7),
					(val_add, ":var_6", 1),
					(troop_set_slot, "trp_items_array", slot_troop_recruitment_random, ":var_6"),
					(troop_set_slot, "trp_items_array", ":var_6", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_3", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 3),
					(val_add, ":var_7", 1),
					(troop_set_slot, "trp_items_array", slot_troop_personalitymatch_object, ":var_7"),
					(troop_set_slot, "trp_items_array", ":var_7", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_4", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 10),
					(val_add, ":var_8", 1),
					(troop_set_slot, "trp_items_array", 100, ":var_8"),
					(troop_set_slot, "trp_items_array", ":var_8", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_5", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 6),
					(val_add, ":var_18", 1),
					(troop_set_slot, "trp_items_array", slot_troop_rehire_speech, ":var_18"),
					(troop_set_slot, "trp_items_array", ":var_18", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_6", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 5),
					(val_add, ":var_10", 1),
					(troop_set_slot, "trp_items_array", slot_troop_days_on_mission, ":var_10"),
					(troop_set_slot, "trp_items_array", ":var_10", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_7", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 8),
					(val_add, ":var_11", 1),
					(troop_set_slot, "trp_items_array", 175, ":var_11"),
					(troop_set_slot, "trp_items_array", ":var_11", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_8", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 9),
					(val_add, ":var_12", 1),
					(troop_set_slot, "trp_items_array", 200, ":var_12"),
					(troop_set_slot, "trp_items_array", ":var_12", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_9", 1),
				(try_end),
			(try_end),
			(try_begin),
				(eq, ":value", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_relations_begin),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 1, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_2", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_last_quest_betrayed),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 26, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_3", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_recruitment_random),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 51, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_4", 1),
				(try_begin),
					(eq, ":value_2", 1),
					(store_random_in_range, ":random_in_range_0_100", 0, 100),
					(lt, ":random_in_range_0_100", 65),
				(else_try),
					(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_personalitymatch_object),
					(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 76, ":items_array_relations_begin"),
					(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
					(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
				(try_end),
			(try_end),
			(try_begin),
				(eq, ":value_5", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", 100),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 101, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_6", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_rehire_speech),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 126, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_7", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_days_on_mission),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 151, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_8", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", 175),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 176, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_9", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", 200),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 201, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end)
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(assign, "$tom_sand_storm", 0),
			(call_script, "script_change_rain_or_snow"),
			(set_fixed_point_multiplier, 100),
			(try_begin),
				(is_currently_night),
				#(set_shader_param_float, "@vFresnelMultiplier", 15),
			(else_try),
				#(set_shader_param_float, "@vFresnelMultiplier", 50),
			(try_end)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$tom_sand_storm", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_position, 0, ":player_agent_no"),
			(position_set_z_to_ground_level, 0),
			(position_get_z, ":position_z_0", 0),
			(val_add, ":position_z_0", 400),
			(position_set_z, 0, ":position_z_0"),
			(particle_system_burst, "psys_desert_storm", 0, 2),
			(set_fixed_point_multiplier, 100)
		]),

#		(0.0, 2.0, ti_once,
#		[
#			(eq, "$tom_use_banners", 1)
#		],
#
#		[
#			(call_script, "script_set_flag_carriers")
#		]),

		(10.0, 0.0, 0.0,
		[
			(eq, "$tom_use_banners", 1),
			(eq, "$tom_bonus_banners", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_range, ":value"),
				(agent_slot_eq, ":value", 107, 1),
				(agent_is_alive, ":value"),
				(agent_is_active, ":value"),
				(agent_get_team, ":team_value", ":value"),
				(agent_get_position, 1, ":value"),
				(try_for_range, ":value_2"),
					(neq, ":value_2", ":value"),
					(agent_get_team, ":team_value_2", ":value_2"),
					(eq, ":team_value", ":team_value_2"),
					(agent_is_alive, ":value_2"),
					(agent_is_active, ":value_2"),
					(agent_is_human, ":value_2"),
					(agent_get_position, 2, ":value_2"),
					(get_distance_between_positions_in_meters, ":distance_between_positions_in_meters_1_2", 1, 2),
					(le, ":distance_between_positions_in_meters_1_2", 10),
					(store_agent_hit_points, ":agent_hit_points_value_2", ":value_2"),
					(val_add, ":agent_hit_points_value_2", 2),
					(val_min, ":agent_hit_points_value_2", 101),
					(agent_set_hit_points, ":value_2", ":agent_hit_points_value_2"),
					(try_begin),
						(eq, ":value_2", ":player_agent_no"),
						(display_message, "@You feel secured standing near the banner, healing some of your HP.", 0x006495ed),
					(try_end),
				(try_end),
			(try_end),
			(assign, ":value", ":player_agent_no"),
			(agent_is_alive, ":value"),
			(agent_get_wielded_item, ":wielded_item_value_0", ":value", 0),
			(is_between, ":wielded_item_value_0", 1198, 1202),
			(agent_get_team, ":team_value", ":value"),
			(agent_get_position, 1, ":value"),
			(try_for_range, ":value_2"),
				(neq, ":value_2", ":value"),
				(agent_get_team, ":team_value_2", ":value_2"),
				(eq, ":team_value", ":team_value_2"),
				(agent_is_alive, ":value_2"),
				(agent_is_active, ":value_2"),
				(agent_is_human, ":value_2"),
				(agent_get_position, 2, ":value_2"),
				(get_distance_between_positions_in_meters, ":distance_between_positions_in_meters_1_2", 1, 2),
				(le, ":distance_between_positions_in_meters_1_2", 10),
				(store_agent_hit_points, ":agent_hit_points_value_2", ":value_2"),
				(try_begin),
					(eq, ":wielded_item_value_0", 1201),
					(val_add, ":agent_hit_points_value_2", 1),
				(try_end),
				(val_add, ":agent_hit_points_value_2", 5),
				(val_max, ":agent_hit_points_value_2", 101),
				(agent_set_hit_points, ":value_2", ":agent_hit_points_value_2"),
			(try_end)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$tom_sand_storm", 3)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_position, 0, ":player_agent_no"),
			(position_set_z_to_ground_level, 0),
			(position_get_z, ":position_z_0", 0),
			(val_add, ":position_z_0", 2100),
			(position_set_z, 0, ":position_z_0"),
			(particle_system_burst, "psys_rain", 0, 1),
			(set_fixed_point_multiplier, 100)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$tom_sand_storm", 2)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_position, 0, ":player_agent_no"),
			(position_set_z_to_ground_level, 0),
			(position_get_z, ":position_z_0", 0),
			(val_add, ":position_z_0", 2000),
			(position_set_z, 0, ":position_z_0"),
			(particle_system_burst, "psys_blizzard", 0, 1),
			(set_fixed_point_multiplier, 100)
		]),

		(8.0, 0.0, 0.0,
		[
			(eq, "$tom_sand_storm", 3)
		],

		[
			(store_random_in_range, ":random_in_range_0_100", 0, 100),
			(try_begin),
				(ge, ":random_in_range_0_100", 90),
				(play_sound, "snd_thunder"),
			(try_end)
		]),

		(0.0, 0.0, ti_once,
		[
			(eq, "$tom_sand_storm", 2)
		],

		[
			(play_sound, "snd_wind")
		]),

		(0.0, 0.0, ti_once,
		[
			(eq, "$tom_sand_storm", 1)
		],

		[
			(play_sound, "snd_wind")
		]),

		(1.0, 0.0, ti_once,
		[
			(neq, "$g_battle_result", 0),
			(get_player_agent_no, ":player_agent_no"),
			(agent_is_alive, ":player_agent_no"),
			(agent_get_troop_id, ":troop_id_player_agent_no", ":player_agent_no"),
			(eq, ":troop_id_player_agent_no", "trp_player")
		],

		[
			(call_script, "script_freelancer_keep_field_loot")
		]),

		(0.0, 1.5, 0.0,
		[
			(key_clicked, 20),
			(get_player_agent_no, ":player_agent_no"),
			(agent_is_alive, ":player_agent_no"),
			(agent_set_animation, ":player_agent_no", "anim_cheer", 1),
			(agent_play_sound, ":player_agent_no", "snd_man_victory")
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_team, ":team_player_agent_no", ":player_agent_no"),
			(agent_get_position, 1, ":player_agent_no"),
			(try_for_agents, ":var_3"),
				(agent_is_alive, ":var_3"),
				(agent_is_human, ":var_3"),
				(agent_get_team, ":team_var_3", ":var_3"),
				(eq, ":team_var_3", ":team_player_agent_no"),
				(agent_get_position, 0, ":var_3"),
				(get_distance_between_positions_in_meters, ":distance_between_positions_in_meters_0_1", 0, 1),
				(lt, ":distance_between_positions_in_meters_0_1", 20),
				(agent_set_animation, ":var_3", "anim_cheer", 1),
				(agent_play_sound, ":var_3", "snd_man_victory"),
				(agent_get_slot, ":var_3_courage_score", ":var_3", slot_agent_courage_score),
				(val_add, ":var_3_courage_score", 5),
				(val_min, ":var_3_courage_score", 9600),
				(agent_set_slot, ":var_3", slot_agent_courage_score, ":var_3_courage_score"),
			(try_end),
			(display_message, "@Huzzah! You encourage your nearby troops.")
		]),

		(0.0, 1.7, 0.0,
		[
			(eq, "$tom_yell_smelly_peasents", 1)
		],

		[
			(call_script, "script_tom_command_cheer"),
			(assign, "$tom_yell_smelly_peasents", 0)
		]),

		(-26.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(store_trigger_param_2, ":trigger_param_2"),
			(neg|agent_is_ally, ":trigger_param_1"),
			(agent_is_human, ":trigger_param_1"),
			(eq, ":trigger_param_2", "$fplayer_agent_no"),
			(val_add, "$killcount", 1)
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_clear_troop_array", "trp_lances_troop_in_combat", 0, "$lance_troop_serving")
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_is_human, ":trigger_param_1"),
			(get_player_agent_no, ":player_agent_no"),
			(neq, ":trigger_param_1", ":player_agent_no"),
			(agent_get_party_id, ":party_id_trigger_param_1", ":trigger_param_1"),
			(eq, ":party_id_trigger_param_1", "p_main_party"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(call_script, "script_search_for_troop", ":troop_id_trigger_param_1"),
			(agent_set_slot, ":trigger_param_1", 102, reg0)
		]),

		(2.0, 0.0, 0.0,
		[
			(eq, "$g_battle_won", 0)
		],

		[
			(set_fixed_point_multiplier, 100),
			(try_for_agents, ":var_1"),
				(agent_get_troop_id, ":troop_id_var_1", ":var_1"),
				(try_begin),
					(agent_is_alive, ":var_1"),
					(agent_is_human, ":var_1"),
					(agent_is_non_player, ":var_1"),
					(agent_is_active, ":var_1"),
					(agent_slot_eq, ":var_1", slot_agent_is_running_away, 0),
					(agent_slot_eq, ":var_1", 100, 0),
					(agent_get_division, ":division_var_1", ":var_1"),
					(agent_get_horse, ":horse_var_1", ":var_1"),
					(gt, ":horse_var_1", 0),
					(troop_is_guarantee_ranged, ":troop_id_var_1"),
					(agent_get_ammo, ":ammo_var_1", ":var_1"),
					(gt, ":ammo_var_1", 0),
					(agent_get_team, ":team_var_1", ":var_1"),
					(team_get_hold_fire_order, ":hold_fire_order_team_var_1_division_var_1", ":team_var_1", ":division_var_1"),
					(neq, ":hold_fire_order_team_var_1_division_var_1", 1),
					(try_begin),
						(try_for_range, reg0, 0, 4),
							(agent_get_item_slot, ":item_slot_var_1_reg0", ":var_1", reg0),
							(is_between, ":item_slot_var_1_reg0", 1, "itm_cross_end"), #Previously itm_items_end
							(item_get_type, ":type_item_slot_var_1_reg0", ":item_slot_var_1_reg0"),
							(this_or_next|eq, ":type_item_slot_var_1_reg0", 10),
							(eq, ":type_item_slot_var_1_reg0", 8),
							(agent_set_wielded_item, ":var_1", ":item_slot_var_1_reg0"),
							(assign, reg0, -1),
						(try_end),
					(try_end),
					(agent_get_wielded_item, ":item_slot_var_1_reg0", ":var_1", 0),
					(is_between, ":item_slot_var_1_reg0", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_item_slot_var_1_reg0", ":item_slot_var_1_reg0"),
					(this_or_next|eq, ":type_item_slot_var_1_reg0", 10),
					(eq, ":type_item_slot_var_1_reg0", 8),
					(call_script, "script_get_first_closest_enemy_distance", ":var_1", ":team_var_1", 200),
					(assign, ":var_10", reg1),
					(assign, ":var_11", reg4),
					(gt, ":var_11", -1),
					(try_begin),
						(assign, ":value", 8500),
						(assign, ":value_2", 9000),
						(assign, ":var_14", 12),
						(try_begin),
							(eq, ":type_item_slot_var_1_reg0", 10),
							(assign, ":value_2", 3000),
							(assign, ":value", 3500),
							(val_mul, ":var_14", 3),
						(try_end),
						(team_get_movement_order, reg0, ":team_var_1", ":division_var_1"),
						(eq, reg0, 2),
						(call_script, "script_tom_agent_skirmish", ":var_1", ":var_11", ":var_10", ":value", ":value_2", ":var_14"),
						(try_begin),
							(lt, ":var_10", 9500),
							(store_random_in_range, ":random_in_range_0_10", 0, 10),
							(le, ":random_in_range_0_10", 2),
							(agent_get_attack_action, ":attack_action_var_1", ":var_1"),
							(eq, ":attack_action_var_1", 0),
							(agent_get_combat_state, ":combat_state_var_1", ":var_1"),
							(neq, ":combat_state_var_1", 7),
							(this_or_next|eq, ":type_item_slot_var_1_reg0", 10),
							(eq, ":type_item_slot_var_1_reg0", 8),
							(agent_set_attack_action, ":var_1", 0, 0),
						(try_end),
					(try_end),
				(else_try),
					(agent_slot_eq, ":var_1", 104, 1),
					(agent_set_slot, ":var_1", 104, 0),
					(agent_clear_scripted_mode, ":var_1"),
				(try_end),
			(try_end)
		]),

		(0.0, 0.0, ti_once,
		[
			(eq, "$tom_generate_desertv2", 1)
		],

		[
			(set_fixed_point_multiplier, 100),
			(assign, "$tom_generate_desertv2", 0),
			(get_scene_boundaries, 1, 0),
			(position_get_x, ":position_x_0", 0),
			(position_get_y, ":position_y_0", 0),
			(position_get_x, ":position_x_1", 1),
			(position_get_y, ":position_y_1", 1),
			(val_div, ":position_x_0", 2),
			(val_div, ":position_y_0", 2),
			(val_max, "$tom_generate_reduction", 1),
			(assign, ":value", 500),
			(val_div, ":value", "$tom_generate_reduction"),
			(try_for_range, reg10, 0, ":value"),
				(store_random_in_range, ":random_in_range_position_x_1_position_x_0", ":position_x_1", ":position_x_0"),
				(store_random_in_range, ":random_in_range_position_y_1_position_y_0", ":position_y_1", ":position_y_0"),
				(val_mul, ":random_in_range_position_x_1_position_x_0", 2),
				(val_mul, ":random_in_range_position_y_1_position_y_0", 2),
				(position_set_x, 1, ":random_in_range_position_x_1_position_x_0"),
				(position_set_y, 1, ":random_in_range_position_y_1_position_y_0"),
				(position_set_z_to_ground_level, 1),
				(position_get_z, ":position_z_1", 1),
				(position_set_z, 1, ":position_z_1"),
				(store_random_in_range, ":random_in_range_0_360", 0, 360),
				(position_rotate_z, 1, ":random_in_range_0_360"),
				(set_spawn_position, 1),
				(store_random_in_range, ":random_in_range_15_66", 15, 66),
				(store_random_in_range, ":random_in_range_15_66_2", 15, 66),
				(store_random_in_range, ":random_in_range_30_66", 30, 66),
				(store_random_in_range, ":random_in_range_valleyRock_flatRounded_small_1_tree_14_a", "spr_valleyRock_flatRounded_small_1", "spr_tree_14_a"),
				(spawn_scene_prop, ":random_in_range_valleyRock_flatRounded_small_1_tree_14_a"),
				(prop_instance_set_scale, reg0, ":random_in_range_15_66", ":random_in_range_15_66_2", ":random_in_range_30_66"),
			(try_end),
			(val_max, "$tom_generate_reduction", 1),
			(assign, ":value", 900),
			(val_div, ":value", "$tom_generate_reduction"),
			(try_for_range, reg10, 0, ":value"),
				(store_random_in_range, ":random_in_range_position_x_1_position_x_0", ":position_x_1", ":position_x_0"),
				(store_random_in_range, ":random_in_range_position_y_1_position_y_0", ":position_y_1", ":position_y_0"),
				(val_mul, ":random_in_range_position_x_1_position_x_0", 2),
				(val_mul, ":random_in_range_position_y_1_position_y_0", 2),
				(position_set_x, 1, ":random_in_range_position_x_1_position_x_0"),
				(position_set_y, 1, ":random_in_range_position_y_1_position_y_0"),
				(position_set_z_to_ground_level, 1),
				(position_get_z, ":position_z_1", 1),
				(ge, ":position_z_1", 1),
				(store_random_in_range, ":random_in_range_0_360", 0, 360),
				(position_rotate_z, 1, ":random_in_range_0_360"),
				(set_spawn_position, 1),
				(store_random_in_range, ":random_in_range_valleyRock_flatRounded_small_1_tree_14_a", "spr_seedy_plant_a", "spr_palm_aa"),
				(spawn_scene_prop, ":random_in_range_valleyRock_flatRounded_small_1_tree_14_a"),
			(try_end),
			(val_max, "$tom_generate_reduction", 1),
			(assign, ":value", 250),
			(val_div, ":value", "$tom_generate_reduction"),
			(try_for_range, reg10, 0, ":value"),
				(store_random_in_range, ":random_in_range_position_x_1_position_x_0", ":position_x_1", ":position_x_0"),
				(store_random_in_range, ":random_in_range_position_y_1_position_y_0", ":position_y_1", ":position_y_0"),
				(val_mul, ":random_in_range_position_x_1_position_x_0", 2),
				(val_mul, ":random_in_range_position_y_1_position_y_0", 2),
				(position_set_x, 1, ":random_in_range_position_x_1_position_x_0"),
				(position_set_y, 1, ":random_in_range_position_y_1_position_y_0"),
				(position_set_z_to_ground_level, 1),
				(position_get_z, ":position_z_1", 1),
				(ge, ":position_z_1", 1),
				(store_random_in_range, ":random_in_range_0_360", 0, 360),
				(position_rotate_z, 1, ":random_in_range_0_360"),
				(set_spawn_position, 1),
				(store_random_in_range, ":random_in_range_valleyRock_flatRounded_small_1_tree_14_a", "spr_palm_aa", "spr_valleyRock_flatRounded_small_1"),
				(spawn_scene_prop, ":random_in_range_valleyRock_flatRounded_small_1_tree_14_a"),
			(try_end)
		]),

		(0.0, 0.0, ti_once,
		[
			(eq, "$tom_generate_iberian", 1)
		],

		[
			(set_fixed_point_multiplier, 100),
			(assign, "$tom_generate_iberian", 0),
			(get_scene_boundaries, 1, 0),
			(position_get_x, ":position_x_0", 0),
			(position_get_y, ":position_y_0", 0),
			(position_get_x, ":position_x_1", 1),
			(position_get_y, ":position_y_1", 1),
			(val_div, ":position_x_0", 2),
			(val_div, ":position_y_0", 2),
			(val_max, "$tom_generate_reduction", 1),
			(assign, ":var_5", 130),
			(val_div, ":var_5", "$tom_generate_reduction"),
			(try_for_range, reg10, 0, ":var_5"),
				(store_random_in_range, ":random_in_range_position_x_1_position_x_0", ":position_x_1", ":position_x_0"),
				(store_random_in_range, ":random_in_range_position_y_1_position_y_0", ":position_y_1", ":position_y_0"),
				(val_mul, ":random_in_range_position_x_1_position_x_0", 2),
				(val_mul, ":random_in_range_position_y_1_position_y_0", 2),
				(position_set_x, 1, ":random_in_range_position_x_1_position_x_0"),
				(position_set_y, 1, ":random_in_range_position_y_1_position_y_0"),
				(position_set_z_to_ground_level, 1),
				(position_get_z, ":position_z_1", 1),
				(ge, ":position_z_1", 1),
				(store_random_in_range, ":random_in_range_0_360", 0, 360),
				(position_rotate_z, 1, ":random_in_range_0_360"),
				(set_spawn_position, 1),
				(store_random_in_range, ":random_in_range_40_100", 40, 100),
				(store_random_in_range, ":random_in_range_desert_tree_aa_tree_16_a", "spr_desert_tree_aa", "spr_tree_16_a"),
				(spawn_scene_prop, ":random_in_range_desert_tree_aa_tree_16_a"),
				(prop_instance_set_scale, reg0, ":random_in_range_40_100", ":random_in_range_40_100", ":random_in_range_40_100"),
			(try_end)
		]),

		(0.0, 0.0, ti_once,
		[
			(eq, "$tom_generate_iberian2", 1)
		],

		[
			(set_fixed_point_multiplier, 100),
			(assign, "$tom_generate_iberian2", 0),
			(get_scene_boundaries, 1, 0),
			(position_get_x, ":position_x_0", 0),
			(position_get_y, ":position_y_0", 0),
			(position_get_x, ":position_x_1", 1),
			(position_get_y, ":position_y_1", 1),
			(val_div, ":position_x_0", 2),
			(val_div, ":position_y_0", 2),
			(val_max, "$tom_generate_reduction", 1),
			(assign, ":value", 300),
			(val_div, ":value", "$tom_generate_reduction"),
			(try_for_range, reg10, 0, ":value"),
				(store_random_in_range, ":random_in_range_position_x_1_position_x_0", ":position_x_1", ":position_x_0"),
				(store_random_in_range, ":random_in_range_position_y_1_position_y_0", ":position_y_1", ":position_y_0"),
				(val_mul, ":random_in_range_position_x_1_position_x_0", 2),
				(val_mul, ":random_in_range_position_y_1_position_y_0", 2),
				(position_set_x, 1, ":random_in_range_position_x_1_position_x_0"),
				(position_set_y, 1, ":random_in_range_position_y_1_position_y_0"),
				(position_set_z_to_ground_level, 1),
				(position_get_z, ":position_z_1", 1),
				(ge, ":position_z_1", 1),
				(store_random_in_range, ":random_in_range_0_360", 0, 360),
				(position_rotate_z, 1, ":random_in_range_0_360"),
				(set_spawn_position, 1),
				(store_random_in_range, ":random_in_range_tree_16_a_pine_1_b", "spr_tree_16_a", "spr_pine_1_b"),
				(spawn_scene_prop, ":random_in_range_tree_16_a_pine_1_b"),
			(try_end),
			(val_max, "$tom_generate_reduction", 1),
			(assign, ":value", 20),
			(val_div, ":value", "$tom_generate_reduction"),
			(try_for_range, reg10, 0, ":value"),
				(store_random_in_range, ":random_in_range_position_x_1_position_x_0", ":position_x_1", ":position_x_0"),
				(store_random_in_range, ":random_in_range_position_y_1_position_y_0", ":position_y_1", ":position_y_0"),
				(val_mul, ":random_in_range_position_x_1_position_x_0", 2),
				(val_mul, ":random_in_range_position_y_1_position_y_0", 2),
				(position_set_x, 1, ":random_in_range_position_x_1_position_x_0"),
				(position_set_y, 1, ":random_in_range_position_y_1_position_y_0"),
				(position_set_z_to_ground_level, 1),
				(position_get_z, ":position_z_1", 1),
				(ge, ":position_z_1", 1),
				(store_random_in_range, ":random_in_range_0_360", 0, 360),
				(position_rotate_z, 1, ":random_in_range_0_360"),
				(set_spawn_position, 1),
				(store_random_in_range, ":random_in_range_tree_16_a_pine_1_b", "spr_pine_1_b", "spr_seedy_plant_a"),
				(spawn_scene_prop, ":random_in_range_tree_16_a_pine_1_b"),
			(try_end)
		]),

		(0.0, 0.0, ti_once,
		[
			(eq, "$tom_generate_desert", 1)
		],

		[
			(set_fixed_point_multiplier, 100),
			(assign, "$tom_generate_desert", 0),
			(get_scene_boundaries, 1, 0),
			(position_get_x, ":position_x_0", 0),
			(position_get_y, ":position_y_0", 0),
			(position_get_x, ":position_x_1", 1),
			(position_get_y, ":position_y_1", 1),
			(val_div, ":position_x_0", 2),
			(val_div, ":position_y_0", 2),
			(val_max, "$tom_generate_reduction", 1),
			(assign, ":var_5", 1300),
			(val_div, ":var_5", "$tom_generate_reduction"),
			(try_for_range, reg10, 0, ":var_5"),
				(store_random_in_range, ":random_in_range_position_x_1_position_x_0", ":position_x_1", ":position_x_0"),
				(store_random_in_range, ":random_in_range_position_y_1_position_y_0", ":position_y_1", ":position_y_0"),
				(val_mul, ":random_in_range_position_x_1_position_x_0", 2),
				(val_mul, ":random_in_range_position_y_1_position_y_0", 2),
				(position_set_x, 1, ":random_in_range_position_x_1_position_x_0"),
				(position_set_y, 1, ":random_in_range_position_y_1_position_y_0"),
				(position_set_z_to_ground_level, 1),
				(position_get_z, ":position_z_1", 1),
				(position_set_z, 1, ":position_z_1"),
				(store_random_in_range, ":random_in_range_0_360", 0, 360),
				(position_rotate_z, 1, ":random_in_range_0_360"),
				(set_spawn_position, 1),
				(store_random_in_range, ":random_in_range_15_56", 15, 56),
				(store_random_in_range, ":random_in_range_15_56_2", 15, 56),
				(store_random_in_range, ":random_in_range_20_56", 20, 56),
				(store_random_in_range, ":random_in_range_valleyRock_flatRounded_small_1_tree_14_a", "spr_valleyRock_flatRounded_small_1", "spr_tree_14_a"),
				(spawn_scene_prop, ":random_in_range_valleyRock_flatRounded_small_1_tree_14_a"),
				(prop_instance_set_scale, reg0, ":random_in_range_15_56", ":random_in_range_15_56_2", ":random_in_range_20_56"),
			(try_end)
		]),

		(0.0, 0.0, ti_once,
		[
			(eq, "$tom_generate_swamp", 1)
		],

		[
			(set_fixed_point_multiplier, 100),
			(assign, "$tom_generate_swamp", 0),
			(get_scene_boundaries, 1, 0),
			(position_get_x, ":position_x_0", 0),
			(position_get_y, ":position_y_0", 0),
			(position_get_x, ":position_x_1", 1),
			(position_get_y, ":position_y_1", 1),
			(val_div, ":position_x_0", 2),
			(val_div, ":position_y_0", 2),
			(val_max, "$tom_generate_reduction", 1),
			(assign, ":var_5", 480),
			(val_div, ":var_5", "$tom_generate_reduction"),
			(try_for_range, reg10, 0, ":var_5"),
				(store_random_in_range, ":random_in_range_position_x_1_position_x_0", ":position_x_1", ":position_x_0"),
				(store_random_in_range, ":random_in_range_position_y_1_position_y_0", ":position_y_1", ":position_y_0"),
				(val_mul, ":random_in_range_position_x_1_position_x_0", 2),
				(val_mul, ":random_in_range_position_y_1_position_y_0", 2),
				(position_set_x, 1, ":random_in_range_position_x_1_position_x_0"),
				(position_set_y, 1, ":random_in_range_position_y_1_position_y_0"),
				(position_set_z_to_ground_level, 1),
				(store_random_in_range, ":random_in_range_0_360", 0, 360),
				(position_rotate_z, 1, ":random_in_range_0_360"),
				(set_spawn_position, 1),
				(store_random_in_range, ":random_in_range_tree_14_a_tree_8_a", "spr_tree_14_a", "spr_tree_8_a"),
				(spawn_scene_prop, ":random_in_range_tree_14_a_tree_8_a"),
			(try_end)
		]),

		(0.0, 0.0, ti_once,
		[
			(eq, "$tom_generate_euro_hillside", 1)
		],

		[
			(set_fixed_point_multiplier, 100),
			(assign, "$tom_generate_euro_hillside", 0),
			(get_scene_boundaries, 1, 0),
			(position_get_x, ":position_x_0", 0),
			(position_get_y, ":position_y_0", 0),
			(position_get_x, ":position_x_1", 1),
			(position_get_y, ":position_y_1", 1),
			(val_div, ":position_x_0", 2),
			(val_div, ":position_y_0", 2),
			(val_max, "$tom_generate_reduction", 1),
			(assign, ":value", 300),
			(val_div, ":value", "$tom_generate_reduction"),
			(try_for_range, reg10, 0, ":value"),
				(store_random_in_range, ":random_in_range_position_x_1_position_x_0", ":position_x_1", ":position_x_0"),
				(store_random_in_range, ":random_in_range_position_y_1_position_y_0", ":position_y_1", ":position_y_0"),
				(val_mul, ":random_in_range_position_x_1_position_x_0", 2),
				(val_mul, ":random_in_range_position_y_1_position_y_0", 2),
				(position_set_x, 1, ":random_in_range_position_x_1_position_x_0"),
				(position_set_y, 1, ":random_in_range_position_y_1_position_y_0"),
				(position_set_z_to_ground_level, 1),
				(position_get_z, ":position_z_1", 1),
				(lt, ":position_z_1", 1500),
				(position_set_z, 1, ":position_z_1"),
				(store_random_in_range, ":random_in_range_0_360", 0, 360),
				(position_rotate_z, 1, ":random_in_range_0_360"),
				(set_spawn_position, 1),
				(store_random_in_range, ":random_in_range_55_100", 55, 100),
				(store_random_in_range, ":random_in_range_55_100_2", 55, 100),
				(store_random_in_range, ":random_in_range_55_100_3", 55, 100),
				(store_random_in_range, ":random_in_range_rock1_desert_tree_aa", "spr_rock1", "spr_desert_tree_aa"),
				(spawn_scene_prop, ":random_in_range_rock1_desert_tree_aa"),
				(prop_instance_set_scale, reg0, ":random_in_range_55_100", ":random_in_range_55_100_2", ":random_in_range_55_100_3"),
			(try_end),
			(val_max, "$tom_generate_reduction", 1),
			(assign, ":value", 500),
			(val_div, ":value", "$tom_generate_reduction"),
			(try_for_range, reg10, 0, ":value"),
				(store_random_in_range, ":random_in_range_position_x_1_position_x_0", ":position_x_1", ":position_x_0"),
				(store_random_in_range, ":random_in_range_position_y_1_position_y_0", ":position_y_1", ":position_y_0"),
				(val_mul, ":random_in_range_position_x_1_position_x_0", 2),
				(val_mul, ":random_in_range_position_y_1_position_y_0", 2),
				(position_set_x, 1, ":random_in_range_position_x_1_position_x_0"),
				(position_set_y, 1, ":random_in_range_position_y_1_position_y_0"),
				(position_set_z_to_ground_level, 1),
				(position_get_z, ":position_z_1", 1),
				(ge, ":position_z_1", 1),
				(store_random_in_range, ":random_in_range_0_360", 0, 360),
				(position_rotate_z, 1, ":random_in_range_0_360"),
				(set_spawn_position, 1),
				(spawn_scene_prop, "spr_seedy_plant_a"),
			(try_end),
			(val_max, "$tom_generate_reduction", 1),
			(assign, ":value", 300),
			(val_div, ":value", "$tom_generate_reduction"),
			(try_for_range, reg10, 0, ":value"),
				(store_random_in_range, ":random_in_range_position_x_1_position_x_0", ":position_x_1", ":position_x_0"),
				(store_random_in_range, ":random_in_range_position_y_1_position_y_0", ":position_y_1", ":position_y_0"),
				(val_mul, ":random_in_range_position_x_1_position_x_0", 2),
				(val_mul, ":random_in_range_position_y_1_position_y_0", 2),
				(position_set_x, 1, ":random_in_range_position_x_1_position_x_0"),
				(position_set_y, 1, ":random_in_range_position_y_1_position_y_0"),
				(position_set_z_to_ground_level, 1),
				(position_get_z, ":position_z_1", 1),
				(ge, ":position_z_1", 1),
				(lt, ":position_z_1", 1500),
				(store_random_in_range, ":random_in_range_0_360", 0, 360),
				(position_rotate_z, 1, ":random_in_range_0_360"),
				(set_spawn_position, 1),
				(store_random_in_range, ":random_in_range_rock1_desert_tree_aa", "spr_bushes10_a", "spr_bushes10_c"),
				(spawn_scene_prop, ":random_in_range_rock1_desert_tree_aa"),
			(try_end)
		]),

		(0.0, 0.0, ti_once,
		[
			(eq, "$tom_generate_desertv3", 1)
		],

		[
			(set_fixed_point_multiplier, 100),
			(assign, "$tom_generate_desertv3", 0),
			(get_scene_boundaries, 1, 0),
			(position_get_x, ":position_x_0", 0),
			(position_get_y, ":position_y_0", 0),
			(position_get_x, ":position_x_1", 1),
			(position_get_y, ":position_y_1", 1),
			(val_div, ":position_x_0", 2),
			(val_div, ":position_y_0", 2),
			(val_max, "$tom_generate_reduction", 1),
			(assign, ":value", 900),
			(val_div, ":value", "$tom_generate_reduction"),
			(try_for_range, reg10, 0, ":value"),
				(store_random_in_range, ":random_in_range_position_x_1_position_x_0", ":position_x_1", ":position_x_0"),
				(store_random_in_range, ":random_in_range_position_y_1_position_y_0", ":position_y_1", ":position_y_0"),
				(val_mul, ":random_in_range_position_x_1_position_x_0", 2),
				(val_mul, ":random_in_range_position_y_1_position_y_0", 2),
				(position_set_x, 1, ":random_in_range_position_x_1_position_x_0"),
				(position_set_y, 1, ":random_in_range_position_y_1_position_y_0"),
				(position_set_z_to_ground_level, 1),
				(position_get_z, ":position_z_1", 1),
				(ge, ":position_z_1", 1),
				(store_random_in_range, ":random_in_range_0_360", 0, 360),
				(position_rotate_z, 1, ":random_in_range_0_360"),
				(set_spawn_position, 1),
				(store_random_in_range, ":random_in_range_seedy_plant_a_palm_aa", "spr_seedy_plant_a", "spr_palm_aa"),
				(spawn_scene_prop, ":random_in_range_seedy_plant_a_palm_aa"),
			(try_end),
			(val_max, "$tom_generate_reduction", 1),
			(assign, ":value", 400),
			(val_div, ":value", "$tom_generate_reduction"),
			(try_for_range, reg10, 0, ":value"),
				(store_random_in_range, ":random_in_range_position_x_1_position_x_0", ":position_x_1", ":position_x_0"),
				(store_random_in_range, ":random_in_range_position_y_1_position_y_0", ":position_y_1", ":position_y_0"),
				(val_mul, ":random_in_range_position_x_1_position_x_0", 2),
				(val_mul, ":random_in_range_position_y_1_position_y_0", 2),
				(position_set_x, 1, ":random_in_range_position_x_1_position_x_0"),
				(position_set_y, 1, ":random_in_range_position_y_1_position_y_0"),
				(position_set_z_to_ground_level, 1),
				(position_get_z, ":position_z_1", 1),
				(ge, ":position_z_1", 1),
				(store_random_in_range, ":random_in_range_0_360", 0, 360),
				(position_rotate_z, 1, ":random_in_range_0_360"),
				(set_spawn_position, 1),
				(store_random_in_range, ":random_in_range_seedy_plant_a_palm_aa", "spr_palm_aa", "spr_valleyRock_flatRounded_small_1"),
				(spawn_scene_prop, ":random_in_range_seedy_plant_a_palm_aa"),
			(try_end)
		]),

		(0.0, 0.0, ti_once,
		[
			(ge, "$tom_generate_snow", 1)
		],

		[
			(set_fixed_point_multiplier, 100),
			(get_scene_boundaries, 1, 0),
			(position_get_x, ":position_x_0", 0),
			(position_get_y, ":position_y_0", 0),
			(position_get_x, ":position_x_1", 1),
			(position_get_y, ":position_y_1", 1),
			(val_div, ":position_x_0", 2),
			(val_div, ":position_y_0", 2),
			(val_max, "$tom_generate_reduction", 1),
			(assign, ":value", 300),
			(try_begin),
				(eq, "$tom_generate_snow", 2),
				(assign, ":value", 500),
			(try_end),
			(assign, "$tom_generate_snow", 0),
			(val_div, ":value", "$tom_generate_reduction"),
			(try_for_range, reg10, 0, ":value"),
				(store_random_in_range, ":random_in_range_position_x_1_position_x_0", ":position_x_1", ":position_x_0"),
				(store_random_in_range, ":random_in_range_position_y_1_position_y_0", ":position_y_1", ":position_y_0"),
				(val_mul, ":random_in_range_position_x_1_position_x_0", 2),
				(val_mul, ":random_in_range_position_y_1_position_y_0", 2),
				(position_set_x, 1, ":random_in_range_position_x_1_position_x_0"),
				(position_set_y, 1, ":random_in_range_position_y_1_position_y_0"),
				(position_set_z_to_ground_level, 1),
				(store_random_in_range, ":random_in_range_0_360", 0, 360),
				(position_rotate_z, 1, ":random_in_range_0_360"),
				(set_spawn_position, 1),
				(store_random_in_range, ":random_in_range_tree_snowy_a_test_helmet", "spr_tree_snowy_a", "spr_test_helmet"),
				(spawn_scene_prop, ":random_in_range_tree_snowy_a_test_helmet"),
			(try_end)
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(assign, "$enable_deahtcam", 1),
			(assign, "$auxilary_player_active", 0),
			(eq, "$use_player_auxiliary", 1),
			(assign, "$g_move_heroes", 1),
			(party_clear, "p_temp_casualties_3"),
			(call_script, "script_party_add_party", "p_temp_casualties_3", "p_main_party"),
			(set_player_troop, "trp_player"),
			(assign, "$enable_deahtcam", 0)
		]),
		

		(5.0, 0.0, 0.0,
		[
			(eq, "$use_player_auxiliary", 1),
			(eq, "$enable_deahtcam", 0),
			(get_player_agent_no, ":player_agent_no"),
			(neg|agent_is_alive, ":player_agent_no")
		],

		[
			(set_fixed_point_multiplier, 100),
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_team, ":team_player_agent_no", ":player_agent_no"),
			(agent_get_division, ":division_player_agent_no", ":player_agent_no"),
			(assign, ":value", 0),
			(try_for_agents, ":var_5"),
				(eq, ":value", 0),
				(agent_is_human, ":var_5"),
				(agent_is_alive, ":var_5"),
				(agent_get_team, ":team_var_5", ":var_5"),
				(agent_get_party_id, ":party_id_var_5", ":var_5"),
				(eq, ":party_id_var_5", "p_main_party"),
				(agent_get_division, ":division_player_agent_no_2", ":player_agent_no"),
				(agent_get_group, ":group_player_agent_no", ":player_agent_no"),
				(eq, ":team_player_agent_no", ":team_var_5"),
				(eq, ":division_player_agent_no", ":division_player_agent_no_2"),
				(agent_get_troop_id, ":troop_id_var_5", ":var_5"),
				(neg|is_between, ":troop_id_var_5", "trp_npc1", "trp_knight_1_1_wife"),
				(set_player_troop, ":troop_id_var_5"),
				(store_agent_hit_points, ":agent_hit_points_var_5_1", ":var_5", 1),
				(agent_get_position, 1, ":var_5"),
				(position_set_z, 1, -2000),
				(position_set_x, 1, 0),
				(position_set_y, 1, 0),
				(agent_get_position, 0, ":var_5"),
				(set_spawn_position, 0),
				(agent_get_horse, ":horse_var_5", ":var_5"),
				(try_begin),
					(gt, ":horse_var_5", 0),
					(agent_set_position, ":horse_var_5", 1),
					(remove_agent, ":horse_var_5"),
				(try_end),
				(agent_set_position, ":var_5", 1),
				(agent_set_slot, ":var_5", 100, 1),
				(agent_get_slot, ":var_5_102", ":var_5", 102),
				(remove_agent, ":var_5"),
				(spawn_agent, ":troop_id_var_5"),
				(assign, ":player_agent_no", reg0),
				(agent_set_slot, ":player_agent_no", 102, ":var_5_102"),
				(agent_set_team, ":player_agent_no", ":team_player_agent_no"),
				(agent_set_hit_points, ":player_agent_no", ":agent_hit_points_var_5_1", 1),
				(agent_set_group, ":player_agent_no", ":group_player_agent_no"),
				(agent_set_slot, ":player_agent_no", 100, 2),
				(agent_set_slot, ":player_agent_no", 101, ":troop_id_var_5"),
				(try_begin),
					(agent_get_horse, ":horse_player_agent_no", ":player_agent_no"),
					(gt, ":horse_player_agent_no", 0),
					(lt, ":horse_var_5", 0),
					(agent_set_position, ":horse_player_agent_no", 1),
					(remove_agent, ":horse_player_agent_no"),
				(try_end),
				(set_player_troop, "trp_player"),
				(assign, ":value", 1),
				(assign, "$auxilary_player_active", 1),
			(try_end),
			(eq, ":value", 0),
			#BACKUP BEGIN Before Crouching AI V0.999H
#			(assign, "$enable_deahtcam", 1)
#		])
#	]),
#BACKUP BEFORE CROUCHING AI END
			(assign, "$enable_deahtcam", 1)
		])
		#Begin AI Crouching Code
	] + crouching_triggers 
	#END AI Crouching Code
	),
##Crouching for field battles



	("village_attack_bandits", mtf_battle_mode, 8,
	"You lead your men to battle.",
	[(3, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(1, mtef_team_0|mtef_use_exact_number, 0, aif_start_alarmed, 7, []),
	(1, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, [])],
	[
			


    (7, 0, ti_once,
    [],
    [
	(call_script, "script_assign_traits"),
    ]),


    (0, 0, 1, 
    [
    ],
    [
	(call_script, "script_stumbling"),
    ]),




#Decapitations next level right here.
(ti_on_agent_hit, 0, 0, [(eq, "$dynamic_decap", 1),],
[
   (store_trigger_param_1, ":victim_agent"),
   (store_trigger_param_2, ":attacker_agent"),
   (store_trigger_param_3, ":damage"),
   (assign, ":attacker_item", reg0), ### Transfer the item ID to make sure it dosn't change while the script is running
   (copy_position, pos5, pos0), ### Transfer the position of the hit to make sure it dosn't change while the script is running
   (neq, ":victim_agent", -1),
   (try_begin), #-- Decapitations --#
      (agent_is_human, ":victim_agent"),
	  (ge, ":attacker_item", 0),
	  (assign, ":run", 0), ### Reset the run test variable
#	  (try_begin), ### Special weapons that can decap, ovevrrides the below conditions
#		  (this_or_next|eq, ":attacker_item", "itm_supercrossbow"),
#		  (eq, ":attacker_item", "itm_supersledge"),
#		  (assign, ":run", 1),
	  (try_begin),
		  #(neq, ":attacker_item", "itm_mace_1"), ### List of weapons that cannot decapitate
		  #(neq, ":attacker_item", "itm_mace_2"), ### This would be easier to do with a preperty check (for damage type), but I don't know if that is possible or not
		  #(neq, ":attacker_item", "itm_mace_3"),
		  #(neq, ":attacker_item", "itm_staff"), #Keeping active incase of script errors
		  (agent_get_action_dir, ":attack_dir", ":attacker_agent"), ### Makes sure the attack is either a left or right swing
		  (this_or_next|eq, ":attack_dir", 1), ### Right swing
		  (eq, ":attack_dir", 2), ### Left swing
		  (assign, ":run", 1),
	  (try_end),
	  (eq, ":run", 1), ### One of the checks were true, continue to run script
	  #(assign, reg1, ":damage"), #Debug messages
	  #(display_message, "@Damage: {reg1}"),
	  
	  (assign, ":run", 0), ### Reset the run test variable
	  (try_begin),
		(ge, ":damage", "$decap_damage"), ### 30 Minimum damage required to decapitate an agent
		(assign, ":run", 1),
		
#	  (else_try),  ### If debugging mode is on, this bypasses the damage requirement check
#		  (eq,"$g_decapitations_debugging", 1),
#		  (assign, ":run", 1),
#		  (display_message, "@Decap minimum DMG req bypassed"),
	  (try_end),
	  (eq, ":run", 1),
	  
	  (store_agent_hit_points, ":hp", ":victim_agent", 1),
	  (val_add, ":hp", 10), ### 10 Victim must have the negative of this hp or below after hit for the script to move on (never put this value below 0 since the agent has to be absolutley positvely dead)!
	  (ge, ":damage", ":hp"),
	  
	  
	  ### Compare the hit position to the agent's position
      (agent_get_position, pos4, ":victim_agent"),
      (get_distance_between_positions, ":distance", pos4, pos5), 
	  (agent_get_horse, ":is_mounted", ":victim_agent"),
	  (try_begin), ### If the agent is on horseback, these values are used (note that these values will not be exactly correct if the horse is very large or very small)
		(ge, ":is_mounted", 0), ### Will be -1 if no horse is to be found, so anything above means that the agent is mounted
		(assign, ":min_distance", 240), ### Minimum distance from the agent's horse's hooves from which the hit is valid (240 is an approximate value)
		(assign, ":max_distance", 260), ### Maximum distance from the agent's horse's hooves to which the hit is valid (260 is an approximate value)
	  (else_try),  ### If the agent is on foot, these values are used
	    (assign, ":min_distance", 160), ### Minimum distance from the agent's feet from which the hit is valid (160 = slightly below the neck)
	    (assign, ":max_distance", 176), ### Maximum distance from the agent's feet to which the hit is valid (176 = near the nose)
	  (try_end),
      (is_between, ":distance", ":min_distance", ":max_distance"), ### Check to see if the hit is within the allowed area
	  
	  
	  (assign, ":run", 0), ### Default variable value before damage test
	  (try_begin),
		  (store_div, ":chance", ":damage", "$decap_damage_divider"), ### Chance of decap is damage / 4 right now. Lower this value for higher chances of decapitation (or press M+Right Ctrl for debug more if you just want to test easy decaps in-game).
		  
		  #(assign, reg1, ":chance"), #Debug messages
		  #(display_message, "@Decap chance is: {reg1}"),
		  (store_random_in_range, ":diceroll", 0, "$decap_randomizer"), ### Randomizer, 0-100
		  
		  #(assign, reg1, ":diceroll"), #Debug messages
		  #(display_message, "@Diceroll: {reg1}"),
		  (le, ":diceroll", ":chance"), ### ":diceroll" must be less than or equal to ":chance", if it is, decapitation occurs!
		  
		  (assign, ":run", 1), ### SUCCESS!
		  
#     (else_try),  ### If debugging mode is on, bypass chance calculation
#		  (eq,"$g_decapitations_debugging", 1),
#		  (assign, ":run", 1),
#		  (display_message, "@Decap chance calc bypassed"),
	  (try_end),  
	  (eq, ":run", 1), ### Time for the fun stuff!

	  ### Gender test for spawning the right head type
	  (assign, ":head_type", "itm_cut_off_head_male"),
	  (agent_get_troop_id, ":victim_troop", ":victim_agent"),
	  (try_begin),
	    (ge, ":victim_troop", 0),
		(troop_get_type,":victim_gender",":victim_troop"),
		(eq, ":victim_gender", 1),
		(assign, ":head_type", "itm_cut_off_head_female"),
	  (try_end),
	  
	  ### Randomize the spawned head's and/or helmet's position and orientation
	  (store_random_in_range, ":z_rotation", 0, 360),
	  (store_random_in_range, ":y_rotation", -60, 60),
	  (store_random_in_range, ":x_pos", -90, 90),
	  (store_random_in_range, ":y_pos", -90, 90),
	  (position_rotate_z, pos4,":z_rotation"),
	  (position_rotate_y, pos4,":y_rotation"),
	  (position_move_x, pos4, ":x_pos"),
	  (position_move_y, pos4, ":y_pos"),
	  (position_set_z_to_ground_level, pos4),
	  (position_move_z, pos4, 5),
	  (set_spawn_position, pos4),
	  (assign, ":prunetime", 360), ### This is the time in seconds before the spawned head or helmet gets pruned (removed). Recommended to keep it above 0 to make sure it gets removed eventually or when the scene resets, to prevent performance issues.
	  
	  #(spawn_item, ":head_type", 0, ":prunetime"), ### This is the old way of spawning the head on the ground with the helmet, disabled because of the new dynamic heads. You can comment away (disable) the dynamic heads spawning further down and uncomment this line for a less performance-needing approach (with no physics involved).
	  
	  ### Does the agent have a helmet or hat equipped?
      (agent_get_item_slot, ":item", ":victim_agent", 4), #head slot
      (try_begin),
         (ge, ":item", 1), ### Does it?
         (agent_unequip_item, ":victim_agent", ":item"), ### Yes it does. Unequip it to allow replacement by the invisible helmet further down
		 (try_begin),
			 ### Don't spawn items with "itp_attatch_armature" flag: rigging causes floating bugs
			 ### This would be much better to do with an item flag check, but I haven't found any way to do that
			 #(neq, ":item", "itm_with_itp_attatch_armature"),
			 #(neg|is_between,":item","start_of_itm_range_with_itp_attatch_armature","end_of_itm_range_with_itp_attatch_armature"),
			#(set_spawn_position, pos4),
			(spawn_item, ":item", 0, ":prunetime"), ### Spawns the agent's currently equipped headgear on the dropped head's position
		 (try_end),
      (try_end),
	  
	  (agent_equip_item, ":victim_agent", "itm_invisible_head"), ### Put an invisible helmet on the agent's head to "remove" it
	  
	  
	  (agent_get_position, pos4, ":victim_agent"), ### Refreshes the agent's position
	  (position_move_z, pos4, ":min_distance"), ### Move to the where the neck used to be attached
	  
	  
	  ### Blood effects! The last variable is the strength. Lower or increase it for more/less blood (or tweak the particle effects themselves in "module_particle_systems.py").
      (particle_system_burst, "psys_blood_decapitation", pos4, 40), 
	  (particle_system_burst, "psys_game_blood", pos4, 10),
	  (particle_system_burst, "psys_game_blood_2", pos4, 10),
	  
	  (play_sound_at_position, "snd_decapitation_battle", pos4), ### Play some nasty sounds
	  
	  
	  ### Dynamic head spawning! See the bottom of "module_scene_props.py" for physics-related options and more.
	  (position_move_z, pos4, 20),
	  (set_spawn_position, pos4),
	  (assign, ":head_type", "spr_head_dynamic_male"),
	  (try_begin), ### Gender check (for determening the type of head)
		(eq, ":victim_gender", 1),
		(assign, ":head_type", "spr_head_dynamic_female"),
	  (try_end),
	  (spawn_scene_prop, ":head_type"),
	  
		#Addition check if we should allow the message to appears
			(eq, "$allow_decap_mess", 1), #Possible script error

	  ### This below is for the text that shows up when somebody is decapitated.
	  
	  ### Who decapitated who?
		(agent_get_troop_id, ":attacker_troop", ":attacker_agent"),
		(str_store_troop_name, s0, ":attacker_troop"),

		(agent_get_troop_id, ":victim_troop", ":victim_agent"),
		(str_store_troop_name, s1, ":victim_troop"),

	  
	  ### Colour check (friend or foe?)
	  (get_player_agent_no, ":my_agent"),
	  (agent_get_team, ":my_team", ":my_agent"),
	  (agent_get_team, ":victim_team", ":victim_agent"),
	  (try_begin), ### Display it!
		  (neq, ":my_team", ":victim_team"),
		  (display_message, "@>>> {s0} decapitated {s1}!", 0xFF33DD11), ## Green
	  (else_try),
		  (display_message, "@>>> {s0} decapitated {s1}!", 0xFFFF4422), ## Red
	  (try_end),
   (try_end), #-- Decapitations END --#
   
   ]),











		
			##################################################
##### troop_ratio_bar
##################################################
      (0, 0, ti_once, [
	  (eq, "$use_troopbars", 1),
	  ], [
	  (start_presentation, "prsnt_troop_ratio_bar"),
	  ]),
##################################################
##### troop_ratio_bar
##################################################
	
###Voice-over for Infantry, archers & Cavalry
		
		(0.0, 0.3, 0.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 29) #Everyone!
		],

		[
		(call_script, "script_identify_battle_voices_all")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 30) #Infantry
		],

		[
		(call_script, "script_identify_battle_voices_inf")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 31) #Archers
		],

		[
		(call_script, "script_identify_battle_voices_archers")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 32) #Cavalry
		],

		[
		(call_script, "script_identify_battle_voices_cav")
		]),
		###Voice-over for Infantry, archers & Cavalry	
		
		
		
			#####Engage SP Music Tracks FIELD BATTLES
	#####MUSICBOX
	(ti_before_mission_start, 0, ti_once, [ #680 #(ti_after_mission_start, 0, 680, [ #680
	(eq, "$additional_music", 1), #Obtained from Mod Options, affects mission templates, range: ALL SP Hostile music, co-op variant is additional_music_coop.
	],
		
  [
    ##(play_track, "track_silence", 1), #Stop current module track
	(music_set_situation, mtf_sit_fight), #Field
   #(music_set_situation, mtf_sit_siege), #Siege probably don't use
	(assign, "$music_timer", 0), #Patch
  #Randomize chance is 1 in a 5 (20%)
  
  #Field related extend to sieges
  (store_random_in_range, ":randomizer", 0, 2), #50% Chance of randomization
  (try_begin),
  (eq, ":randomizer", 0),
  (store_random_in_range, ":euro_randomizernext", 1, 12),
  (store_random_in_range, ":medi_randomizer", 1, 8),
  (store_random_in_range, ":arab_randomizer", 1, 9),
  (assign, "$track_count_field", ":euro_randomizernext"),
  (assign, "$track_count_field_medi", ":medi_randomizer"),
  (assign, "$track_count_field_arabs", ":arab_randomizer"),
  (try_end),
  #Field related extend to sieges
  ]),
	
	(0, 0, 3, [ #680 #(ti_after_mission_start, 0, 680, [ #680
	(eq, "$additional_music", 1), #Obtained from Mod Options, affects mission templates, range: ALL SP Hostile music, co-op variant is additional_music_coop.
	],
		
  [
		  #(display_message, "@Executing music code"),
		  (store_mission_timer_b, ":time_msec"),
		  #(assign, reg10, ":time_msec"),
          #(str_clear, s10),
          #(str_store_string, s10, "@Mission timer B for music: {reg10}"),
		  #(display_message, s10),
			#if next action time is lower than current time, play the sound
			(ge, ":time_msec", "$music_timer"),
			(reset_mission_timer_b), #Resetting mission timer, too.
			(assign, "$music_timer", 0),# Resetting value when track ends.
		
  #Euro only
     (try_begin),
      (ge, "$track_count_field", 11),
      (assign, "$track_count_field", 1),
    (else_try),
      (val_add, "$track_count_field", 1),
	  (ge, "$track_count_field", 11),
	  (assign, "$track_count_field", 1),
    (try_end),
  #Euro only
  
  #Mediterrain only
  
       (try_begin),
      (ge, "$track_count_field_medi", 8),
      (assign, "$track_count_field_medi", 1),
    (else_try),
      (val_add, "$track_count_field_medi", 1),
	  (ge, "$track_count_field_medi", 8),
	  (assign, "$track_count_field_medi", 1),
    (try_end),
  #Mediterrain only
  
  
  #Arabs only

       (try_begin),
      (ge, "$track_count_field_arabs", 8),
      (assign, "$track_count_field_arabs", 1),
    (else_try),
      (val_add, "$track_count_field_arabs", 1),
	  (ge, "$track_count_field_arabs", 8),
	  (assign, "$track_count_field_arabs", 1),
    (try_end),
	#Arabs only
  
  #Pause between music length in seconds
  #(val_add, "$music_timer", 2),# 5 seconds added
  #Pause between music length in seconds
  
	(party_get_current_terrain, ":current_terrain_main_party", "p_main_party"), #Co-Op variant of this trigger should use scenes in_between rather than terrain because player can't obtain terrain in co-op sessions.
	(try_begin),
	(this_or_next|eq, ":current_terrain_main_party", 1), #rt_mountain
	(this_or_next|eq, ":current_terrain_main_party", 2), #rt_steppe
	(eq, ":current_terrain_main_party", 10), #rt_steppe_forest
	#Begin mediterrain music 5 tracks total
	(try_begin),
	(eq, "$track_count_field_medi", 1), #
	(play_track, "track_medib1", 2),
	(val_add, "$music_timer", 206),# 1 second added
	(else_try),
	
	(eq, "$track_count_field_medi", 2), #
	(play_track, "track_medib3", 2),
	(val_add, "$music_timer", 209),#
	(else_try),
	
	(eq, "$track_count_field_medi", 3), #
	(play_track, "track_medib4", 2),
	(val_add, "$music_timer", 237),#
	(else_try),

	(eq, "$track_count_field_medi", 4), #
	(play_track, "track_medib5", 2),
	(val_add, "$music_timer", 229),#
	(else_try),
	(eq, "$track_count_field_medi", 5), #
	(play_track, "track_medib6", 2),
	(val_add, "$music_timer", 127),#
	(else_try),
	(eq, "$track_count_field_medi", 6), #
	(play_track, "track_medib7", 2),
	(val_add, "$music_timer", 161),#
	
	(else_try),
	(eq, "$track_count_field_medi", 7), #
	(play_track, "track_medib8", 2),
	(val_add, "$music_timer", 250),#
	(try_end),
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 3), #rt_plain
	(this_or_next|eq, ":current_terrain_main_party", 11), #rt_forest
	(eq, ":current_terrain_main_party", 9), #rt_mountain_forest
	#Begin Euro Music
	(try_begin),
	(eq, "$track_count_field", 1), #
	(play_track, "track_eurob1", 2),
	(val_add, "$music_timer", 319),#
	(else_try),
	(eq, "$track_count_field", 2), #
	(play_track, "track_eurob2", 2),
	(val_add, "$music_timer", 279),#
	(else_try),
	
	(eq, "$track_count_field", 3), #
	(play_track, "track_eurob3", 2),
	(val_add, "$music_timer", 248),#
	(else_try),
	
	(eq, "$track_count_field", 4), #
	(play_track, "track_eurob4", 2),
	(val_add, "$music_timer", 332),#
	(else_try),
	
	(eq, "$track_count_field", 5), #
	(play_track, "track_eurob5", 2),
	(val_add, "$music_timer", 93),#
		(else_try),
	
	(eq, "$track_count_field", 6), #
	(play_track, "track_eurob6", 2),
	(val_add, "$music_timer", 76),#
		(else_try),
	
	(eq, "$track_count_field", 7), #
	(play_track, "track_eurob7", 2),
	(val_add, "$music_timer", 80),#
		(else_try),
	
	(eq, "$track_count_field", 8), #
	(play_track, "track_eurob8", 2),
	(val_add, "$music_timer", 58),#
		(else_try),
	
	(eq, "$track_count_field", 9), #
	(play_track, "track_eurob9", 2),
	(val_add, "$music_timer", 58),#
		(else_try),
	
#	(eq, "$track_count_field", 10), #
#	(play_track, "track_eurob10"),
#	(val_add, "$music_timer", 123),#
#		(else_try),
	
	(eq, "$track_count_field", 10), #
	(play_track, "track_eurob11", 2),
	(val_add, "$music_timer", 335),#
	(try_end),
	
	
	
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 4), #rt_snow
	(this_or_next|eq, ":current_terrain_main_party", 12), #rt_snow_forest
	(eq, ":current_terrain_main_party", 7), #rt_bridge
	#Begin Euro Music
	(try_begin),
	(eq, "$track_count_field", 1), #
	(play_track, "track_eurob1", 2),
	(val_add, "$music_timer", 319),#
	(else_try),
	(eq, "$track_count_field", 2), #
	(play_track, "track_eurob2", 2),
	(val_add, "$music_timer", 279),#
	(else_try),
	
	(eq, "$track_count_field", 3), #
	(play_track, "track_eurob3", 2),
	(val_add, "$music_timer", 248),#
	(else_try),
	
	(eq, "$track_count_field", 4), #
	(play_track, "track_eurob4", 2),
	(val_add, "$music_timer", 332),#
	(else_try),
	
	(eq, "$track_count_field", 5), #
	(play_track, "track_eurob5", 2),
	(val_add, "$music_timer", 93),#
		(else_try),
	
	(eq, "$track_count_field", 6), #
	(play_track, "track_eurob6", 2),
	(val_add, "$music_timer", 76),#
		(else_try),
	
	(eq, "$track_count_field", 7), #
	(play_track, "track_eurob7", 2),
	(val_add, "$music_timer", 80),#
		(else_try),
	
	(eq, "$track_count_field", 8), #
	(play_track, "track_eurob8", 2),
	(val_add, "$music_timer", 58),#
		(else_try),
	
	(eq, "$track_count_field", 9), #
	(play_track, "track_eurob9", 2),
	(val_add, "$music_timer", 58),#
		(else_try),
	
#	(eq, "$track_count_field", 10), #
#	(play_track, "track_eurob10"),
#	(val_add, "$music_timer", 123),#
#		(else_try),
	
	(eq, "$track_count_field", 10), #
	(play_track, "track_eurob11", 2),
	(val_add, "$music_timer", 335),#
	(try_end),
	
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 5), #rt_desert
	(eq, ":current_terrain_main_party", 13), #rt_desert_forest
	#Begin arab music
	(try_begin),
	(eq, "$track_count_field_arabs", 1), #
	(play_track, "track_arabb1", 2),
	(val_add, "$music_timer", 262),#
	(else_try),
	(eq, "$track_count_field_arabs", 2), #
	(play_track, "track_arabb2", 2),
	(val_add, "$music_timer", 291),#
	#(else_try),
	#(eq, "$track_count_field_arabs", 3), #
	#(play_track, "track_arabb3"),
	(else_try),
	(eq, "$track_count_field_arabs", 3), #
	(play_track, "track_arabb4", 2),
	(val_add, "$music_timer", 104),#
	(else_try),
	
	(eq, "$track_count_field_arabs", 4), #
	(play_track, "track_arabb5", 2),
	(val_add, "$music_timer", 76),#
		(else_try),
	
	(eq, "$track_count_field_arabs", 5), #
	(play_track, "track_arabb6", 2),
	(val_add, "$music_timer", 218),#
	
			(else_try),
	(eq, "$track_count_field_arabs", 6), #
	(play_track, "track_arabb8", 2),
	(val_add, "$music_timer", 209),#
			(else_try),
	(eq, "$track_count_field_arabs", 7), #
	(play_track, "track_arabb9", 2),
	(val_add, "$music_timer", 103),#
	#	(else_try),
	#
	#(eq, "$track_count_field_arabs", 7), #
	#(play_track, "track_arabb7"),
	(try_end),
	(try_end),
	
  ]),
	
	#####MUSICBOX END
			#####Camera mode by Rubik None-Coop Version Begin
		(0, 0, 0, [(eq, "$extended_camera_mode", 1)],
  [
    (get_player_agent_no, ":player_agent"),
    (agent_get_look_position, pos1, ":player_agent"),
    (position_move_z, pos1, "$g_camera_z"),
    (position_move_y, pos1, "$g_camera_y"),
    (agent_get_horse, ":horse_agent", ":player_agent"),
    (try_begin),
      (ge, ":horse_agent", 0),
      (position_move_z, pos1, 80),
    (try_end),
    (mission_cam_set_position, pos1),
    (try_begin),
      (key_is_down, key_left_control),
      (assign, ":move_val", 50),
    (else_try),
      (assign, ":move_val", 10),
    (try_end),
    (try_begin),
      (key_clicked, key_up),
      (mission_cam_set_mode, 1),
      (val_add, "$g_camera_z", ":move_val"),
    (else_try),
      (key_clicked, key_down),
      (mission_cam_set_mode, 1),
      (val_sub, "$g_camera_z", ":move_val"),
    (else_try),
      (key_clicked, key_left),
      (mission_cam_set_mode, 1),
      (val_add, "$g_camera_y", ":move_val"),
    (else_try),
      (key_clicked, key_right),
      (mission_cam_set_mode, 1),
      (val_sub, "$g_camera_y", ":move_val"),
    (try_end),
    (try_begin),
      (this_or_next|game_key_clicked, gk_view_char),
      (this_or_next|game_key_clicked, gk_zoom),
      (game_key_clicked, gk_cam_toggle),
      (mission_cam_set_mode, 0),
    (try_end),
  ]),
  #####Camera mode by Rubik None-Coop Version End
		
		
###########Torch by troycall/Envious Arm begin

																	#(-25.0, 0.0, 0.0, #Enabling this forces random chance to be 100%
																	#(ti_on_agent_spawn, 0, 0, #Enabling this forces random chance to be 100%
																	(20, 0, ti_once, #Proper one, but reinforcements do not get assigned torches.
        [
          (mission_tpl_are_all_agents_spawned), #From VC Header_Operations to prevent weird behavior.
          (is_currently_night) #Check if currently night time
        ],
        [

		  ####DEFAULT
		   #(try_for_agents, ":agent"),
            #(agent_get_wielded_item, ":item", ":agent", 1),
            #(gt, ":item", -1),
            #(agent_unequip_item, ":agent", ":item"),
            #(agent_equip_item, ":agent", "itm_torch"),
            #(agent_set_wielded_item, ":agent", "itm_torch"),           
          #(try_end),
		  ####END DEFAULT
		  
		  (try_for_agents, ":agent"), #Try for agents...
		  #Extension
		  (agent_is_alive, ":agent"), #For performance reasons
		  #End
		  (agent_is_human, ":agent"), #Performance
          (agent_is_non_player, ":agent"), #Uncommenting this includes player on spawning with torch, may be necessary to uncomment at module_coop_mission_templates.
		  


		 ##########Default Order
		 #######		  (agent_is_human, ":agent"), #Performance
         #######(agent_is_non_player, ":agent"), #Uncommenting this includes player on spawning with torch, may be necessary to uncomment at module_coop_mission_templates.
		 #######
		 ########Extension
		 #######(agent_is_active, ":agent"), #For performance reasons
		 #######(agent_is_alive, ":agent"), #For performance reasons
		 ########End
		  ############
		  		  
				#  (try_begin),
				  
		#		          (agent_get_wielded_item, ":rhand", ":agent", 0),  #Right hand
		#  (assign, ":rhanditem", 0), # Preparing local variable.
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000000000100),
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000004000000),
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000008000000),
		#  (neg|item_has_capability, ":rhanditem", 0x0000000170000000),
		# 

		  #
		  
          #BEGIN DEBUG
          #(assign, reg10, ":agent"),
          #(str_clear, s10),
          #(str_store_string, s10, "@New agent: {reg10}"),
          #END DEBUG
		  #(agent_get_wielded_item, ":rhanditem", ":agent", 0),  #Obtain right hand item
         (agent_get_wielded_item, ":rhanditem", ":agent", 0),  #Obtain right hand item
          (agent_get_wielded_item, ":item", ":agent", 1), # Left hand: shield or -1
          #BEGIN DEBUG
          #(assign, reg10, ":item"),
          #(str_store_string, s10, "@{s10}. LH: {reg10}"),
		  #(display_message, "@Main block Phase A finalized"),
          #END DEBUG
		  #(item_get_type, ":type", ":rhanditem"), #If right hand item is polearm, stop reading rest of code.
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_club_with_spike_head", "itm_wooden_shield"),
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_light_lance", "itm_wooden_shield"),
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_light_lance", "itm_wooden_shield"),
          (try_begin),
		  (neg|is_between, ":rhanditem", "itm_club_with_spike_head", "itm_wooden_shield"),
		  (neg|is_between, ":rhanditem", "itm_lance_banner_jer", "itm_cross_end"), #Update item slots
		  #(neg|troop_has_item_equipped, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		  #(neq, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		  
		# (neg|eq, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		    (gt, ":item", -1), #Check if the agent wields any item in the left hand, this or next.
            #(neq, ":item", -1),# Check if the agent wields any item in the left hand
            (neq, ":item", "itm_torch"), #If agent is using torch, ignore him.
            #(display_message, "@PASSED neg tests"), #Debug message

			
            (store_random_in_range, ":chance", 1, 101), # Chance of item being assigned
            (try_begin),
			  (le, ":chance", "$torch_chance"), #25% = 25
				#lt           = neg | ge # less than		-- (lt,<value>,<value>),
				#neq          = neg | eq # not equal to		-- (neq,<value>,<value>),
				#le           = neg | gt # less or equal to	-- (le,<value>,<value>),
              (agent_unequip_item, ":agent", ":item"),
			  
              #BEGIN DEBUG
              #(str_store_item_name, s11, ":item"),
              #(str_store_string, s10, "@{s10}. Removed item: {s11}"),
			  #(display_message, "@(agent_unequip_item, :agent, :item PASSED."),
              #END DEBUG

               
                (agent_equip_item, ":agent", "itm_torch"), #Tell agent to equip the item
                 #(display_message, "@(agent_equip_item, :agent, :item PASSED."),
                  (agent_set_wielded_item, ":agent", "itm_torch"), #Required for infantry only, cavarly can work without it.
                  #(display_message, "@(agent_set_wielded_item, :agent, :item PASSED."),
                 
                 
                  #BEGIN DEBUG
                #(else_try),
                  #(str_store_string, s10, "@{s10}. Failed random chance."),
                (try_end),
               
              #(else_try),
                #(str_store_string, s10, "@{s10}. Invalid agent for torch"),
              (try_end),
             
              #(display_message, s10),
			  (try_end),
              #END DEBUG
			#  (try_end),
      ]),
	  
###########Torch by troycall/Envious Arm end


		(-28.0, 0.3, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(store_trigger_param_2, ":trigger_param_2"),
			(store_trigger_param_3, ":trigger_param_3"),
			(assign, ":var_4", reg0),
			(agent_is_human, ":trigger_param_1"),
			(agent_is_alive, ":trigger_param_1"), #this addition
			(agent_is_active, ":trigger_param_1"), #This addition, i disabled tihs whole mission template to fix the bug too.
			(get_player_agent_no, ":player_agent_no"),
			(try_begin),
				(eq, "$tom_weapon_break", 1),
				(eq, ":trigger_param_1", ":player_agent_no"),
				(store_random_in_range, ":random_in_range_0_1000", 0, 1000),
				(eq, ":random_in_range_0_1000", 1),
				(store_random_in_range, ":random_in_range_4_8", 4, 8),
				(troop_get_inventory_slot, ":inventory_slot_player_random_in_range_4_8", "trp_player", ":random_in_range_4_8"),
				(gt, ":inventory_slot_player_random_in_range_4_8", 0),
				(str_store_item_name, 20, ":inventory_slot_player_random_in_range_4_8"),
				(troop_get_inventory_slot_modifier, ":inventory_slot_modifier_player_random_in_range_4_8", "trp_player", ":random_in_range_4_8"),
				(try_begin),
					(eq, ":inventory_slot_modifier_player_random_in_range_4_8", 6),
					(display_message, "@Your {s20} is too crappy to fall apart!", 0x00ff0000),
				(else_try),
					(troop_add_item, "trp_broken_items", ":inventory_slot_player_random_in_range_4_8", ":inventory_slot_modifier_player_random_in_range_4_8"),
					(troop_set_inventory_slot_modifier, "trp_player", ":random_in_range_4_8", 6),
					(display_message, "@Your {s20} cracks!", 0x00ff0000),
				(try_end),
			(try_end),
			(try_begin),
				(eq, "$tom_weapon_break", 1),
				(eq, ":trigger_param_2", ":player_agent_no"),
				(is_between, ":var_4", 1, "itm_cross_end"), #Previously itm_items_end
				(neg|is_between, ":var_4", "itm_light_lance", "itm_wooden_shield"),
				(item_get_type, ":type_var_4", ":var_4"),
				(ge, ":trigger_param_3", 10),
				(neq, ":type_var_4", 10),
				(neq, ":type_var_4", 8),
				(neq, ":type_var_4", 9),
				(neq, ":type_var_4", 5),
				(neq, ":type_var_4", 6),
				(store_random_in_range, ":random_in_range_0_1000", 0, 600),
				(eq, ":random_in_range_0_1000", 1),
				(assign, ":value", -1),
				(try_for_range, ":random_in_range_4_8", 0, 4),
					(troop_get_inventory_slot, ":inventory_slot_player_random_in_range_4_8_2", "trp_player", ":random_in_range_4_8"),
					(eq, ":inventory_slot_player_random_in_range_4_8_2", ":var_4"),
					(assign, ":value", ":random_in_range_4_8"),
				(try_end),
				(gt, ":value", 0),
				(str_store_item_name, 20, ":var_4"),
				(troop_get_inventory_slot_modifier, ":inventory_slot_modifier_player_random_in_range_4_8", "trp_player", ":value"),
				(try_begin),
					(eq, ":inventory_slot_modifier_player_random_in_range_4_8", 6),
					(display_message, "@Your {s20} falls apart!", 0x00ff0000),
					(agent_unequip_item, ":player_agent_no", ":var_4"),
					(troop_remove_item, "trp_player", ":var_4"),
					(troop_remove_item, "trp_broken_items", ":var_4"),
				(else_try),
					(troop_add_item, "trp_broken_items", ":var_4", ":inventory_slot_modifier_player_random_in_range_4_8"),
					(troop_set_inventory_slot_modifier, "trp_player", ":value", 6),
					(display_message, "@Your {s20} cracks!", 0x00ff0000),
				(try_end),
			(try_end),
			(agent_get_horse, ":horse_trigger_param_2", ":trigger_param_2"),
			(try_begin),
				(eq, "$tom_lance_breaking", 1),
				(gt, ":horse_trigger_param_2", 0),
				(this_or_next|is_between, ":var_4", "itm_light_lance", "itm_spear_a"), #Updated item slots
				(is_between, ":var_4", "itm_lance_banner_jer", "itm_pike_banner_teu"), #Updated item slots
				(ge, ":trigger_param_3", 50),
				(store_random_in_range, ":random_in_range_0_100", 0, 100),
				(gt, ":random_in_range_0_100", 20),
				(try_begin),
					(eq, ":trigger_param_2", ":player_agent_no"),
					(display_message, "@You broke your lance!", 0x00ff0000),
				(try_end),
				########Add effects on weapon break *Lances*
        (agent_get_position, pos1, ":trigger_param_2"),
		(agent_play_sound, ":trigger_param_1", "snd_shield_broken"),
		(particle_system_burst, "psys_lanse", pos1, 10),
        (particle_system_burst, "psys_lanse_straw", pos1, 30),
                ####Extend to Lanse_Blood
		#(particle_system_burst, "psys_lanse_blood", pos1, 10),
        #(particle_system_burst, "psys_lanse_blood", pos1, 30),
		        ########End Effects
				(agent_unequip_item, ":trigger_param_2", ":var_4"),
			(else_try),
				(this_or_next|is_between, ":var_4", "itm_bamboo_spear", "itm_wooden_shield"), #Updated item slots
				(is_between, ":var_4", "itm_pike_banner_teu", "itm_items_end"), #Updated item slots
				(le, ":horse_trigger_param_2", 0),
				(ge, ":trigger_param_3", 8),
				(store_random_in_range, ":random_in_range_0_100", 0, 100),
				(ge, ":random_in_range_0_100", 90),
				(try_begin),
					(eq, ":trigger_param_2", ":player_agent_no"),
					(display_message, "@You broke your spear!", 0x00ff0000),
				(try_end),
				########Add effects on weapon break *Spears*
        (agent_get_position, pos1, ":trigger_param_2"),
		(agent_play_sound, ":trigger_param_1", "snd_shield_broken"),
		(store_random_in_range, ":psys_to_use", "psys_lanse", "psys_lanse_blood"),
		(particle_system_burst, ":psys_to_use", pos1, 7), #Default = 10 (Higher = Bigger Particles)
        (particle_system_burst, ":psys_to_use", pos1, 21), #Default = 30 (Higher = Bigger Particles)
                ####Extend to Lanse_Blood
		#(particle_system_burst, "psys_lanse_blood", pos1, 10),
        #(particle_system_burst, "psys_lanse_blood", pos1, 30),
		        ########End Effects
				(agent_unequip_item, ":trigger_param_2", ":var_4"),
			(try_end),
			###Envfix weapon breaking patch start here
		]),

		(-21.0, 0.0, 0.0,
		[],

		[
			(try_begin),
				(eq, "$g_battle_won", 1),
				(call_script, "script_count_mission_casualties_from_agents"),
				(finish_mission, 0),
			(else_try),
				(eq, "$pin_player_fallen", 1),
				(eq, "$g_battle_won", 0),
				(call_script, "script_simulate_retreat", 5, 20, 1),
				(str_store_string, 5, "str_retreat"),
				(call_script, "script_count_mission_casualties_from_agents"),
				(set_mission_result, -1),
				(finish_mission, 0),
			(else_try),
				(eq, "$pin_player_fallen", 1),
				(eq, "$g_battle_won", -1),
				(call_script, "script_count_mission_casualties_from_agents"),
				(finish_mission, 0),
			(else_try),
				(call_script, "script_cf_check_enemies_nearby"),
				(question_box, "str_do_you_want_to_retreat"),
			(else_try),
				(get_player_agent_no, ":player_agent_no"),
				(neg|agent_is_alive, ":player_agent_no"),
				(call_script, "script_cf_check_enemies_nearby"),
				(question_box, "str_do_you_want_to_retreat"),
			(else_try),
				(display_message, "str_can_not_retreat"),
			(try_end)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(call_script, "script_troop_agent_set_banner", "tableau_game_troop_label_banner", ":trigger_param_1", ":troop_id_trigger_param_1")
		]),

		(-8.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(eq, ":trigger_param_1", 0),
			(assign, "$pin_player_fallen", 0),
			(str_store_string, 5, "str_retreat"),
			(call_script, "script_simulate_retreat", 10, 20, 1),
			(assign, "$g_battle_result", -1),
			(call_script, "script_count_mission_casualties_from_agents"),
			(finish_mission, 0)
		]),

		(0.0, 0.0, ti_once,
		[],

		[
			(assign, "$g_battle_won", 0),
			(assign, "$defender_reinforcement_stage", 0),
			(assign, "$attacker_reinforcement_stage", 0),
			(try_begin),
				(eq, "$g_mt_mode", 2),
				(add_reinforcements_to_entry, 1, 6),
			(else_try),
				(add_reinforcements_to_entry, 1, 40),
			(try_end),
						(try_begin),
			(eq, "$additional_music", 0),
			(call_script, "script_combat_music_set_situation_with_culture"),
			(try_end),
			(assign, "$dmod_current_agent", -1),
			(assign, "$dmod_move_camera", -1)
		]),

		(30.0, 0.0, 0.0,
		[],

		[]),

		(2.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_check_friendly_kills")
		]),

		(5.0, 60.0, ti_once,
		[
			(store_mission_timer_a, reg1),
			(ge, reg1, 10),
			(all_enemies_defeated, 5),
			(set_mission_result, 1),
			(display_message, "str_msg_battle_won"),
			#(play_sound, "snd_won_battle"), #Moved to victorious main menu
			(assign, "$g_battle_won", 1),
			(assign, "$g_battle_result", 1),
			(call_script, "script_play_victorious_sound")
		],

		[
			(call_script, "script_count_mission_casualties_from_agents"),
			(finish_mission, 1)
		]),

		(10.0, 0.0, 0.0, # Battle won/lost messages!
		[],

		[
			(eq, "$g_battle_won", 1),
			#(play_sound, "snd_won_battle"), #Moved to victorious main menu
			(display_message, "str_msg_battle_won")
		]),

		(1.0, 60.0, ti_once,
		[
			(store_mission_timer_a, reg1),
			(ge, reg1, 10),
			(main_hero_fallen),
			(assign, ":var_1", 0),
			(try_for_agents, ":var_2"),
				(agent_is_ally, ":var_2"),
				(agent_is_alive, ":var_2"),
				(val_add, ":var_1", 1),
			(try_end),
			(eq, ":var_1", 0),
			(set_mission_result, -1),
						(try_begin),
			(eq, "$colored_messages", 1),
			(display_message, "@Battle lost...", 0x00f78078),
			(else_try),
			(display_message, "@Battle lost..."),
			(try_end),
			(assign, "$g_battle_won", -1),
			(assign, "$g_battle_result", -1)
		],

		[
			(call_script, "script_count_mission_casualties_from_agents"),
			(finish_mission, 0)
		]),

		(10.0, 0.0, 0.0, # Battle won/lost messages!
		[],

		[
			(eq, "$g_battle_won", -1),
						(try_begin),
			(eq, "$colored_messages", 1),
			(display_message, "@Battle lost! Press tab key to leave...", 0x00f78078),
			(else_try),
			(display_message, "@Battle lost! Press tab key to leave..."),
			(try_end),
			#(play_sound, "snd_battle_sounds"), #Moved to your companions carry you away from the fighting menu
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(gt, "$dmod_current_agent", 0),
			(eq, "$setting_use_dmod", 1),
			(eq, "$dmod_move_camera", 1),
			(agent_get_position, 1, "$dmod_current_agent"),
			(position_move_z, 1, 300),
			(position_move_y, 1, -300),
			(agent_get_horse, ":horse_l_dmod_current_agent", "$dmod_current_agent"),
			(try_begin),
				(ge, ":horse_l_dmod_current_agent", 0),
			(try_end),
			(try_begin),
				(eq, "$pop_camera_on", 1),
				(assign, "$pop_camera_on", 0),
			(try_end),
			(mission_cam_set_position, 1),
			(mission_cam_set_mode, 1),
			(set_fixed_point_multiplier, 100)
		],

		[]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(eq, "$setting_use_dmod", 1),
			(key_clicked, 238),
			(main_hero_fallen),
			(call_script, "script_dmod_cycle_forwards")
		],

		[]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(eq, "$setting_use_dmod", 1),
			(key_clicked, 239),
			(main_hero_fallen),
			(call_script, "script_dmod_cycle_backwards")
		],

		[]),

		(0.0, 0.0, ti_once,
		[],

		[
			(assign, "$pop_camera_on", 0),
			(assign, "$pop_camera_mouse_center_x", 500),
			(assign, "$pop_camera_mouse_center_y", 375),
			(assign, "$pop_camera_mouse_x", "$pop_camera_mouse_center_x"),
			(assign, "$pop_camera_mouse_y", "$pop_camera_mouse_center_y"),
			(assign, "$pop_camera_mouse_counter", 0)
		]),

		(0.0, 4.0, ti_once,
		[
			(eq, "$enable_deahtcam", 1),
			(main_hero_fallen),
			(eq, "$pop_camera_on", 0),
			(assign, "$tom_sand_storm", 0)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_position, 1, ":player_agent_no"),
			(position_get_x, ":position_x_1", 1),
			(position_get_y, ":position_y_1", 1),
			(init_position, 47),
			(position_set_x, 47, ":position_x_1"),
			(position_set_y, 47, ":position_y_1"),
			(position_set_z_to_ground_level, 47),
			(position_move_z, 47, 250),
			(mission_cam_set_mode, 1, 0, 0),
			(mission_cam_set_position, 47),
			(assign, "$pop_camera_rotx", 0),
			(assign, "$pop_camera_on", 1)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(this_or_next|eq, "$dmod_move_camera", 1),
			(eq, "$pop_camera_on", 1),
			(this_or_next|game_key_clicked, 0),
			(this_or_next|game_key_is_down, 0),
			(this_or_next|game_key_clicked, 1),
			(this_or_next|game_key_is_down, 1),
			(this_or_next|game_key_clicked, 2),
			(this_or_next|game_key_is_down, 2),
			(this_or_next|game_key_clicked, 3),
			(game_key_is_down, 3)
		],

		[
			(try_begin),
				(eq, "$dmod_move_camera", 1),
				(mission_cam_set_mode, 1, 0, 0),
				(assign, "$pop_camera_rotx", 0),
				(assign, "$pop_camera_on", 1),
				(assign, "$dmod_move_camera", 0),
			(try_end),
			(mission_cam_get_position, 47),
			(assign, ":value", 0),
			(assign, ":value_2", 0),
			(try_begin),
				(this_or_next|game_key_clicked, 0),
				(game_key_is_down, 0),
				(assign, ":value_2", 10),
			(try_end),
			(try_begin),
				(this_or_next|game_key_clicked, 1),
				(game_key_is_down, 1),
				(assign, ":value_2", -10),
			(try_end),
			(try_begin),
				(this_or_next|game_key_clicked, 2),
				(game_key_is_down, 2),
				(assign, ":value", -10),
			(try_end),
			(try_begin),
				(this_or_next|game_key_clicked, 3),
				(game_key_is_down, 3),
				(assign, ":value", 10),
			(try_end),
			(position_move_x, 47, ":value"),
			(position_move_y, 47, ":value_2"),
			(mission_cam_set_position, 47)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(eq, "$pop_camera_on", 1),
			(neg|is_presentation_active, "prsnt_battle"),
			(mouse_get_position, 1),
			(set_fixed_point_multiplier, 1000),
			(position_get_x, reg1, 1),
			(position_get_y, reg2, 1),
			(set_fixed_point_multiplier, 100),
			(this_or_next|neq, reg1, "$pop_camera_mouse_center_x"),
			(neq, reg2, "$pop_camera_mouse_center_y")
		],

		[
			(assign, ":value", 1),
			(try_begin),
				(eq, reg1, "$pop_camera_mouse_x"),
				(eq, reg2, "$pop_camera_mouse_y"),
				(val_add, "$pop_camera_mouse_counter", 1),
				(try_begin),
					(gt, "$pop_camera_mouse_counter", 50),
					(assign, "$pop_camera_mouse_center_x", reg1),
					(assign, "$pop_camera_mouse_center_y", reg2),
					(assign, "$pop_camera_mouse_counter", 0),
				(try_end),
				(assign, ":value", 0),
			(try_end),
			(eq, ":value", 1),
			(assign, "$pop_camera_mouse_counter", 0),
			(assign, "$pop_camera_mouse_x", reg1),
			(assign, "$pop_camera_mouse_y", reg2),
			(mission_cam_get_position, 47),
			(store_sub, ":value_2", "$pop_camera_mouse_center_x", reg1),
			(store_sub, ":value_3", reg2, "$pop_camera_mouse_center_y"),
			(try_for_range, ":number", 0, 2),
				(try_begin),
					(eq, ":number", 1),
					(assign, ":value_2", ":value_3"),
				(try_end),
				(this_or_next|lt, ":value_2", -2),
				(gt, ":value_2", 2),
				(assign, ":value_4", 1),
				(try_begin),
					(lt, ":value_2", 0),
					(assign, ":value_4", -1),
				(try_end),
				(val_abs, ":value_2"),
				(val_sub, ":value_2", 2),
				(convert_to_fixed_point, ":value_2"),
				(store_sqrt, ":value_2", ":value_2"),
				(convert_from_fixed_point, ":value_2"),
				(val_clamp, ":value_2", 1, 64),
				(val_mul, ":value_2", ":value_4"),
				(try_begin),
					(eq, ":number", 0),
					(store_mul, ":value_5", "$pop_camera_rotx", -1),
					(position_rotate_x, 47, ":value_5"),
					(position_rotate_z, 47, ":value_2"),
					(position_rotate_x, 47, "$pop_camera_rotx"),
				(try_end),
				(try_begin),
					(eq, ":number", 1),
					(position_rotate_x, 47, ":value_2"),
					(val_add, "$pop_camera_rotx", ":value_2"),
				(try_end),
			(try_end),
			(mission_cam_set_position, 47)
		]),

		(1.0, 4.0, ti_once,
		[
			(main_hero_fallen)
		],

		[
			(assign, "$pin_player_fallen", 1),
			(neq, "$use_player_auxiliary", 1),
			(display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
			(display_message, "@If you choose to watch the fight you can use the mouse scroll up and down to switch between troop view or AWDS keys for free camera view.")
		]),

		(-22.0, 0.0, 0.0,
		[],

		[
			(display_message, "str_use_baggage_for_inventory")
		]),

		(0.0, 0.0, 0.0,
		[],

		[
			(game_key_clicked, 22),
			(neg|is_presentation_active, "prsnt_battle"),
			(start_presentation, "prsnt_battle")
		]),

		(0.1, 0.0, 0.0,
		[],

		[
			(is_presentation_active, "prsnt_battle"),
			(call_script, "script_update_order_panel_statistics_and_map")
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_set_matching_sexy_boots", ":trigger_param_1")
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$sp_shield_bash", 1),
			(game_key_is_down, 7),
			(game_key_clicked, 6),
			(neg|main_hero_fallen),
		],

		[
		(call_script, "script_shield_bash"),
		]),

			##AI kicking begin
		   (2, 0, 3, #AI kicking
       [], [
	(get_player_agent_no,":player"),
	(try_for_agents, ":agent"),
		(neq, ":agent", ":player"),
		(agent_is_alive, ":agent"),
		(neq, ":agent", -1),
		(agent_is_human, ":agent"),#Only humans can kick....FOR NOW
		(agent_is_active, ":agent"),
		(agent_slot_eq, ":agent", slot_agent_is_running_away, 0),#Isn't fleeing the battle.
		##He's an eligible human.  Now see if he's in a position to kick.
		(agent_get_attack_action, ":attack_action", ":agent"), #returned values: free = 0, readying_attack = 1, releasing_attack = 2, completing_attack_after_hit = 3, attack_parried = 4, reloading = 5, after_release = 6, cancelling_attack = 7
		(agent_get_defend_action, ":defend_action", ":agent"),#
		(this_or_next|eq,":attack_action",4),#Just got parried
		(this_or_next|eq,":defend_action",1),#Parrying an enemy
		##So he'll only try to kick if he just parried an enemy attack, or his own attack just got parried.
		(agent_get_team, ":team", ":agent"),
		(assign, ":maximum_distance", 100),
		#Target Acquisition
		(agent_ai_get_look_target,":suspect",":agent"),
		(gt,":suspect",0),#Make sure there is someone.
		(agent_is_alive, ":suspect"),
		(agent_is_human, ":suspect"),#Only kick humans
		(agent_is_active, ":suspect"),
		(agent_get_team, ":suspect_team", ":suspect"),
		(neq, ":suspect_team", ":team"),#Friends don't let friends kick friends.
		(agent_get_position, pos1, ":agent"),#Distance check
		(agent_get_position, pos2, ":suspect"),
		(neg|position_is_behind_position, pos2, pos1), #Suspect can't be behind kicker.
		(get_distance_between_positions, ":distance", pos1, pos2),
		(le, ":distance", ":maximum_distance"),
		#Check chance
		(store_random_in_range,":kickchance", 1, 10),
		(try_begin),
			(eq,":kickchance",1), #10% chance per check
				#(display_message, "@Agent kicks."),
				(agent_set_animation, ":agent", "anim_prepare_kick_0"),
				(agent_deliver_damage_to_agent, ":agent", ":suspect", 3),
				(agent_set_animation, ":suspect", "anim_strike3_abdomen_front"),#Get Kicked
			(try_end),
	   (try_end),]),
	   
	   ##AI Kicking end
		
		
		(0.25, 0.0, 4.0,
		[
			(eq, "$sp_shield_bash_ai", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(neq, ":var_2", ":player_agent_no"),
				(agent_is_alive, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_active, ":var_2"), #Test to see if it stops AI from shield bashing (new addition v3)
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(store_skill_level, ":skill_level_shield_troop_id_var_2", "skl_shield", ":troop_id_var_2"),
				(store_proficiency_level, ":proficiency_level_troop_id_var_2_0", ":troop_id_var_2", 0),
				(ge, ":skill_level_shield_troop_id_var_2", 4),
				(ge, ":proficiency_level_troop_id_var_2_0", 200),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(le, ":horse_var_2", 0),
				(try_begin),
					(neg|agent_slot_ge, ":var_2", 50, 1),
					(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
					(agent_get_wielded_item, ":wielded_item_var_2_1", ":var_2", 1),
					(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
					(eq, ":type_wielded_item_var_2_1", 7),
					(agent_get_attack_action, ":attack_action_var_2", ":var_2"),
					(eq, ":attack_action_var_2", 0),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_position, 1, ":var_2"),
					(assign, ":value", -1),
					(assign, ":value_2", 125),
					(try_for_agents, ":var_13"),
						(agent_is_alive, ":var_13"),
						(agent_is_human, ":var_13"),
						(agent_get_position, 2, ":var_13"),
						(neg|position_is_behind_position, 2, 1),
						(agent_get_team, ":team_var_13", ":var_13"),
						(neq, ":team_var_13", ":team_var_2"),
						(try_begin),
							(eq, ":team_var_2", 0),
							(assign, ":value_3", 2),
						(else_try),
							(eq, ":team_var_2", 2),
							(assign, ":value_3", 0),
						(else_try),
							(eq, ":team_var_2", 1),
							(assign, ":value_3", 3),
						(else_try),
							(eq, ":team_var_2", 3),
							(assign, ":value_3", 1),
						(try_end),
						(neq, ":team_var_13", ":value_3"),
						(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
						(le, ":distance_between_positions_1_2", ":value_2"),
						(assign, ":value_2", ":distance_between_positions_1_2"),
						(assign, ":value", ":var_13"),
					(try_end),
					(ge, ":value", 0),
					(agent_get_horse, ":horse_var_2", ":value"),
					(eq, ":horse_var_2", -1),
					(store_random_in_range, ":random_in_range_15_26", 15, 26),
					(agent_set_slot, ":var_2", 50, ":random_in_range_15_26"),
					(agent_set_animation, ":var_2", "anim_shield_bash"),
					(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
					(troop_get_type, ":type_wielded_item_var_2_1", ":troop_id_var_2"),
					(try_begin),
						(eq, ":type_wielded_item_var_2_1", 0),
						(agent_play_sound, ":var_2", "snd_man_yell"),
					(else_try),
						(eq, ":type_wielded_item_var_2_1", 1),
						(agent_play_sound, ":var_2", "snd_woman_yell"),
					(try_end),
					(agent_play_sound, ":value", "snd_wooden_hit_low_armor_high_damage"),
					(agent_get_defend_action, ":attack_action_var_2", ":value"),
					(try_begin),
						(eq, ":attack_action_var_2", 2),
						(neg|position_is_behind_position, 1, 2),
						(agent_get_wielded_item, ":wielded_item_var_2_1", ":value", 1),
						(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
						(eq, ":type_wielded_item_var_2_1", 7),
						(agent_set_animation, ":value", "anim_shield_bash"),
					(else_try),
						(agent_set_animation, ":value", "anim_shield_strike"),
					(try_end),
				(try_end),
				(agent_get_slot, ":var_2_50", ":var_2", 50),
				(val_sub, ":var_2_50", 1),
				(val_max, ":var_2_50", 0),
				(agent_set_slot, ":var_2", 50, ":var_2_50"),
			(try_end)
		]),

		(0.0, 0.0, ti_once,
		[],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_team, ":team_player_agent_no", ":player_agent_no"),
			(set_show_messages, 0),
			(team_give_order, ":team_player_agent_no", 9, 0),
			(set_show_messages, 1)
		]),

		(0.0, 0.0, ti_once,
		[
			(eq, 0, 1),
			(eq, "$enable_deahtcam", 1),
			(main_hero_fallen)
		],

		[
			(assign, "$fclock", 1),
			(call_script, "script_player_order_formations", 2),
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_team, ":team_player_agent_no", ":player_agent_no"),
			(team_give_order, ":team_player_agent_no", 9, 2)
		]),

		(0.0, 0.0, 5.0,
		[],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_non_player, ":var_2"), #Agent must not be a player V1.0998D2
				(neq, ":player_agent_no", ":var_2"),
				(agent_slot_eq, ":var_2", 100, 0),
				(agent_is_alive, ":var_2"),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(agent_get_ammo, ":ammo_var_2", ":var_2"),
				(le, ":ammo_var_2", 0),
				(try_begin),
					(gt, ":horse_var_2", 0),
					(neg|troop_is_guarantee_ranged, ":troop_id_var_2"),
					(agent_get_wielded_item, ":wielded_item_var_2_0", ":var_2", 0),
					(neg|is_between, ":wielded_item_var_2_0", "itm_light_lance", "itm_spear_a"),
					(try_for_range, ":item", "itm_light_lance", "itm_spear_a"),
						(agent_set_wielded_item, ":var_2", ":item"),
					(try_end),
				(else_try),
					(eq, "$tom_use_banners", 1),
					(try_for_range, ":item", 1198, 1202),
						(agent_set_wielded_item, ":var_2", ":item"),
					(try_end),
					(agent_get_wielded_item, ":item", ":var_2", 0),
					(is_between, ":item", 1198, 1202),
				(else_try),
					(neg|troop_is_guarantee_ranged, ":troop_id_var_2"),
					(le, ":horse_var_2", 0),
					(agent_get_wielded_item, ":wielded_item_var_2_0", ":var_2", 0),
					(is_between, ":wielded_item_var_2_0", "itm_light_lance", "itm_spear_a"),
					(try_for_range, reg0, 0, 4),
						(agent_get_item_slot, ":item", ":var_2", reg0),
						(is_between, ":item", 1, "itm_cross_end"), #Previously itm_items_end
						(neg|is_between, ":item", "itm_light_lance", "itm_bamboo_spear"),
						(item_get_type, ":type_item", ":item"),
						(this_or_next|eq, ":type_item", 3),
						(this_or_next|eq, ":type_item", 4),
						(eq, ":type_item", 2),
						(agent_set_wielded_item, ":var_2", ":item"),
					(try_end),
				(else_try),
					(neg|troop_is_guarantee_ranged, ":troop_id_var_2"),
					(le, ":horse_var_2", 0),
					(agent_get_wielded_item, ":wielded_item_var_2_0", ":var_2", 0),
					(neg|is_between, ":wielded_item_var_2_0", "itm_bamboo_spear", "itm_wooden_shield"),
					(try_for_range, ":item", "itm_bamboo_spear", "itm_wooden_shield"),
						(agent_set_wielded_item, ":var_2", ":item"),
					(try_end),
				(else_try),
					(troop_is_guarantee_ranged, ":troop_id_var_2"),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_division, ":division_var_2", ":var_2"),
					(team_get_hold_fire_order, ":hold_fire_order_team_var_2_division_var_2", ":team_var_2", ":division_var_2"),
					(neq, ":hold_fire_order_team_var_2_division_var_2", 1),
					(is_between, ":wielded_item_var_2_0", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_0", ":wielded_item_var_2_0"),
					(this_or_next|le, ":wielded_item_var_2_0", -1),
					(this_or_next|neq, ":type_wielded_item_var_2_0", 10),
					(this_or_next|neq, ":type_wielded_item_var_2_0", 9),
					(neq, ":type_wielded_item_var_2_0", 8),
					(call_script, "script_get_closest_enemy_distance_new", ":var_2", ":team_var_2", 300),
					(assign, ":var_13", reg1),
					(gt, ":var_13", 300),
					(assign, ":value", 4),
					(try_for_range, reg0, 0, ":value"),
						(agent_get_item_slot, ":item_slot_var_2_reg0", ":var_2", reg0),
						(is_between, ":item_slot_var_2_reg0", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_0", ":item_slot_var_2_reg0"),
						(this_or_next|eq, ":type_wielded_item_var_2_0", 10),
						(this_or_next|eq, ":type_wielded_item_var_2_0", 8),
						(eq, ":type_wielded_item_var_2_0", 9),
						(agent_set_wielded_item, ":var_2", ":item_slot_var_2_reg0"),
						(assign, ":value", -1),
					(try_end),
				(try_end),
			(try_end)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_is_human, ":trigger_param_1"),
			(agent_is_non_player, ":trigger_param_1"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(lt, ":troop_id_trigger_param_1", "trp_kidnapped_girl"),
			(try_for_range, reg0, 0, 4),
				(agent_get_item_slot, ":item_slot_trigger_param_1_reg0", ":trigger_param_1", reg0),
				(is_between, ":item_slot_trigger_param_1_reg0", 1, "itm_cross_end"), #Previously itm_items_end
				(agent_unequip_item, ":trigger_param_1", ":item_slot_trigger_param_1_reg0"),
			(try_end),
			(try_for_range, reg0, 0, 2),
				(agent_get_wielded_item, ":item_slot_trigger_param_1_reg0", ":trigger_param_1", reg0),
				(is_between, ":item_slot_trigger_param_1_reg0", 1, "itm_cross_end"), #Previously itm_items_end
				(agent_unequip_item, ":trigger_param_1", ":item_slot_trigger_param_1_reg0"),
			(try_end),
			(assign, ":var_4", 0),
			(assign, ":var_5", 25),
			(assign, ":var_6", 50),
			(assign, ":var_7", 75),
			(assign, ":var_8", 100),
			(assign, ":var_18", 125),
			(assign, ":var_10", 150),
			(assign, ":var_11", 175),
			(assign, ":var_12", 200),
			(assign, ":value", 0),
			(assign, ":value_2", 0),
			(assign, ":value_3", 0),
			(assign, ":value_4", 0),
			(assign, ":value_5", 0),
			(assign, ":value_6", 0),
			(assign, ":value_7", 0),
			(assign, ":value_8", 0),
			(assign, ":value_9", 0),
			(troop_get_inventory_capacity, ":inventory_capacity_troop_id_trigger_param_1", ":troop_id_trigger_param_1"),
			(try_for_range, ":localvariable", 0, ":inventory_capacity_troop_id_trigger_param_1"),
				(troop_get_inventory_slot, ":inventory_slot_troop_id_trigger_param_1_localvariable", ":troop_id_trigger_param_1", ":localvariable"),
				(is_between, ":inventory_slot_troop_id_trigger_param_1_localvariable", 1, "itm_cross_end"), #Previously itm_items_end
				(item_get_type, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
				(try_begin),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 4),
					(val_add, ":var_4", 1),
					(troop_set_slot, "trp_items_array", slot_troop_relations_begin, ":var_4"),
					(troop_set_slot, "trp_items_array", ":var_4", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 2),
					(val_add, ":var_5", 1),
					(troop_set_slot, "trp_items_array", slot_troop_last_quest_betrayed, ":var_5"),
					(troop_set_slot, "trp_items_array", ":var_5", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_2", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 7),
					(val_add, ":var_6", 1),
					(troop_set_slot, "trp_items_array", slot_troop_recruitment_random, ":var_6"),
					(troop_set_slot, "trp_items_array", ":var_6", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_3", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 3),
					(val_add, ":var_7", 1),
					(troop_set_slot, "trp_items_array", slot_troop_personalitymatch_object, ":var_7"),
					(troop_set_slot, "trp_items_array", ":var_7", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_4", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 10),
					(val_add, ":var_8", 1),
					(troop_set_slot, "trp_items_array", 100, ":var_8"),
					(troop_set_slot, "trp_items_array", ":var_8", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_5", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 6),
					(val_add, ":var_18", 1),
					(troop_set_slot, "trp_items_array", slot_troop_rehire_speech, ":var_18"),
					(troop_set_slot, "trp_items_array", ":var_18", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_6", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 5),
					(val_add, ":var_10", 1),
					(troop_set_slot, "trp_items_array", slot_troop_days_on_mission, ":var_10"),
					(troop_set_slot, "trp_items_array", ":var_10", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_7", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 8),
					(val_add, ":var_11", 1),
					(troop_set_slot, "trp_items_array", 175, ":var_11"),
					(troop_set_slot, "trp_items_array", ":var_11", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_8", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 9),
					(val_add, ":var_12", 1),
					(troop_set_slot, "trp_items_array", 200, ":var_12"),
					(troop_set_slot, "trp_items_array", ":var_12", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_9", 1),
				(try_end),
			(try_end),
			(try_begin),
				(eq, ":value", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_relations_begin),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 1, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_2", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_last_quest_betrayed),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 26, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_3", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_recruitment_random),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 51, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_4", 1),
				(try_begin),
					(eq, ":value_2", 1),
					(store_random_in_range, ":random_in_range_0_100", 0, 100),
					(lt, ":random_in_range_0_100", 65),
				(else_try),
					(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_personalitymatch_object),
					(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 76, ":items_array_relations_begin"),
					(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
					(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
				(try_end),
			(try_end),
			(try_begin),
				(eq, ":value_5", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", 100),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 101, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_6", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_rehire_speech),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 126, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_7", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_days_on_mission),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 151, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_8", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", 175),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 176, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_9", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", 200),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 201, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end)
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(assign, "$tom_sand_storm", 0),
			(call_script, "script_change_rain_or_snow"),
			(set_fixed_point_multiplier, 100),
			(try_begin),
				(is_currently_night),
			#	(set_shader_param_float, "@vFresnelMultiplier", 15),
			(else_try),
				#(set_shader_param_float, "@vFresnelMultiplier", 50),
			(try_end)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$tom_sand_storm", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_position, 0, ":player_agent_no"),
			(position_set_z_to_ground_level, 0),
			(position_get_z, ":position_z_0", 0),
			(val_add, ":position_z_0", 400),
			(position_set_z, 0, ":position_z_0"),
			(particle_system_burst, "psys_desert_storm", 0, 2),
			(set_fixed_point_multiplier, 100)
		]),

#		(0.0, 2.0, ti_once,
#		[
#			(eq, "$tom_use_banners", 1)
#		],
#
#		[
#			(call_script, "script_set_flag_carriers")
#		]),

		(10.0, 0.0, 0.0,
		[
			(eq, "$tom_use_banners", 1),
			(eq, "$tom_bonus_banners", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_range, ":value"),
				(agent_slot_eq, ":value", 107, 1),
				(agent_is_alive, ":value"),
				(agent_is_active, ":value"),
				(agent_get_team, ":team_value", ":value"),
				(agent_get_position, 1, ":value"),
				(try_for_range, ":value_2"),
					(neq, ":value_2", ":value"),
					(agent_get_team, ":team_value_2", ":value_2"),
					(eq, ":team_value", ":team_value_2"),
					(agent_is_alive, ":value_2"),
					(agent_is_active, ":value_2"),
					(agent_is_human, ":value_2"),
					(agent_get_position, 2, ":value_2"),
					(get_distance_between_positions_in_meters, ":distance_between_positions_in_meters_1_2", 1, 2),
					(le, ":distance_between_positions_in_meters_1_2", 10),
					(store_agent_hit_points, ":agent_hit_points_value_2", ":value_2"),
					(val_add, ":agent_hit_points_value_2", 2),
					(val_min, ":agent_hit_points_value_2", 101),
					(agent_set_hit_points, ":value_2", ":agent_hit_points_value_2"),
					(try_begin),
						(eq, ":value_2", ":player_agent_no"),
						(display_message, "@You feel secured standing near the banner, healing some of your HP.", 0x006495ed),
					(try_end),
				(try_end),
			(try_end),
			(assign, ":value", ":player_agent_no"),
			(agent_is_alive, ":value"),
			(agent_get_wielded_item, ":wielded_item_value_0", ":value", 0),
			(is_between, ":wielded_item_value_0", 1198, 1202),
			(agent_get_team, ":team_value", ":value"),
			(agent_get_position, 1, ":value"),
			(try_for_range, ":value_2"),
				(neq, ":value_2", ":value"),
				(agent_get_team, ":team_value_2", ":value_2"),
				(eq, ":team_value", ":team_value_2"),
				(agent_is_alive, ":value_2"),
				(agent_is_active, ":value_2"),
				(agent_is_human, ":value_2"),
				(agent_get_position, 2, ":value_2"),
				(get_distance_between_positions_in_meters, ":distance_between_positions_in_meters_1_2", 1, 2),
				(le, ":distance_between_positions_in_meters_1_2", 10),
				(store_agent_hit_points, ":agent_hit_points_value_2", ":value_2"),
				(try_begin),
					(eq, ":wielded_item_value_0", 1201),
					(val_add, ":agent_hit_points_value_2", 1),
				(try_end),
				(val_add, ":agent_hit_points_value_2", 5),
				(val_max, ":agent_hit_points_value_2", 101),
				(agent_set_hit_points, ":value_2", ":agent_hit_points_value_2"),
			(try_end)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$tom_sand_storm", 3)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_position, 0, ":player_agent_no"),
			(position_set_z_to_ground_level, 0),
			(position_get_z, ":position_z_0", 0),
			(val_add, ":position_z_0", 2100),
			(position_set_z, 0, ":position_z_0"),
			(particle_system_burst, "psys_rain", 0, 1),
			(set_fixed_point_multiplier, 100)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$tom_sand_storm", 2)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_position, 0, ":player_agent_no"),
			(position_set_z_to_ground_level, 0),
			(position_get_z, ":position_z_0", 0),
			(val_add, ":position_z_0", 2000),
			(position_set_z, 0, ":position_z_0"),
			(particle_system_burst, "psys_blizzard", 0, 1),
			(set_fixed_point_multiplier, 100)
		]),

		(8.0, 0.0, 0.0,
		[
			(eq, "$tom_sand_storm", 3)
		],

		[
			(store_random_in_range, ":random_in_range_0_100", 0, 100),
			(try_begin),
				(ge, ":random_in_range_0_100", 90),
				(play_sound, "snd_thunder"),
			(try_end)
		]),

		(0.0, 0.0, ti_once,
		[
			(eq, "$tom_sand_storm", 2)
		],

		[
			(play_sound, "snd_wind")
		]),

		(0.0, 0.0, ti_once,
		[
			(eq, "$tom_sand_storm", 1)
		],

		[
			(play_sound, "snd_wind")
		]),

		(1.0, 0.0, ti_once,
		[
			(neq, "$g_battle_result", 0),
			(get_player_agent_no, ":player_agent_no"),
			(agent_is_alive, ":player_agent_no"),
			(agent_get_troop_id, ":troop_id_player_agent_no", ":player_agent_no"),
			(eq, ":troop_id_player_agent_no", "trp_player")
		],

		[
			(call_script, "script_freelancer_keep_field_loot")
		]),

		(0.0, 1.5, 0.0,
		[
			(key_clicked, 20),
			(get_player_agent_no, ":player_agent_no"),
			(agent_is_alive, ":player_agent_no"),
			(agent_set_animation, ":player_agent_no", "anim_cheer", 1),
			(agent_play_sound, ":player_agent_no", "snd_man_victory")
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_team, ":team_player_agent_no", ":player_agent_no"),
			(agent_get_position, 1, ":player_agent_no"),
			(try_for_agents, ":var_3"),
				(agent_is_alive, ":var_3"),
				(agent_is_human, ":var_3"),
				(agent_get_team, ":team_var_3", ":var_3"),
				(eq, ":team_var_3", ":team_player_agent_no"),
				(agent_get_position, 0, ":var_3"),
				(get_distance_between_positions_in_meters, ":distance_between_positions_in_meters_0_1", 0, 1),
				(lt, ":distance_between_positions_in_meters_0_1", 20),
				(agent_set_animation, ":var_3", "anim_cheer", 1),
				(agent_play_sound, ":var_3", "snd_man_victory"),
				(agent_get_slot, ":var_3_courage_score", ":var_3", slot_agent_courage_score),
				(val_add, ":var_3_courage_score", 5),
				(val_min, ":var_3_courage_score", 9600),
				(agent_set_slot, ":var_3", slot_agent_courage_score, ":var_3_courage_score"),
			(try_end),
			(display_message, "@Huzzah! You encourage your nearby troops.")
		]),

		(0.0, 1.7, 0.0,
		[
			(eq, "$tom_yell_smelly_peasents", 1)
		],

		[
			(call_script, "script_tom_command_cheer"),
			(assign, "$tom_yell_smelly_peasents", 0)
		]),

		(-26.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(store_trigger_param_2, ":trigger_param_2"),
			(neg|agent_is_ally, ":trigger_param_1"),
			(agent_is_human, ":trigger_param_1"),
			(eq, ":trigger_param_2", "$fplayer_agent_no"),
			(val_add, "$killcount", 1)
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_clear_troop_array", "trp_lances_troop_in_combat", 0, "$lance_troop_serving")
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_is_human, ":trigger_param_1"),
			(get_player_agent_no, ":player_agent_no"),
			(neq, ":trigger_param_1", ":player_agent_no"),
			(agent_get_party_id, ":party_id_trigger_param_1", ":trigger_param_1"),
			(eq, ":party_id_trigger_param_1", "p_main_party"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(call_script, "script_search_for_troop", ":troop_id_trigger_param_1"),
			(agent_set_slot, ":trigger_param_1", 102, reg0)
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(assign, "$enable_deahtcam", 1),
			(assign, "$auxilary_player_active", 0),
			(eq, "$use_player_auxiliary", 1),
			(assign, "$g_move_heroes", 1),
			(party_clear, "p_temp_casualties_3"),
			(call_script, "script_party_add_party", "p_temp_casualties_3", "p_main_party"),
			(set_player_troop, "trp_player"),
			(assign, "$enable_deahtcam", 0)
		]),

		(5.0, 0.0, 0.0,
		[
			(eq, "$use_player_auxiliary", 1),
			(eq, "$enable_deahtcam", 0),
			(get_player_agent_no, ":player_agent_no"),
			(neg|agent_is_alive, ":player_agent_no")
		],

		[
			(set_fixed_point_multiplier, 100),
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_team, ":team_player_agent_no", ":player_agent_no"),
			(agent_get_division, ":division_player_agent_no", ":player_agent_no"),
			(assign, ":value", 0),
			(try_for_agents, ":var_5"),
				(eq, ":value", 0),
				(agent_is_human, ":var_5"),
				(agent_is_alive, ":var_5"),
				(agent_get_team, ":team_var_5", ":var_5"),
				(agent_get_party_id, ":party_id_var_5", ":var_5"),
				(eq, ":party_id_var_5", "p_main_party"),
				(agent_get_division, ":division_player_agent_no_2", ":player_agent_no"),
				(agent_get_group, ":group_player_agent_no", ":player_agent_no"),
				(eq, ":team_player_agent_no", ":team_var_5"),
				(eq, ":division_player_agent_no", ":division_player_agent_no_2"),
				(agent_get_troop_id, ":troop_id_var_5", ":var_5"),
				(neg|is_between, ":troop_id_var_5", "trp_npc1", "trp_knight_1_1_wife"),
				(set_player_troop, ":troop_id_var_5"),
				(store_agent_hit_points, ":agent_hit_points_var_5_1", ":var_5", 1),
				(agent_get_position, 1, ":var_5"),
				(position_set_z, 1, -2000),
				(position_set_x, 1, 0),
				(position_set_y, 1, 0),
				(agent_get_position, 0, ":var_5"),
				(set_spawn_position, 0),
				(agent_get_horse, ":horse_var_5", ":var_5"),
				(try_begin),
					(gt, ":horse_var_5", 0),
					(agent_set_position, ":horse_var_5", 1),
					(remove_agent, ":horse_var_5"),
				(try_end),
				(agent_set_position, ":var_5", 1),
				(agent_set_slot, ":var_5", 100, 1),
				(agent_get_slot, ":var_5_102", ":var_5", 102),
				(remove_agent, ":var_5"),
				(spawn_agent, ":troop_id_var_5"),
				(assign, ":player_agent_no", reg0),
				(agent_set_slot, ":player_agent_no", 102, ":var_5_102"),
				(agent_set_team, ":player_agent_no", ":team_player_agent_no"),
				(agent_set_hit_points, ":player_agent_no", ":agent_hit_points_var_5_1", 1),
				(agent_set_group, ":player_agent_no", ":group_player_agent_no"),
				(agent_set_slot, ":player_agent_no", 100, 2),
				(agent_set_slot, ":player_agent_no", 101, ":troop_id_var_5"),
				(try_begin),
					(agent_get_horse, ":horse_player_agent_no", ":player_agent_no"),
					(gt, ":horse_player_agent_no", 0),
					(lt, ":horse_var_5", 0),
					(agent_set_position, ":horse_player_agent_no", 1),
					(remove_agent, ":horse_player_agent_no"),
				(try_end),
				(set_player_troop, "trp_player"),
				(assign, ":value", 1),
				(assign, "$auxilary_player_active", 1),
			(try_end),
			(eq, ":value", 0),
			(assign, "$enable_deahtcam", 1)
		])
	] + crouching_triggers ),

	("village_raid", mtf_battle_mode, 8,
	"You lead your men to battle.",
	[(3, mtef_defenders|mtef_team_0, af_override_horse, aif_start_alarmed, 12, []),
	(3, mtef_defenders|mtef_team_0, 0, aif_start_alarmed, 0, []),
	(1, mtef_attackers|mtef_team_1, 0, aif_start_alarmed, 12, []),
	(1, mtef_attackers|mtef_team_1, 0, aif_start_alarmed, 0, [])],
	[
		

    (7, 0, ti_once,
    [],
    [
	(call_script, "script_assign_traits"),
    ]),


    (0, 0, 1, 
    [
    ],
    [
	(call_script, "script_stumbling"),
    ]),





#Decapitations next level right here.
(ti_on_agent_hit, 0, 0, [(eq, "$dynamic_decap", 1),],
[
   (store_trigger_param_1, ":victim_agent"),
   (store_trigger_param_2, ":attacker_agent"),
   (store_trigger_param_3, ":damage"),
   (assign, ":attacker_item", reg0), ### Transfer the item ID to make sure it dosn't change while the script is running
   (copy_position, pos5, pos0), ### Transfer the position of the hit to make sure it dosn't change while the script is running
   (neq, ":victim_agent", -1),
   (try_begin), #-- Decapitations --#
      (agent_is_human, ":victim_agent"),
	  (ge, ":attacker_item", 0),
	  (assign, ":run", 0), ### Reset the run test variable
#	  (try_begin), ### Special weapons that can decap, ovevrrides the below conditions
#		  (this_or_next|eq, ":attacker_item", "itm_supercrossbow"),
#		  (eq, ":attacker_item", "itm_supersledge"),
#		  (assign, ":run", 1),
	  (try_begin),
		  #(neq, ":attacker_item", "itm_mace_1"), ### List of weapons that cannot decapitate
		  #(neq, ":attacker_item", "itm_mace_2"), ### This would be easier to do with a preperty check (for damage type), but I don't know if that is possible or not
		  #(neq, ":attacker_item", "itm_mace_3"),
		  #(neq, ":attacker_item", "itm_staff"), #Keeping active incase of script errors
		  (agent_get_action_dir, ":attack_dir", ":attacker_agent"), ### Makes sure the attack is either a left or right swing
		  (this_or_next|eq, ":attack_dir", 1), ### Right swing
		  (eq, ":attack_dir", 2), ### Left swing
		  (assign, ":run", 1),
	  (try_end),
	  (eq, ":run", 1), ### One of the checks were true, continue to run script
	  #(assign, reg1, ":damage"), #Debug messages
	  #(display_message, "@Damage: {reg1}"),
	  
	  (assign, ":run", 0), ### Reset the run test variable
	  (try_begin),
		(ge, ":damage", "$decap_damage"), ### 30 Minimum damage required to decapitate an agent
		(assign, ":run", 1),
		
#	  (else_try),  ### If debugging mode is on, this bypasses the damage requirement check
#		  (eq,"$g_decapitations_debugging", 1),
#		  (assign, ":run", 1),
#		  (display_message, "@Decap minimum DMG req bypassed"),
	  (try_end),
	  (eq, ":run", 1),
	  
	  (store_agent_hit_points, ":hp", ":victim_agent", 1),
	  (val_add, ":hp", 10), ### 10 Victim must have the negative of this hp or below after hit for the script to move on (never put this value below 0 since the agent has to be absolutley positvely dead)!
	  (ge, ":damage", ":hp"),
	  
	  
	  ### Compare the hit position to the agent's position
      (agent_get_position, pos4, ":victim_agent"),
      (get_distance_between_positions, ":distance", pos4, pos5), 
	  (agent_get_horse, ":is_mounted", ":victim_agent"),
	  (try_begin), ### If the agent is on horseback, these values are used (note that these values will not be exactly correct if the horse is very large or very small)
		(ge, ":is_mounted", 0), ### Will be -1 if no horse is to be found, so anything above means that the agent is mounted
		(assign, ":min_distance", 240), ### Minimum distance from the agent's horse's hooves from which the hit is valid (240 is an approximate value)
		(assign, ":max_distance", 260), ### Maximum distance from the agent's horse's hooves to which the hit is valid (260 is an approximate value)
	  (else_try),  ### If the agent is on foot, these values are used
	    (assign, ":min_distance", 160), ### Minimum distance from the agent's feet from which the hit is valid (160 = slightly below the neck)
	    (assign, ":max_distance", 176), ### Maximum distance from the agent's feet to which the hit is valid (176 = near the nose)
	  (try_end),
      (is_between, ":distance", ":min_distance", ":max_distance"), ### Check to see if the hit is within the allowed area
	  
	  
	  (assign, ":run", 0), ### Default variable value before damage test
	  (try_begin),
		  (store_div, ":chance", ":damage", "$decap_damage_divider"), ### Chance of decap is damage / 4 right now. Lower this value for higher chances of decapitation (or press M+Right Ctrl for debug more if you just want to test easy decaps in-game).
		  
		  #(assign, reg1, ":chance"), #Debug messages
		  #(display_message, "@Decap chance is: {reg1}"),
		  (store_random_in_range, ":diceroll", 0, "$decap_randomizer"), ### Randomizer, 0-100
		  
		  #(assign, reg1, ":diceroll"), #Debug messages
		  #(display_message, "@Diceroll: {reg1}"),
		  (le, ":diceroll", ":chance"), ### ":diceroll" must be less than or equal to ":chance", if it is, decapitation occurs!
		  
		  (assign, ":run", 1), ### SUCCESS!
		  
#     (else_try),  ### If debugging mode is on, bypass chance calculation
#		  (eq,"$g_decapitations_debugging", 1),
#		  (assign, ":run", 1),
#		  (display_message, "@Decap chance calc bypassed"),
	  (try_end),  
	  (eq, ":run", 1), ### Time for the fun stuff!

	  ### Gender test for spawning the right head type
	  (assign, ":head_type", "itm_cut_off_head_male"),
	  (agent_get_troop_id, ":victim_troop", ":victim_agent"),
	  (try_begin),
	    (ge, ":victim_troop", 0),
		(troop_get_type,":victim_gender",":victim_troop"),
		(eq, ":victim_gender", 1),
		(assign, ":head_type", "itm_cut_off_head_female"),
	  (try_end),
	  
	  ### Randomize the spawned head's and/or helmet's position and orientation
	  (store_random_in_range, ":z_rotation", 0, 360),
	  (store_random_in_range, ":y_rotation", -60, 60),
	  (store_random_in_range, ":x_pos", -90, 90),
	  (store_random_in_range, ":y_pos", -90, 90),
	  (position_rotate_z, pos4,":z_rotation"),
	  (position_rotate_y, pos4,":y_rotation"),
	  (position_move_x, pos4, ":x_pos"),
	  (position_move_y, pos4, ":y_pos"),
	  (position_set_z_to_ground_level, pos4),
	  (position_move_z, pos4, 5),
	  (set_spawn_position, pos4),
	  (assign, ":prunetime", 360), ### This is the time in seconds before the spawned head or helmet gets pruned (removed). Recommended to keep it above 0 to make sure it gets removed eventually or when the scene resets, to prevent performance issues.
	  
	  #(spawn_item, ":head_type", 0, ":prunetime"), ### This is the old way of spawning the head on the ground with the helmet, disabled because of the new dynamic heads. You can comment away (disable) the dynamic heads spawning further down and uncomment this line for a less performance-needing approach (with no physics involved).
	  
	  ### Does the agent have a helmet or hat equipped?
      (agent_get_item_slot, ":item", ":victim_agent", 4), #head slot
      (try_begin),
         (ge, ":item", 1), ### Does it?
         (agent_unequip_item, ":victim_agent", ":item"), ### Yes it does. Unequip it to allow replacement by the invisible helmet further down
		 (try_begin),
			 ### Don't spawn items with "itp_attatch_armature" flag: rigging causes floating bugs
			 ### This would be much better to do with an item flag check, but I haven't found any way to do that
			 #(neq, ":item", "itm_with_itp_attatch_armature"),
			 #(neg|is_between,":item","start_of_itm_range_with_itp_attatch_armature","end_of_itm_range_with_itp_attatch_armature"),
			#(set_spawn_position, pos4),
			(spawn_item, ":item", 0, ":prunetime"), ### Spawns the agent's currently equipped headgear on the dropped head's position
		 (try_end),
      (try_end),
	  
	  (agent_equip_item, ":victim_agent", "itm_invisible_head"), ### Put an invisible helmet on the agent's head to "remove" it
	  
	  
	  (agent_get_position, pos4, ":victim_agent"), ### Refreshes the agent's position
	  (position_move_z, pos4, ":min_distance"), ### Move to the where the neck used to be attached
	  
	  
	  ### Blood effects! The last variable is the strength. Lower or increase it for more/less blood (or tweak the particle effects themselves in "module_particle_systems.py").
      (particle_system_burst, "psys_blood_decapitation", pos4, 40), 
	  (particle_system_burst, "psys_game_blood", pos4, 10),
	  (particle_system_burst, "psys_game_blood_2", pos4, 10),
	  
	  (play_sound_at_position, "snd_decapitation_battle", pos4), ### Play some nasty sounds
	  
	  
	  ### Dynamic head spawning! See the bottom of "module_scene_props.py" for physics-related options and more.
	  (position_move_z, pos4, 20),
	  (set_spawn_position, pos4),
	  (assign, ":head_type", "spr_head_dynamic_male"),
	  (try_begin), ### Gender check (for determening the type of head)
		(eq, ":victim_gender", 1),
		(assign, ":head_type", "spr_head_dynamic_female"),
	  (try_end),
	  (spawn_scene_prop, ":head_type"),
	  
		#Addition check if we should allow the message to appears
			(eq, "$allow_decap_mess", 1), #Possible script error

	  ### This below is for the text that shows up when somebody is decapitated.
	  
	  ### Who decapitated who?
		(agent_get_troop_id, ":attacker_troop", ":attacker_agent"),
		(str_store_troop_name, s0, ":attacker_troop"),

		(agent_get_troop_id, ":victim_troop", ":victim_agent"),
		(str_store_troop_name, s1, ":victim_troop"),

	  
	  ### Colour check (friend or foe?)
	  (get_player_agent_no, ":my_agent"),
	  (agent_get_team, ":my_team", ":my_agent"),
	  (agent_get_team, ":victim_team", ":victim_agent"),
	  (try_begin), ### Display it!
		  (neq, ":my_team", ":victim_team"),
		  (display_message, "@>>> {s0} decapitated {s1}!", 0xFF33DD11), ## Green
	  (else_try),
		  (display_message, "@>>> {s0} decapitated {s1}!", 0xFFFF4422), ## Red
	  (try_end),
   (try_end), #-- Decapitations END --#
   
   ]),












			##################################################
##### troop_ratio_bar
##################################################
      (0, 0, ti_once, [
	  (eq, "$use_troopbars", 1),
	  ], [
	  (start_presentation, "prsnt_troop_ratio_bar"),
	  ]),
##################################################
##### troop_ratio_bar
##################################################
	
###Voice-over for Infantry, archers & Cavalry
		
		(0.0, 0.3, 0.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 29) #Everyone!
		],

		[
		(call_script, "script_identify_battle_voices_all")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 30) #Infantry
		],

		[
		(call_script, "script_identify_battle_voices_inf")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 31) #Archers
		],

		[
		(call_script, "script_identify_battle_voices_archers")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 32) #Cavalry
		],

		[
		(call_script, "script_identify_battle_voices_cav")
		]),
		###Voice-over for Infantry, archers & Cavalry	
		
		
		
					#####Engage SP Music Tracks FIELD BATTLES
	#####MUSICBOX
	(ti_before_mission_start, 0, ti_once, [ #680 #(ti_after_mission_start, 0, 680, [ #680
	(eq, "$additional_music", 1), #Obtained from Mod Options, affects mission templates, range: ALL SP Hostile music, co-op variant is additional_music_coop.
	],
		
  [
    #(play_track, "track_silence", 1), #Stop current module track
		   (music_set_situation, mtf_sit_fight), #Field
   #(music_set_situation, mtf_sit_siege), #Siege probably don't use
	(assign, "$music_timer", 0), #Patch
  #Randomize chance is 1 in a 5 (20%)
  
  #Field related extend to sieges
  (store_random_in_range, ":randomizer", 0, 2), #50% Chance of randomization
  (try_begin),
  (eq, ":randomizer", 0),
  (store_random_in_range, ":euro_randomizernext", 1, 12),
  (store_random_in_range, ":medi_randomizer", 1, 8),
  (store_random_in_range, ":arab_randomizer", 1, 9),
  (assign, "$track_count_field", ":euro_randomizernext"),
  (assign, "$track_count_field_medi", ":medi_randomizer"),
  (assign, "$track_count_field_arabs", ":arab_randomizer"),
  (try_end),
  #Field related extend to sieges
  ]),
	
	(0, 0, 3, [ #680 #(ti_after_mission_start, 0, 680, [ #680
	(eq, "$additional_music", 1), #Obtained from Mod Options, affects mission templates, range: ALL SP Hostile music, co-op variant is additional_music_coop.
	],
		
  [
		  #(display_message, "@Executing music code"),
		  (store_mission_timer_b, ":time_msec"),
		  #(assign, reg10, ":time_msec"),
          #(str_clear, s10),
          #(str_store_string, s10, "@Mission timer B for music: {reg10}"),
		  #(display_message, s10),
			#if next action time is lower than current time, play the sound
			(ge, ":time_msec", "$music_timer"),
			(reset_mission_timer_b), #Resetting mission timer, too.
			(assign, "$music_timer", 0),# Resetting value when track ends.
		
  #Euro only
     (try_begin),
      (ge, "$track_count_field", 11),
      (assign, "$track_count_field", 1),
    (else_try),
      (val_add, "$track_count_field", 1),
	  (ge, "$track_count_field", 11),
	  (assign, "$track_count_field", 1),
    (try_end),
  #Euro only
  
  #Mediterrain only
  
       (try_begin),
      (ge, "$track_count_field_medi", 8),
      (assign, "$track_count_field_medi", 1),
    (else_try),
      (val_add, "$track_count_field_medi", 1),
	  (ge, "$track_count_field_medi", 8),
	  (assign, "$track_count_field_medi", 1),
    (try_end),
  #Mediterrain only
  
  
  #Arabs only

       (try_begin),
      (ge, "$track_count_field_arabs", 8),
      (assign, "$track_count_field_arabs", 1),
    (else_try),
      (val_add, "$track_count_field_arabs", 1),
	  (ge, "$track_count_field_arabs", 8),
	  (assign, "$track_count_field_arabs", 1),
    (try_end),
	#Arabs only
  
  #Pause between music length in seconds
  #(val_add, "$music_timer", 2),# 5 seconds added
  #Pause between music length in seconds
  
	(party_get_current_terrain, ":current_terrain_main_party", "p_main_party"), #Co-Op variant of this trigger should use scenes in_between rather than terrain because player can't obtain terrain in co-op sessions.
	(try_begin),
	(this_or_next|eq, ":current_terrain_main_party", 1), #rt_mountain
	(this_or_next|eq, ":current_terrain_main_party", 2), #rt_steppe
	(eq, ":current_terrain_main_party", 10), #rt_steppe_forest
	#Begin mediterrain music 5 tracks total
	(try_begin),
	(eq, "$track_count_field_medi", 1), #
	(play_track, "track_medib1", 2),
	(val_add, "$music_timer", 206),# 1 second added
	(else_try),
	
	(eq, "$track_count_field_medi", 2), #
	(play_track, "track_medib3", 2),
	(val_add, "$music_timer", 209),#
	(else_try),
	
	(eq, "$track_count_field_medi", 3), #
	(play_track, "track_medib4", 2),
	(val_add, "$music_timer", 237),#
	(else_try),

	(eq, "$track_count_field_medi", 4), #
	(play_track, "track_medib5", 2),
	(val_add, "$music_timer", 229),#
	(else_try),
	(eq, "$track_count_field_medi", 5), #
	(play_track, "track_medib6", 2),
	(val_add, "$music_timer", 127),#
	(else_try),
	(eq, "$track_count_field_medi", 6), #
	(play_track, "track_medib7", 2),
	(val_add, "$music_timer", 161),#
	
	(else_try),
	(eq, "$track_count_field_medi", 7), #
	(play_track, "track_medib8", 2),
	(val_add, "$music_timer", 250),#
	(try_end),
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 3), #rt_plain
	(this_or_next|eq, ":current_terrain_main_party", 11), #rt_forest
	(eq, ":current_terrain_main_party", 9), #rt_mountain_forest
	#Begin Euro Music
	(try_begin),
	(eq, "$track_count_field", 1), #
	(play_track, "track_eurob1", 2),
	(val_add, "$music_timer", 319),#
	(else_try),
	(eq, "$track_count_field", 2), #
	(play_track, "track_eurob2", 2),
	(val_add, "$music_timer", 279),#
	(else_try),
	
	(eq, "$track_count_field", 3), #
	(play_track, "track_eurob3", 2),
	(val_add, "$music_timer", 248),#
	(else_try),
	
	(eq, "$track_count_field", 4), #
	(play_track, "track_eurob4", 2),
	(val_add, "$music_timer", 332),#
	(else_try),
	
	(eq, "$track_count_field", 5), #
	(play_track, "track_eurob5", 2),
	(val_add, "$music_timer", 93),#
		(else_try),
	
	(eq, "$track_count_field", 6), #
	(play_track, "track_eurob6", 2),
	(val_add, "$music_timer", 76),#
		(else_try),
	
	(eq, "$track_count_field", 7), #
	(play_track, "track_eurob7", 2),
	(val_add, "$music_timer", 80),#
		(else_try),
	
	(eq, "$track_count_field", 8), #
	(play_track, "track_eurob8", 2),
	(val_add, "$music_timer", 58),#
		(else_try),
	
	(eq, "$track_count_field", 9), #
	(play_track, "track_eurob9", 2),
	(val_add, "$music_timer", 58),#
		(else_try),
	
#	(eq, "$track_count_field", 10), #
#	(play_track, "track_eurob10"),
#	(val_add, "$music_timer", 123),#
#		(else_try),
	
	(eq, "$track_count_field", 10), #
	(play_track, "track_eurob11", 2),
	(val_add, "$music_timer", 335),#
	(try_end),
	
	
	
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 4), #rt_snow
	(this_or_next|eq, ":current_terrain_main_party", 12), #rt_snow_forest
	(eq, ":current_terrain_main_party", 7), #rt_bridge
	#Begin Euro Music
	(try_begin),
	(eq, "$track_count_field", 1), #
	(play_track, "track_eurob1", 2),
	(val_add, "$music_timer", 319),#
	(else_try),
	(eq, "$track_count_field", 2), #
	(play_track, "track_eurob2", 2),
	(val_add, "$music_timer", 279),#
	(else_try),
	
	(eq, "$track_count_field", 3), #
	(play_track, "track_eurob3", 2),
	(val_add, "$music_timer", 248),#
	(else_try),
	
	(eq, "$track_count_field", 4), #
	(play_track, "track_eurob4", 2),
	(val_add, "$music_timer", 332),#
	(else_try),
	
	(eq, "$track_count_field", 5), #
	(play_track, "track_eurob5", 2),
	(val_add, "$music_timer", 93),#
		(else_try),
	
	(eq, "$track_count_field", 6), #
	(play_track, "track_eurob6", 2),
	(val_add, "$music_timer", 76),#
		(else_try),
	
	(eq, "$track_count_field", 7), #
	(play_track, "track_eurob7", 2),
	(val_add, "$music_timer", 80),#
		(else_try),
	
	(eq, "$track_count_field", 8), #
	(play_track, "track_eurob8", 2),
	(val_add, "$music_timer", 58),#
		(else_try),
	
	(eq, "$track_count_field", 9), #
	(play_track, "track_eurob9", 2),
	(val_add, "$music_timer", 58),#
		(else_try),
	
#	(eq, "$track_count_field", 10), #
#	(play_track, "track_eurob10"),
#	(val_add, "$music_timer", 123),#
#		(else_try),
	
	(eq, "$track_count_field", 10), #
	(play_track, "track_eurob11", 2),
	(val_add, "$music_timer", 335),#
	(try_end),
	
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 5), #rt_desert
	(eq, ":current_terrain_main_party", 13), #rt_desert_forest
	#Begin arab music
	(try_begin),
	(eq, "$track_count_field_arabs", 1), #
	(play_track, "track_arabb1", 2),
	(val_add, "$music_timer", 262),#
	(else_try),
	(eq, "$track_count_field_arabs", 2), #
	(play_track, "track_arabb2", 2),
	(val_add, "$music_timer", 291),#
	#(else_try),
	#(eq, "$track_count_field_arabs", 3), #
	#(play_track, "track_arabb3"),
	(else_try),
	(eq, "$track_count_field_arabs", 3), #
	(play_track, "track_arabb4", 2),
	(val_add, "$music_timer", 104),#
	(else_try),
	
	(eq, "$track_count_field_arabs", 4), #
	(play_track, "track_arabb5", 2),
	(val_add, "$music_timer", 76),#
		(else_try),
	
	(eq, "$track_count_field_arabs", 5), #
	(play_track, "track_arabb6", 2),
	(val_add, "$music_timer", 218),#
	
			(else_try),
	(eq, "$track_count_field_arabs", 6), #
	(play_track, "track_arabb8", 2),
	(val_add, "$music_timer", 209),#
			(else_try),
	(eq, "$track_count_field_arabs", 7), #
	(play_track, "track_arabb9", 2),
	(val_add, "$music_timer", 103),#
	#	(else_try),
	#
	#(eq, "$track_count_field_arabs", 7), #
	#(play_track, "track_arabb7"),
	(try_end),
	(try_end),
	
  ]),
	
	#####MUSICBOX END
		
			#####Camera mode by Rubik None-Coop Version Begin
		(0, 0, 0, [(eq, "$extended_camera_mode", 1)],
  [
    (get_player_agent_no, ":player_agent"),
    (agent_get_look_position, pos1, ":player_agent"),
    (position_move_z, pos1, "$g_camera_z"),
    (position_move_y, pos1, "$g_camera_y"),
    (agent_get_horse, ":horse_agent", ":player_agent"),
    (try_begin),
      (ge, ":horse_agent", 0),
      (position_move_z, pos1, 80),
    (try_end),
    (mission_cam_set_position, pos1),
    (try_begin),
      (key_is_down, key_left_control),
      (assign, ":move_val", 50),
    (else_try),
      (assign, ":move_val", 10),
    (try_end),
    (try_begin),
      (key_clicked, key_up),
      (mission_cam_set_mode, 1),
      (val_add, "$g_camera_z", ":move_val"),
    (else_try),
      (key_clicked, key_down),
      (mission_cam_set_mode, 1),
      (val_sub, "$g_camera_z", ":move_val"),
    (else_try),
      (key_clicked, key_left),
      (mission_cam_set_mode, 1),
      (val_add, "$g_camera_y", ":move_val"),
    (else_try),
      (key_clicked, key_right),
      (mission_cam_set_mode, 1),
      (val_sub, "$g_camera_y", ":move_val"),
    (try_end),
    (try_begin),
      (this_or_next|game_key_clicked, gk_view_char),
      (this_or_next|game_key_clicked, gk_zoom),
      (game_key_clicked, gk_cam_toggle),
      (mission_cam_set_mode, 0),
    (try_end),
  ]),
  #####Camera mode by Rubik None-Coop Version End
		
		
###########Torch by troycall/Envious Arm begin

																	#(-25.0, 0.0, 0.0, #Enabling this forces random chance to be 100%
																	#(ti_on_agent_spawn, 0, 0, #Enabling this forces random chance to be 100%
																	(20, 0, ti_once, #Proper one, but reinforcements do not get assigned torches.
        [
          (mission_tpl_are_all_agents_spawned), #From VC Header_Operations to prevent weird behavior.
          (is_currently_night) #Check if currently night time
        ],
        [

		  ####DEFAULT
		   #(try_for_agents, ":agent"),
            #(agent_get_wielded_item, ":item", ":agent", 1),
            #(gt, ":item", -1),
            #(agent_unequip_item, ":agent", ":item"),
            #(agent_equip_item, ":agent", "itm_torch"),
            #(agent_set_wielded_item, ":agent", "itm_torch"),           
          #(try_end),
		  ####END DEFAULT
		  
		  (try_for_agents, ":agent"), #Try for agents...
		  #Extension
		  (agent_is_alive, ":agent"), #For performance reasons
		  #End
		  (agent_is_human, ":agent"), #Performance
          (agent_is_non_player, ":agent"), #Uncommenting this includes player on spawning with torch, may be necessary to uncomment at module_coop_mission_templates.
		  


		 ##########Default Order
		 #######		  (agent_is_human, ":agent"), #Performance
         #######(agent_is_non_player, ":agent"), #Uncommenting this includes player on spawning with torch, may be necessary to uncomment at module_coop_mission_templates.
		 #######
		 ########Extension
		 #######(agent_is_active, ":agent"), #For performance reasons
		 #######(agent_is_alive, ":agent"), #For performance reasons
		 ########End
		  ############
		  		  
				#  (try_begin),
				  
		#		          (agent_get_wielded_item, ":rhand", ":agent", 0),  #Right hand
		#  (assign, ":rhanditem", 0), # Preparing local variable.
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000000000100),
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000004000000),
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000008000000),
		#  (neg|item_has_capability, ":rhanditem", 0x0000000170000000),
		# 

		  #
		  
          #BEGIN DEBUG
          #(assign, reg10, ":agent"),
          #(str_clear, s10),
          #(str_store_string, s10, "@New agent: {reg10}"),
          #END DEBUG
		  #(agent_get_wielded_item, ":rhanditem", ":agent", 0),  #Obtain right hand item
         (agent_get_wielded_item, ":rhanditem", ":agent", 0),  #Obtain right hand item
          (agent_get_wielded_item, ":item", ":agent", 1), # Left hand: shield or -1
          #BEGIN DEBUG
          #(assign, reg10, ":item"),
          #(str_store_string, s10, "@{s10}. LH: {reg10}"),
		  #(display_message, "@Main block Phase A finalized"),
          #END DEBUG
		  #(item_get_type, ":type", ":rhanditem"), #If right hand item is polearm, stop reading rest of code.
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_club_with_spike_head", "itm_wooden_shield"),
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_light_lance", "itm_wooden_shield"),
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_light_lance", "itm_wooden_shield"),
          (try_begin),
		  (neg|is_between, ":rhanditem", "itm_club_with_spike_head", "itm_wooden_shield"),
		  (neg|is_between, ":rhanditem", "itm_lance_banner_jer", "itm_cross_end"), #Update item slots
		  #(neg|troop_has_item_equipped, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		  #(neq, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		  
		# (neg|eq, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		    (gt, ":item", -1), #Check if the agent wields any item in the left hand, this or next.
            #(neq, ":item", -1),# Check if the agent wields any item in the left hand
            (neq, ":item", "itm_torch"), #If agent is using torch, ignore him.
            #(display_message, "@PASSED neg tests"), #Debug message

			
            (store_random_in_range, ":chance", 1, 101), # Chance of item being assigned
            (try_begin),
			  (le, ":chance", "$torch_chance"), #25% = 25
				#lt           = neg | ge # less than		-- (lt,<value>,<value>),
				#neq          = neg | eq # not equal to		-- (neq,<value>,<value>),
				#le           = neg | gt # less or equal to	-- (le,<value>,<value>),
              (agent_unequip_item, ":agent", ":item"),
			  
              #BEGIN DEBUG
              #(str_store_item_name, s11, ":item"),
              #(str_store_string, s10, "@{s10}. Removed item: {s11}"),
			  #(display_message, "@(agent_unequip_item, :agent, :item PASSED."),
              #END DEBUG

               
                (agent_equip_item, ":agent", "itm_torch"), #Tell agent to equip the item
                 #(display_message, "@(agent_equip_item, :agent, :item PASSED."),
                  (agent_set_wielded_item, ":agent", "itm_torch"), #Required for infantry only, cavarly can work without it.
                  #(display_message, "@(agent_set_wielded_item, :agent, :item PASSED."),
                 
                 
                  #BEGIN DEBUG
                #(else_try),
                  #(str_store_string, s10, "@{s10}. Failed random chance."),
                (try_end),
               
              #(else_try),
                #(str_store_string, s10, "@{s10}. Invalid agent for torch"),
              (try_end),
             
              #(display_message, s10),
			  (try_end),
              #END DEBUG
			#  (try_end),
      ]),
	  
###########Torch by troycall/Envious Arm end


		(-28.0, 0.3, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(store_trigger_param_2, ":trigger_param_2"),
			(store_trigger_param_3, ":trigger_param_3"),
			(assign, ":var_4", reg0),
			(agent_is_human, ":trigger_param_1"),
			(agent_is_alive, ":trigger_param_1"), #this addition
			(agent_is_active, ":trigger_param_1"), #This addition, i disabled tihs whole mission template to fix the bug too.
			(get_player_agent_no, ":player_agent_no"),
			(try_begin),
				(eq, "$tom_weapon_break", 1),
				(eq, ":trigger_param_1", ":player_agent_no"),
				(store_random_in_range, ":random_in_range_0_1000", 0, 1000),
				(eq, ":random_in_range_0_1000", 1),
				(store_random_in_range, ":random_in_range_4_8", 4, 8),
				(troop_get_inventory_slot, ":inventory_slot_player_random_in_range_4_8", "trp_player", ":random_in_range_4_8"),
				(gt, ":inventory_slot_player_random_in_range_4_8", 0),
				(str_store_item_name, 20, ":inventory_slot_player_random_in_range_4_8"),
				(troop_get_inventory_slot_modifier, ":inventory_slot_modifier_player_random_in_range_4_8", "trp_player", ":random_in_range_4_8"),
				(try_begin),
					(eq, ":inventory_slot_modifier_player_random_in_range_4_8", 6),
					(display_message, "@Your {s20} is too crappy to fall apart!", 0x00ff0000),
				(else_try),
					(troop_add_item, "trp_broken_items", ":inventory_slot_player_random_in_range_4_8", ":inventory_slot_modifier_player_random_in_range_4_8"),
					(troop_set_inventory_slot_modifier, "trp_player", ":random_in_range_4_8", 6),
					(display_message, "@Your {s20} cracks!", 0x00ff0000),
				(try_end),
			(try_end),
			(try_begin),
				(eq, "$tom_weapon_break", 1),
				(eq, ":trigger_param_2", ":player_agent_no"),
				(is_between, ":var_4", 1, "itm_cross_end"), #Previously itm_items_end
				(neg|is_between, ":var_4", "itm_light_lance", "itm_wooden_shield"),
				(item_get_type, ":type_var_4", ":var_4"),
				(ge, ":trigger_param_3", 10),
				(neq, ":type_var_4", 10),
				(neq, ":type_var_4", 8),
				(neq, ":type_var_4", 9),
				(neq, ":type_var_4", 5),
				(neq, ":type_var_4", 6),
				(store_random_in_range, ":random_in_range_0_1000", 0, 600),
				(eq, ":random_in_range_0_1000", 1),
				(assign, ":value", -1),
				(try_for_range, ":random_in_range_4_8", 0, 4),
					(troop_get_inventory_slot, ":inventory_slot_player_random_in_range_4_8_2", "trp_player", ":random_in_range_4_8"),
					(eq, ":inventory_slot_player_random_in_range_4_8_2", ":var_4"),
					(assign, ":value", ":random_in_range_4_8"),
				(try_end),
				(gt, ":value", 0),
				(str_store_item_name, 20, ":var_4"),
				(troop_get_inventory_slot_modifier, ":inventory_slot_modifier_player_random_in_range_4_8", "trp_player", ":value"),
				(try_begin),
					(eq, ":inventory_slot_modifier_player_random_in_range_4_8", 6),
					(display_message, "@Your {s20} falls apart!", 0x00ff0000),
					(agent_unequip_item, ":player_agent_no", ":var_4"),
					(troop_remove_item, "trp_player", ":var_4"),
					(troop_remove_item, "trp_broken_items", ":var_4"),
				(else_try),
					(troop_add_item, "trp_broken_items", ":var_4", ":inventory_slot_modifier_player_random_in_range_4_8"),
					(troop_set_inventory_slot_modifier, "trp_player", ":value", 6),
					(display_message, "@Your {s20} cracks!", 0x00ff0000),
				(try_end),
			(try_end),
			(agent_get_horse, ":horse_trigger_param_2", ":trigger_param_2"),
			(try_begin),
				(eq, "$tom_lance_breaking", 1),
				(gt, ":horse_trigger_param_2", 0),
				(this_or_next|is_between, ":var_4", "itm_light_lance", "itm_spear_a"), #Updated item slots
				(is_between, ":var_4", "itm_lance_banner_jer", "itm_pike_banner_teu"), #Updated item slots
				(ge, ":trigger_param_3", 50),
				(store_random_in_range, ":random_in_range_0_100", 0, 100),
				(gt, ":random_in_range_0_100", 20),
				(try_begin),
					(eq, ":trigger_param_2", ":player_agent_no"),
					(display_message, "@You broke your lance!", 0x00ff0000),
				(try_end),
				########Add effects on weapon break *Lances*
        (agent_get_position, pos1, ":trigger_param_2"),
		(agent_play_sound, ":trigger_param_1", "snd_shield_broken"),
		(particle_system_burst, "psys_lanse", pos1, 10),
        (particle_system_burst, "psys_lanse_straw", pos1, 30),
                ####Extend to Lanse_Blood
		#(particle_system_burst, "psys_lanse_blood", pos1, 10),
        #(particle_system_burst, "psys_lanse_blood", pos1, 30),
		        ########End Effects
				(agent_unequip_item, ":trigger_param_2", ":var_4"),
			(else_try),
				(this_or_next|is_between, ":var_4", "itm_bamboo_spear", "itm_wooden_shield"), #Updated item slots
				(is_between, ":var_4", "itm_pike_banner_teu", "itm_items_end"), #Updated item slots
				(le, ":horse_trigger_param_2", 0),
				(ge, ":trigger_param_3", 8),
				(store_random_in_range, ":random_in_range_0_100", 0, 100),
				(ge, ":random_in_range_0_100", 90),
				(try_begin),
					(eq, ":trigger_param_2", ":player_agent_no"),
					(display_message, "@You broke your spear!", 0x00ff0000),
				(try_end),
				########Add effects on weapon break *Spears*
        (agent_get_position, pos1, ":trigger_param_2"),
		(agent_play_sound, ":trigger_param_1", "snd_shield_broken"),
		(store_random_in_range, ":psys_to_use", "psys_lanse", "psys_lanse_blood"),
		(particle_system_burst, ":psys_to_use", pos1, 7), #Default = 10 (Higher = Bigger Particles)
        (particle_system_burst, ":psys_to_use", pos1, 21), #Default = 30 (Higher = Bigger Particles)
                ####Extend to Lanse_Blood
		#(particle_system_burst, "psys_lanse_blood", pos1, 10),
        #(particle_system_burst, "psys_lanse_blood", pos1, 30),
		        ########End Effects
				(agent_unequip_item, ":trigger_param_2", ":var_4"),
			(try_end),
			###Envfix weapon breaking patch start here
		]),

		(-21.0, 0.0, 0.0,
		[],

		[
			(try_begin),
				(eq, "$g_battle_won", 1),
				(call_script, "script_count_mission_casualties_from_agents"),
				(finish_mission, 0),
			(else_try),
				(eq, "$pin_player_fallen", 1),
				(eq, "$g_battle_won", 0),
				(call_script, "script_simulate_retreat", 5, 20, 1),
				(str_store_string, 5, "str_retreat"),
				(call_script, "script_count_mission_casualties_from_agents"),
				(set_mission_result, -1),
				(finish_mission, 0),
			(else_try),
				(eq, "$pin_player_fallen", 1),
				(eq, "$g_battle_won", -1),
				(call_script, "script_count_mission_casualties_from_agents"),
				(finish_mission, 0),
			(else_try),
				(call_script, "script_cf_check_enemies_nearby"),
				(question_box, "str_do_you_want_to_retreat"),
			(else_try),
				(get_player_agent_no, ":player_agent_no"),
				(neg|agent_is_alive, ":player_agent_no"),
				(call_script, "script_cf_check_enemies_nearby"),
				(question_box, "str_do_you_want_to_retreat"),
			(else_try),
				(display_message, "str_can_not_retreat"),
			(try_end)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(call_script, "script_troop_agent_set_banner", "tableau_game_troop_label_banner", ":trigger_param_1", ":troop_id_trigger_param_1")
		]),

		(-8.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(eq, ":trigger_param_1", 0),
			(assign, "$pin_player_fallen", 0),
			(str_store_string, 5, "str_retreat"),
			(call_script, "script_simulate_retreat", 10, 20, 1),
			(call_script, "script_count_mission_casualties_from_agents"),
			(finish_mission, 0)
		]),

		(0.0, 0.0, ti_once,
		[],

		[
			(assign, "$g_battle_won", 0),
			(assign, "$defender_reinforcement_stage", 0),
			(assign, "$attacker_reinforcement_stage", 0),
						(try_begin),
			(eq, "$additional_music", 0),
			(call_script, "script_combat_music_set_situation_with_culture"),
			(try_end),
			(assign, "$dmod_current_agent", -1),
			(assign, "$dmod_move_camera", -1)
		]),

		(30.0, 0.0, 0.0,
		[],

		[]),

		(2.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_check_friendly_kills")
		]),

		(1.0, 0.0, 5.0,
		[
			(lt, "$defender_reinforcement_stage", "$g_reinforcement_waves"),
			(store_mission_timer_a, ":mission_timer_a"),
			(ge, ":mission_timer_a", 10),
			(store_normalized_team_count, ":normalized_team_count_0", 0),
			(lt, ":normalized_team_count_0", 6)
		],

		[
			(add_reinforcements_to_entry, 0, 6),
			(val_add, "$defender_reinforcement_stage", 1)
		]),

		(1.0, 0.0, 5.0,
		[
			(lt, "$attacker_reinforcement_stage", "$g_reinforcement_waves"),
			(store_mission_timer_a, ":mission_timer_a"),
			(ge, ":mission_timer_a", 10),
			(store_normalized_team_count, ":normalized_team_count_1", 1),
			(lt, ":normalized_team_count_1", 6)
		],

		[
			(add_reinforcements_to_entry, 3, 6),
			(val_add, "$attacker_reinforcement_stage", 1)
		]),

		(1.0, 60.0, ti_once,
		[
			(store_mission_timer_a, reg1),
			(ge, reg1, 10),
			(all_enemies_defeated, 5),
			(set_mission_result, 1),
			(display_message, "str_msg_battle_won"),
			#(play_sound, "snd_won_battle"), #Moved to victorious main menu
			(assign, "$g_battle_won", 1),
			(assign, "$g_battle_result", 1),
			(try_begin),
				(eq, "$g_village_raid_evil", 0),
				(call_script, "script_play_victorious_sound"),
			(else_try),
				(play_track, "track_victorious_evil", 1),
			(try_end)
		],

		[
			(call_script, "script_count_mission_casualties_from_agents"),
			(finish_mission, 1)
		]),

		(10.0, 0.0, 0.0, # Battle won/lost messages!
		[],

		[
			(eq, "$g_battle_won", 1),
			#(play_sound, "snd_won_battle"), #Moved to victorious main menu
			(display_message, "str_msg_battle_won")
		]),

		(1.0, 60.0, ti_once,
		[
			(store_mission_timer_a, reg1),
			(ge, reg1, 10),
			(main_hero_fallen),
			(assign, ":var_1", 0),
			(try_for_agents, ":var_2"),
				(agent_is_ally, ":var_2"),
				(agent_is_alive, ":var_2"),
				(val_add, ":var_1", 1),
			(try_end),
			(eq, ":var_1", 0),
			(set_mission_result, -1),
						(try_begin),
			(eq, "$colored_messages", 1),
			(display_message, "@Battle lost...", 0x00f78078),
			(else_try),
			(display_message, "@Battle lost..."),
			(try_end),
			(assign, "$g_battle_won", -1),
			(assign, "$g_battle_result", -1)
		],

		[
			(call_script, "script_count_mission_casualties_from_agents"),
			(finish_mission, 0)
		]),

		(10.0, 0.0, 0.0, # Battle won/lost messages!
		[],

		[
			(eq, "$g_battle_won", -1),
						(try_begin),
			(eq, "$colored_messages", 1),
			(display_message, "@Battle lost! Press tab key to leave...", 0x00f78078),
			(else_try),
			(display_message, "@Battle lost! Press tab key to leave..."),
			(try_end),
			#(play_sound, "snd_battle_sounds"), #Moved to your companions carry you away from the fighting menu
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(gt, "$dmod_current_agent", 0),
			(eq, "$setting_use_dmod", 1),
			(eq, "$dmod_move_camera", 1),
			(agent_get_position, 1, "$dmod_current_agent"),
			(position_move_z, 1, 300),
			(position_move_y, 1, -300),
			(agent_get_horse, ":horse_l_dmod_current_agent", "$dmod_current_agent"),
			(try_begin),
				(ge, ":horse_l_dmod_current_agent", 0),
			(try_end),
			(try_begin),
				(eq, "$pop_camera_on", 1),
				(assign, "$pop_camera_on", 0),
			(try_end),
			(mission_cam_set_position, 1),
			(mission_cam_set_mode, 1),
			(set_fixed_point_multiplier, 100)
		],

		[]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(eq, "$setting_use_dmod", 1),
			(key_clicked, 238),
			(main_hero_fallen),
			(call_script, "script_dmod_cycle_forwards")
		],

		[]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(eq, "$setting_use_dmod", 1),
			(key_clicked, 239),
			(main_hero_fallen),
			(call_script, "script_dmod_cycle_backwards")
		],

		[]),

		(0.0, 0.0, ti_once,
		[],

		[
			(assign, "$pop_camera_on", 0),
			(assign, "$pop_camera_mouse_center_x", 500),
			(assign, "$pop_camera_mouse_center_y", 375),
			(assign, "$pop_camera_mouse_x", "$pop_camera_mouse_center_x"),
			(assign, "$pop_camera_mouse_y", "$pop_camera_mouse_center_y"),
			(assign, "$pop_camera_mouse_counter", 0)
		]),

		(0.0, 4.0, ti_once,
		[
			(eq, "$enable_deahtcam", 1),
			(main_hero_fallen),
			(eq, "$pop_camera_on", 0),
			(assign, "$tom_sand_storm", 0)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_position, 1, ":player_agent_no"),
			(position_get_x, ":position_x_1", 1),
			(position_get_y, ":position_y_1", 1),
			(init_position, 47),
			(position_set_x, 47, ":position_x_1"),
			(position_set_y, 47, ":position_y_1"),
			(position_set_z_to_ground_level, 47),
			(position_move_z, 47, 250),
			(mission_cam_set_mode, 1, 0, 0),
			(mission_cam_set_position, 47),
			(assign, "$pop_camera_rotx", 0),
			(assign, "$pop_camera_on", 1)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(this_or_next|eq, "$dmod_move_camera", 1),
			(eq, "$pop_camera_on", 1),
			(this_or_next|game_key_clicked, 0),
			(this_or_next|game_key_is_down, 0),
			(this_or_next|game_key_clicked, 1),
			(this_or_next|game_key_is_down, 1),
			(this_or_next|game_key_clicked, 2),
			(this_or_next|game_key_is_down, 2),
			(this_or_next|game_key_clicked, 3),
			(game_key_is_down, 3)
		],

		[
			(try_begin),
				(eq, "$dmod_move_camera", 1),
				(mission_cam_set_mode, 1, 0, 0),
				(assign, "$pop_camera_rotx", 0),
				(assign, "$pop_camera_on", 1),
				(assign, "$dmod_move_camera", 0),
			(try_end),
			(mission_cam_get_position, 47),
			(assign, ":value", 0),
			(assign, ":value_2", 0),
			(try_begin),
				(this_or_next|game_key_clicked, 0),
				(game_key_is_down, 0),
				(assign, ":value_2", 10),
			(try_end),
			(try_begin),
				(this_or_next|game_key_clicked, 1),
				(game_key_is_down, 1),
				(assign, ":value_2", -10),
			(try_end),
			(try_begin),
				(this_or_next|game_key_clicked, 2),
				(game_key_is_down, 2),
				(assign, ":value", -10),
			(try_end),
			(try_begin),
				(this_or_next|game_key_clicked, 3),
				(game_key_is_down, 3),
				(assign, ":value", 10),
			(try_end),
			(position_move_x, 47, ":value"),
			(position_move_y, 47, ":value_2"),
			(mission_cam_set_position, 47)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(eq, "$pop_camera_on", 1),
			(neg|is_presentation_active, "prsnt_battle"),
			(mouse_get_position, 1),
			(set_fixed_point_multiplier, 1000),
			(position_get_x, reg1, 1),
			(position_get_y, reg2, 1),
			(set_fixed_point_multiplier, 100),
			(this_or_next|neq, reg1, "$pop_camera_mouse_center_x"),
			(neq, reg2, "$pop_camera_mouse_center_y")
		],

		[
			(assign, ":value", 1),
			(try_begin),
				(eq, reg1, "$pop_camera_mouse_x"),
				(eq, reg2, "$pop_camera_mouse_y"),
				(val_add, "$pop_camera_mouse_counter", 1),
				(try_begin),
					(gt, "$pop_camera_mouse_counter", 50),
					(assign, "$pop_camera_mouse_center_x", reg1),
					(assign, "$pop_camera_mouse_center_y", reg2),
					(assign, "$pop_camera_mouse_counter", 0),
				(try_end),
				(assign, ":value", 0),
			(try_end),
			(eq, ":value", 1),
			(assign, "$pop_camera_mouse_counter", 0),
			(assign, "$pop_camera_mouse_x", reg1),
			(assign, "$pop_camera_mouse_y", reg2),
			(mission_cam_get_position, 47),
			(store_sub, ":value_2", "$pop_camera_mouse_center_x", reg1),
			(store_sub, ":value_3", reg2, "$pop_camera_mouse_center_y"),
			(try_for_range, ":number", 0, 2),
				(try_begin),
					(eq, ":number", 1),
					(assign, ":value_2", ":value_3"),
				(try_end),
				(this_or_next|lt, ":value_2", -2),
				(gt, ":value_2", 2),
				(assign, ":value_4", 1),
				(try_begin),
					(lt, ":value_2", 0),
					(assign, ":value_4", -1),
				(try_end),
				(val_abs, ":value_2"),
				(val_sub, ":value_2", 2),
				(convert_to_fixed_point, ":value_2"),
				(store_sqrt, ":value_2", ":value_2"),
				(convert_from_fixed_point, ":value_2"),
				(val_clamp, ":value_2", 1, 64),
				(val_mul, ":value_2", ":value_4"),
				(try_begin),
					(eq, ":number", 0),
					(store_mul, ":value_5", "$pop_camera_rotx", -1),
					(position_rotate_x, 47, ":value_5"),
					(position_rotate_z, 47, ":value_2"),
					(position_rotate_x, 47, "$pop_camera_rotx"),
				(try_end),
				(try_begin),
					(eq, ":number", 1),
					(position_rotate_x, 47, ":value_2"),
					(val_add, "$pop_camera_rotx", ":value_2"),
				(try_end),
			(try_end),
			(mission_cam_set_position, 47)
		]),

		(1.0, 4.0, ti_once,
		[
			(main_hero_fallen)
		],

		[
			(assign, "$pin_player_fallen", 1),
			(neq, "$use_player_auxiliary", 1),
			(display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
			(display_message, "@If you choose to watch the fight you can use the mouse scroll up and down to switch between troop view or AWDS keys for free camera view.")
		]),

		(-22.0, 0.0, 0.0,
		[],

		[
			(display_message, "str_use_baggage_for_inventory")
		]),

		(0.0, 0.0, 0.0,
		[],

		[
			(game_key_clicked, 22),
			(neg|is_presentation_active, "prsnt_battle"),
			(start_presentation, "prsnt_battle")
		]),

		(0.1, 0.0, 0.0,
		[],

		[
			(is_presentation_active, "prsnt_battle"),
			(call_script, "script_update_order_panel_statistics_and_map")
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_set_matching_sexy_boots", ":trigger_param_1")
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$sp_shield_bash", 1),
			(game_key_is_down, 7),
			(game_key_clicked, 6),
			(neg|main_hero_fallen),
		],

		[
		(call_script, "script_shield_bash"),
		]),

			##AI kicking begin
		   (2, 0, 3, #AI kicking
       [], [
	(get_player_agent_no,":player"),
	(try_for_agents, ":agent"),
		(neq, ":agent", ":player"),
		(agent_is_alive, ":agent"),
		(neq, ":agent", -1),
		(agent_is_human, ":agent"),#Only humans can kick....FOR NOW
		(agent_is_active, ":agent"),
		(agent_slot_eq, ":agent", slot_agent_is_running_away, 0),#Isn't fleeing the battle.
		##He's an eligible human.  Now see if he's in a position to kick.
		(agent_get_attack_action, ":attack_action", ":agent"), #returned values: free = 0, readying_attack = 1, releasing_attack = 2, completing_attack_after_hit = 3, attack_parried = 4, reloading = 5, after_release = 6, cancelling_attack = 7
		(agent_get_defend_action, ":defend_action", ":agent"),#
		(this_or_next|eq,":attack_action",4),#Just got parried
		(this_or_next|eq,":defend_action",1),#Parrying an enemy
		##So he'll only try to kick if he just parried an enemy attack, or his own attack just got parried.
		(agent_get_team, ":team", ":agent"),
		(assign, ":maximum_distance", 100),
		#Target Acquisition
		(agent_ai_get_look_target,":suspect",":agent"),
		(gt,":suspect",0),#Make sure there is someone.
		(agent_is_alive, ":suspect"),
		(agent_is_human, ":suspect"),#Only kick humans
		(agent_is_active, ":suspect"),
		(agent_get_team, ":suspect_team", ":suspect"),
		(neq, ":suspect_team", ":team"),#Friends don't let friends kick friends.
		(agent_get_position, pos1, ":agent"),#Distance check
		(agent_get_position, pos2, ":suspect"),
		(neg|position_is_behind_position, pos2, pos1), #Suspect can't be behind kicker.
		(get_distance_between_positions, ":distance", pos1, pos2),
		(le, ":distance", ":maximum_distance"),
		#Check chance
		(store_random_in_range,":kickchance", 1, 10),
		(try_begin),
			(eq,":kickchance",1), #10% chance per check
				#(display_message, "@Agent kicks."),
				(agent_set_animation, ":agent", "anim_prepare_kick_0"),
				(agent_deliver_damage_to_agent, ":agent", ":suspect", 3),
				(agent_set_animation, ":suspect", "anim_strike3_abdomen_front"),#Get Kicked
			(try_end),
	   (try_end),]),
	   
	   ##AI Kicking end
		
		
		(0.25, 0.0, 4.0,
		[
			(eq, "$sp_shield_bash_ai", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(neq, ":var_2", ":player_agent_no"),
				(agent_is_alive, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_active, ":var_2"), #Test to see if it stops AI from shield bashing (new addition v3)
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(store_skill_level, ":skill_level_shield_troop_id_var_2", "skl_shield", ":troop_id_var_2"),
				(store_proficiency_level, ":proficiency_level_troop_id_var_2_0", ":troop_id_var_2", 0),
				(ge, ":skill_level_shield_troop_id_var_2", 4),
				(ge, ":proficiency_level_troop_id_var_2_0", 200),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(le, ":horse_var_2", 0),
				(try_begin),
					(neg|agent_slot_ge, ":var_2", 50, 1),
					(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
					(agent_get_wielded_item, ":wielded_item_var_2_1", ":var_2", 1),
					(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
					(eq, ":type_wielded_item_var_2_1", 7),
					(agent_get_attack_action, ":attack_action_var_2", ":var_2"),
					(eq, ":attack_action_var_2", 0),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_position, 1, ":var_2"),
					(assign, ":value", -1),
					(assign, ":value_2", 125),
					(try_for_agents, ":var_13"),
						(agent_is_alive, ":var_13"),
						(agent_is_human, ":var_13"),
						(agent_get_position, 2, ":var_13"),
						(neg|position_is_behind_position, 2, 1),
						(agent_get_team, ":team_var_13", ":var_13"),
						(neq, ":team_var_13", ":team_var_2"),
						(try_begin),
							(eq, ":team_var_2", 0),
							(assign, ":value_3", 2),
						(else_try),
							(eq, ":team_var_2", 2),
							(assign, ":value_3", 0),
						(else_try),
							(eq, ":team_var_2", 1),
							(assign, ":value_3", 3),
						(else_try),
							(eq, ":team_var_2", 3),
							(assign, ":value_3", 1),
						(try_end),
						(neq, ":team_var_13", ":value_3"),
						(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
						(le, ":distance_between_positions_1_2", ":value_2"),
						(assign, ":value_2", ":distance_between_positions_1_2"),
						(assign, ":value", ":var_13"),
					(try_end),
					(ge, ":value", 0),
					(agent_get_horse, ":horse_var_2", ":value"),
					(eq, ":horse_var_2", -1),
					(store_random_in_range, ":random_in_range_15_26", 15, 26),
					(agent_set_slot, ":var_2", 50, ":random_in_range_15_26"),
					(agent_set_animation, ":var_2", "anim_shield_bash"),
					(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
					(troop_get_type, ":type_wielded_item_var_2_1", ":troop_id_var_2"),
					(try_begin),
						(eq, ":type_wielded_item_var_2_1", 0),
						(agent_play_sound, ":var_2", "snd_man_yell"),
					(else_try),
						(eq, ":type_wielded_item_var_2_1", 1),
						(agent_play_sound, ":var_2", "snd_woman_yell"),
					(try_end),
					(agent_play_sound, ":value", "snd_wooden_hit_low_armor_high_damage"),
					(agent_get_defend_action, ":attack_action_var_2", ":value"),
					(try_begin),
						(eq, ":attack_action_var_2", 2),
						(neg|position_is_behind_position, 1, 2),
						(agent_get_wielded_item, ":wielded_item_var_2_1", ":value", 1),
						(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
						(eq, ":type_wielded_item_var_2_1", 7),
						(agent_set_animation, ":value", "anim_shield_bash"),
					(else_try),
						(agent_set_animation, ":value", "anim_shield_strike"),
					(try_end),
				(try_end),
				(agent_get_slot, ":var_2_50", ":var_2", 50),
				(val_sub, ":var_2_50", 1),
				(val_max, ":var_2_50", 0),
				(agent_set_slot, ":var_2", 50, ":var_2_50"),
			(try_end)
		]),

		(0.0, 0.0, ti_once,
		[],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_team, ":team_player_agent_no", ":player_agent_no"),
			(set_show_messages, 0),
			(team_give_order, ":team_player_agent_no", 9, 0),
			(set_show_messages, 1)
		]),

		(0.0, 0.0, ti_once,
		[
			(eq, 0, 1),
			(eq, "$enable_deahtcam", 1),
			(main_hero_fallen)
		],

		[
			(assign, "$fclock", 1),
			(call_script, "script_player_order_formations", 2),
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_team, ":team_player_agent_no", ":player_agent_no"),
			(team_give_order, ":team_player_agent_no", 9, 2)
		]),

		(0.0, 0.0, 5.0,
		[],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_non_player, ":var_2"), #Agent must not be a player V1.0998D2
				(neq, ":player_agent_no", ":var_2"),
				(agent_slot_eq, ":var_2", 100, 0),
				(agent_is_alive, ":var_2"),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(agent_get_ammo, ":ammo_var_2", ":var_2"),
				(le, ":ammo_var_2", 0),
				(try_begin),
					(gt, ":horse_var_2", 0),
					(neg|troop_is_guarantee_ranged, ":troop_id_var_2"),
					(agent_get_wielded_item, ":wielded_item_var_2_0", ":var_2", 0),
					(neg|is_between, ":wielded_item_var_2_0", "itm_light_lance", "itm_spear_a"),
					(try_for_range, ":item", "itm_light_lance", "itm_spear_a"),
						(agent_set_wielded_item, ":var_2", ":item"),
					(try_end),
				(else_try),
					(eq, "$tom_use_banners", 1),
					(try_for_range, ":item", 1198, 1202),
						(agent_set_wielded_item, ":var_2", ":item"),
					(try_end),
					(agent_get_wielded_item, ":item", ":var_2", 0),
					(is_between, ":item", 1198, 1202),
				(else_try),
					(neg|troop_is_guarantee_ranged, ":troop_id_var_2"),
					(le, ":horse_var_2", 0),
					(agent_get_wielded_item, ":wielded_item_var_2_0", ":var_2", 0),
					(is_between, ":wielded_item_var_2_0", "itm_light_lance", "itm_spear_a"),
					(try_for_range, reg0, 0, 4),
						(agent_get_item_slot, ":item", ":var_2", reg0),
						(is_between, ":item", 1, "itm_cross_end"), #Previously itm_items_end
						(neg|is_between, ":item", "itm_light_lance", "itm_bamboo_spear"),
						(item_get_type, ":type_item", ":item"),
						(this_or_next|eq, ":type_item", 3),
						(this_or_next|eq, ":type_item", 4),
						(eq, ":type_item", 2),
						(agent_set_wielded_item, ":var_2", ":item"),
					(try_end),
				(else_try),
					(neg|troop_is_guarantee_ranged, ":troop_id_var_2"),
					(le, ":horse_var_2", 0),
					(agent_get_wielded_item, ":wielded_item_var_2_0", ":var_2", 0),
					(neg|is_between, ":wielded_item_var_2_0", "itm_bamboo_spear", "itm_wooden_shield"),
					(try_for_range, ":item", "itm_bamboo_spear", "itm_wooden_shield"),
						(agent_set_wielded_item, ":var_2", ":item"),
					(try_end),
				(else_try),
					(troop_is_guarantee_ranged, ":troop_id_var_2"),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_division, ":division_var_2", ":var_2"),
					(team_get_hold_fire_order, ":hold_fire_order_team_var_2_division_var_2", ":team_var_2", ":division_var_2"),
					(neq, ":hold_fire_order_team_var_2_division_var_2", 1),
					(is_between, ":wielded_item_var_2_0", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_0", ":wielded_item_var_2_0"),
					(this_or_next|le, ":wielded_item_var_2_0", -1),
					(this_or_next|neq, ":type_wielded_item_var_2_0", 10),
					(this_or_next|neq, ":type_wielded_item_var_2_0", 9),
					(neq, ":type_wielded_item_var_2_0", 8),
					(call_script, "script_get_closest_enemy_distance_new", ":var_2", ":team_var_2", 300),
					(assign, ":var_13", reg1),
					(gt, ":var_13", 300),
					(assign, ":value", 4),
					(try_for_range, reg0, 0, ":value"),
						(agent_get_item_slot, ":item_slot_var_2_reg0", ":var_2", reg0),
						(is_between, ":item_slot_var_2_reg0", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_0", ":item_slot_var_2_reg0"),
						(this_or_next|eq, ":type_wielded_item_var_2_0", 10),
						(this_or_next|eq, ":type_wielded_item_var_2_0", 8),
						(eq, ":type_wielded_item_var_2_0", 9),
						(agent_set_wielded_item, ":var_2", ":item_slot_var_2_reg0"),
						(assign, ":value", -1),
					(try_end),
				(try_end),
			(try_end)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_is_human, ":trigger_param_1"),
			(agent_is_non_player, ":trigger_param_1"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(lt, ":troop_id_trigger_param_1", "trp_kidnapped_girl"),
			(try_for_range, reg0, 0, 4),
				(agent_get_item_slot, ":item_slot_trigger_param_1_reg0", ":trigger_param_1", reg0),
				(is_between, ":item_slot_trigger_param_1_reg0", 1, "itm_cross_end"), #Previously itm_items_end
				(agent_unequip_item, ":trigger_param_1", ":item_slot_trigger_param_1_reg0"),
			(try_end),
			(try_for_range, reg0, 0, 2),
				(agent_get_wielded_item, ":item_slot_trigger_param_1_reg0", ":trigger_param_1", reg0),
				(is_between, ":item_slot_trigger_param_1_reg0", 1, "itm_cross_end"), #Previously itm_items_end
				(agent_unequip_item, ":trigger_param_1", ":item_slot_trigger_param_1_reg0"),
			(try_end),
			(assign, ":var_4", 0),
			(assign, ":var_5", 25),
			(assign, ":var_6", 50),
			(assign, ":var_7", 75),
			(assign, ":var_8", 100),
			(assign, ":var_18", 125),
			(assign, ":var_10", 150),
			(assign, ":var_11", 175),
			(assign, ":var_12", 200),
			(assign, ":value", 0),
			(assign, ":value_2", 0),
			(assign, ":value_3", 0),
			(assign, ":value_4", 0),
			(assign, ":value_5", 0),
			(assign, ":value_6", 0),
			(assign, ":value_7", 0),
			(assign, ":value_8", 0),
			(assign, ":value_9", 0),
			(troop_get_inventory_capacity, ":inventory_capacity_troop_id_trigger_param_1", ":troop_id_trigger_param_1"),
			(try_for_range, ":localvariable", 0, ":inventory_capacity_troop_id_trigger_param_1"),
				(troop_get_inventory_slot, ":inventory_slot_troop_id_trigger_param_1_localvariable", ":troop_id_trigger_param_1", ":localvariable"),
				(is_between, ":inventory_slot_troop_id_trigger_param_1_localvariable", 1, "itm_cross_end"), #Previously itm_items_end
				(item_get_type, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
				(try_begin),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 4),
					(val_add, ":var_4", 1),
					(troop_set_slot, "trp_items_array", slot_troop_relations_begin, ":var_4"),
					(troop_set_slot, "trp_items_array", ":var_4", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 2),
					(val_add, ":var_5", 1),
					(troop_set_slot, "trp_items_array", slot_troop_last_quest_betrayed, ":var_5"),
					(troop_set_slot, "trp_items_array", ":var_5", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_2", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 7),
					(val_add, ":var_6", 1),
					(troop_set_slot, "trp_items_array", slot_troop_recruitment_random, ":var_6"),
					(troop_set_slot, "trp_items_array", ":var_6", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_3", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 3),
					(val_add, ":var_7", 1),
					(troop_set_slot, "trp_items_array", slot_troop_personalitymatch_object, ":var_7"),
					(troop_set_slot, "trp_items_array", ":var_7", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_4", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 10),
					(val_add, ":var_8", 1),
					(troop_set_slot, "trp_items_array", 100, ":var_8"),
					(troop_set_slot, "trp_items_array", ":var_8", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_5", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 6),
					(val_add, ":var_18", 1),
					(troop_set_slot, "trp_items_array", slot_troop_rehire_speech, ":var_18"),
					(troop_set_slot, "trp_items_array", ":var_18", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_6", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 5),
					(val_add, ":var_10", 1),
					(troop_set_slot, "trp_items_array", slot_troop_days_on_mission, ":var_10"),
					(troop_set_slot, "trp_items_array", ":var_10", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_7", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 8),
					(val_add, ":var_11", 1),
					(troop_set_slot, "trp_items_array", 175, ":var_11"),
					(troop_set_slot, "trp_items_array", ":var_11", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_8", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 9),
					(val_add, ":var_12", 1),
					(troop_set_slot, "trp_items_array", 200, ":var_12"),
					(troop_set_slot, "trp_items_array", ":var_12", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_9", 1),
				(try_end),
			(try_end),
			(try_begin),
				(eq, ":value", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_relations_begin),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 1, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_2", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_last_quest_betrayed),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 26, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_3", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_recruitment_random),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 51, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_4", 1),
				(try_begin),
					(eq, ":value_2", 1),
					(store_random_in_range, ":random_in_range_0_100", 0, 100),
					(lt, ":random_in_range_0_100", 65),
				(else_try),
					(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_personalitymatch_object),
					(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 76, ":items_array_relations_begin"),
					(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
					(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
				(try_end),
			(try_end),
			(try_begin),
				(eq, ":value_5", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", 100),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 101, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_6", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_rehire_speech),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 126, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_7", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_days_on_mission),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 151, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_8", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", 175),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 176, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_9", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", 200),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 201, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end)
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(assign, "$tom_sand_storm", 0),
			(call_script, "script_change_rain_or_snow"),
			(set_fixed_point_multiplier, 100),
			(try_begin),
				(is_currently_night),
				#(set_shader_param_float, "@vFresnelMultiplier", 15),
			(else_try),
				#(set_shader_param_float, "@vFresnelMultiplier", 50),
			(try_end)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$tom_sand_storm", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_position, 0, ":player_agent_no"),
			(position_set_z_to_ground_level, 0),
			(position_get_z, ":position_z_0", 0),
			(val_add, ":position_z_0", 400),
			(position_set_z, 0, ":position_z_0"),
			(particle_system_burst, "psys_desert_storm", 0, 2),
			(set_fixed_point_multiplier, 100)
		]),

#		(0.0, 2.0, ti_once,
#		[
#			(eq, "$tom_use_banners", 1)
#		],
#
#		[
#			(call_script, "script_set_flag_carriers")
#		]),

		(10.0, 0.0, 0.0,
		[
			(eq, "$tom_use_banners", 1),
			(eq, "$tom_bonus_banners", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_range, ":value"),
				(agent_slot_eq, ":value", 107, 1),
				(agent_is_alive, ":value"),
				(agent_is_active, ":value"),
				(agent_get_team, ":team_value", ":value"),
				(agent_get_position, 1, ":value"),
				(try_for_range, ":value_2"),
					(neq, ":value_2", ":value"),
					(agent_get_team, ":team_value_2", ":value_2"),
					(eq, ":team_value", ":team_value_2"),
					(agent_is_alive, ":value_2"),
					(agent_is_active, ":value_2"),
					(agent_is_human, ":value_2"),
					(agent_get_position, 2, ":value_2"),
					(get_distance_between_positions_in_meters, ":distance_between_positions_in_meters_1_2", 1, 2),
					(le, ":distance_between_positions_in_meters_1_2", 10),
					(store_agent_hit_points, ":agent_hit_points_value_2", ":value_2"),
					(val_add, ":agent_hit_points_value_2", 2),
					(val_min, ":agent_hit_points_value_2", 101),
					(agent_set_hit_points, ":value_2", ":agent_hit_points_value_2"),
					(try_begin),
						(eq, ":value_2", ":player_agent_no"),
						(display_message, "@You feel secured standing near the banner, healing some of your HP.", 0x006495ed),
					(try_end),
				(try_end),
			(try_end),
			(assign, ":value", ":player_agent_no"),
			(agent_is_alive, ":value"),
			(agent_get_wielded_item, ":wielded_item_value_0", ":value", 0),
			(is_between, ":wielded_item_value_0", 1198, 1202),
			(agent_get_team, ":team_value", ":value"),
			(agent_get_position, 1, ":value"),
			(try_for_range, ":value_2"),
				(neq, ":value_2", ":value"),
				(agent_get_team, ":team_value_2", ":value_2"),
				(eq, ":team_value", ":team_value_2"),
				(agent_is_alive, ":value_2"),
				(agent_is_active, ":value_2"),
				(agent_is_human, ":value_2"),
				(agent_get_position, 2, ":value_2"),
				(get_distance_between_positions_in_meters, ":distance_between_positions_in_meters_1_2", 1, 2),
				(le, ":distance_between_positions_in_meters_1_2", 10),
				(store_agent_hit_points, ":agent_hit_points_value_2", ":value_2"),
				(try_begin),
					(eq, ":wielded_item_value_0", 1201),
					(val_add, ":agent_hit_points_value_2", 1),
				(try_end),
				(val_add, ":agent_hit_points_value_2", 5),
				(val_max, ":agent_hit_points_value_2", 101),
				(agent_set_hit_points, ":value_2", ":agent_hit_points_value_2"),
			(try_end)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$tom_sand_storm", 3)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_position, 0, ":player_agent_no"),
			(position_set_z_to_ground_level, 0),
			(position_get_z, ":position_z_0", 0),
			(val_add, ":position_z_0", 2100),
			(position_set_z, 0, ":position_z_0"),
			(particle_system_burst, "psys_rain", 0, 1),
			(set_fixed_point_multiplier, 100)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$tom_sand_storm", 2)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_position, 0, ":player_agent_no"),
			(position_set_z_to_ground_level, 0),
			(position_get_z, ":position_z_0", 0),
			(val_add, ":position_z_0", 2000),
			(position_set_z, 0, ":position_z_0"),
			(particle_system_burst, "psys_blizzard", 0, 1),
			(set_fixed_point_multiplier, 100)
		]),

		(8.0, 0.0, 0.0,
		[
			(eq, "$tom_sand_storm", 3)
		],

		[
			(store_random_in_range, ":random_in_range_0_100", 0, 100),
			(try_begin),
				(ge, ":random_in_range_0_100", 90),
				(play_sound, "snd_thunder"),
			(try_end)
		]),

		(0.0, 0.0, ti_once,
		[
			(eq, "$tom_sand_storm", 2)
		],

		[
			(play_sound, "snd_wind")
		]),

		(0.0, 0.0, ti_once,
		[
			(eq, "$tom_sand_storm", 1)
		],

		[
			(play_sound, "snd_wind")
		]),

		(1.0, 0.0, ti_once,
		[
			(neq, "$g_battle_result", 0),
			(get_player_agent_no, ":player_agent_no"),
			(agent_is_alive, ":player_agent_no"),
			(agent_get_troop_id, ":troop_id_player_agent_no", ":player_agent_no"),
			(eq, ":troop_id_player_agent_no", "trp_player")
		],

		[
			(call_script, "script_freelancer_keep_field_loot")
		]),

		(0.0, 1.5, 0.0,
		[
			(key_clicked, 20),
			(get_player_agent_no, ":player_agent_no"),
			(agent_is_alive, ":player_agent_no"),
			(agent_set_animation, ":player_agent_no", "anim_cheer", 1),
			(agent_play_sound, ":player_agent_no", "snd_man_victory")
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_team, ":team_player_agent_no", ":player_agent_no"),
			(agent_get_position, 1, ":player_agent_no"),
			(try_for_agents, ":var_3"),
				(agent_is_alive, ":var_3"),
				(agent_is_human, ":var_3"),
				(agent_get_team, ":team_var_3", ":var_3"),
				(eq, ":team_var_3", ":team_player_agent_no"),
				(agent_get_position, 0, ":var_3"),
				(get_distance_between_positions_in_meters, ":distance_between_positions_in_meters_0_1", 0, 1),
				(lt, ":distance_between_positions_in_meters_0_1", 20),
				(agent_set_animation, ":var_3", "anim_cheer", 1),
				(agent_play_sound, ":var_3", "snd_man_victory"),
				(agent_get_slot, ":var_3_courage_score", ":var_3", slot_agent_courage_score),
				(val_add, ":var_3_courage_score", 5),
				(val_min, ":var_3_courage_score", 9600),
				(agent_set_slot, ":var_3", slot_agent_courage_score, ":var_3_courage_score"),
			(try_end),
			(display_message, "@Huzzah! You encourage your nearby troops.")
		]),

		(0.0, 1.7, 0.0,
		[
			(eq, "$tom_yell_smelly_peasents", 1)
		],

		[
			(call_script, "script_tom_command_cheer"),
			(assign, "$tom_yell_smelly_peasents", 0)
		]),

		(-26.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(store_trigger_param_2, ":trigger_param_2"),
			(neg|agent_is_ally, ":trigger_param_1"),
			(agent_is_human, ":trigger_param_1"),
			(eq, ":trigger_param_2", "$fplayer_agent_no"),
			(val_add, "$killcount", 1)
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_clear_troop_array", "trp_lances_troop_in_combat", 0, "$lance_troop_serving")
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_is_human, ":trigger_param_1"),
			(get_player_agent_no, ":player_agent_no"),
			(neq, ":trigger_param_1", ":player_agent_no"),
			(agent_get_party_id, ":party_id_trigger_param_1", ":trigger_param_1"),
			(eq, ":party_id_trigger_param_1", "p_main_party"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(call_script, "script_search_for_troop", ":troop_id_trigger_param_1"),
			(agent_set_slot, ":trigger_param_1", 102, reg0)
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(assign, "$enable_deahtcam", 1),
			(assign, "$auxilary_player_active", 0),
			(eq, "$use_player_auxiliary", 1),
			(assign, "$g_move_heroes", 1),
			(party_clear, "p_temp_casualties_3"),
			(call_script, "script_party_add_party", "p_temp_casualties_3", "p_main_party"),
			(set_player_troop, "trp_player"),
			(assign, "$enable_deahtcam", 0)
		]),

		(5.0, 0.0, 0.0,
		[
			(eq, "$use_player_auxiliary", 1),
			(eq, "$enable_deahtcam", 0),
			(get_player_agent_no, ":player_agent_no"),
			(neg|agent_is_alive, ":player_agent_no")
		],

		[
			(set_fixed_point_multiplier, 100),
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_team, ":team_player_agent_no", ":player_agent_no"),
			(agent_get_division, ":division_player_agent_no", ":player_agent_no"),
			(assign, ":value", 0),
			(try_for_agents, ":var_5"),
				(eq, ":value", 0),
				(agent_is_human, ":var_5"),
				(agent_is_alive, ":var_5"),
				(agent_get_team, ":team_var_5", ":var_5"),
				(agent_get_party_id, ":party_id_var_5", ":var_5"),
				(eq, ":party_id_var_5", "p_main_party"),
				(agent_get_division, ":division_player_agent_no_2", ":player_agent_no"),
				(agent_get_group, ":group_player_agent_no", ":player_agent_no"),
				(eq, ":team_player_agent_no", ":team_var_5"),
				(eq, ":division_player_agent_no", ":division_player_agent_no_2"),
				(agent_get_troop_id, ":troop_id_var_5", ":var_5"),
				(neg|is_between, ":troop_id_var_5", "trp_npc1", "trp_knight_1_1_wife"),
				(set_player_troop, ":troop_id_var_5"),
				(store_agent_hit_points, ":agent_hit_points_var_5_1", ":var_5", 1),
				(agent_get_position, 1, ":var_5"),
				(position_set_z, 1, -2000),
				(position_set_x, 1, 0),
				(position_set_y, 1, 0),
				(agent_get_position, 0, ":var_5"),
				(set_spawn_position, 0),
				(agent_get_horse, ":horse_var_5", ":var_5"),
				(try_begin),
					(gt, ":horse_var_5", 0),
					(agent_set_position, ":horse_var_5", 1),
					(remove_agent, ":horse_var_5"),
				(try_end),
				(agent_set_position, ":var_5", 1),
				(agent_set_slot, ":var_5", 100, 1),
				(agent_get_slot, ":var_5_102", ":var_5", 102),
				(remove_agent, ":var_5"),
				(spawn_agent, ":troop_id_var_5"),
				(assign, ":player_agent_no", reg0),
				(agent_set_slot, ":player_agent_no", 102, ":var_5_102"),
				(agent_set_team, ":player_agent_no", ":team_player_agent_no"),
				(agent_set_hit_points, ":player_agent_no", ":agent_hit_points_var_5_1", 1),
				(agent_set_group, ":player_agent_no", ":group_player_agent_no"),
				(agent_set_slot, ":player_agent_no", 100, 2),
				(agent_set_slot, ":player_agent_no", 101, ":troop_id_var_5"),
				(try_begin),
					(agent_get_horse, ":horse_player_agent_no", ":player_agent_no"),
					(gt, ":horse_player_agent_no", 0),
					(lt, ":horse_var_5", 0),
					(agent_set_position, ":horse_player_agent_no", 1),
					(remove_agent, ":horse_player_agent_no"),
				(try_end),
				(set_player_troop, "trp_player"),
				(assign, ":value", 1),
				(assign, "$auxilary_player_active", 1),
			(try_end),
			(eq, ":value", 0),
			(assign, "$enable_deahtcam", 1)
		])
	] + crouching_triggers ),

	("besiege_inner_battle_castle", mtf_battle_mode, -1,
	"You attack the walls of the castle...",
	[(0, mtef_attackers|mtef_team_1|mtef_use_exact_number, af_override_horse, aif_start_alarmed, 1, []),
	(6, mtef_attackers|mtef_team_1|mtef_use_exact_number, af_override_horse, aif_start_alarmed, 1, []),
	(7, mtef_attackers|mtef_team_1|mtef_use_exact_number, af_override_horse, aif_start_alarmed, 1, []),
	(16, mtef_defenders|mtef_team_0|mtef_use_exact_number, af_override_horse, aif_start_alarmed, 1, []),
	(17, mtef_defenders|mtef_team_0|mtef_use_exact_number, af_override_horse, aif_start_alarmed, 1, []),
	(18, mtef_defenders|mtef_team_0|mtef_use_exact_number, af_override_horse, aif_start_alarmed, 1, []),
	(19, mtef_defenders|mtef_team_0|mtef_use_exact_number, af_override_horse, aif_start_alarmed, 1, []),
	(20, mtef_defenders|mtef_team_0|mtef_use_exact_number, af_override_horse, aif_start_alarmed, 1, [])],
	[
		

    (7, 0, ti_once,
    [],
    [
	(call_script, "script_assign_traits"),
    ]),


    (0, 0, 1, 
    [
    ],
    [
	(call_script, "script_stumbling"),
    ]),





#Decapitations next level right here.
(ti_on_agent_hit, 0, 0, [(eq, "$dynamic_decap", 1),],
[
   (store_trigger_param_1, ":victim_agent"),
   (store_trigger_param_2, ":attacker_agent"),
   (store_trigger_param_3, ":damage"),
   (assign, ":attacker_item", reg0), ### Transfer the item ID to make sure it dosn't change while the script is running
   (copy_position, pos5, pos0), ### Transfer the position of the hit to make sure it dosn't change while the script is running
   (neq, ":victim_agent", -1),
   (try_begin), #-- Decapitations --#
      (agent_is_human, ":victim_agent"),
	  (ge, ":attacker_item", 0),
	  (assign, ":run", 0), ### Reset the run test variable
#	  (try_begin), ### Special weapons that can decap, ovevrrides the below conditions
#		  (this_or_next|eq, ":attacker_item", "itm_supercrossbow"),
#		  (eq, ":attacker_item", "itm_supersledge"),
#		  (assign, ":run", 1),
	  (try_begin),
		  #(neq, ":attacker_item", "itm_mace_1"), ### List of weapons that cannot decapitate
		  #(neq, ":attacker_item", "itm_mace_2"), ### This would be easier to do with a preperty check (for damage type), but I don't know if that is possible or not
		  #(neq, ":attacker_item", "itm_mace_3"),
		  #(neq, ":attacker_item", "itm_staff"), #Keeping active incase of script errors
		  (agent_get_action_dir, ":attack_dir", ":attacker_agent"), ### Makes sure the attack is either a left or right swing
		  (this_or_next|eq, ":attack_dir", 1), ### Right swing
		  (eq, ":attack_dir", 2), ### Left swing
		  (assign, ":run", 1),
	  (try_end),
	  (eq, ":run", 1), ### One of the checks were true, continue to run script
	  #(assign, reg1, ":damage"), #Debug messages
	  #(display_message, "@Damage: {reg1}"),
	  
	  (assign, ":run", 0), ### Reset the run test variable
	  (try_begin),
		(ge, ":damage", "$decap_damage"), ### 30 Minimum damage required to decapitate an agent
		(assign, ":run", 1),
		
#	  (else_try),  ### If debugging mode is on, this bypasses the damage requirement check
#		  (eq,"$g_decapitations_debugging", 1),
#		  (assign, ":run", 1),
#		  (display_message, "@Decap minimum DMG req bypassed"),
	  (try_end),
	  (eq, ":run", 1),
	  
	  (store_agent_hit_points, ":hp", ":victim_agent", 1),
	  (val_add, ":hp", 10), ### 10 Victim must have the negative of this hp or below after hit for the script to move on (never put this value below 0 since the agent has to be absolutley positvely dead)!
	  (ge, ":damage", ":hp"),
	  
	  
	  ### Compare the hit position to the agent's position
      (agent_get_position, pos4, ":victim_agent"),
      (get_distance_between_positions, ":distance", pos4, pos5), 
	  (agent_get_horse, ":is_mounted", ":victim_agent"),
	  (try_begin), ### If the agent is on horseback, these values are used (note that these values will not be exactly correct if the horse is very large or very small)
		(ge, ":is_mounted", 0), ### Will be -1 if no horse is to be found, so anything above means that the agent is mounted
		(assign, ":min_distance", 240), ### Minimum distance from the agent's horse's hooves from which the hit is valid (240 is an approximate value)
		(assign, ":max_distance", 260), ### Maximum distance from the agent's horse's hooves to which the hit is valid (260 is an approximate value)
	  (else_try),  ### If the agent is on foot, these values are used
	    (assign, ":min_distance", 160), ### Minimum distance from the agent's feet from which the hit is valid (160 = slightly below the neck)
	    (assign, ":max_distance", 176), ### Maximum distance from the agent's feet to which the hit is valid (176 = near the nose)
	  (try_end),
      (is_between, ":distance", ":min_distance", ":max_distance"), ### Check to see if the hit is within the allowed area
	  
	  
	  (assign, ":run", 0), ### Default variable value before damage test
	  (try_begin),
		  (store_div, ":chance", ":damage", "$decap_damage_divider"), ### Chance of decap is damage / 4 right now. Lower this value for higher chances of decapitation (or press M+Right Ctrl for debug more if you just want to test easy decaps in-game).
		  
		  #(assign, reg1, ":chance"), #Debug messages
		  #(display_message, "@Decap chance is: {reg1}"),
		  (store_random_in_range, ":diceroll", 0, "$decap_randomizer"), ### Randomizer, 0-100
		  
		  #(assign, reg1, ":diceroll"), #Debug messages
		  #(display_message, "@Diceroll: {reg1}"),
		  (le, ":diceroll", ":chance"), ### ":diceroll" must be less than or equal to ":chance", if it is, decapitation occurs!
		  
		  (assign, ":run", 1), ### SUCCESS!
		  
#     (else_try),  ### If debugging mode is on, bypass chance calculation
#		  (eq,"$g_decapitations_debugging", 1),
#		  (assign, ":run", 1),
#		  (display_message, "@Decap chance calc bypassed"),
	  (try_end),  
	  (eq, ":run", 1), ### Time for the fun stuff!

	  ### Gender test for spawning the right head type
	  (assign, ":head_type", "itm_cut_off_head_male"),
	  (agent_get_troop_id, ":victim_troop", ":victim_agent"),
	  (try_begin),
	    (ge, ":victim_troop", 0),
		(troop_get_type,":victim_gender",":victim_troop"),
		(eq, ":victim_gender", 1),
		(assign, ":head_type", "itm_cut_off_head_female"),
	  (try_end),
	  
	  ### Randomize the spawned head's and/or helmet's position and orientation
	  (store_random_in_range, ":z_rotation", 0, 360),
	  (store_random_in_range, ":y_rotation", -60, 60),
	  (store_random_in_range, ":x_pos", -90, 90),
	  (store_random_in_range, ":y_pos", -90, 90),
	  (position_rotate_z, pos4,":z_rotation"),
	  (position_rotate_y, pos4,":y_rotation"),
	  (position_move_x, pos4, ":x_pos"),
	  (position_move_y, pos4, ":y_pos"),
	  (position_set_z_to_ground_level, pos4),
	  (position_move_z, pos4, 5),
	  (set_spawn_position, pos4),
	  (assign, ":prunetime", 360), ### This is the time in seconds before the spawned head or helmet gets pruned (removed). Recommended to keep it above 0 to make sure it gets removed eventually or when the scene resets, to prevent performance issues.
	  
	  #(spawn_item, ":head_type", 0, ":prunetime"), ### This is the old way of spawning the head on the ground with the helmet, disabled because of the new dynamic heads. You can comment away (disable) the dynamic heads spawning further down and uncomment this line for a less performance-needing approach (with no physics involved).
	  
	  ### Does the agent have a helmet or hat equipped?
      (agent_get_item_slot, ":item", ":victim_agent", 4), #head slot
      (try_begin),
         (ge, ":item", 1), ### Does it?
         (agent_unequip_item, ":victim_agent", ":item"), ### Yes it does. Unequip it to allow replacement by the invisible helmet further down
		 (try_begin),
			 ### Don't spawn items with "itp_attatch_armature" flag: rigging causes floating bugs
			 ### This would be much better to do with an item flag check, but I haven't found any way to do that
			 #(neq, ":item", "itm_with_itp_attatch_armature"),
			 #(neg|is_between,":item","start_of_itm_range_with_itp_attatch_armature","end_of_itm_range_with_itp_attatch_armature"),
			#(set_spawn_position, pos4),
			(spawn_item, ":item", 0, ":prunetime"), ### Spawns the agent's currently equipped headgear on the dropped head's position
		 (try_end),
      (try_end),
	  
	  (agent_equip_item, ":victim_agent", "itm_invisible_head"), ### Put an invisible helmet on the agent's head to "remove" it
	  
	  
	  (agent_get_position, pos4, ":victim_agent"), ### Refreshes the agent's position
	  (position_move_z, pos4, ":min_distance"), ### Move to the where the neck used to be attached
	  
	  
	  ### Blood effects! The last variable is the strength. Lower or increase it for more/less blood (or tweak the particle effects themselves in "module_particle_systems.py").
      (particle_system_burst, "psys_blood_decapitation", pos4, 40), 
	  (particle_system_burst, "psys_game_blood", pos4, 10),
	  (particle_system_burst, "psys_game_blood_2", pos4, 10),
	  
	  (play_sound_at_position, "snd_decapitation_battle", pos4), ### Play some nasty sounds
	  
	  
	  ### Dynamic head spawning! See the bottom of "module_scene_props.py" for physics-related options and more.
	  (position_move_z, pos4, 20),
	  (set_spawn_position, pos4),
	  (assign, ":head_type", "spr_head_dynamic_male"),
	  (try_begin), ### Gender check (for determening the type of head)
		(eq, ":victim_gender", 1),
		(assign, ":head_type", "spr_head_dynamic_female"),
	  (try_end),
	  (spawn_scene_prop, ":head_type"),
	  
		#Addition check if we should allow the message to appears
			(eq, "$allow_decap_mess", 1), #Possible script error

	  ### This below is for the text that shows up when somebody is decapitated.
	  
	  ### Who decapitated who?
		(agent_get_troop_id, ":attacker_troop", ":attacker_agent"),
		(str_store_troop_name, s0, ":attacker_troop"),

		(agent_get_troop_id, ":victim_troop", ":victim_agent"),
		(str_store_troop_name, s1, ":victim_troop"),

	  
	  ### Colour check (friend or foe?)
	  (get_player_agent_no, ":my_agent"),
	  (agent_get_team, ":my_team", ":my_agent"),
	  (agent_get_team, ":victim_team", ":victim_agent"),
	  (try_begin), ### Display it!
		  (neq, ":my_team", ":victim_team"),
		  (display_message, "@>>> {s0} decapitated {s1}!", 0xFF33DD11), ## Green
	  (else_try),
		  (display_message, "@>>> {s0} decapitated {s1}!", 0xFFFF4422), ## Red
	  (try_end),
   (try_end), #-- Decapitations END --#
   
   ]),



	#AI Sound horn!
			(0.0, 0.0, 2.0,
		[
			##(store_random_in_range, ":horn_chance", 0, 22),
			#(eq, ":horn_chance", 0),
		],
		[
			(call_script, "script_formation_ai_sound_horn"),
		]),
	#AI Sound horn end!










			##################################################
##### troop_ratio_bar
##################################################
      (0, 0, ti_once, [
	  (eq, "$use_troopbars", 1),
	  ], [
	  (start_presentation, "prsnt_troop_ratio_bar"),
	  ]),
##################################################
##### troop_ratio_bar
##################################################
	
###Voice-over for Infantry, archers & Cavalry
		
		(0.0, 0.3, 0.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 29) #Everyone!
		],

		[
		(call_script, "script_identify_battle_voices_all")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 30) #Infantry
		],

		[
		(call_script, "script_identify_battle_voices_inf")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 31) #Archers
		],

		[
		(call_script, "script_identify_battle_voices_archers")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 32) #Cavalry
		],

		[
		(call_script, "script_identify_battle_voices_cav")
		]),
		###Voice-over for Infantry, archers & Cavalry	
		
		
		
				
					#####MUSICBOX SIEGE VARIANT
	(ti_after_mission_start, 0, ti_once, [ #680 #(ti_after_mission_start, 0, 680, [ #680
 #Obtained from Mod Options, affects mission templates, range: ALL SP Hostile music, co-op variant is additional_music_coop.
 (eq, "$additional_music", 1),
	],
		
  [
    #(play_track, "track_silence", 1), #Stop current module track
		   (music_set_situation, mtf_sit_fight), #Field
   #(music_set_situation, mtf_sit_siege), #Siege probably don't use
	(assign, "$music_timer", 0), #Patch
  #Randomize chance is 1 in a 5 (20%)
  
  #Field related extend to sieges
  (store_random_in_range, ":randomizer", 0, 2), #50% Chance of randomization
  (try_begin),
  (eq, ":randomizer", 0),
  (store_random_in_range, ":euro_randomizernext", 1, 11),
  (store_random_in_range, ":medi_randomizer", 1, 6),
  (store_random_in_range, ":arab_randomizer", 1, 8),
  (assign, "$track_count_field_siege", ":euro_randomizernext"),
  (assign, "$track_count_field_medi_siege", ":medi_randomizer"),
  (assign, "$track_count_field_arabs_siege", ":arab_randomizer"),
  (try_end),
  #Field related extend to sieges
  ]),
	
	(0, 0, 3, [ #680 #(ti_after_mission_start, 0, 680, [ #680
	 #Obtained from Mod Options, affects mission templates, range: ALL SP Hostile music, co-op variant is additional_music_coop.
	 (eq, "$additional_music", 1),
	],
		
  [
		  #(display_message, "@Executing music code"),
		  (store_mission_timer_b, ":time_msec"),
		  #(assign, reg10, ":time_msec"),
          #(str_clear, s10),
          #(str_store_string, s10, "@Mission timer B for music: {reg10}"),
		  #(display_message, s10),
			#if next action time is lower than current time, play the sound
			(ge, ":time_msec", "$music_timer"),
			(reset_mission_timer_b), #Resetting mission timer, too.
			(assign, "$music_timer", 0),# Resetting value when track ends.
		
  #Euro only
     (try_begin),
      (ge, "$track_count_field_siege", 11),
      (assign, "$track_count_field_siege", 1),
    (else_try),
      (val_add, "$track_count_field_siege", 1),
	  (ge, "$track_count_field_siege", 11),
	  (assign, "$track_count_field_siege", 1),
    (try_end),
  #Euro only
  
  #Mediterrain only
  
       (try_begin),
      (ge, "$track_count_field_medi_siege", 6),
      (assign, "$track_count_field_medi_siege", 1),
    (else_try),
      (val_add, "$track_count_field_medi_siege", 1),
	  (ge, "$track_count_field_medi_siege", 6),
	  (assign, "$track_count_field_medi_siege", 1),
    (try_end),
  #Mediterrain only
  
  
  #Arabs only

       (try_begin),
      (ge, "$track_count_field_arabs_siege", 8),
      (assign, "$track_count_field_arabs_siege", 1),
    (else_try),
      (val_add, "$track_count_field_arabs_siege", 1),
	  (ge, "$track_count_field_arabs_siege", 8),
	  (assign, "$track_count_field_arabs_siege", 1),
    (try_end),
	#Arabs only
  
  #Pause between music length in seconds
  #(val_add, "$music_timer", 2),# 5 seconds added
  #Pause between music length in seconds
  
	(party_get_current_terrain, ":current_terrain_main_party", "p_main_party"), #Co-Op variant of this trigger should use scenes in_between rather than terrain because player can't obtain terrain in co-op sessions.
	(try_begin),
	(this_or_next|eq, ":current_terrain_main_party", 1), #rt_mountain
	(this_or_next|eq, ":current_terrain_main_party", 2), #rt_steppe
	(eq, ":current_terrain_main_party", 10), #rt_steppe_forest
	#Begin mediterrain music 5 tracks total
	(try_begin),
	(eq, "$track_count_field_medi_siege", 1), #
	(play_track, "track_medib3", 2),
	(val_add, "$music_timer", 209),# 1 second added
	(else_try),
	
	(eq, "$track_count_field_medi_siege", 2), #
	(play_track, "track_medib4", 2),
	(val_add, "$music_timer", 237),#
	(else_try),
	
	(eq, "$track_count_field_medi_siege", 3), #
	(play_track, "track_medib5", 2),
	(val_add, "$music_timer", 229),#
	(else_try),

	(eq, "$track_count_field_medi_siege", 4), #
	(play_track, "track_medis1", 2),
	(val_add, "$music_timer", 195),#
	(else_try),
	(eq, "$track_count_field_medi_siege", 5), #
	(play_track, "track_medis2", 2),
	(val_add, "$music_timer", 66),#
	(try_end),
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 3), #rt_plain
	(this_or_next|eq, ":current_terrain_main_party", 11), #rt_forest
	(eq, ":current_terrain_main_party", 9), #rt_mountain_forest
	#Begin Euro Music
	(try_begin),
	(eq, "$track_count_field_siege", 1), #
	(play_track, "track_euros1", 2),
	(val_add, "$music_timer", 162),#
	(else_try),
	(eq, "$track_count_field_siege", 2), #
	(play_track, "track_euros2", 2),
	(val_add, "$music_timer", 221),#
	(else_try),
	
	(eq, "$track_count_field_siege", 3), #
	(play_track, "track_euros3", 2),
	(val_add, "$music_timer", 190),#
	(else_try),
	
	(eq, "$track_count_field_siege", 4), #
	(play_track, "track_euros4", 2),
	(val_add, "$music_timer", 317),#
	(else_try),
	
	(eq, "$track_count_field_siege", 5), #
	(play_track, "track_euros5", 2),
	(val_add, "$music_timer", 59),#
		(else_try),
	
	(eq, "$track_count_field_siege", 6), #
	(play_track, "track_euros6", 2),
	(val_add, "$music_timer", 59),#
		(else_try),
	
	(eq, "$track_count_field_siege", 7), #
	(play_track, "track_euros7", 2),
	(val_add, "$music_timer", 85),#
		(else_try),
	
	(eq, "$track_count_field_siege", 8), #
	(play_track, "track_euros8", 2),
	(val_add, "$music_timer", 82),#
		(else_try),
	
	(eq, "$track_count_field_siege", 9), #
	(play_track, "track_euros9", 2),
	(val_add, "$music_timer", 199),#
		(else_try),
	
	(eq, "$track_count_field_siege", 10), #
	(play_track, "track_euros10", 2),
	(val_add, "$music_timer", 281),#
	(try_end),
	
	
	
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 4), #rt_snow
	(this_or_next|eq, ":current_terrain_main_party", 12), #rt_snow_forest
	(eq, ":current_terrain_main_party", 7), #rt_bridge
	#Begin Euro Music
	(try_begin),
	(eq, "$track_count_field_siege", 1), #
	(play_track, "track_euros1", 2),
	(val_add, "$music_timer", 162),#
	(else_try),
	(eq, "$track_count_field_siege", 2), #
	(play_track, "track_euros2", 2),
	(val_add, "$music_timer", 221),#
	(else_try),
	
	(eq, "$track_count_field_siege", 3), #
	(play_track, "track_euros3", 2),
	(val_add, "$music_timer", 190),#
	(else_try),
	
	(eq, "$track_count_field_siege", 4), #
	(play_track, "track_euros4", 2),
	(val_add, "$music_timer", 317),#
	(else_try),
	
	(eq, "$track_count_field_siege", 5), #
	(play_track, "track_euros5", 2),
	(val_add, "$music_timer", 59),#
		(else_try),
	
	(eq, "$track_count_field_siege", 6), #
	(play_track, "track_euros6", 2),
	(val_add, "$music_timer", 59),#
		(else_try),
	
	(eq, "$track_count_field_siege", 7), #
	(play_track, "track_euros7", 2),
	(val_add, "$music_timer", 85),#
		(else_try),
	
	(eq, "$track_count_field_siege", 8), #
	(play_track, "track_euros8", 2),
	(val_add, "$music_timer", 82),#
		(else_try),
	
	(eq, "$track_count_field_siege", 9), #
	(play_track, "track_euros9", 2),
	(val_add, "$music_timer", 199),#
		(else_try),
	
	(eq, "$track_count_field_siege", 10), #
	(play_track, "track_euros10", 2),
	(val_add, "$music_timer", 281),#
	(try_end),
	
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 5), #rt_desert
	(eq, ":current_terrain_main_party", 13), #rt_desert_forest
	#Begin arab music
	(try_begin),
	(eq, "$track_count_field_arabs_siege", 1), #
	(play_track, "track_arabs1",  2),
	(val_add, "$music_timer", 198),#
	(else_try),
	(eq, "$track_count_field_arabs_siege", 2), #
	(play_track, "track_arabs2", 2),
	(val_add, "$music_timer", 112),#
	
	(else_try),
	(eq, "$track_count_field_arabs_siege", 3), #
	(play_track, "track_medis1", 2),
	(val_add, "$music_timer", 195),#
	(else_try),
	
	(eq, "$track_count_field_arabs_siege", 4), #
	(play_track, "track_arabs4", 2),
	(val_add, "$music_timer", 79),#
		(else_try),
	
	(eq, "$track_count_field_arabs_siege", 5), #
	(play_track, "track_arabs5", 2),
	(val_add, "$music_timer", 394),#
	
			(else_try),
	(eq, "$track_count_field_arabs_siege", 6), #
	(play_track, "track_arabs3", 2),
	(val_add, "$music_timer", 80),#
			(else_try),
	(eq, "$track_count_field_arabs_siege", 7), #
	(play_track, "track_medis2", 2),
	(val_add, "$music_timer", 66),#
	(try_end),
	(try_end),
	
  ]),
	
	#####MUSICBOX END
			#####Camera mode by Rubik None-Coop Version Begin
		(0, 0, 0, [(eq, "$extended_camera_mode", 1)],
  [
    (get_player_agent_no, ":player_agent"),
    (agent_get_look_position, pos1, ":player_agent"),
    (position_move_z, pos1, "$g_camera_z"),
    (position_move_y, pos1, "$g_camera_y"),
    (agent_get_horse, ":horse_agent", ":player_agent"),
    (try_begin),
      (ge, ":horse_agent", 0),
      (position_move_z, pos1, 80),
    (try_end),
    (mission_cam_set_position, pos1),
    (try_begin),
      (key_is_down, key_left_control),
      (assign, ":move_val", 50),
    (else_try),
      (assign, ":move_val", 10),
    (try_end),
    (try_begin),
      (key_clicked, key_up),
      (mission_cam_set_mode, 1),
      (val_add, "$g_camera_z", ":move_val"),
    (else_try),
      (key_clicked, key_down),
      (mission_cam_set_mode, 1),
      (val_sub, "$g_camera_z", ":move_val"),
    (else_try),
      (key_clicked, key_left),
      (mission_cam_set_mode, 1),
      (val_add, "$g_camera_y", ":move_val"),
    (else_try),
      (key_clicked, key_right),
      (mission_cam_set_mode, 1),
      (val_sub, "$g_camera_y", ":move_val"),
    (try_end),
    (try_begin),
      (this_or_next|game_key_clicked, gk_view_char),
      (this_or_next|game_key_clicked, gk_zoom),
      (game_key_clicked, gk_cam_toggle),
      (mission_cam_set_mode, 0),
    (try_end),
  ]),
  #####Camera mode by Rubik None-Coop Version End
		
#				#####MUSICBOX DEBUG
#		(0, 0, 10, [
#		],
#  [
#		(party_get_current_terrain, ":current_terrain_main_party", "p_main_party"),
#	      #BEGIN DEBUG
#          (assign, reg10, ":current_terrain_main_party"),
#          (str_clear, s10),
#          (str_store_string, s10, "@Terrain: {reg10}"),
#		  (display_message, s10),
#          #END DEBUG
#  ]),
###########Torch by troycall/Envious Arm begin

																	#(-25.0, 0.0, 0.0, #Enabling this forces random chance to be 100%
																	#(ti_on_agent_spawn, 0, 0, #Enabling this forces random chance to be 100%
																	(20, 0, ti_once, #Proper one, but reinforcements do not get assigned torches.
        [
          (mission_tpl_are_all_agents_spawned), #From VC Header_Operations to prevent weird behavior.
          (is_currently_night) #Check if currently night time
        ],
        [

		  ####DEFAULT
		   #(try_for_agents, ":agent"),
            #(agent_get_wielded_item, ":item", ":agent", 1),
            #(gt, ":item", -1),
            #(agent_unequip_item, ":agent", ":item"),
            #(agent_equip_item, ":agent", "itm_torch"),
            #(agent_set_wielded_item, ":agent", "itm_torch"),           
          #(try_end),
		  ####END DEFAULT
		  
		  (try_for_agents, ":agent"), #Try for agents...
		  #Extension
		  (agent_is_alive, ":agent"), #For performance reasons
		  #End
		  (agent_is_human, ":agent"), #Performance
          (agent_is_non_player, ":agent"), #Uncommenting this includes player on spawning with torch, may be necessary to uncomment at module_coop_mission_templates.
		  


		 ##########Default Order
		 #######		  (agent_is_human, ":agent"), #Performance
         #######(agent_is_non_player, ":agent"), #Uncommenting this includes player on spawning with torch, may be necessary to uncomment at module_coop_mission_templates.
		 #######
		 ########Extension
		 #######(agent_is_active, ":agent"), #For performance reasons
		 #######(agent_is_alive, ":agent"), #For performance reasons
		 ########End
		  ############
		  		  
				#  (try_begin),
				  
		#		          (agent_get_wielded_item, ":rhand", ":agent", 0),  #Right hand
		#  (assign, ":rhanditem", 0), # Preparing local variable.
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000000000100),
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000004000000),
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000008000000),
		#  (neg|item_has_capability, ":rhanditem", 0x0000000170000000),
		# 

		  #
		  
          #BEGIN DEBUG
          #(assign, reg10, ":agent"),
          #(str_clear, s10),
          #(str_store_string, s10, "@New agent: {reg10}"),
          #END DEBUG
		  #(agent_get_wielded_item, ":rhanditem", ":agent", 0),  #Obtain right hand item
         (agent_get_wielded_item, ":rhanditem", ":agent", 0),  #Obtain right hand item
          (agent_get_wielded_item, ":item", ":agent", 1), # Left hand: shield or -1
          #BEGIN DEBUG
          #(assign, reg10, ":item"),
          #(str_store_string, s10, "@{s10}. LH: {reg10}"),
		  #(display_message, "@Main block Phase A finalized"),
          #END DEBUG
		  #(item_get_type, ":type", ":rhanditem"), #If right hand item is polearm, stop reading rest of code.
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_club_with_spike_head", "itm_wooden_shield"),
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_light_lance", "itm_wooden_shield"),
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_light_lance", "itm_wooden_shield"),
          (try_begin),
		  (neg|is_between, ":rhanditem", "itm_club_with_spike_head", "itm_wooden_shield"),
		  (neg|is_between, ":rhanditem", "itm_lance_banner_jer", "itm_cross_end"), #Update item slots
		  #(neg|troop_has_item_equipped, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		  #(neq, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		  
		# (neg|eq, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		    (gt, ":item", -1), #Check if the agent wields any item in the left hand, this or next.
            #(neq, ":item", -1),# Check if the agent wields any item in the left hand
            (neq, ":item", "itm_torch"), #If agent is using torch, ignore him.
            #(display_message, "@PASSED neg tests"), #Debug message

			
            (store_random_in_range, ":chance", 1, 101), # Chance of item being assigned
            (try_begin),
			  (le, ":chance", "$torch_chance"), #25% = 25
				#lt           = neg | ge # less than		-- (lt,<value>,<value>),
				#neq          = neg | eq # not equal to		-- (neq,<value>,<value>),
				#le           = neg | gt # less or equal to	-- (le,<value>,<value>),
              (agent_unequip_item, ":agent", ":item"),
			  
              #BEGIN DEBUG
              #(str_store_item_name, s11, ":item"),
              #(str_store_string, s10, "@{s10}. Removed item: {s11}"),
			  #(display_message, "@(agent_unequip_item, :agent, :item PASSED."),
              #END DEBUG

               
                (agent_equip_item, ":agent", "itm_torch"), #Tell agent to equip the item
                 #(display_message, "@(agent_equip_item, :agent, :item PASSED."),
                  (agent_set_wielded_item, ":agent", "itm_torch"), #Required for infantry only, cavarly can work without it.
                  #(display_message, "@(agent_set_wielded_item, :agent, :item PASSED."),
                 
                 
                  #BEGIN DEBUG
                #(else_try),
                  #(str_store_string, s10, "@{s10}. Failed random chance."),
                (try_end),
               
              #(else_try),
                #(str_store_string, s10, "@{s10}. Invalid agent for torch"),
              (try_end),
             
              #(display_message, s10),
			  (try_end),
              #END DEBUG
			#  (try_end),
      ]),
	  
###########Torch by troycall/Envious Arm end


		(-25.0, 0.0, 0.0,
		[
			(eq, "$freelancer_state", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(ge, ":player_agent_no", 0),
			(agent_is_active, ":player_agent_no"),
			(store_trigger_param_1, ":trigger_param_1"),
			(eq, ":player_agent_no", ":trigger_param_1"),
			(agent_get_team, ":team_player_agent_no", ":player_agent_no"),
			(team_set_order_listener, ":team_player_agent_no", -1),
			(val_add, ":team_player_agent_no", 2),
			(agent_set_team, ":player_agent_no", ":team_player_agent_no")
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(team_set_relation, 0, 2, 1),
			(team_set_relation, 1, 3, 1),
			(call_script, "script_change_banners_and_chest")
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_change_banners_and_chest")
		]),

		(-21.0, 0.0, 0.0,
		[],

		[
			(try_begin),
				(eq, "$g_battle_won", 1),
				(call_script, "script_count_mission_casualties_from_agents"),
				(finish_mission, 0),
			(else_try),
				(eq, "$pin_player_fallen", 1),
				(eq, "$g_battle_won", 0),
				(call_script, "script_simulate_retreat", 5, 20, 1),
				(str_store_string, 5, "str_retreat"),
				(call_script, "script_count_mission_casualties_from_agents"),
				(set_mission_result, -1),
				(finish_mission, 0),
			(else_try),
				(eq, "$pin_player_fallen", 1),
				(eq, "$g_battle_won", -1),
				(call_script, "script_count_mission_casualties_from_agents"),
				(finish_mission, 0),
			(else_try),
				(call_script, "script_cf_check_enemies_nearby"),
				(question_box, "str_do_you_want_to_retreat"),
			(else_try),
				(get_player_agent_no, ":player_agent_no"),
				(neg|agent_is_alive, ":player_agent_no"),
				(call_script, "script_cf_check_enemies_nearby"),
				(question_box, "str_do_you_want_to_retreat"),
			(else_try),
				(display_message, "str_can_not_retreat"),
			(try_end)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(call_script, "script_troop_agent_set_banner", "tableau_game_troop_label_banner", ":trigger_param_1", ":troop_id_trigger_param_1")
		]),

		(-8.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(eq, ":trigger_param_1", 0),
			(assign, "$pin_player_fallen", 0),
			(str_store_string, 5, "str_retreat"),
			(call_script, "script_simulate_retreat", 5, 20, 0),
			(assign, "$g_battle_result", -1),
			(set_mission_result, -1),
			(call_script, "script_count_mission_casualties_from_agents"),
			(finish_mission, 0)
		]),

		(0.0, 0.0, ti_once,
		[],

		[
			(assign, "$g_battle_won", 0),
						(try_begin),
			(eq, "$additional_music", 0),
			(call_script, "script_music_set_situation_with_culture", 4096),
			(try_end),
			(assign, "$dmod_current_agent", -1),
			(assign, "$dmod_move_camera", -1)
		]),

		(0.0, 0.0, ti_once,
		[
			(assign, "$defender_team", 0),
			(assign, "$attacker_team", 1),
			(assign, "$defender_team_2", 2),
			(assign, "$attacker_team_2", 3)
		],

		[]),

		(2.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_check_friendly_kills")
		]),

		(5.0, 60.0, ti_once,
		[
			(store_mission_timer_a, reg1),
			(ge, reg1, 10),
			(all_enemies_defeated, 5),
			(set_mission_result, 1),
			(display_message, "str_msg_battle_won"),
			#(play_sound, "snd_won_battle"), #Moved to victorious main menu
			(assign, "$g_battle_won", 1),
			(assign, "$g_battle_result", 1),
			(call_script, "script_play_victorious_sound")
		],

		[
			(call_script, "script_count_mission_casualties_from_agents"),
			(finish_mission, 1)
		]),

		(10.0, 0.0, 0.0, # Battle won/lost messages!
		[],

		[
			(eq, "$g_battle_won", 1),
			#(play_sound, "snd_won_battle"), #Moved to victorious main menu
			(display_message, "str_msg_battle_won")
		]),

		(1.0, 60.0, ti_once,
		[
			(store_mission_timer_a, reg1),
			(ge, reg1, 10),
			(main_hero_fallen),
			(assign, ":var_1", 0),
			(try_for_agents, ":var_2"),
				(agent_is_ally, ":var_2"),
				(agent_is_alive, ":var_2"),
				(val_add, ":var_1", 1),
			(try_end),
			(eq, ":var_1", 0),
			(set_mission_result, -1),
						(try_begin),
			(eq, "$colored_messages", 1),
			(display_message, "@Battle lost...", 0x00f78078),
			(else_try),
			(display_message, "@Battle lost..."),
			(try_end),
			(assign, "$g_battle_won", -1),
			(assign, "$g_battle_result", -1)
		],

		[
			(call_script, "script_count_mission_casualties_from_agents"),
			(finish_mission, 0)
		]),

		(10.0, 0.0, 0.0, # Battle won/lost messages!
		[],

		[
			(eq, "$g_battle_won", -1),
						(try_begin),
			(eq, "$colored_messages", 1),
			(display_message, "@Battle lost! Press tab key to leave...", 0x00f78078),
			(else_try),
			(display_message, "@Battle lost! Press tab key to leave..."),
			(try_end),
			#(play_sound, "snd_battle_sounds"), #Moved to your companions carry you away from the fighting menu
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(gt, "$dmod_current_agent", 0),
			(eq, "$setting_use_dmod", 1),
			(eq, "$dmod_move_camera", 1),
			(agent_get_position, 1, "$dmod_current_agent"),
			(position_move_z, 1, 300),
			(position_move_y, 1, -300),
			(agent_get_horse, ":horse_l_dmod_current_agent", "$dmod_current_agent"),
			(try_begin),
				(ge, ":horse_l_dmod_current_agent", 0),
			(try_end),
			(try_begin),
				(eq, "$pop_camera_on", 1),
				(assign, "$pop_camera_on", 0),
			(try_end),
			(mission_cam_set_position, 1),
			(mission_cam_set_mode, 1),
			(set_fixed_point_multiplier, 100)
		],

		[]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(eq, "$setting_use_dmod", 1),
			(key_clicked, 238),
			(main_hero_fallen),
			(call_script, "script_dmod_cycle_forwards")
		],

		[]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(eq, "$setting_use_dmod", 1),
			(key_clicked, 239),
			(main_hero_fallen),
			(call_script, "script_dmod_cycle_backwards")
		],

		[]),

		(0.0, 0.0, ti_once,
		[],

		[
			(assign, "$pop_camera_on", 0),
			(assign, "$pop_camera_mouse_center_x", 500),
			(assign, "$pop_camera_mouse_center_y", 375),
			(assign, "$pop_camera_mouse_x", "$pop_camera_mouse_center_x"),
			(assign, "$pop_camera_mouse_y", "$pop_camera_mouse_center_y"),
			(assign, "$pop_camera_mouse_counter", 0)
		]),

		(0.0, 4.0, ti_once,
		[
			(eq, "$enable_deahtcam", 1),
			(main_hero_fallen),
			(eq, "$pop_camera_on", 0),
			(assign, "$tom_sand_storm", 0)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_position, 1, ":player_agent_no"),
			(position_get_x, ":position_x_1", 1),
			(position_get_y, ":position_y_1", 1),
			(init_position, 47),
			(position_set_x, 47, ":position_x_1"),
			(position_set_y, 47, ":position_y_1"),
			(position_set_z_to_ground_level, 47),
			(position_move_z, 47, 250),
			(mission_cam_set_mode, 1, 0, 0),
			(mission_cam_set_position, 47),
			(assign, "$pop_camera_rotx", 0),
			(assign, "$pop_camera_on", 1)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(this_or_next|eq, "$dmod_move_camera", 1),
			(eq, "$pop_camera_on", 1),
			(this_or_next|game_key_clicked, 0),
			(this_or_next|game_key_is_down, 0),
			(this_or_next|game_key_clicked, 1),
			(this_or_next|game_key_is_down, 1),
			(this_or_next|game_key_clicked, 2),
			(this_or_next|game_key_is_down, 2),
			(this_or_next|game_key_clicked, 3),
			(game_key_is_down, 3)
		],

		[
			(try_begin),
				(eq, "$dmod_move_camera", 1),
				(mission_cam_set_mode, 1, 0, 0),
				(assign, "$pop_camera_rotx", 0),
				(assign, "$pop_camera_on", 1),
				(assign, "$dmod_move_camera", 0),
			(try_end),
			(mission_cam_get_position, 47),
			(assign, ":value", 0),
			(assign, ":value_2", 0),
			(try_begin),
				(this_or_next|game_key_clicked, 0),
				(game_key_is_down, 0),
				(assign, ":value_2", 10),
			(try_end),
			(try_begin),
				(this_or_next|game_key_clicked, 1),
				(game_key_is_down, 1),
				(assign, ":value_2", -10),
			(try_end),
			(try_begin),
				(this_or_next|game_key_clicked, 2),
				(game_key_is_down, 2),
				(assign, ":value", -10),
			(try_end),
			(try_begin),
				(this_or_next|game_key_clicked, 3),
				(game_key_is_down, 3),
				(assign, ":value", 10),
			(try_end),
			(position_move_x, 47, ":value"),
			(position_move_y, 47, ":value_2"),
			(mission_cam_set_position, 47)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(eq, "$pop_camera_on", 1),
			(neg|is_presentation_active, "prsnt_battle"),
			(mouse_get_position, 1),
			(set_fixed_point_multiplier, 1000),
			(position_get_x, reg1, 1),
			(position_get_y, reg2, 1),
			(set_fixed_point_multiplier, 100),
			(this_or_next|neq, reg1, "$pop_camera_mouse_center_x"),
			(neq, reg2, "$pop_camera_mouse_center_y")
		],

		[
			(assign, ":value", 1),
			(try_begin),
				(eq, reg1, "$pop_camera_mouse_x"),
				(eq, reg2, "$pop_camera_mouse_y"),
				(val_add, "$pop_camera_mouse_counter", 1),
				(try_begin),
					(gt, "$pop_camera_mouse_counter", 50),
					(assign, "$pop_camera_mouse_center_x", reg1),
					(assign, "$pop_camera_mouse_center_y", reg2),
					(assign, "$pop_camera_mouse_counter", 0),
				(try_end),
				(assign, ":value", 0),
			(try_end),
			(eq, ":value", 1),
			(assign, "$pop_camera_mouse_counter", 0),
			(assign, "$pop_camera_mouse_x", reg1),
			(assign, "$pop_camera_mouse_y", reg2),
			(mission_cam_get_position, 47),
			(store_sub, ":value_2", "$pop_camera_mouse_center_x", reg1),
			(store_sub, ":value_3", reg2, "$pop_camera_mouse_center_y"),
			(try_for_range, ":number", 0, 2),
				(try_begin),
					(eq, ":number", 1),
					(assign, ":value_2", ":value_3"),
				(try_end),
				(this_or_next|lt, ":value_2", -2),
				(gt, ":value_2", 2),
				(assign, ":value_4", 1),
				(try_begin),
					(lt, ":value_2", 0),
					(assign, ":value_4", -1),
				(try_end),
				(val_abs, ":value_2"),
				(val_sub, ":value_2", 2),
				(convert_to_fixed_point, ":value_2"),
				(store_sqrt, ":value_2", ":value_2"),
				(convert_from_fixed_point, ":value_2"),
				(val_clamp, ":value_2", 1, 64),
				(val_mul, ":value_2", ":value_4"),
				(try_begin),
					(eq, ":number", 0),
					(store_mul, ":value_5", "$pop_camera_rotx", -1),
					(position_rotate_x, 47, ":value_5"),
					(position_rotate_z, 47, ":value_2"),
					(position_rotate_x, 47, "$pop_camera_rotx"),
				(try_end),
				(try_begin),
					(eq, ":number", 1),
					(position_rotate_x, 47, ":value_2"),
					(val_add, "$pop_camera_rotx", ":value_2"),
				(try_end),
			(try_end),
			(mission_cam_set_position, 47)
		]),

		(1.0, 4.0, ti_once,
		[
			(main_hero_fallen)
		],

		[
			(assign, "$pin_player_fallen", 1),
			(neq, "$use_player_auxiliary", 1),
			(display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
			(display_message, "@If you choose to watch the fight you can use the mouse scroll up and down to switch between troop view or AWDS keys for free camera view.")
		]),

		(0.0, 0.0, 0.0,
		[],

		[
			(game_key_clicked, 22),
			(neg|is_presentation_active, "prsnt_battle"),
			(start_presentation, "prsnt_battle")
		]),

		(0.1, 0.0, 0.0,
		[],

		[
			(is_presentation_active, "prsnt_battle"),
			(call_script, "script_update_order_panel_statistics_and_map")
		]),

		(-22.0, 0.0, 0.0,
		[],

		[
			(display_message, "str_use_baggage_for_inventory")
		]),

		(-28.0, 0.3, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(store_trigger_param_2, ":trigger_param_2"),
			(store_trigger_param_3, ":trigger_param_3"),
			(assign, ":var_4", reg0),
			(agent_is_human, ":trigger_param_1"),
			(agent_is_alive, ":trigger_param_1"), #this addition
			(agent_is_active, ":trigger_param_1"), #This addition, i disabled tihs whole mission template to fix the bug too.
			(get_player_agent_no, ":player_agent_no"),
			(try_begin),
				(eq, "$tom_weapon_break", 1),
				(eq, ":trigger_param_1", ":player_agent_no"),
				(store_random_in_range, ":random_in_range_0_1000", 0, 1000),
				(eq, ":random_in_range_0_1000", 1),
				(store_random_in_range, ":random_in_range_4_8", 4, 8),
				(troop_get_inventory_slot, ":inventory_slot_player_random_in_range_4_8", "trp_player", ":random_in_range_4_8"),
				(gt, ":inventory_slot_player_random_in_range_4_8", 0),
				(str_store_item_name, 20, ":inventory_slot_player_random_in_range_4_8"),
				(troop_get_inventory_slot_modifier, ":inventory_slot_modifier_player_random_in_range_4_8", "trp_player", ":random_in_range_4_8"),
				(try_begin),
					(eq, ":inventory_slot_modifier_player_random_in_range_4_8", 6),
					(display_message, "@Your {s20} is too crappy to fall apart!", 0x00ff0000),
				(else_try),
					(troop_add_item, "trp_broken_items", ":inventory_slot_player_random_in_range_4_8", ":inventory_slot_modifier_player_random_in_range_4_8"),
					(troop_set_inventory_slot_modifier, "trp_player", ":random_in_range_4_8", 6),
					(display_message, "@Your {s20} cracks!", 0x00ff0000),
				(try_end),
			(try_end),
			(try_begin),
				(eq, "$tom_weapon_break", 1),
				(eq, ":trigger_param_2", ":player_agent_no"),
				(is_between, ":var_4", 1, "itm_cross_end"), #Previously itm_items_end
				(neg|is_between, ":var_4", "itm_light_lance", "itm_wooden_shield"),
				(item_get_type, ":type_var_4", ":var_4"),
				(ge, ":trigger_param_3", 10),
				(neq, ":type_var_4", 10),
				(neq, ":type_var_4", 8),
				(neq, ":type_var_4", 9),
				(neq, ":type_var_4", 5),
				(neq, ":type_var_4", 6),
				(store_random_in_range, ":random_in_range_0_1000", 0, 600),
				(eq, ":random_in_range_0_1000", 1),
				(assign, ":value", -1),
				(try_for_range, ":random_in_range_4_8", 0, 4),
					(troop_get_inventory_slot, ":inventory_slot_player_random_in_range_4_8_2", "trp_player", ":random_in_range_4_8"),
					(eq, ":inventory_slot_player_random_in_range_4_8_2", ":var_4"),
					(assign, ":value", ":random_in_range_4_8"),
				(try_end),
				(gt, ":value", 0),
				(str_store_item_name, 20, ":var_4"),
				(troop_get_inventory_slot_modifier, ":inventory_slot_modifier_player_random_in_range_4_8", "trp_player", ":value"),
				(try_begin),
					(eq, ":inventory_slot_modifier_player_random_in_range_4_8", 6),
					(display_message, "@Your {s20} falls apart!", 0x00ff0000),
					(agent_unequip_item, ":player_agent_no", ":var_4"),
					(troop_remove_item, "trp_player", ":var_4"),
					(troop_remove_item, "trp_broken_items", ":var_4"),
				(else_try),
					(troop_add_item, "trp_broken_items", ":var_4", ":inventory_slot_modifier_player_random_in_range_4_8"),
					(troop_set_inventory_slot_modifier, "trp_player", ":value", 6),
					(display_message, "@Your {s20} cracks!", 0x00ff0000),
				(try_end),
			(try_end),
			(agent_get_horse, ":horse_trigger_param_2", ":trigger_param_2"),
			(try_begin),
				(eq, "$tom_lance_breaking", 1),
				(gt, ":horse_trigger_param_2", 0),
				(this_or_next|is_between, ":var_4", "itm_light_lance", "itm_spear_a"), #Updated item slots
				(is_between, ":var_4", "itm_lance_banner_jer", "itm_pike_banner_teu"), #Updated item slots
				(ge, ":trigger_param_3", 50),
				(store_random_in_range, ":random_in_range_0_100", 0, 100),
				(gt, ":random_in_range_0_100", 20),
				(try_begin),
					(eq, ":trigger_param_2", ":player_agent_no"),
					(display_message, "@You broke your lance!", 0x00ff0000),
				(try_end),
				########Add effects on weapon break *Lances*
        (agent_get_position, pos1, ":trigger_param_2"),
		(agent_play_sound, ":trigger_param_1", "snd_shield_broken"),
		(particle_system_burst, "psys_lanse", pos1, 10),
        (particle_system_burst, "psys_lanse_straw", pos1, 30),
                ####Extend to Lanse_Blood
		#(particle_system_burst, "psys_lanse_blood", pos1, 10),
        #(particle_system_burst, "psys_lanse_blood", pos1, 30),
		        ########End Effects
				(agent_unequip_item, ":trigger_param_2", ":var_4"),
			(else_try),
				(this_or_next|is_between, ":var_4", "itm_bamboo_spear", "itm_wooden_shield"), #Updated item slots
				(is_between, ":var_4", "itm_pike_banner_teu", "itm_items_end"), #Updated item slots
				(le, ":horse_trigger_param_2", 0),
				(ge, ":trigger_param_3", 8),
				(store_random_in_range, ":random_in_range_0_100", 0, 100),
				(ge, ":random_in_range_0_100", 90),
				(try_begin),
					(eq, ":trigger_param_2", ":player_agent_no"),
					(display_message, "@You broke your spear!", 0x00ff0000),
				(try_end),
				########Add effects on weapon break *Spears*
        (agent_get_position, pos1, ":trigger_param_2"),
		(agent_play_sound, ":trigger_param_1", "snd_shield_broken"),
		(store_random_in_range, ":psys_to_use", "psys_lanse", "psys_lanse_blood"),
		(particle_system_burst, ":psys_to_use", pos1, 7), #Default = 10 (Higher = Bigger Particles)
        (particle_system_burst, ":psys_to_use", pos1, 21), #Default = 30 (Higher = Bigger Particles)
                ####Extend to Lanse_Blood
		#(particle_system_burst, "psys_lanse_blood", pos1, 10),
        #(particle_system_burst, "psys_lanse_blood", pos1, 30),
		        ########End Effects
				(agent_unequip_item, ":trigger_param_2", ":var_4"),
			(try_end),
			###Envfix weapon breaking patch start here
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_set_matching_sexy_boots", ":trigger_param_1")
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$sp_shield_bash", 1),
			(game_key_is_down, 7),
			(game_key_clicked, 6),
			(neg|main_hero_fallen),
		],

		[
		(call_script, "script_shield_bash"),
		]),

			##AI kicking begin
		   (2, 0, 3, #AI kicking
       [], [
	(get_player_agent_no,":player"),
	(try_for_agents, ":agent"),
		(neq, ":agent", ":player"),
		(agent_is_alive, ":agent"),
		(neq, ":agent", -1),
		(agent_is_human, ":agent"),#Only humans can kick....FOR NOW
		(agent_is_active, ":agent"),
		(agent_slot_eq, ":agent", slot_agent_is_running_away, 0),#Isn't fleeing the battle.
		##He's an eligible human.  Now see if he's in a position to kick.
		(agent_get_attack_action, ":attack_action", ":agent"), #returned values: free = 0, readying_attack = 1, releasing_attack = 2, completing_attack_after_hit = 3, attack_parried = 4, reloading = 5, after_release = 6, cancelling_attack = 7
		(agent_get_defend_action, ":defend_action", ":agent"),#
		(this_or_next|eq,":attack_action",4),#Just got parried
		(this_or_next|eq,":defend_action",1),#Parrying an enemy
		##So he'll only try to kick if he just parried an enemy attack, or his own attack just got parried.
		(agent_get_team, ":team", ":agent"),
		(assign, ":maximum_distance", 100),
		#Target Acquisition
		(agent_ai_get_look_target,":suspect",":agent"),
		(gt,":suspect",0),#Make sure there is someone.
		(agent_is_alive, ":suspect"),
		(agent_is_human, ":suspect"),#Only kick humans
		(agent_is_active, ":suspect"),
		(agent_get_team, ":suspect_team", ":suspect"),
		(neq, ":suspect_team", ":team"),#Friends don't let friends kick friends.
		(agent_get_position, pos1, ":agent"),#Distance check
		(agent_get_position, pos2, ":suspect"),
		(neg|position_is_behind_position, pos2, pos1), #Suspect can't be behind kicker.
		(get_distance_between_positions, ":distance", pos1, pos2),
		(le, ":distance", ":maximum_distance"),
		#Check chance
		(store_random_in_range,":kickchance", 1, 10),
		(try_begin),
			(eq,":kickchance",1), #10% chance per check
				#(display_message, "@Agent kicks."),
				(agent_set_animation, ":agent", "anim_prepare_kick_0"),
				(agent_deliver_damage_to_agent, ":agent", ":suspect", 3),
				(agent_set_animation, ":suspect", "anim_strike3_abdomen_front"),#Get Kicked
			(try_end),
	   (try_end),]),
	   
	   ##AI Kicking end
		
		
		(0.25, 0.0, 4.0,
		[
			(eq, "$sp_shield_bash_ai", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(neq, ":var_2", ":player_agent_no"),
				(agent_is_alive, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_active, ":var_2"), #Test to see if it stops AI from shield bashing (new addition v3)
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(store_skill_level, ":skill_level_shield_troop_id_var_2", "skl_shield", ":troop_id_var_2"),
				(store_proficiency_level, ":proficiency_level_troop_id_var_2_0", ":troop_id_var_2", 0),
				(ge, ":skill_level_shield_troop_id_var_2", 4),
				(ge, ":proficiency_level_troop_id_var_2_0", 200),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(le, ":horse_var_2", 0),
				(try_begin),
					(neg|agent_slot_ge, ":var_2", 50, 1),
					(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
					(agent_get_wielded_item, ":wielded_item_var_2_1", ":var_2", 1),
					(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
					(eq, ":type_wielded_item_var_2_1", 7),
					(agent_get_attack_action, ":attack_action_var_2", ":var_2"),
					(eq, ":attack_action_var_2", 0),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_position, 1, ":var_2"),
					(assign, ":value", -1),
					(assign, ":value_2", 125),
					(try_for_agents, ":var_13"),
						(agent_is_alive, ":var_13"),
						(agent_is_human, ":var_13"),
						(agent_get_position, 2, ":var_13"),
						(neg|position_is_behind_position, 2, 1),
						(agent_get_team, ":team_var_13", ":var_13"),
						(neq, ":team_var_13", ":team_var_2"),
						(try_begin),
							(eq, ":team_var_2", 0),
							(assign, ":value_3", 2),
						(else_try),
							(eq, ":team_var_2", 2),
							(assign, ":value_3", 0),
						(else_try),
							(eq, ":team_var_2", 1),
							(assign, ":value_3", 3),
						(else_try),
							(eq, ":team_var_2", 3),
							(assign, ":value_3", 1),
						(try_end),
						(neq, ":team_var_13", ":value_3"),
						(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
						(le, ":distance_between_positions_1_2", ":value_2"),
						(assign, ":value_2", ":distance_between_positions_1_2"),
						(assign, ":value", ":var_13"),
					(try_end),
					(ge, ":value", 0),
					(agent_get_horse, ":horse_var_2", ":value"),
					(eq, ":horse_var_2", -1),
					(store_random_in_range, ":random_in_range_15_26", 15, 26),
					(agent_set_slot, ":var_2", 50, ":random_in_range_15_26"),
					(agent_set_animation, ":var_2", "anim_shield_bash"),
					(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
					(troop_get_type, ":type_wielded_item_var_2_1", ":troop_id_var_2"),
					(try_begin),
						(eq, ":type_wielded_item_var_2_1", 0),
						(agent_play_sound, ":var_2", "snd_man_yell"),
					(else_try),
						(eq, ":type_wielded_item_var_2_1", 1),
						(agent_play_sound, ":var_2", "snd_woman_yell"),
					(try_end),
					(agent_play_sound, ":value", "snd_wooden_hit_low_armor_high_damage"),
					(agent_get_defend_action, ":attack_action_var_2", ":value"),
					(try_begin),
						(eq, ":attack_action_var_2", 2),
						(neg|position_is_behind_position, 1, 2),
						(agent_get_wielded_item, ":wielded_item_var_2_1", ":value", 1),
						(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
						(eq, ":type_wielded_item_var_2_1", 7),
						(agent_set_animation, ":value", "anim_shield_bash"),
					(else_try),
						(agent_set_animation, ":value", "anim_shield_strike"),
					(try_end),
				(try_end),
				(agent_get_slot, ":var_2_50", ":var_2", 50),
				(val_sub, ":var_2_50", 1),
				(val_max, ":var_2_50", 0),
				(agent_set_slot, ":var_2", 50, ":var_2_50"),
			(try_end)
]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_is_human, ":trigger_param_1"),
			(agent_is_non_player, ":trigger_param_1"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(lt, ":troop_id_trigger_param_1", "trp_kidnapped_girl"),
			(try_for_range, reg0, 0, 4),
				(agent_get_item_slot, ":item_slot_trigger_param_1_reg0", ":trigger_param_1", reg0),
				(is_between, ":item_slot_trigger_param_1_reg0", 1, "itm_cross_end"), #Previously itm_items_end
				(agent_unequip_item, ":trigger_param_1", ":item_slot_trigger_param_1_reg0"),
			(try_end),
			(try_for_range, reg0, 0, 2),
				(agent_get_wielded_item, ":item_slot_trigger_param_1_reg0", ":trigger_param_1", reg0),
				(is_between, ":item_slot_trigger_param_1_reg0", 1, "itm_cross_end"), #Previously itm_items_end
				(agent_unequip_item, ":trigger_param_1", ":item_slot_trigger_param_1_reg0"),
			(try_end),
			(assign, ":var_4", 0),
			(assign, ":var_5", 25),
			(assign, ":var_6", 50),
			(assign, ":var_7", 75),
			(assign, ":var_8", 100),
			(assign, ":var_18", 125),
			(assign, ":var_10", 150),
			(assign, ":var_11", 175),
			(assign, ":var_12", 200),
			(assign, ":value", 0),
			(assign, ":value_2", 0),
			(assign, ":value_3", 0),
			(assign, ":value_4", 0),
			(assign, ":value_5", 0),
			(assign, ":value_6", 0),
			(assign, ":value_7", 0),
			(assign, ":value_8", 0),
			(assign, ":value_9", 0),
			(troop_get_inventory_capacity, ":inventory_capacity_troop_id_trigger_param_1", ":troop_id_trigger_param_1"),
			(try_for_range, ":localvariable", 0, ":inventory_capacity_troop_id_trigger_param_1"),
				(troop_get_inventory_slot, ":inventory_slot_troop_id_trigger_param_1_localvariable", ":troop_id_trigger_param_1", ":localvariable"),
				(is_between, ":inventory_slot_troop_id_trigger_param_1_localvariable", 1, "itm_cross_end"), #Previously itm_items_end
				(item_get_type, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
				(try_begin),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 4),
					(val_add, ":var_4", 1),
					(troop_set_slot, "trp_items_array", slot_troop_relations_begin, ":var_4"),
					(troop_set_slot, "trp_items_array", ":var_4", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 2),
					(val_add, ":var_5", 1),
					(troop_set_slot, "trp_items_array", slot_troop_last_quest_betrayed, ":var_5"),
					(troop_set_slot, "trp_items_array", ":var_5", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_2", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 7),
					(val_add, ":var_6", 1),
					(troop_set_slot, "trp_items_array", slot_troop_recruitment_random, ":var_6"),
					(troop_set_slot, "trp_items_array", ":var_6", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_3", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 3),
					(val_add, ":var_7", 1),
					(troop_set_slot, "trp_items_array", slot_troop_personalitymatch_object, ":var_7"),
					(troop_set_slot, "trp_items_array", ":var_7", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_4", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 10),
					(val_add, ":var_8", 1),
					(troop_set_slot, "trp_items_array", 100, ":var_8"),
					(troop_set_slot, "trp_items_array", ":var_8", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_5", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 6),
					(val_add, ":var_18", 1),
					(troop_set_slot, "trp_items_array", slot_troop_rehire_speech, ":var_18"),
					(troop_set_slot, "trp_items_array", ":var_18", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_6", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 5),
					(val_add, ":var_10", 1),
					(troop_set_slot, "trp_items_array", slot_troop_days_on_mission, ":var_10"),
					(troop_set_slot, "trp_items_array", ":var_10", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_7", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 8),
					(val_add, ":var_11", 1),
					(troop_set_slot, "trp_items_array", 175, ":var_11"),
					(troop_set_slot, "trp_items_array", ":var_11", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_8", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 9),
					(val_add, ":var_12", 1),
					(troop_set_slot, "trp_items_array", 200, ":var_12"),
					(troop_set_slot, "trp_items_array", ":var_12", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_9", 1),
				(try_end),
			(try_end),
			(try_begin),
				(eq, ":value", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_relations_begin),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 1, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_2", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_last_quest_betrayed),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 26, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_3", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_recruitment_random),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 51, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_4", 1),
				(try_begin),
					(eq, ":value_2", 1),
					(store_random_in_range, ":random_in_range_0_100", 0, 100),
					(lt, ":random_in_range_0_100", 65),
				(else_try),
					(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_personalitymatch_object),
					(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 76, ":items_array_relations_begin"),
					(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
					(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
				(try_end),
			(try_end),
			(try_begin),
				(eq, ":value_5", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", 100),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 101, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_6", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_rehire_speech),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 126, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_7", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_days_on_mission),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 151, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_8", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", 175),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 176, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_9", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", 200),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 201, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end)
		])
	] + crouching_triggers ),

	("besiege_inner_battle_town_center", mtf_battle_mode, -1,
	"You attack the walls of the castle...",
	[(0, mtef_attackers|mtef_team_1|mtef_use_exact_number, af_override_horse, aif_start_alarmed, 25, []),
	(2, mtef_defenders|mtef_team_0|mtef_use_exact_number, af_override_horse, aif_start_alarmed, 5, []),
	(23, mtef_defenders|mtef_team_0|mtef_use_exact_number, af_override_horse, aif_start_alarmed, 5, []),
	(24, mtef_defenders|mtef_team_0|mtef_use_exact_number, af_override_horse, aif_start_alarmed, 5, []),
	(25, mtef_defenders|mtef_team_0|mtef_use_exact_number, af_override_horse, aif_start_alarmed, 5, []),
	(26, mtef_defenders|mtef_team_0|mtef_use_exact_number, af_override_horse, aif_start_alarmed, 5, []),
	(27, mtef_defenders|mtef_team_0|mtef_use_exact_number, af_override_horse, aif_start_alarmed, 5, []),
	(28, mtef_defenders|mtef_team_0|mtef_use_exact_number, af_override_horse, aif_start_alarmed, 5, [])],
	[
		


    (7, 0, ti_once,
    [],
    [
	(call_script, "script_assign_traits"),
    ]),


    (0, 0, 1, 
    [
    ],
    [
	(call_script, "script_stumbling"),
    ]),




#Decapitations next level right here.
(ti_on_agent_hit, 0, 0, [(eq, "$dynamic_decap", 1),],
[
   (store_trigger_param_1, ":victim_agent"),
   (store_trigger_param_2, ":attacker_agent"),
   (store_trigger_param_3, ":damage"),
   (assign, ":attacker_item", reg0), ### Transfer the item ID to make sure it dosn't change while the script is running
   (copy_position, pos5, pos0), ### Transfer the position of the hit to make sure it dosn't change while the script is running
   (neq, ":victim_agent", -1),
   (try_begin), #-- Decapitations --#
      (agent_is_human, ":victim_agent"),
	  (ge, ":attacker_item", 0),
	  (assign, ":run", 0), ### Reset the run test variable
#	  (try_begin), ### Special weapons that can decap, ovevrrides the below conditions
#		  (this_or_next|eq, ":attacker_item", "itm_supercrossbow"),
#		  (eq, ":attacker_item", "itm_supersledge"),
#		  (assign, ":run", 1),
	  (try_begin),
		  #(neq, ":attacker_item", "itm_mace_1"), ### List of weapons that cannot decapitate
		  #(neq, ":attacker_item", "itm_mace_2"), ### This would be easier to do with a preperty check (for damage type), but I don't know if that is possible or not
		  #(neq, ":attacker_item", "itm_mace_3"),
		  #(neq, ":attacker_item", "itm_staff"), #Keeping active incase of script errors
		  (agent_get_action_dir, ":attack_dir", ":attacker_agent"), ### Makes sure the attack is either a left or right swing
		  (this_or_next|eq, ":attack_dir", 1), ### Right swing
		  (eq, ":attack_dir", 2), ### Left swing
		  (assign, ":run", 1),
	  (try_end),
	  (eq, ":run", 1), ### One of the checks were true, continue to run script
	  #(assign, reg1, ":damage"), #Debug messages
	  #(display_message, "@Damage: {reg1}"),
	  
	  (assign, ":run", 0), ### Reset the run test variable
	  (try_begin),
		(ge, ":damage", "$decap_damage"), ### 30 Minimum damage required to decapitate an agent
		(assign, ":run", 1),
		
#	  (else_try),  ### If debugging mode is on, this bypasses the damage requirement check
#		  (eq,"$g_decapitations_debugging", 1),
#		  (assign, ":run", 1),
#		  (display_message, "@Decap minimum DMG req bypassed"),
	  (try_end),
	  (eq, ":run", 1),
	  
	  (store_agent_hit_points, ":hp", ":victim_agent", 1),
	  (val_add, ":hp", 10), ### 10 Victim must have the negative of this hp or below after hit for the script to move on (never put this value below 0 since the agent has to be absolutley positvely dead)!
	  (ge, ":damage", ":hp"),
	  
	  
	  ### Compare the hit position to the agent's position
      (agent_get_position, pos4, ":victim_agent"),
      (get_distance_between_positions, ":distance", pos4, pos5), 
	  (agent_get_horse, ":is_mounted", ":victim_agent"),
	  (try_begin), ### If the agent is on horseback, these values are used (note that these values will not be exactly correct if the horse is very large or very small)
		(ge, ":is_mounted", 0), ### Will be -1 if no horse is to be found, so anything above means that the agent is mounted
		(assign, ":min_distance", 240), ### Minimum distance from the agent's horse's hooves from which the hit is valid (240 is an approximate value)
		(assign, ":max_distance", 260), ### Maximum distance from the agent's horse's hooves to which the hit is valid (260 is an approximate value)
	  (else_try),  ### If the agent is on foot, these values are used
	    (assign, ":min_distance", 160), ### Minimum distance from the agent's feet from which the hit is valid (160 = slightly below the neck)
	    (assign, ":max_distance", 176), ### Maximum distance from the agent's feet to which the hit is valid (176 = near the nose)
	  (try_end),
      (is_between, ":distance", ":min_distance", ":max_distance"), ### Check to see if the hit is within the allowed area
	  
	  
	  (assign, ":run", 0), ### Default variable value before damage test
	  (try_begin),
		  (store_div, ":chance", ":damage", "$decap_damage_divider"), ### Chance of decap is damage / 4 right now. Lower this value for higher chances of decapitation (or press M+Right Ctrl for debug more if you just want to test easy decaps in-game).
		  
		  #(assign, reg1, ":chance"), #Debug messages
		  #(display_message, "@Decap chance is: {reg1}"),
		  (store_random_in_range, ":diceroll", 0, "$decap_randomizer"), ### Randomizer, 0-100
		  
		  #(assign, reg1, ":diceroll"), #Debug messages
		  #(display_message, "@Diceroll: {reg1}"),
		  (le, ":diceroll", ":chance"), ### ":diceroll" must be less than or equal to ":chance", if it is, decapitation occurs!
		  
		  (assign, ":run", 1), ### SUCCESS!
		  
#     (else_try),  ### If debugging mode is on, bypass chance calculation
#		  (eq,"$g_decapitations_debugging", 1),
#		  (assign, ":run", 1),
#		  (display_message, "@Decap chance calc bypassed"),
	  (try_end),  
	  (eq, ":run", 1), ### Time for the fun stuff!

	  ### Gender test for spawning the right head type
	  (assign, ":head_type", "itm_cut_off_head_male"),
	  (agent_get_troop_id, ":victim_troop", ":victim_agent"),
	  (try_begin),
	    (ge, ":victim_troop", 0),
		(troop_get_type,":victim_gender",":victim_troop"),
		(eq, ":victim_gender", 1),
		(assign, ":head_type", "itm_cut_off_head_female"),
	  (try_end),
	  
	  ### Randomize the spawned head's and/or helmet's position and orientation
	  (store_random_in_range, ":z_rotation", 0, 360),
	  (store_random_in_range, ":y_rotation", -60, 60),
	  (store_random_in_range, ":x_pos", -90, 90),
	  (store_random_in_range, ":y_pos", -90, 90),
	  (position_rotate_z, pos4,":z_rotation"),
	  (position_rotate_y, pos4,":y_rotation"),
	  (position_move_x, pos4, ":x_pos"),
	  (position_move_y, pos4, ":y_pos"),
	  (position_set_z_to_ground_level, pos4),
	  (position_move_z, pos4, 5),
	  (set_spawn_position, pos4),
	  (assign, ":prunetime", 360), ### This is the time in seconds before the spawned head or helmet gets pruned (removed). Recommended to keep it above 0 to make sure it gets removed eventually or when the scene resets, to prevent performance issues.
	  
	  #(spawn_item, ":head_type", 0, ":prunetime"), ### This is the old way of spawning the head on the ground with the helmet, disabled because of the new dynamic heads. You can comment away (disable) the dynamic heads spawning further down and uncomment this line for a less performance-needing approach (with no physics involved).
	  
	  ### Does the agent have a helmet or hat equipped?
      (agent_get_item_slot, ":item", ":victim_agent", 4), #head slot
      (try_begin),
         (ge, ":item", 1), ### Does it?
         (agent_unequip_item, ":victim_agent", ":item"), ### Yes it does. Unequip it to allow replacement by the invisible helmet further down
		 (try_begin),
			 ### Don't spawn items with "itp_attatch_armature" flag: rigging causes floating bugs
			 ### This would be much better to do with an item flag check, but I haven't found any way to do that
			 #(neq, ":item", "itm_with_itp_attatch_armature"),
			 #(neg|is_between,":item","start_of_itm_range_with_itp_attatch_armature","end_of_itm_range_with_itp_attatch_armature"),
			#(set_spawn_position, pos4),
			(spawn_item, ":item", 0, ":prunetime"), ### Spawns the agent's currently equipped headgear on the dropped head's position
		 (try_end),
      (try_end),
	  
	  (agent_equip_item, ":victim_agent", "itm_invisible_head"), ### Put an invisible helmet on the agent's head to "remove" it
	  
	  
	  (agent_get_position, pos4, ":victim_agent"), ### Refreshes the agent's position
	  (position_move_z, pos4, ":min_distance"), ### Move to the where the neck used to be attached
	  
	  
	  ### Blood effects! The last variable is the strength. Lower or increase it for more/less blood (or tweak the particle effects themselves in "module_particle_systems.py").
      (particle_system_burst, "psys_blood_decapitation", pos4, 40), 
	  (particle_system_burst, "psys_game_blood", pos4, 10),
	  (particle_system_burst, "psys_game_blood_2", pos4, 10),
	  
	  (play_sound_at_position, "snd_decapitation_battle", pos4), ### Play some nasty sounds
	  
	  
	  ### Dynamic head spawning! See the bottom of "module_scene_props.py" for physics-related options and more.
	  (position_move_z, pos4, 20),
	  (set_spawn_position, pos4),
	  (assign, ":head_type", "spr_head_dynamic_male"),
	  (try_begin), ### Gender check (for determening the type of head)
		(eq, ":victim_gender", 1),
		(assign, ":head_type", "spr_head_dynamic_female"),
	  (try_end),
	  (spawn_scene_prop, ":head_type"),
	  
		#Addition check if we should allow the message to appears
			(eq, "$allow_decap_mess", 1), #Possible script error

	  ### This below is for the text that shows up when somebody is decapitated.
	  
	  ### Who decapitated who?
		(agent_get_troop_id, ":attacker_troop", ":attacker_agent"),
		(str_store_troop_name, s0, ":attacker_troop"),

		(agent_get_troop_id, ":victim_troop", ":victim_agent"),
		(str_store_troop_name, s1, ":victim_troop"),

	  
	  ### Colour check (friend or foe?)
	  (get_player_agent_no, ":my_agent"),
	  (agent_get_team, ":my_team", ":my_agent"),
	  (agent_get_team, ":victim_team", ":victim_agent"),
	  (try_begin), ### Display it!
		  (neq, ":my_team", ":victim_team"),
		  (display_message, "@>>> {s0} decapitated {s1}!", 0xFF33DD11), ## Green
	  (else_try),
		  (display_message, "@>>> {s0} decapitated {s1}!", 0xFFFF4422), ## Red
	  (try_end),
   (try_end), #-- Decapitations END --#
   
   ]),



	#AI Sound horn!
			(0.0, 0.0, 2.0,
		[
			##(store_random_in_range, ":horn_chance", 0, 22),
			#(eq, ":horn_chance", 0),
		],
		[
			(call_script, "script_formation_ai_sound_horn"),
		]),
	#AI Sound horn end!










			##################################################
##### troop_ratio_bar
##################################################
      (0, 0, ti_once, [
	  (eq, "$use_troopbars", 1),
	  ], [
	  (start_presentation, "prsnt_troop_ratio_bar"),
	  ]),
##################################################
##### troop_ratio_bar
##################################################
	
###Voice-over for Infantry, archers & Cavalry
		
		(0.0, 0.3, 0.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 29) #Everyone!
		],

		[
		(call_script, "script_identify_battle_voices_all")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 30) #Infantry
		],

		[
		(call_script, "script_identify_battle_voices_inf")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 31) #Archers
		],

		[
		(call_script, "script_identify_battle_voices_archers")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 32) #Cavalry
		],

		[
		(call_script, "script_identify_battle_voices_cav")
		]),
		###Voice-over for Infantry, archers & Cavalry	
		
		
		
				
					#####MUSICBOX SIEGE VARIANT
	(ti_after_mission_start, 0, ti_once, [ #680 #(ti_after_mission_start, 0, 680, [ #680
 #Obtained from Mod Options, affects mission templates, range: ALL SP Hostile music, co-op variant is additional_music_coop.
 (eq, "$additional_music", 1),
	],
		
  [
    #(play_track, "track_silence", 1), #Stop current module track
	   (music_set_situation, mtf_sit_fight), #Field
   #(music_set_situation, mtf_sit_siege), #Siege probably don't use
	(assign, "$music_timer", 0), #Patch
  #Randomize chance is 1 in a 5 (20%)
  
  #Field related extend to sieges
  (store_random_in_range, ":randomizer", 0, 2), #50% Chance of randomization
  (try_begin),
  (eq, ":randomizer", 0),
  (store_random_in_range, ":euro_randomizernext", 1, 11),
  (store_random_in_range, ":medi_randomizer", 1, 6),
  (store_random_in_range, ":arab_randomizer", 1, 8),
  (assign, "$track_count_field_siege", ":euro_randomizernext"),
  (assign, "$track_count_field_medi_siege", ":medi_randomizer"),
  (assign, "$track_count_field_arabs_siege", ":arab_randomizer"),
  (try_end),
  #Field related extend to sieges
  ]),
	
	(0, 0, 3, [ #680 #(ti_after_mission_start, 0, 680, [ #680
	(eq, "$additional_music", 1),
	 #Obtained from Mod Options, affects mission templates, range: ALL SP Hostile music, co-op variant is additional_music_coop.
	],
		
  [
		  #(display_message, "@Executing music code"),
		  (store_mission_timer_b, ":time_msec"),
		  #(assign, reg10, ":time_msec"),
          #(str_clear, s10),
          #(str_store_string, s10, "@Mission timer B for music: {reg10}"),
		  #(display_message, s10),
			#if next action time is lower than current time, play the sound
			(ge, ":time_msec", "$music_timer"),
			(reset_mission_timer_b), #Resetting mission timer, too.
			(assign, "$music_timer", 0),# Resetting value when track ends.
		
  #Euro only
     (try_begin),
      (ge, "$track_count_field_siege", 11),
      (assign, "$track_count_field_siege", 1),
    (else_try),
      (val_add, "$track_count_field_siege", 1),
	  (ge, "$track_count_field_siege", 11),
	  (assign, "$track_count_field_siege", 1),
    (try_end),
  #Euro only
  
  #Mediterrain only
  
       (try_begin),
      (ge, "$track_count_field_medi_siege", 6),
      (assign, "$track_count_field_medi_siege", 1),
    (else_try),
      (val_add, "$track_count_field_medi_siege", 1),
	  (ge, "$track_count_field_medi_siege", 6),
	  (assign, "$track_count_field_medi_siege", 1),
    (try_end),
  #Mediterrain only
  
  
  #Arabs only

       (try_begin),
      (ge, "$track_count_field_arabs_siege", 8),
      (assign, "$track_count_field_arabs_siege", 1),
    (else_try),
      (val_add, "$track_count_field_arabs_siege", 1),
	  (ge, "$track_count_field_arabs_siege", 8),
	  (assign, "$track_count_field_arabs_siege", 1),
    (try_end),
	#Arabs only
  
  #Pause between music length in seconds
  #(val_add, "$music_timer", 2),# 5 seconds added
  #Pause between music length in seconds
  
	(party_get_current_terrain, ":current_terrain_main_party", "p_main_party"), #Co-Op variant of this trigger should use scenes in_between rather than terrain because player can't obtain terrain in co-op sessions.
	(try_begin),
	(this_or_next|eq, ":current_terrain_main_party", 1), #rt_mountain
	(this_or_next|eq, ":current_terrain_main_party", 2), #rt_steppe
	(eq, ":current_terrain_main_party", 10), #rt_steppe_forest
	#Begin mediterrain music 5 tracks total
	(try_begin),
	(eq, "$track_count_field_medi_siege", 1), #
	(play_track, "track_medib3", 2),
	(val_add, "$music_timer", 209),# 1 second added
	(else_try),
	
	(eq, "$track_count_field_medi_siege", 2), #
	(play_track, "track_medib4", 2),
	(val_add, "$music_timer", 237),#
	(else_try),
	
	(eq, "$track_count_field_medi_siege", 3), #
	(play_track, "track_medib5", 2),
	(val_add, "$music_timer", 229),#
	(else_try),

	(eq, "$track_count_field_medi_siege", 4), #
	(play_track, "track_medis1", 2),
	(val_add, "$music_timer", 195),#
	(else_try),
	(eq, "$track_count_field_medi_siege", 5), #
	(play_track, "track_medis2", 2),
	(val_add, "$music_timer", 66),#
	(try_end),
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 3), #rt_plain
	(this_or_next|eq, ":current_terrain_main_party", 11), #rt_forest
	(eq, ":current_terrain_main_party", 9), #rt_mountain_forest
	#Begin Euro Music
	(try_begin),
	(eq, "$track_count_field_siege", 1), #
	(play_track, "track_euros1", 2),
	(val_add, "$music_timer", 162),#
	(else_try),
	(eq, "$track_count_field_siege", 2), #
	(play_track, "track_euros2", 2),
	(val_add, "$music_timer", 221),#
	(else_try),
	
	(eq, "$track_count_field_siege", 3), #
	(play_track, "track_euros3", 2),
	(val_add, "$music_timer", 190),#
	(else_try),
	
	(eq, "$track_count_field_siege", 4), #
	(play_track, "track_euros4", 2),
	(val_add, "$music_timer", 317),#
	(else_try),
	
	(eq, "$track_count_field_siege", 5), #
	(play_track, "track_euros5", 2),
	(val_add, "$music_timer", 59),#
		(else_try),
	
	(eq, "$track_count_field_siege", 6), #
	(play_track, "track_euros6", 2),
	(val_add, "$music_timer", 59),#
		(else_try),
	
	(eq, "$track_count_field_siege", 7), #
	(play_track, "track_euros7", 2),
	(val_add, "$music_timer", 85),#
		(else_try),
	
	(eq, "$track_count_field_siege", 8), #
	(play_track, "track_euros8", 2),
	(val_add, "$music_timer", 82),#
		(else_try),
	
	(eq, "$track_count_field_siege", 9), #
	(play_track, "track_euros9", 2),
	(val_add, "$music_timer", 199),#
		(else_try),
	
	(eq, "$track_count_field_siege", 10), #
	(play_track, "track_euros10", 2),
	(val_add, "$music_timer", 281),#
	(try_end),
	
	
	
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 4), #rt_snow
	(this_or_next|eq, ":current_terrain_main_party", 12), #rt_snow_forest
	(eq, ":current_terrain_main_party", 7), #rt_bridge
	#Begin Euro Music
	(try_begin),
	(eq, "$track_count_field_siege", 1), #
	(play_track, "track_euros1", 2),
	(val_add, "$music_timer", 162),#
	(else_try),
	(eq, "$track_count_field_siege", 2), #
	(play_track, "track_euros2", 2),
	(val_add, "$music_timer", 221),#
	(else_try),
	
	(eq, "$track_count_field_siege", 3), #
	(play_track, "track_euros3", 2),
	(val_add, "$music_timer", 190),#
	(else_try),
	
	(eq, "$track_count_field_siege", 4), #
	(play_track, "track_euros4", 2),
	(val_add, "$music_timer", 317),#
	(else_try),
	
	(eq, "$track_count_field_siege", 5), #
	(play_track, "track_euros5", 2),
	(val_add, "$music_timer", 59),#
		(else_try),
	
	(eq, "$track_count_field_siege", 6), #
	(play_track, "track_euros6", 2),
	(val_add, "$music_timer", 59),#
		(else_try),
	
	(eq, "$track_count_field_siege", 7), #
	(play_track, "track_euros7", 2),
	(val_add, "$music_timer", 85),#
		(else_try),
	
	(eq, "$track_count_field_siege", 8), #
	(play_track, "track_euros8", 2),
	(val_add, "$music_timer", 82),#
		(else_try),
	
	(eq, "$track_count_field_siege", 9), #
	(play_track, "track_euros9", 2),
	(val_add, "$music_timer", 199),#
		(else_try),
	
	(eq, "$track_count_field_siege", 10), #
	(play_track, "track_euros10", 2),
	(val_add, "$music_timer", 281),#
	(try_end),
	
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 5), #rt_desert
	(eq, ":current_terrain_main_party", 13), #rt_desert_forest
	#Begin arab music
	(try_begin),
	(eq, "$track_count_field_arabs_siege", 1), #
	(play_track, "track_arabs1",  2),
	(val_add, "$music_timer", 198),#
	(else_try),
	(eq, "$track_count_field_arabs_siege", 2), #
	(play_track, "track_arabs2", 2),
	(val_add, "$music_timer", 112),#
	
	(else_try),
	(eq, "$track_count_field_arabs_siege", 3), #
	(play_track, "track_medis1", 2),
	(val_add, "$music_timer", 195),#
	(else_try),
	
	(eq, "$track_count_field_arabs_siege", 4), #
	(play_track, "track_arabs4", 2),
	(val_add, "$music_timer", 79),#
		(else_try),
	
	(eq, "$track_count_field_arabs_siege", 5), #
	(play_track, "track_arabs5", 2),
	(val_add, "$music_timer", 394),#
	
			(else_try),
	(eq, "$track_count_field_arabs_siege", 6), #
	(play_track, "track_arabs3", 2),
	(val_add, "$music_timer", 80),#
			(else_try),
	(eq, "$track_count_field_arabs_siege", 7), #
	(play_track, "track_medis2", 2),
	(val_add, "$music_timer", 66),#
	(try_end),
	(try_end),
	
  ]),
	
	#####MUSICBOX END
			#####Camera mode by Rubik None-Coop Version Begin
		(0, 0, 0, [(eq, "$extended_camera_mode", 1)],
  [
    (get_player_agent_no, ":player_agent"),
    (agent_get_look_position, pos1, ":player_agent"),
    (position_move_z, pos1, "$g_camera_z"),
    (position_move_y, pos1, "$g_camera_y"),
    (agent_get_horse, ":horse_agent", ":player_agent"),
    (try_begin),
      (ge, ":horse_agent", 0),
      (position_move_z, pos1, 80),
    (try_end),
    (mission_cam_set_position, pos1),
    (try_begin),
      (key_is_down, key_left_control),
      (assign, ":move_val", 50),
    (else_try),
      (assign, ":move_val", 10),
    (try_end),
    (try_begin),
      (key_clicked, key_up),
      (mission_cam_set_mode, 1),
      (val_add, "$g_camera_z", ":move_val"),
    (else_try),
      (key_clicked, key_down),
      (mission_cam_set_mode, 1),
      (val_sub, "$g_camera_z", ":move_val"),
    (else_try),
      (key_clicked, key_left),
      (mission_cam_set_mode, 1),
      (val_add, "$g_camera_y", ":move_val"),
    (else_try),
      (key_clicked, key_right),
      (mission_cam_set_mode, 1),
      (val_sub, "$g_camera_y", ":move_val"),
    (try_end),
    (try_begin),
      (this_or_next|game_key_clicked, gk_view_char),
      (this_or_next|game_key_clicked, gk_zoom),
      (game_key_clicked, gk_cam_toggle),
      (mission_cam_set_mode, 0),
    (try_end),
  ]),
  #####Camera mode by Rubik None-Coop Version End
		
#				#####MUSICBOX DEBUG
#		(0, 0, 10, [
#		],
#  [
#		(party_get_current_terrain, ":current_terrain_main_party", "p_main_party"),
#	      #BEGIN DEBUG
#          (assign, reg10, ":current_terrain_main_party"),
#          (str_clear, s10),
#          (str_store_string, s10, "@Terrain: {reg10}"),
#		  (display_message, s10),
#          #END DEBUG
#  ]),
###########Torch by troycall/Envious Arm begin

																	#(-25.0, 0.0, 0.0, #Enabling this forces random chance to be 100%
																	#(ti_on_agent_spawn, 0, 0, #Enabling this forces random chance to be 100%
																	(20, 0, ti_once, #Proper one, but reinforcements do not get assigned torches.
        [
          (mission_tpl_are_all_agents_spawned), #From VC Header_Operations to prevent weird behavior.
          (is_currently_night) #Check if currently night time
        ],
        [

		  ####DEFAULT
		   #(try_for_agents, ":agent"),
            #(agent_get_wielded_item, ":item", ":agent", 1),
            #(gt, ":item", -1),
            #(agent_unequip_item, ":agent", ":item"),
            #(agent_equip_item, ":agent", "itm_torch"),
            #(agent_set_wielded_item, ":agent", "itm_torch"),           
          #(try_end),
		  ####END DEFAULT
		  
		  (try_for_agents, ":agent"), #Try for agents...
		  #Extension
		  (agent_is_alive, ":agent"), #For performance reasons
		  #End
		  (agent_is_human, ":agent"), #Performance
          (agent_is_non_player, ":agent"), #Uncommenting this includes player on spawning with torch, may be necessary to uncomment at module_coop_mission_templates.
		  


		 ##########Default Order
		 #######		  (agent_is_human, ":agent"), #Performance
         #######(agent_is_non_player, ":agent"), #Uncommenting this includes player on spawning with torch, may be necessary to uncomment at module_coop_mission_templates.
		 #######
		 ########Extension
		 #######(agent_is_active, ":agent"), #For performance reasons
		 #######(agent_is_alive, ":agent"), #For performance reasons
		 ########End
		  ############
		  		  
				#  (try_begin),
				  
		#		          (agent_get_wielded_item, ":rhand", ":agent", 0),  #Right hand
		#  (assign, ":rhanditem", 0), # Preparing local variable.
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000000000100),
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000004000000),
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000008000000),
		#  (neg|item_has_capability, ":rhanditem", 0x0000000170000000),
		# 

		  #
		  
          #BEGIN DEBUG
          #(assign, reg10, ":agent"),
          #(str_clear, s10),
          #(str_store_string, s10, "@New agent: {reg10}"),
          #END DEBUG
		  #(agent_get_wielded_item, ":rhanditem", ":agent", 0),  #Obtain right hand item
         (agent_get_wielded_item, ":rhanditem", ":agent", 0),  #Obtain right hand item
          (agent_get_wielded_item, ":item", ":agent", 1), # Left hand: shield or -1
          #BEGIN DEBUG
          #(assign, reg10, ":item"),
          #(str_store_string, s10, "@{s10}. LH: {reg10}"),
		  #(display_message, "@Main block Phase A finalized"),
          #END DEBUG
		  #(item_get_type, ":type", ":rhanditem"), #If right hand item is polearm, stop reading rest of code.
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_club_with_spike_head", "itm_wooden_shield"),
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_light_lance", "itm_wooden_shield"),
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_light_lance", "itm_wooden_shield"),
          (try_begin),
		  (neg|is_between, ":rhanditem", "itm_club_with_spike_head", "itm_wooden_shield"),
		  (neg|is_between, ":rhanditem", "itm_lance_banner_jer", "itm_cross_end"), #Update item slots
		  #(neg|troop_has_item_equipped, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		  #(neq, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		  
		# (neg|eq, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		    (gt, ":item", -1), #Check if the agent wields any item in the left hand, this or next.
            #(neq, ":item", -1),# Check if the agent wields any item in the left hand
            (neq, ":item", "itm_torch"), #If agent is using torch, ignore him.
            #(display_message, "@PASSED neg tests"), #Debug message

			
            (store_random_in_range, ":chance", 1, 101), # Chance of item being assigned
            (try_begin),
			  (le, ":chance", "$torch_chance"), #25% = 25
				#lt           = neg | ge # less than		-- (lt,<value>,<value>),
				#neq          = neg | eq # not equal to		-- (neq,<value>,<value>),
				#le           = neg | gt # less or equal to	-- (le,<value>,<value>),
              (agent_unequip_item, ":agent", ":item"),
			  
              #BEGIN DEBUG
              #(str_store_item_name, s11, ":item"),
              #(str_store_string, s10, "@{s10}. Removed item: {s11}"),
			  #(display_message, "@(agent_unequip_item, :agent, :item PASSED."),
              #END DEBUG

               
                (agent_equip_item, ":agent", "itm_torch"), #Tell agent to equip the item
                 #(display_message, "@(agent_equip_item, :agent, :item PASSED."),
                  (agent_set_wielded_item, ":agent", "itm_torch"), #Required for infantry only, cavarly can work without it.
                  #(display_message, "@(agent_set_wielded_item, :agent, :item PASSED."),
                 
                 
                  #BEGIN DEBUG
                #(else_try),
                  #(str_store_string, s10, "@{s10}. Failed random chance."),
                (try_end),
               
              #(else_try),
                #(str_store_string, s10, "@{s10}. Invalid agent for torch"),
              (try_end),
             
              #(display_message, s10),
			  (try_end),
              #END DEBUG
			#  (try_end),
      ]),
	  
###########Torch by troycall/Envious Arm end


		(-25.0, 0.0, 0.0,
		[
			(eq, "$freelancer_state", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(ge, ":player_agent_no", 0),
			(agent_is_active, ":player_agent_no"),
			(store_trigger_param_1, ":trigger_param_1"),
			(eq, ":player_agent_no", ":trigger_param_1"),
			(agent_get_team, ":team_player_agent_no", ":player_agent_no"),
			(team_set_order_listener, ":team_player_agent_no", -1),
			(val_add, ":team_player_agent_no", 2),
			(agent_set_team, ":player_agent_no", ":team_player_agent_no")
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(team_set_relation, 0, 2, 1),
			(team_set_relation, 1, 3, 1),
			(call_script, "script_change_banners_and_chest")
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_change_banners_and_chest")
		]),

		(-21.0, 0.0, 0.0,
		[],

		[
			(try_begin),
				(eq, "$g_battle_won", 1),
				(call_script, "script_count_mission_casualties_from_agents"),
				(finish_mission, 0),
			(else_try),
				(eq, "$pin_player_fallen", 1),
				(eq, "$g_battle_won", 0),
				(call_script, "script_simulate_retreat", 5, 20, 1),
				(str_store_string, 5, "str_retreat"),
				(call_script, "script_count_mission_casualties_from_agents"),
				(set_mission_result, -1),
				(finish_mission, 0),
			(else_try),
				(eq, "$pin_player_fallen", 1),
				(eq, "$g_battle_won", -1),
				(call_script, "script_count_mission_casualties_from_agents"),
				(finish_mission, 0),
			(else_try),
				(call_script, "script_cf_check_enemies_nearby"),
				(question_box, "str_do_you_want_to_retreat"),
			(else_try),
				(get_player_agent_no, ":player_agent_no"),
				(neg|agent_is_alive, ":player_agent_no"),
				(call_script, "script_cf_check_enemies_nearby"),
				(question_box, "str_do_you_want_to_retreat"),
			(else_try),
				(display_message, "str_can_not_retreat"),
			(try_end)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(call_script, "script_troop_agent_set_banner", "tableau_game_troop_label_banner", ":trigger_param_1", ":troop_id_trigger_param_1")
		]),

		(-8.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(eq, ":trigger_param_1", 0),
			(assign, "$pin_player_fallen", 0),
			(str_store_string, 5, "str_retreat"),
			(call_script, "script_simulate_retreat", 5, 20, 0),
			(assign, "$g_battle_result", -1),
			(set_mission_result, -1),
			(call_script, "script_count_mission_casualties_from_agents"),
			(finish_mission, 0)
		]),

		(0.0, 0.0, ti_once,
		[],

		[
			(assign, "$g_battle_won", 0),
						(try_begin),
			(eq, "$additional_music", 0),
			(call_script, "script_music_set_situation_with_culture", 4096),
			(try_end),
			(assign, "$dmod_current_agent", -1),
			(assign, "$dmod_move_camera", -1)
		]),

		(0.0, 0.0, ti_once,
		[
			(assign, "$defender_team", 0),
			(assign, "$attacker_team", 1),
			(assign, "$defender_team_2", 2),
			(assign, "$attacker_team_2", 3)
		],

		[]),

		(2.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_check_friendly_kills")
		]),

		(5.0, 60.0, ti_once,
		[
			(store_mission_timer_a, reg1),
			(ge, reg1, 10),
			(all_enemies_defeated, 5),
			(set_mission_result, 1),
			(display_message, "str_msg_battle_won"),
			#(play_sound, "snd_won_battle"), #Moved to victorious main menu
			(assign, "$g_battle_won", 1),
			(assign, "$g_battle_result", 1),
			(call_script, "script_play_victorious_sound")
		],

		[
			(call_script, "script_count_mission_casualties_from_agents"),
			(finish_mission, 1)
		]),

		(10.0, 0.0, 0.0, # Battle won/lost messages!
		[],

		[
			(eq, "$g_battle_won", 1),
			#(play_sound, "snd_won_battle"), #Moved to victorious main menu
			(display_message, "str_msg_battle_won")
		]),

		(1.0, 60.0, ti_once,
		[
			(store_mission_timer_a, reg1),
			(ge, reg1, 10),
			(main_hero_fallen),
			(assign, ":var_1", 0),
			(try_for_agents, ":var_2"),
				(agent_is_ally, ":var_2"),
				(agent_is_alive, ":var_2"),
				(val_add, ":var_1", 1),
			(try_end),
			(eq, ":var_1", 0),
			(set_mission_result, -1),
						(try_begin),
			(eq, "$colored_messages", 1),
			(display_message, "@Battle lost...", 0x00f78078),
			(else_try),
			(display_message, "@Battle lost..."),
			(try_end),
			(assign, "$g_battle_won", -1),
			(assign, "$g_battle_result", -1)
		],

		[
			(call_script, "script_count_mission_casualties_from_agents"),
			(finish_mission, 0)
		]),

		(10.0, 0.0, 0.0, # Battle won/lost messages!
		[],

		[
			(eq, "$g_battle_won", -1),
						(try_begin),
			(eq, "$colored_messages", 1),
			(display_message, "@Battle lost! Press tab key to leave...", 0x00f78078),
			(else_try),
			(display_message, "@Battle lost! Press tab key to leave..."),
			(try_end),
			#(play_sound, "snd_battle_sounds"), #Moved to your companions carry you away from the fighting menu
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(gt, "$dmod_current_agent", 0),
			(eq, "$setting_use_dmod", 1),
			(eq, "$dmod_move_camera", 1),
			(agent_get_position, 1, "$dmod_current_agent"),
			(position_move_z, 1, 300),
			(position_move_y, 1, -300),
			(agent_get_horse, ":horse_l_dmod_current_agent", "$dmod_current_agent"),
			(try_begin),
				(ge, ":horse_l_dmod_current_agent", 0),
			(try_end),
			(try_begin),
				(eq, "$pop_camera_on", 1),
				(assign, "$pop_camera_on", 0),
			(try_end),
			(mission_cam_set_position, 1),
			(mission_cam_set_mode, 1),
			(set_fixed_point_multiplier, 100)
		],

		[]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(eq, "$setting_use_dmod", 1),
			(key_clicked, 238),
			(main_hero_fallen),
			(call_script, "script_dmod_cycle_forwards")
		],

		[]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(eq, "$setting_use_dmod", 1),
			(key_clicked, 239),
			(main_hero_fallen),
			(call_script, "script_dmod_cycle_backwards")
		],

		[]),

		(0.0, 0.0, ti_once,
		[],

		[
			(assign, "$pop_camera_on", 0),
			(assign, "$pop_camera_mouse_center_x", 500),
			(assign, "$pop_camera_mouse_center_y", 375),
			(assign, "$pop_camera_mouse_x", "$pop_camera_mouse_center_x"),
			(assign, "$pop_camera_mouse_y", "$pop_camera_mouse_center_y"),
			(assign, "$pop_camera_mouse_counter", 0)
		]),

		(0.0, 4.0, ti_once,
		[
			(eq, "$enable_deahtcam", 1),
			(main_hero_fallen),
			(eq, "$pop_camera_on", 0),
			(assign, "$tom_sand_storm", 0)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_position, 1, ":player_agent_no"),
			(position_get_x, ":position_x_1", 1),
			(position_get_y, ":position_y_1", 1),
			(init_position, 47),
			(position_set_x, 47, ":position_x_1"),
			(position_set_y, 47, ":position_y_1"),
			(position_set_z_to_ground_level, 47),
			(position_move_z, 47, 250),
			(mission_cam_set_mode, 1, 0, 0),
			(mission_cam_set_position, 47),
			(assign, "$pop_camera_rotx", 0),
			(assign, "$pop_camera_on", 1)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(this_or_next|eq, "$dmod_move_camera", 1),
			(eq, "$pop_camera_on", 1),
			(this_or_next|game_key_clicked, 0),
			(this_or_next|game_key_is_down, 0),
			(this_or_next|game_key_clicked, 1),
			(this_or_next|game_key_is_down, 1),
			(this_or_next|game_key_clicked, 2),
			(this_or_next|game_key_is_down, 2),
			(this_or_next|game_key_clicked, 3),
			(game_key_is_down, 3)
		],

		[
			(try_begin),
				(eq, "$dmod_move_camera", 1),
				(mission_cam_set_mode, 1, 0, 0),
				(assign, "$pop_camera_rotx", 0),
				(assign, "$pop_camera_on", 1),
				(assign, "$dmod_move_camera", 0),
			(try_end),
			(mission_cam_get_position, 47),
			(assign, ":value", 0),
			(assign, ":value_2", 0),
			(try_begin),
				(this_or_next|game_key_clicked, 0),
				(game_key_is_down, 0),
				(assign, ":value_2", 10),
			(try_end),
			(try_begin),
				(this_or_next|game_key_clicked, 1),
				(game_key_is_down, 1),
				(assign, ":value_2", -10),
			(try_end),
			(try_begin),
				(this_or_next|game_key_clicked, 2),
				(game_key_is_down, 2),
				(assign, ":value", -10),
			(try_end),
			(try_begin),
				(this_or_next|game_key_clicked, 3),
				(game_key_is_down, 3),
				(assign, ":value", 10),
			(try_end),
			(position_move_x, 47, ":value"),
			(position_move_y, 47, ":value_2"),
			(mission_cam_set_position, 47)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(eq, "$pop_camera_on", 1),
			(neg|is_presentation_active, "prsnt_battle"),
			(mouse_get_position, 1),
			(set_fixed_point_multiplier, 1000),
			(position_get_x, reg1, 1),
			(position_get_y, reg2, 1),
			(set_fixed_point_multiplier, 100),
			(this_or_next|neq, reg1, "$pop_camera_mouse_center_x"),
			(neq, reg2, "$pop_camera_mouse_center_y")
		],

		[
			(assign, ":value", 1),
			(try_begin),
				(eq, reg1, "$pop_camera_mouse_x"),
				(eq, reg2, "$pop_camera_mouse_y"),
				(val_add, "$pop_camera_mouse_counter", 1),
				(try_begin),
					(gt, "$pop_camera_mouse_counter", 50),
					(assign, "$pop_camera_mouse_center_x", reg1),
					(assign, "$pop_camera_mouse_center_y", reg2),
					(assign, "$pop_camera_mouse_counter", 0),
				(try_end),
				(assign, ":value", 0),
			(try_end),
			(eq, ":value", 1),
			(assign, "$pop_camera_mouse_counter", 0),
			(assign, "$pop_camera_mouse_x", reg1),
			(assign, "$pop_camera_mouse_y", reg2),
			(mission_cam_get_position, 47),
			(store_sub, ":value_2", "$pop_camera_mouse_center_x", reg1),
			(store_sub, ":value_3", reg2, "$pop_camera_mouse_center_y"),
			(try_for_range, ":number", 0, 2),
				(try_begin),
					(eq, ":number", 1),
					(assign, ":value_2", ":value_3"),
				(try_end),
				(this_or_next|lt, ":value_2", -2),
				(gt, ":value_2", 2),
				(assign, ":value_4", 1),
				(try_begin),
					(lt, ":value_2", 0),
					(assign, ":value_4", -1),
				(try_end),
				(val_abs, ":value_2"),
				(val_sub, ":value_2", 2),
				(convert_to_fixed_point, ":value_2"),
				(store_sqrt, ":value_2", ":value_2"),
				(convert_from_fixed_point, ":value_2"),
				(val_clamp, ":value_2", 1, 64),
				(val_mul, ":value_2", ":value_4"),
				(try_begin),
					(eq, ":number", 0),
					(store_mul, ":value_5", "$pop_camera_rotx", -1),
					(position_rotate_x, 47, ":value_5"),
					(position_rotate_z, 47, ":value_2"),
					(position_rotate_x, 47, "$pop_camera_rotx"),
				(try_end),
				(try_begin),
					(eq, ":number", 1),
					(position_rotate_x, 47, ":value_2"),
					(val_add, "$pop_camera_rotx", ":value_2"),
				(try_end),
			(try_end),
			(mission_cam_set_position, 47)
		]),

		(1.0, 4.0, ti_once,
		[
			(main_hero_fallen)
		],

		[
			(assign, "$pin_player_fallen", 1),
			(neq, "$use_player_auxiliary", 1),
			(display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
			(display_message, "@If you choose to watch the fight you can use the mouse scroll up and down to switch between troop view or AWDS keys for free camera view.")
		]),

		(0.0, 0.0, 0.0,
		[],

		[
			(game_key_clicked, 22),
			(neg|is_presentation_active, "prsnt_battle"),
			(start_presentation, "prsnt_battle")
		]),

		(0.1, 0.0, 0.0,
		[],

		[
			(is_presentation_active, "prsnt_battle"),
			(call_script, "script_update_order_panel_statistics_and_map")
		]),

		(-22.0, 0.0, 0.0,
		[],

		[
			(display_message, "str_use_baggage_for_inventory")
		]),

		(-28.0, 0.3, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(store_trigger_param_2, ":trigger_param_2"),
			(store_trigger_param_3, ":trigger_param_3"),
			(assign, ":var_4", reg0),
			(agent_is_human, ":trigger_param_1"),
			(agent_is_alive, ":trigger_param_1"), #this addition
			(agent_is_active, ":trigger_param_1"), #This addition, i disabled tihs whole mission template to fix the bug too.
			(get_player_agent_no, ":player_agent_no"),
			(try_begin),
				(eq, "$tom_weapon_break", 1),
				(eq, ":trigger_param_1", ":player_agent_no"),
				(store_random_in_range, ":random_in_range_0_1000", 0, 1000),
				(eq, ":random_in_range_0_1000", 1),
				(store_random_in_range, ":random_in_range_4_8", 4, 8),
				(troop_get_inventory_slot, ":inventory_slot_player_random_in_range_4_8", "trp_player", ":random_in_range_4_8"),
				(gt, ":inventory_slot_player_random_in_range_4_8", 0),
				(str_store_item_name, 20, ":inventory_slot_player_random_in_range_4_8"),
				(troop_get_inventory_slot_modifier, ":inventory_slot_modifier_player_random_in_range_4_8", "trp_player", ":random_in_range_4_8"),
				(try_begin),
					(eq, ":inventory_slot_modifier_player_random_in_range_4_8", 6),
					(display_message, "@Your {s20} is too crappy to fall apart!", 0x00ff0000),
				(else_try),
					(troop_add_item, "trp_broken_items", ":inventory_slot_player_random_in_range_4_8", ":inventory_slot_modifier_player_random_in_range_4_8"),
					(troop_set_inventory_slot_modifier, "trp_player", ":random_in_range_4_8", 6),
					(display_message, "@Your {s20} cracks!", 0x00ff0000),
				(try_end),
			(try_end),
			(try_begin),
				(eq, "$tom_weapon_break", 1),
				(eq, ":trigger_param_2", ":player_agent_no"),
				(is_between, ":var_4", 1, "itm_cross_end"), #Previously itm_items_end
				(neg|is_between, ":var_4", "itm_light_lance", "itm_wooden_shield"),
				(item_get_type, ":type_var_4", ":var_4"),
				(ge, ":trigger_param_3", 10),
				(neq, ":type_var_4", 10),
				(neq, ":type_var_4", 8),
				(neq, ":type_var_4", 9),
				(neq, ":type_var_4", 5),
				(neq, ":type_var_4", 6),
				(store_random_in_range, ":random_in_range_0_1000", 0, 600),
				(eq, ":random_in_range_0_1000", 1),
				(assign, ":value", -1),
				(try_for_range, ":random_in_range_4_8", 0, 4),
					(troop_get_inventory_slot, ":inventory_slot_player_random_in_range_4_8_2", "trp_player", ":random_in_range_4_8"),
					(eq, ":inventory_slot_player_random_in_range_4_8_2", ":var_4"),
					(assign, ":value", ":random_in_range_4_8"),
				(try_end),
				(gt, ":value", 0),
				(str_store_item_name, 20, ":var_4"),
				(troop_get_inventory_slot_modifier, ":inventory_slot_modifier_player_random_in_range_4_8", "trp_player", ":value"),
				(try_begin),
					(eq, ":inventory_slot_modifier_player_random_in_range_4_8", 6),
					(display_message, "@Your {s20} falls apart!", 0x00ff0000),
					(agent_unequip_item, ":player_agent_no", ":var_4"),
					(troop_remove_item, "trp_player", ":var_4"),
					(troop_remove_item, "trp_broken_items", ":var_4"),
				(else_try),
					(troop_add_item, "trp_broken_items", ":var_4", ":inventory_slot_modifier_player_random_in_range_4_8"),
					(troop_set_inventory_slot_modifier, "trp_player", ":value", 6),
					(display_message, "@Your {s20} cracks!", 0x00ff0000),
				(try_end),
			(try_end),
			(agent_get_horse, ":horse_trigger_param_2", ":trigger_param_2"),
			(try_begin),
				(eq, "$tom_lance_breaking", 1),
				(gt, ":horse_trigger_param_2", 0),
				(this_or_next|is_between, ":var_4", "itm_light_lance", "itm_spear_a"), #Updated item slots
				(is_between, ":var_4", "itm_lance_banner_jer", "itm_pike_banner_teu"), #Updated item slots
				(ge, ":trigger_param_3", 50),
				(store_random_in_range, ":random_in_range_0_100", 0, 100),
				(gt, ":random_in_range_0_100", 20),
				(try_begin),
					(eq, ":trigger_param_2", ":player_agent_no"),
					(display_message, "@You broke your lance!", 0x00ff0000),
				(try_end),
				########Add effects on weapon break *Lances*
        (agent_get_position, pos1, ":trigger_param_2"),
		(agent_play_sound, ":trigger_param_1", "snd_shield_broken"),
		(particle_system_burst, "psys_lanse", pos1, 10),
        (particle_system_burst, "psys_lanse_straw", pos1, 30),
                ####Extend to Lanse_Blood
		#(particle_system_burst, "psys_lanse_blood", pos1, 10),
        #(particle_system_burst, "psys_lanse_blood", pos1, 30),
		        ########End Effects
				(agent_unequip_item, ":trigger_param_2", ":var_4"),
			(else_try),
				(this_or_next|is_between, ":var_4", "itm_bamboo_spear", "itm_wooden_shield"), #Updated item slots
				(is_between, ":var_4", "itm_pike_banner_teu", "itm_items_end"), #Updated item slots
				(le, ":horse_trigger_param_2", 0),
				(ge, ":trigger_param_3", 8),
				(store_random_in_range, ":random_in_range_0_100", 0, 100),
				(ge, ":random_in_range_0_100", 90),
				(try_begin),
					(eq, ":trigger_param_2", ":player_agent_no"),
					(display_message, "@You broke your spear!", 0x00ff0000),
				(try_end),
				########Add effects on weapon break *Spears*
        (agent_get_position, pos1, ":trigger_param_2"),
		(agent_play_sound, ":trigger_param_1", "snd_shield_broken"),
		(store_random_in_range, ":psys_to_use", "psys_lanse", "psys_lanse_blood"),
		(particle_system_burst, ":psys_to_use", pos1, 7), #Default = 10 (Higher = Bigger Particles)
        (particle_system_burst, ":psys_to_use", pos1, 21), #Default = 30 (Higher = Bigger Particles)
                ####Extend to Lanse_Blood
		#(particle_system_burst, "psys_lanse_blood", pos1, 10),
        #(particle_system_burst, "psys_lanse_blood", pos1, 30),
		        ########End Effects
				(agent_unequip_item, ":trigger_param_2", ":var_4"),
			(try_end),
			###Envfix weapon breaking patch start here
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_set_matching_sexy_boots", ":trigger_param_1")
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$sp_shield_bash", 1),
			(game_key_is_down, 7),
			(game_key_clicked, 6),
			(neg|main_hero_fallen),
		],

		[
		(call_script, "script_shield_bash"),
		]),

			##AI kicking begin
		   (2, 0, 3, #AI kicking
       [], [
	(get_player_agent_no,":player"),
	(try_for_agents, ":agent"),
		(neq, ":agent", ":player"),
		(agent_is_alive, ":agent"),
		(neq, ":agent", -1),
		(agent_is_human, ":agent"),#Only humans can kick....FOR NOW
		(agent_is_active, ":agent"),
		(agent_slot_eq, ":agent", slot_agent_is_running_away, 0),#Isn't fleeing the battle.
		##He's an eligible human.  Now see if he's in a position to kick.
		(agent_get_attack_action, ":attack_action", ":agent"), #returned values: free = 0, readying_attack = 1, releasing_attack = 2, completing_attack_after_hit = 3, attack_parried = 4, reloading = 5, after_release = 6, cancelling_attack = 7
		(agent_get_defend_action, ":defend_action", ":agent"),#
		(this_or_next|eq,":attack_action",4),#Just got parried
		(this_or_next|eq,":defend_action",1),#Parrying an enemy
		##So he'll only try to kick if he just parried an enemy attack, or his own attack just got parried.
		(agent_get_team, ":team", ":agent"),
		(assign, ":maximum_distance", 100),
		#Target Acquisition
		(agent_ai_get_look_target,":suspect",":agent"),
		(gt,":suspect",0),#Make sure there is someone.
		(agent_is_alive, ":suspect"),
		(agent_is_human, ":suspect"),#Only kick humans
		(agent_is_active, ":suspect"),
		(agent_get_team, ":suspect_team", ":suspect"),
		(neq, ":suspect_team", ":team"),#Friends don't let friends kick friends.
		(agent_get_position, pos1, ":agent"),#Distance check
		(agent_get_position, pos2, ":suspect"),
		(neg|position_is_behind_position, pos2, pos1), #Suspect can't be behind kicker.
		(get_distance_between_positions, ":distance", pos1, pos2),
		(le, ":distance", ":maximum_distance"),
		#Check chance
		(store_random_in_range,":kickchance", 1, 10),
		(try_begin),
			(eq,":kickchance",1), #10% chance per check
				#(display_message, "@Agent kicks."),
				(agent_set_animation, ":agent", "anim_prepare_kick_0"),
				(agent_deliver_damage_to_agent, ":agent", ":suspect", 3),
				(agent_set_animation, ":suspect", "anim_strike3_abdomen_front"),#Get Kicked
			(try_end),
	   (try_end),]),
	   
	   ##AI Kicking end
		
		
		(0.25, 0.0, 4.0,
		[
			(eq, "$sp_shield_bash_ai", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(neq, ":var_2", ":player_agent_no"),
				(agent_is_alive, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_active, ":var_2"), #Test to see if it stops AI from shield bashing (new addition v3)
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(store_skill_level, ":skill_level_shield_troop_id_var_2", "skl_shield", ":troop_id_var_2"),
				(store_proficiency_level, ":proficiency_level_troop_id_var_2_0", ":troop_id_var_2", 0),
				(ge, ":skill_level_shield_troop_id_var_2", 4),
				(ge, ":proficiency_level_troop_id_var_2_0", 200),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(le, ":horse_var_2", 0),
				(try_begin),
					(neg|agent_slot_ge, ":var_2", 50, 1),
					(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
					(agent_get_wielded_item, ":wielded_item_var_2_1", ":var_2", 1),
					(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
					(eq, ":type_wielded_item_var_2_1", 7),
					(agent_get_attack_action, ":attack_action_var_2", ":var_2"),
					(eq, ":attack_action_var_2", 0),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_position, 1, ":var_2"),
					(assign, ":value", -1),
					(assign, ":value_2", 125),
					(try_for_agents, ":var_13"),
						(agent_is_alive, ":var_13"),
						(agent_is_human, ":var_13"),
						(agent_get_position, 2, ":var_13"),
						(neg|position_is_behind_position, 2, 1),
						(agent_get_team, ":team_var_13", ":var_13"),
						(neq, ":team_var_13", ":team_var_2"),
						(try_begin),
							(eq, ":team_var_2", 0),
							(assign, ":value_3", 2),
						(else_try),
							(eq, ":team_var_2", 2),
							(assign, ":value_3", 0),
						(else_try),
							(eq, ":team_var_2", 1),
							(assign, ":value_3", 3),
						(else_try),
							(eq, ":team_var_2", 3),
							(assign, ":value_3", 1),
						(try_end),
						(neq, ":team_var_13", ":value_3"),
						(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
						(le, ":distance_between_positions_1_2", ":value_2"),
						(assign, ":value_2", ":distance_between_positions_1_2"),
						(assign, ":value", ":var_13"),
					(try_end),
					(ge, ":value", 0),
					(agent_get_horse, ":horse_var_2", ":value"),
					(eq, ":horse_var_2", -1),
					(store_random_in_range, ":random_in_range_15_26", 15, 26),
					(agent_set_slot, ":var_2", 50, ":random_in_range_15_26"),
					(agent_set_animation, ":var_2", "anim_shield_bash"),
					(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
					(troop_get_type, ":type_wielded_item_var_2_1", ":troop_id_var_2"),
					(try_begin),
						(eq, ":type_wielded_item_var_2_1", 0),
						(agent_play_sound, ":var_2", "snd_man_yell"),
					(else_try),
						(eq, ":type_wielded_item_var_2_1", 1),
						(agent_play_sound, ":var_2", "snd_woman_yell"),
					(try_end),
					(agent_play_sound, ":value", "snd_wooden_hit_low_armor_high_damage"),
					(agent_get_defend_action, ":attack_action_var_2", ":value"),
					(try_begin),
						(eq, ":attack_action_var_2", 2),
						(neg|position_is_behind_position, 1, 2),
						(agent_get_wielded_item, ":wielded_item_var_2_1", ":value", 1),
						(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
						(eq, ":type_wielded_item_var_2_1", 7),
						(agent_set_animation, ":value", "anim_shield_bash"),
					(else_try),
						(agent_set_animation, ":value", "anim_shield_strike"),
					(try_end),
				(try_end),
				(agent_get_slot, ":var_2_50", ":var_2", 50),
				(val_sub, ":var_2_50", 1),
				(val_max, ":var_2_50", 0),
				(agent_set_slot, ":var_2", 50, ":var_2_50"),
			(try_end)
]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_is_human, ":trigger_param_1"),
			(agent_is_non_player, ":trigger_param_1"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(lt, ":troop_id_trigger_param_1", "trp_kidnapped_girl"),
			(try_for_range, reg0, 0, 4),
				(agent_get_item_slot, ":item_slot_trigger_param_1_reg0", ":trigger_param_1", reg0),
				(is_between, ":item_slot_trigger_param_1_reg0", 1, "itm_cross_end"), #Previously itm_items_end
				(agent_unequip_item, ":trigger_param_1", ":item_slot_trigger_param_1_reg0"),
			(try_end),
			(try_for_range, reg0, 0, 2),
				(agent_get_wielded_item, ":item_slot_trigger_param_1_reg0", ":trigger_param_1", reg0),
				(is_between, ":item_slot_trigger_param_1_reg0", 1, "itm_cross_end"), #Previously itm_items_end
				(agent_unequip_item, ":trigger_param_1", ":item_slot_trigger_param_1_reg0"),
			(try_end),
			(assign, ":var_4", 0),
			(assign, ":var_5", 25),
			(assign, ":var_6", 50),
			(assign, ":var_7", 75),
			(assign, ":var_8", 100),
			(assign, ":var_18", 125),
			(assign, ":var_10", 150),
			(assign, ":var_11", 175),
			(assign, ":var_12", 200),
			(assign, ":value", 0),
			(assign, ":value_2", 0),
			(assign, ":value_3", 0),
			(assign, ":value_4", 0),
			(assign, ":value_5", 0),
			(assign, ":value_6", 0),
			(assign, ":value_7", 0),
			(assign, ":value_8", 0),
			(assign, ":value_9", 0),
			(troop_get_inventory_capacity, ":inventory_capacity_troop_id_trigger_param_1", ":troop_id_trigger_param_1"),
			(try_for_range, ":localvariable", 0, ":inventory_capacity_troop_id_trigger_param_1"),
				(troop_get_inventory_slot, ":inventory_slot_troop_id_trigger_param_1_localvariable", ":troop_id_trigger_param_1", ":localvariable"),
				(is_between, ":inventory_slot_troop_id_trigger_param_1_localvariable", 1, "itm_cross_end"), #Previously itm_items_end
				(item_get_type, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
				(try_begin),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 4),
					(val_add, ":var_4", 1),
					(troop_set_slot, "trp_items_array", slot_troop_relations_begin, ":var_4"),
					(troop_set_slot, "trp_items_array", ":var_4", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 2),
					(val_add, ":var_5", 1),
					(troop_set_slot, "trp_items_array", slot_troop_last_quest_betrayed, ":var_5"),
					(troop_set_slot, "trp_items_array", ":var_5", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_2", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 7),
					(val_add, ":var_6", 1),
					(troop_set_slot, "trp_items_array", slot_troop_recruitment_random, ":var_6"),
					(troop_set_slot, "trp_items_array", ":var_6", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_3", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 3),
					(val_add, ":var_7", 1),
					(troop_set_slot, "trp_items_array", slot_troop_personalitymatch_object, ":var_7"),
					(troop_set_slot, "trp_items_array", ":var_7", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_4", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 10),
					(val_add, ":var_8", 1),
					(troop_set_slot, "trp_items_array", 100, ":var_8"),
					(troop_set_slot, "trp_items_array", ":var_8", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_5", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 6),
					(val_add, ":var_18", 1),
					(troop_set_slot, "trp_items_array", slot_troop_rehire_speech, ":var_18"),
					(troop_set_slot, "trp_items_array", ":var_18", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_6", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 5),
					(val_add, ":var_10", 1),
					(troop_set_slot, "trp_items_array", slot_troop_days_on_mission, ":var_10"),
					(troop_set_slot, "trp_items_array", ":var_10", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_7", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 8),
					(val_add, ":var_11", 1),
					(troop_set_slot, "trp_items_array", 175, ":var_11"),
					(troop_set_slot, "trp_items_array", ":var_11", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_8", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 9),
					(val_add, ":var_12", 1),
					(troop_set_slot, "trp_items_array", 200, ":var_12"),
					(troop_set_slot, "trp_items_array", ":var_12", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_9", 1),
				(try_end),
			(try_end),
			(try_begin),
				(eq, ":value", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_relations_begin),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 1, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_2", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_last_quest_betrayed),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 26, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_3", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_recruitment_random),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 51, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_4", 1),
				(try_begin),
					(eq, ":value_2", 1),
					(store_random_in_range, ":random_in_range_0_100", 0, 100),
					(lt, ":random_in_range_0_100", 65),
				(else_try),
					(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_personalitymatch_object),
					(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 76, ":items_array_relations_begin"),
					(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
					(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
				(try_end),
			(try_end),
			(try_begin),
				(eq, ":value_5", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", 100),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 101, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_6", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_rehire_speech),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 126, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_7", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_days_on_mission),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 151, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_8", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", 175),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 176, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_9", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", 200),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 201, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end)
		])
	] + crouching_triggers ),

	("castle_attack_walls_defenders_sally", mtf_battle_mode, -1,
	"You attack the walls of the castle...",
	[(0, mtef_attackers|mtef_team_1, af_override_horse, aif_start_alarmed, 12, []),
	(0, mtef_attackers|mtef_team_1, af_override_horse, aif_start_alarmed, 0, []),
	(3, mtef_defenders|mtef_team_0, af_override_horse, aif_start_alarmed, 12, []),
	(3, mtef_defenders|mtef_team_0, af_override_horse, aif_start_alarmed, 0, [])],
	[
			

    (7, 0, ti_once,
    [],
    [
	(call_script, "script_assign_traits"),
    ]),


    (0, 0, 1, 
    [
    ],
    [
	(call_script, "script_stumbling"),
    ]),





#Decapitations next level right here.
(ti_on_agent_hit, 0, 0, [(eq, "$dynamic_decap", 1),],
[
   (store_trigger_param_1, ":victim_agent"),
   (store_trigger_param_2, ":attacker_agent"),
   (store_trigger_param_3, ":damage"),
   (assign, ":attacker_item", reg0), ### Transfer the item ID to make sure it dosn't change while the script is running
   (copy_position, pos5, pos0), ### Transfer the position of the hit to make sure it dosn't change while the script is running
   (neq, ":victim_agent", -1),
   (try_begin), #-- Decapitations --#
      (agent_is_human, ":victim_agent"),
	  (ge, ":attacker_item", 0),
	  (assign, ":run", 0), ### Reset the run test variable
#	  (try_begin), ### Special weapons that can decap, ovevrrides the below conditions
#		  (this_or_next|eq, ":attacker_item", "itm_supercrossbow"),
#		  (eq, ":attacker_item", "itm_supersledge"),
#		  (assign, ":run", 1),
	  (try_begin),
		  #(neq, ":attacker_item", "itm_mace_1"), ### List of weapons that cannot decapitate
		  #(neq, ":attacker_item", "itm_mace_2"), ### This would be easier to do with a preperty check (for damage type), but I don't know if that is possible or not
		  #(neq, ":attacker_item", "itm_mace_3"),
		  #(neq, ":attacker_item", "itm_staff"), #Keeping active incase of script errors
		  (agent_get_action_dir, ":attack_dir", ":attacker_agent"), ### Makes sure the attack is either a left or right swing
		  (this_or_next|eq, ":attack_dir", 1), ### Right swing
		  (eq, ":attack_dir", 2), ### Left swing
		  (assign, ":run", 1),
	  (try_end),
	  (eq, ":run", 1), ### One of the checks were true, continue to run script
	  #(assign, reg1, ":damage"), #Debug messages
	  #(display_message, "@Damage: {reg1}"),
	  
	  (assign, ":run", 0), ### Reset the run test variable
	  (try_begin),
		(ge, ":damage", "$decap_damage"), ### 30 Minimum damage required to decapitate an agent
		(assign, ":run", 1),
		
#	  (else_try),  ### If debugging mode is on, this bypasses the damage requirement check
#		  (eq,"$g_decapitations_debugging", 1),
#		  (assign, ":run", 1),
#		  (display_message, "@Decap minimum DMG req bypassed"),
	  (try_end),
	  (eq, ":run", 1),
	  
	  (store_agent_hit_points, ":hp", ":victim_agent", 1),
	  (val_add, ":hp", 10), ### 10 Victim must have the negative of this hp or below after hit for the script to move on (never put this value below 0 since the agent has to be absolutley positvely dead)!
	  (ge, ":damage", ":hp"),
	  
	  
	  ### Compare the hit position to the agent's position
      (agent_get_position, pos4, ":victim_agent"),
      (get_distance_between_positions, ":distance", pos4, pos5), 
	  (agent_get_horse, ":is_mounted", ":victim_agent"),
	  (try_begin), ### If the agent is on horseback, these values are used (note that these values will not be exactly correct if the horse is very large or very small)
		(ge, ":is_mounted", 0), ### Will be -1 if no horse is to be found, so anything above means that the agent is mounted
		(assign, ":min_distance", 240), ### Minimum distance from the agent's horse's hooves from which the hit is valid (240 is an approximate value)
		(assign, ":max_distance", 260), ### Maximum distance from the agent's horse's hooves to which the hit is valid (260 is an approximate value)
	  (else_try),  ### If the agent is on foot, these values are used
	    (assign, ":min_distance", 160), ### Minimum distance from the agent's feet from which the hit is valid (160 = slightly below the neck)
	    (assign, ":max_distance", 176), ### Maximum distance from the agent's feet to which the hit is valid (176 = near the nose)
	  (try_end),
      (is_between, ":distance", ":min_distance", ":max_distance"), ### Check to see if the hit is within the allowed area
	  
	  
	  (assign, ":run", 0), ### Default variable value before damage test
	  (try_begin),
		  (store_div, ":chance", ":damage", "$decap_damage_divider"), ### Chance of decap is damage / 4 right now. Lower this value for higher chances of decapitation (or press M+Right Ctrl for debug more if you just want to test easy decaps in-game).
		  
		  #(assign, reg1, ":chance"), #Debug messages
		  #(display_message, "@Decap chance is: {reg1}"),
		  (store_random_in_range, ":diceroll", 0, "$decap_randomizer"), ### Randomizer, 0-100
		  
		  #(assign, reg1, ":diceroll"), #Debug messages
		  #(display_message, "@Diceroll: {reg1}"),
		  (le, ":diceroll", ":chance"), ### ":diceroll" must be less than or equal to ":chance", if it is, decapitation occurs!
		  
		  (assign, ":run", 1), ### SUCCESS!
		  
#     (else_try),  ### If debugging mode is on, bypass chance calculation
#		  (eq,"$g_decapitations_debugging", 1),
#		  (assign, ":run", 1),
#		  (display_message, "@Decap chance calc bypassed"),
	  (try_end),  
	  (eq, ":run", 1), ### Time for the fun stuff!

	  ### Gender test for spawning the right head type
	  (assign, ":head_type", "itm_cut_off_head_male"),
	  (agent_get_troop_id, ":victim_troop", ":victim_agent"),
	  (try_begin),
	    (ge, ":victim_troop", 0),
		(troop_get_type,":victim_gender",":victim_troop"),
		(eq, ":victim_gender", 1),
		(assign, ":head_type", "itm_cut_off_head_female"),
	  (try_end),
	  
	  ### Randomize the spawned head's and/or helmet's position and orientation
	  (store_random_in_range, ":z_rotation", 0, 360),
	  (store_random_in_range, ":y_rotation", -60, 60),
	  (store_random_in_range, ":x_pos", -90, 90),
	  (store_random_in_range, ":y_pos", -90, 90),
	  (position_rotate_z, pos4,":z_rotation"),
	  (position_rotate_y, pos4,":y_rotation"),
	  (position_move_x, pos4, ":x_pos"),
	  (position_move_y, pos4, ":y_pos"),
	  (position_set_z_to_ground_level, pos4),
	  (position_move_z, pos4, 5),
	  (set_spawn_position, pos4),
	  (assign, ":prunetime", 360), ### This is the time in seconds before the spawned head or helmet gets pruned (removed). Recommended to keep it above 0 to make sure it gets removed eventually or when the scene resets, to prevent performance issues.
	  
	  #(spawn_item, ":head_type", 0, ":prunetime"), ### This is the old way of spawning the head on the ground with the helmet, disabled because of the new dynamic heads. You can comment away (disable) the dynamic heads spawning further down and uncomment this line for a less performance-needing approach (with no physics involved).
	  
	  ### Does the agent have a helmet or hat equipped?
      (agent_get_item_slot, ":item", ":victim_agent", 4), #head slot
      (try_begin),
         (ge, ":item", 1), ### Does it?
         (agent_unequip_item, ":victim_agent", ":item"), ### Yes it does. Unequip it to allow replacement by the invisible helmet further down
		 (try_begin),
			 ### Don't spawn items with "itp_attatch_armature" flag: rigging causes floating bugs
			 ### This would be much better to do with an item flag check, but I haven't found any way to do that
			 #(neq, ":item", "itm_with_itp_attatch_armature"),
			 #(neg|is_between,":item","start_of_itm_range_with_itp_attatch_armature","end_of_itm_range_with_itp_attatch_armature"),
			#(set_spawn_position, pos4),
			(spawn_item, ":item", 0, ":prunetime"), ### Spawns the agent's currently equipped headgear on the dropped head's position
		 (try_end),
      (try_end),
	  
	  (agent_equip_item, ":victim_agent", "itm_invisible_head"), ### Put an invisible helmet on the agent's head to "remove" it
	  
	  
	  (agent_get_position, pos4, ":victim_agent"), ### Refreshes the agent's position
	  (position_move_z, pos4, ":min_distance"), ### Move to the where the neck used to be attached
	  
	  
	  ### Blood effects! The last variable is the strength. Lower or increase it for more/less blood (or tweak the particle effects themselves in "module_particle_systems.py").
      (particle_system_burst, "psys_blood_decapitation", pos4, 40), 
	  (particle_system_burst, "psys_game_blood", pos4, 10),
	  (particle_system_burst, "psys_game_blood_2", pos4, 10),
	  
	  (play_sound_at_position, "snd_decapitation_battle", pos4), ### Play some nasty sounds
	  
	  
	  ### Dynamic head spawning! See the bottom of "module_scene_props.py" for physics-related options and more.
	  (position_move_z, pos4, 20),
	  (set_spawn_position, pos4),
	  (assign, ":head_type", "spr_head_dynamic_male"),
	  (try_begin), ### Gender check (for determening the type of head)
		(eq, ":victim_gender", 1),
		(assign, ":head_type", "spr_head_dynamic_female"),
	  (try_end),
	  (spawn_scene_prop, ":head_type"),
	  
		#Addition check if we should allow the message to appears
			(eq, "$allow_decap_mess", 1), #Possible script error

	  ### This below is for the text that shows up when somebody is decapitated.
	  
	  ### Who decapitated who?
		(agent_get_troop_id, ":attacker_troop", ":attacker_agent"),
		(str_store_troop_name, s0, ":attacker_troop"),

		(agent_get_troop_id, ":victim_troop", ":victim_agent"),
		(str_store_troop_name, s1, ":victim_troop"),

	  
	  ### Colour check (friend or foe?)
	  (get_player_agent_no, ":my_agent"),
	  (agent_get_team, ":my_team", ":my_agent"),
	  (agent_get_team, ":victim_team", ":victim_agent"),
	  (try_begin), ### Display it!
		  (neq, ":my_team", ":victim_team"),
		  (display_message, "@>>> {s0} decapitated {s1}!", 0xFF33DD11), ## Green
	  (else_try),
		  (display_message, "@>>> {s0} decapitated {s1}!", 0xFFFF4422), ## Red
	  (try_end),
   (try_end), #-- Decapitations END --#
   
   ]),



	#AI Sound horn!
			(0.0, 0.0, 2.0,
		[
			##(store_random_in_range, ":horn_chance", 0, 22),
			#(eq, ":horn_chance", 0),
		],
		[
			(call_script, "script_formation_ai_sound_horn"),
		]),
	#AI Sound horn end!









		
			##################################################
##### troop_ratio_bar
##################################################
      (0, 0, ti_once, [
	  (eq, "$use_troopbars", 1),
	  ], [
	  (start_presentation, "prsnt_troop_ratio_bar"),
	  ]),
##################################################
##### troop_ratio_bar
##################################################
	
###Voice-over for Infantry, archers & Cavalry
		
		(0.0, 0.3, 0.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 29) #Everyone!
		],

		[
		(call_script, "script_identify_battle_voices_all")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 30) #Infantry
		],

		[
		(call_script, "script_identify_battle_voices_inf")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 31) #Archers
		],

		[
		(call_script, "script_identify_battle_voices_archers")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 32) #Cavalry
		],

		[
		(call_script, "script_identify_battle_voices_cav")
		]),
		###Voice-over for Infantry, archers & Cavalry	
		
		
		
						#####Engage SP Music Tracks FIELD BATTLES
	#####MUSICBOX
	(ti_before_mission_start, 0, ti_once, [ #680 #(ti_after_mission_start, 0, 680, [ #680
	(eq, "$additional_music", 1), #Obtained from Mod Options, affects mission templates, range: ALL SP Hostile music, co-op variant is additional_music_coop.
	],
		
  [
    #(play_track, "track_silence", 1), #Stop current module track
	   (music_set_situation, mtf_sit_fight), #Field
   #(music_set_situation, mtf_sit_siege), #Siege probably don't use
	(assign, "$music_timer", 0), #Patch
  #Randomize chance is 1 in a 5 (20%)
  
  #Field related extend to sieges
  (store_random_in_range, ":randomizer", 0, 2), #50% Chance of randomization
  (try_begin),
  (eq, ":randomizer", 0),
  (store_random_in_range, ":euro_randomizernext", 1, 12),
  (store_random_in_range, ":medi_randomizer", 1, 8),
  (store_random_in_range, ":arab_randomizer", 1, 9),
  (assign, "$track_count_field", ":euro_randomizernext"),
  (assign, "$track_count_field_medi", ":medi_randomizer"),
  (assign, "$track_count_field_arabs", ":arab_randomizer"),
  (try_end),
  #Field related extend to sieges
  ]),
	
	(0, 0, 3, [ #680 #(ti_after_mission_start, 0, 680, [ #680
	(eq, "$additional_music", 1), #Obtained from Mod Options, affects mission templates, range: ALL SP Hostile music, co-op variant is additional_music_coop.
	],
		
  [
		  #(display_message, "@Executing music code"),
		  (store_mission_timer_b, ":time_msec"),
		  #(assign, reg10, ":time_msec"),
          #(str_clear, s10),
          #(str_store_string, s10, "@Mission timer B for music: {reg10}"),
		  #(display_message, s10),
			#if next action time is lower than current time, play the sound
			(ge, ":time_msec", "$music_timer"),
			(reset_mission_timer_b), #Resetting mission timer, too.
			(assign, "$music_timer", 0),# Resetting value when track ends.
		
  #Euro only
     (try_begin),
      (ge, "$track_count_field", 11),
      (assign, "$track_count_field", 1),
    (else_try),
      (val_add, "$track_count_field", 1),
	  (ge, "$track_count_field", 11),
	  (assign, "$track_count_field", 1),
    (try_end),
  #Euro only
  
  #Mediterrain only
  
       (try_begin),
      (ge, "$track_count_field_medi", 8),
      (assign, "$track_count_field_medi", 1),
    (else_try),
      (val_add, "$track_count_field_medi", 1),
	  (ge, "$track_count_field_medi", 8),
	  (assign, "$track_count_field_medi", 1),
    (try_end),
  #Mediterrain only
  
  
  #Arabs only

       (try_begin),
      (ge, "$track_count_field_arabs", 8),
      (assign, "$track_count_field_arabs", 1),
    (else_try),
      (val_add, "$track_count_field_arabs", 1),
	  (ge, "$track_count_field_arabs", 8),
	  (assign, "$track_count_field_arabs", 1),
    (try_end),
	#Arabs only
  
  #Pause between music length in seconds
  #(val_add, "$music_timer", 2),# 5 seconds added
  #Pause between music length in seconds
  
	(party_get_current_terrain, ":current_terrain_main_party", "p_main_party"), #Co-Op variant of this trigger should use scenes in_between rather than terrain because player can't obtain terrain in co-op sessions.
	(try_begin),
	(this_or_next|eq, ":current_terrain_main_party", 1), #rt_mountain
	(this_or_next|eq, ":current_terrain_main_party", 2), #rt_steppe
	(eq, ":current_terrain_main_party", 10), #rt_steppe_forest
	#Begin mediterrain music 5 tracks total
	(try_begin),
	(eq, "$track_count_field_medi", 1), #
	(play_track, "track_medib1", 2),
	(val_add, "$music_timer", 206),# 1 second added
	(else_try),
	
	(eq, "$track_count_field_medi", 2), #
	(play_track, "track_medib3", 2),
	(val_add, "$music_timer", 209),#
	(else_try),
	
	(eq, "$track_count_field_medi", 3), #
	(play_track, "track_medib4", 2),
	(val_add, "$music_timer", 237),#
	(else_try),

	(eq, "$track_count_field_medi", 4), #
	(play_track, "track_medib5", 2),
	(val_add, "$music_timer", 229),#
	(else_try),
	(eq, "$track_count_field_medi", 5), #
	(play_track, "track_medib6", 2),
	(val_add, "$music_timer", 127),#
	(else_try),
	(eq, "$track_count_field_medi", 6), #
	(play_track, "track_medib7", 2),
	(val_add, "$music_timer", 161),#
	
	(else_try),
	(eq, "$track_count_field_medi", 7), #
	(play_track, "track_medib8", 2),
	(val_add, "$music_timer", 250),#
	(try_end),
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 3), #rt_plain
	(this_or_next|eq, ":current_terrain_main_party", 11), #rt_forest
	(eq, ":current_terrain_main_party", 9), #rt_mountain_forest
	#Begin Euro Music
	(try_begin),
	(eq, "$track_count_field", 1), #
	(play_track, "track_eurob1", 2),
	(val_add, "$music_timer", 319),#
	(else_try),
	(eq, "$track_count_field", 2), #
	(play_track, "track_eurob2", 2),
	(val_add, "$music_timer", 279),#
	(else_try),
	
	(eq, "$track_count_field", 3), #
	(play_track, "track_eurob3", 2),
	(val_add, "$music_timer", 248),#
	(else_try),
	
	(eq, "$track_count_field", 4), #
	(play_track, "track_eurob4", 2),
	(val_add, "$music_timer", 332),#
	(else_try),
	
	(eq, "$track_count_field", 5), #
	(play_track, "track_eurob5", 2),
	(val_add, "$music_timer", 93),#
		(else_try),
	
	(eq, "$track_count_field", 6), #
	(play_track, "track_eurob6", 2),
	(val_add, "$music_timer", 76),#
		(else_try),
	
	(eq, "$track_count_field", 7), #
	(play_track, "track_eurob7", 2),
	(val_add, "$music_timer", 80),#
		(else_try),
	
	(eq, "$track_count_field", 8), #
	(play_track, "track_eurob8", 2),
	(val_add, "$music_timer", 58),#
		(else_try),
	
	(eq, "$track_count_field", 9), #
	(play_track, "track_eurob9", 2),
	(val_add, "$music_timer", 58),#
		(else_try),
	
#	(eq, "$track_count_field", 10), #
#	(play_track, "track_eurob10"),
#	(val_add, "$music_timer", 123),#
#		(else_try),
	
	(eq, "$track_count_field", 10), #
	(play_track, "track_eurob11", 2),
	(val_add, "$music_timer", 335),#
	(try_end),
	
	
	
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 4), #rt_snow
	(this_or_next|eq, ":current_terrain_main_party", 12), #rt_snow_forest
	(eq, ":current_terrain_main_party", 7), #rt_bridge
	#Begin Euro Music
	(try_begin),
	(eq, "$track_count_field", 1), #
	(play_track, "track_eurob1", 2),
	(val_add, "$music_timer", 319),#
	(else_try),
	(eq, "$track_count_field", 2), #
	(play_track, "track_eurob2", 2),
	(val_add, "$music_timer", 279),#
	(else_try),
	
	(eq, "$track_count_field", 3), #
	(play_track, "track_eurob3", 2),
	(val_add, "$music_timer", 248),#
	(else_try),
	
	(eq, "$track_count_field", 4), #
	(play_track, "track_eurob4", 2),
	(val_add, "$music_timer", 332),#
	(else_try),
	
	(eq, "$track_count_field", 5), #
	(play_track, "track_eurob5", 2),
	(val_add, "$music_timer", 93),#
		(else_try),
	
	(eq, "$track_count_field", 6), #
	(play_track, "track_eurob6", 2),
	(val_add, "$music_timer", 76),#
		(else_try),
	
	(eq, "$track_count_field", 7), #
	(play_track, "track_eurob7", 2),
	(val_add, "$music_timer", 80),#
		(else_try),
	
	(eq, "$track_count_field", 8), #
	(play_track, "track_eurob8", 2),
	(val_add, "$music_timer", 58),#
		(else_try),
	
	(eq, "$track_count_field", 9), #
	(play_track, "track_eurob9", 2),
	(val_add, "$music_timer", 58),#
		(else_try),
	
#	(eq, "$track_count_field", 10), #
#	(play_track, "track_eurob10"),
#	(val_add, "$music_timer", 123),#
#		(else_try),
	
	(eq, "$track_count_field", 10), #
	(play_track, "track_eurob11", 2),
	(val_add, "$music_timer", 335),#
	(try_end),
	
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 5), #rt_desert
	(eq, ":current_terrain_main_party", 13), #rt_desert_forest
	#Begin arab music
	(try_begin),
	(eq, "$track_count_field_arabs", 1), #
	(play_track, "track_arabb1", 2),
	(val_add, "$music_timer", 262),#
	(else_try),
	(eq, "$track_count_field_arabs", 2), #
	(play_track, "track_arabb2", 2),
	(val_add, "$music_timer", 291),#
	#(else_try),
	#(eq, "$track_count_field_arabs", 3), #
	#(play_track, "track_arabb3"),
	(else_try),
	(eq, "$track_count_field_arabs", 3), #
	(play_track, "track_arabb4", 2),
	(val_add, "$music_timer", 104),#
	(else_try),
	
	(eq, "$track_count_field_arabs", 4), #
	(play_track, "track_arabb5", 2),
	(val_add, "$music_timer", 76),#
		(else_try),
	
	(eq, "$track_count_field_arabs", 5), #
	(play_track, "track_arabb6", 2),
	(val_add, "$music_timer", 218),#
	
			(else_try),
	(eq, "$track_count_field_arabs", 6), #
	(play_track, "track_arabb8", 2),
	(val_add, "$music_timer", 209),#
			(else_try),
	(eq, "$track_count_field_arabs", 7), #
	(play_track, "track_arabb9", 2),
	(val_add, "$music_timer", 103),#
	#	(else_try),
	#
	#(eq, "$track_count_field_arabs", 7), #
	#(play_track, "track_arabb7"),
	(try_end),
	(try_end),
  ]),
				
		
			#####Camera mode by Rubik None-Coop Version Begin
		(0, 0, 0, [(eq, "$extended_camera_mode", 1)],
  [
    (get_player_agent_no, ":player_agent"),
    (agent_get_look_position, pos1, ":player_agent"),
    (position_move_z, pos1, "$g_camera_z"),
    (position_move_y, pos1, "$g_camera_y"),
    (agent_get_horse, ":horse_agent", ":player_agent"),
    (try_begin),
      (ge, ":horse_agent", 0),
      (position_move_z, pos1, 80),
    (try_end),
    (mission_cam_set_position, pos1),
    (try_begin),
      (key_is_down, key_left_control),
      (assign, ":move_val", 50),
    (else_try),
      (assign, ":move_val", 10),
    (try_end),
    (try_begin),
      (key_clicked, key_up),
      (mission_cam_set_mode, 1),
      (val_add, "$g_camera_z", ":move_val"),
    (else_try),
      (key_clicked, key_down),
      (mission_cam_set_mode, 1),
      (val_sub, "$g_camera_z", ":move_val"),
    (else_try),
      (key_clicked, key_left),
      (mission_cam_set_mode, 1),
      (val_add, "$g_camera_y", ":move_val"),
    (else_try),
      (key_clicked, key_right),
      (mission_cam_set_mode, 1),
      (val_sub, "$g_camera_y", ":move_val"),
    (try_end),
    (try_begin),
      (this_or_next|game_key_clicked, gk_view_char),
      (this_or_next|game_key_clicked, gk_zoom),
      (game_key_clicked, gk_cam_toggle),
      (mission_cam_set_mode, 0),
    (try_end),
  ]),
  #####Camera mode by Rubik None-Coop Version End
		
#				#####MUSICBOX DEBUG
#		(0, 0, 10, [
#		],
#  [
#		(party_get_current_terrain, ":current_terrain_main_party", "p_main_party"),
#	      #BEGIN DEBUG
#          (assign, reg10, ":current_terrain_main_party"),
#          (str_clear, s10),
#          (str_store_string, s10, "@Terrain: {reg10}"),
#		  (display_message, s10),
#          #END DEBUG
#  ]),
###########Torch by troycall/Envious Arm begin

																	#(-25.0, 0.0, 0.0, #Enabling this forces random chance to be 100%
																	#(ti_on_agent_spawn, 0, 0, #Enabling this forces random chance to be 100%
																	(20, 0, ti_once, #Proper one, but reinforcements do not get assigned torches.
        [
          (mission_tpl_are_all_agents_spawned), #From VC Header_Operations to prevent weird behavior.
          (is_currently_night) #Check if currently night time
        ],
        [

		  ####DEFAULT
		   #(try_for_agents, ":agent"),
            #(agent_get_wielded_item, ":item", ":agent", 1),
            #(gt, ":item", -1),
            #(agent_unequip_item, ":agent", ":item"),
            #(agent_equip_item, ":agent", "itm_torch"),
            #(agent_set_wielded_item, ":agent", "itm_torch"),           
          #(try_end),
		  ####END DEFAULT
		  
		  (try_for_agents, ":agent"), #Try for agents...
		  #Extension
		  (agent_is_alive, ":agent"), #For performance reasons
		  #End
		  (agent_is_human, ":agent"), #Performance
          (agent_is_non_player, ":agent"), #Uncommenting this includes player on spawning with torch, may be necessary to uncomment at module_coop_mission_templates.
		  


		 ##########Default Order
		 #######		  (agent_is_human, ":agent"), #Performance
         #######(agent_is_non_player, ":agent"), #Uncommenting this includes player on spawning with torch, may be necessary to uncomment at module_coop_mission_templates.
		 #######
		 ########Extension
		 #######(agent_is_active, ":agent"), #For performance reasons
		 #######(agent_is_alive, ":agent"), #For performance reasons
		 ########End
		  ############
		  		  
				#  (try_begin),
				  
		#		          (agent_get_wielded_item, ":rhand", ":agent", 0),  #Right hand
		#  (assign, ":rhanditem", 0), # Preparing local variable.
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000000000100),
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000004000000),
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000008000000),
		#  (neg|item_has_capability, ":rhanditem", 0x0000000170000000),
		# 

		  #
		  
          #BEGIN DEBUG
          #(assign, reg10, ":agent"),
          #(str_clear, s10),
          #(str_store_string, s10, "@New agent: {reg10}"),
          #END DEBUG
		  #(agent_get_wielded_item, ":rhanditem", ":agent", 0),  #Obtain right hand item
         (agent_get_wielded_item, ":rhanditem", ":agent", 0),  #Obtain right hand item
          (agent_get_wielded_item, ":item", ":agent", 1), # Left hand: shield or -1
          #BEGIN DEBUG
          #(assign, reg10, ":item"),
          #(str_store_string, s10, "@{s10}. LH: {reg10}"),
		  #(display_message, "@Main block Phase A finalized"),
          #END DEBUG
		  #(item_get_type, ":type", ":rhanditem"), #If right hand item is polearm, stop reading rest of code.
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_club_with_spike_head", "itm_wooden_shield"),
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_light_lance", "itm_wooden_shield"),
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_light_lance", "itm_wooden_shield"),
          (try_begin),
		  (neg|is_between, ":rhanditem", "itm_club_with_spike_head", "itm_wooden_shield"),
		  (neg|is_between, ":rhanditem", "itm_lance_banner_jer", "itm_cross_end"), #Update item slots
		  #(neg|troop_has_item_equipped, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		  #(neq, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		  
		# (neg|eq, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		    (gt, ":item", -1), #Check if the agent wields any item in the left hand, this or next.
            #(neq, ":item", -1),# Check if the agent wields any item in the left hand
            (neq, ":item", "itm_torch"), #If agent is using torch, ignore him.
            #(display_message, "@PASSED neg tests"), #Debug message

			
            (store_random_in_range, ":chance", 1, 101), # Chance of item being assigned
            (try_begin),
			  (le, ":chance", "$torch_chance"), #25% = 25
				#lt           = neg | ge # less than		-- (lt,<value>,<value>),
				#neq          = neg | eq # not equal to		-- (neq,<value>,<value>),
				#le           = neg | gt # less or equal to	-- (le,<value>,<value>),
              (agent_unequip_item, ":agent", ":item"),
			  
              #BEGIN DEBUG
              #(str_store_item_name, s11, ":item"),
              #(str_store_string, s10, "@{s10}. Removed item: {s11}"),
			  #(display_message, "@(agent_unequip_item, :agent, :item PASSED."),
              #END DEBUG

               
                (agent_equip_item, ":agent", "itm_torch"), #Tell agent to equip the item
                 #(display_message, "@(agent_equip_item, :agent, :item PASSED."),
                  (agent_set_wielded_item, ":agent", "itm_torch"), #Required for infantry only, cavarly can work without it.
                  #(display_message, "@(agent_set_wielded_item, :agent, :item PASSED."),
                 
                 
                  #BEGIN DEBUG
                #(else_try),
                  #(str_store_string, s10, "@{s10}. Failed random chance."),
                (try_end),
               
              #(else_try),
                #(str_store_string, s10, "@{s10}. Invalid agent for torch"),
              (try_end),
             
              #(display_message, s10),
			  (try_end),
              #END DEBUG
			#  (try_end),
      ]),
	  
###########Torch by troycall/Envious Arm end


		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_agent_reassign_team", ":trigger_param_1")
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(team_set_relation, 0, 2, 1),
			(team_set_relation, 1, 3, 1),
			(call_script, "script_change_banners_and_chest"),
			(call_script, "script_remove_siege_objects")
		]),

		(-21.0, 0.0, 0.0,
		[],

		[
			(try_begin),
				(eq, "$g_battle_won", 1),
				(call_script, "script_count_mission_casualties_from_agents"),
				(finish_mission, 0),
			(else_try),
				(eq, "$pin_player_fallen", 1),
				(eq, "$g_battle_won", 0),
				(call_script, "script_simulate_retreat", 5, 20, 1),
				(str_store_string, 5, "str_retreat"),
				(call_script, "script_count_mission_casualties_from_agents"),
				(set_mission_result, -1),
				(finish_mission, 0),
			(else_try),
				(eq, "$pin_player_fallen", 1),
				(eq, "$g_battle_won", -1),
				(call_script, "script_count_mission_casualties_from_agents"),
				(finish_mission, 0),
			(else_try),
				(call_script, "script_cf_check_enemies_nearby"),
				(question_box, "str_do_you_want_to_retreat"),
			(else_try),
				(get_player_agent_no, ":player_agent_no"),
				(neg|agent_is_alive, ":player_agent_no"),
				(call_script, "script_cf_check_enemies_nearby"),
				(question_box, "str_do_you_want_to_retreat"),
			(else_try),
				(display_message, "str_can_not_retreat"),
			(try_end)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(call_script, "script_troop_agent_set_banner", "tableau_game_troop_label_banner", ":trigger_param_1", ":troop_id_trigger_param_1")
		]),

		(-28.0, 0.3, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(store_trigger_param_2, ":trigger_param_2"),
			(store_trigger_param_3, ":trigger_param_3"),
			(assign, ":var_4", reg0),
			(agent_is_human, ":trigger_param_1"),
			(agent_is_alive, ":trigger_param_1"), #this addition
			(agent_is_active, ":trigger_param_1"), #This addition, i disabled tihs whole mission template to fix the bug too.
			(get_player_agent_no, ":player_agent_no"),
			(try_begin),
				(eq, "$tom_weapon_break", 1),
				(eq, ":trigger_param_1", ":player_agent_no"),
				(store_random_in_range, ":random_in_range_0_1000", 0, 1000),
				(eq, ":random_in_range_0_1000", 1),
				(store_random_in_range, ":random_in_range_4_8", 4, 8),
				(troop_get_inventory_slot, ":inventory_slot_player_random_in_range_4_8", "trp_player", ":random_in_range_4_8"),
				(gt, ":inventory_slot_player_random_in_range_4_8", 0),
				(str_store_item_name, 20, ":inventory_slot_player_random_in_range_4_8"),
				(troop_get_inventory_slot_modifier, ":inventory_slot_modifier_player_random_in_range_4_8", "trp_player", ":random_in_range_4_8"),
				(try_begin),
					(eq, ":inventory_slot_modifier_player_random_in_range_4_8", 6),
					(display_message, "@Your {s20} is too crappy to fall apart!", 0x00ff0000),
				(else_try),
					(troop_add_item, "trp_broken_items", ":inventory_slot_player_random_in_range_4_8", ":inventory_slot_modifier_player_random_in_range_4_8"),
					(troop_set_inventory_slot_modifier, "trp_player", ":random_in_range_4_8", 6),
					(display_message, "@Your {s20} cracks!", 0x00ff0000),
				(try_end),
			(try_end),
			(try_begin),
				(eq, "$tom_weapon_break", 1),
				(eq, ":trigger_param_2", ":player_agent_no"),
				(is_between, ":var_4", 1, "itm_cross_end"), #Previously itm_items_end
				(neg|is_between, ":var_4", "itm_light_lance", "itm_wooden_shield"),
				(item_get_type, ":type_var_4", ":var_4"),
				(ge, ":trigger_param_3", 10),
				(neq, ":type_var_4", 10),
				(neq, ":type_var_4", 8),
				(neq, ":type_var_4", 9),
				(neq, ":type_var_4", 5),
				(neq, ":type_var_4", 6),
				(store_random_in_range, ":random_in_range_0_1000", 0, 600),
				(eq, ":random_in_range_0_1000", 1),
				(assign, ":value", -1),
				(try_for_range, ":random_in_range_4_8", 0, 4),
					(troop_get_inventory_slot, ":inventory_slot_player_random_in_range_4_8_2", "trp_player", ":random_in_range_4_8"),
					(eq, ":inventory_slot_player_random_in_range_4_8_2", ":var_4"),
					(assign, ":value", ":random_in_range_4_8"),
				(try_end),
				(gt, ":value", 0),
				(str_store_item_name, 20, ":var_4"),
				(troop_get_inventory_slot_modifier, ":inventory_slot_modifier_player_random_in_range_4_8", "trp_player", ":value"),
				(try_begin),
					(eq, ":inventory_slot_modifier_player_random_in_range_4_8", 6),
					(display_message, "@Your {s20} falls apart!", 0x00ff0000),
					(agent_unequip_item, ":player_agent_no", ":var_4"),
					(troop_remove_item, "trp_player", ":var_4"),
					(troop_remove_item, "trp_broken_items", ":var_4"),
				(else_try),
					(troop_add_item, "trp_broken_items", ":var_4", ":inventory_slot_modifier_player_random_in_range_4_8"),
					(troop_set_inventory_slot_modifier, "trp_player", ":value", 6),
					(display_message, "@Your {s20} cracks!", 0x00ff0000),
				(try_end),
			(try_end),
			(agent_get_horse, ":horse_trigger_param_2", ":trigger_param_2"),
			(try_begin),
				(eq, "$tom_lance_breaking", 1),
				(gt, ":horse_trigger_param_2", 0),
				(this_or_next|is_between, ":var_4", "itm_light_lance", "itm_spear_a"), #Updated item slots
				(is_between, ":var_4", "itm_lance_banner_jer", "itm_pike_banner_teu"), #Updated item slots
				(ge, ":trigger_param_3", 50),
				(store_random_in_range, ":random_in_range_0_100", 0, 100),
				(gt, ":random_in_range_0_100", 20),
				(try_begin),
					(eq, ":trigger_param_2", ":player_agent_no"),
					(display_message, "@You broke your lance!", 0x00ff0000),
				(try_end),
				########Add effects on weapon break *Lances*
        (agent_get_position, pos1, ":trigger_param_2"),
		(agent_play_sound, ":trigger_param_1", "snd_shield_broken"),
		(particle_system_burst, "psys_lanse", pos1, 10),
        (particle_system_burst, "psys_lanse_straw", pos1, 30),
                ####Extend to Lanse_Blood
		#(particle_system_burst, "psys_lanse_blood", pos1, 10),
        #(particle_system_burst, "psys_lanse_blood", pos1, 30),
		        ########End Effects
				(agent_unequip_item, ":trigger_param_2", ":var_4"),
			(else_try),
				(this_or_next|is_between, ":var_4", "itm_bamboo_spear", "itm_wooden_shield"), #Updated item slots
				(is_between, ":var_4", "itm_pike_banner_teu", "itm_items_end"), #Updated item slots
				(le, ":horse_trigger_param_2", 0),
				(ge, ":trigger_param_3", 8),
				(store_random_in_range, ":random_in_range_0_100", 0, 100),
				(ge, ":random_in_range_0_100", 90),
				(try_begin),
					(eq, ":trigger_param_2", ":player_agent_no"),
					(display_message, "@You broke your spear!", 0x00ff0000),
				(try_end),
				########Add effects on weapon break *Spears*
        (agent_get_position, pos1, ":trigger_param_2"),
		(agent_play_sound, ":trigger_param_1", "snd_shield_broken"),
		(store_random_in_range, ":psys_to_use", "psys_lanse", "psys_lanse_blood"),
		(particle_system_burst, ":psys_to_use", pos1, 7), #Default = 10 (Higher = Bigger Particles)
        (particle_system_burst, ":psys_to_use", pos1, 21), #Default = 30 (Higher = Bigger Particles)
                ####Extend to Lanse_Blood
		#(particle_system_burst, "psys_lanse_blood", pos1, 10),
        #(particle_system_burst, "psys_lanse_blood", pos1, 30),
		        ########End Effects
				(agent_unequip_item, ":trigger_param_2", ":var_4"),
			(try_end),
			###Envfix weapon breaking patch start here
		]),

		(-26.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(store_trigger_param_2, ":trigger_param_2"), #Removedforunassignedstuff#
			(store_trigger_param_3, ":trigger_param_3"),
			(try_begin),
				(ge, ":trigger_param_1", 0),
				(neg|agent_is_ally, ":trigger_param_1"),
				(agent_is_human, ":trigger_param_1"),
				(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
				(party_add_members, "p_total_enemy_casualties", ":troop_id_trigger_param_1", 1),
				(eq, ":trigger_param_3", 1),
				(party_wound_members, "p_total_enemy_casualties", ":troop_id_trigger_param_1", 1),
			(try_end)
		]),

		(-8.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(eq, ":trigger_param_1", 0),
			(assign, "$pin_player_fallen", 0),
			(str_store_string, 5, "str_retreat"),
			(call_script, "script_simulate_retreat", 5, 20, 0),
			(call_script, "script_count_mission_casualties_from_agents"),
			(finish_mission, 0)
		]),

		(0.0, 0.0, ti_once,
		[],

		[
			(assign, "$g_battle_won", 0),
						(try_begin),
			(eq, "$additional_music", 0),
			(call_script, "script_combat_music_set_situation_with_culture"),
			(try_end),
			(assign, "$dmod_current_agent", -1),
			(assign, "$dmod_move_camera", -1)
		]),

		(30.0, 0.0, 0.0,
		[],

		[]),

		(2.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_check_friendly_kills")
		]),

		(1.0, 60.0, ti_once,
		[
			(store_mission_timer_a, reg1),
			(ge, reg1, 10),
			(all_enemies_defeated, 2),
			(set_mission_result, 1),
			(display_message, "str_msg_battle_won"),
			#(play_sound, "snd_won_battle"), #Moved to victorious main menu
			(assign, "$g_battle_won", 1),
			(assign, "$g_battle_result", 1),
			(assign, "$g_siege_sallied_out_once", 1),
			(assign, "$g_siege_method", 1),
			(call_script, "script_play_victorious_sound")
		],

		[
			(call_script, "script_count_mission_casualties_from_agents"),
			(finish_mission, 1)
		]),

		(10.0, 0.0, 0.0, # Battle won/lost messages!
		[],

		[
			(eq, "$g_battle_won", 1),
			#(play_sound, "snd_won_battle"), #Moved to victorious main menu
			(display_message, "str_msg_battle_won")
		]),

		(1.0, 60.0, ti_once,
		[
			(store_mission_timer_a, reg1),
			(ge, reg1, 10),
			(main_hero_fallen),
			(assign, ":var_1", 0),
			(try_for_agents, ":var_2"),
				(agent_is_ally, ":var_2"),
				(agent_is_alive, ":var_2"),
				(val_add, ":var_1", 1),
			(try_end),
			(eq, ":var_1", 0),
			(set_mission_result, -1),
						(try_begin),
			(eq, "$colored_messages", 1),
			(display_message, "@Battle lost...", 0x00f78078),
			(else_try),
			(display_message, "@Battle lost..."),
			(try_end),
			(assign, "$g_battle_won", -1),
			(assign, "$g_battle_result", -1)
		],

		[
			(call_script, "script_count_mission_casualties_from_agents"),
			(finish_mission, 0)
		]),

		(10.0, 0.0, 0.0, # Battle won/lost messages!
		[],

		[
			(eq, "$g_battle_won", -1),
						(try_begin),
			(eq, "$colored_messages", 1),
			(display_message, "@Battle lost! Press tab key to leave...", 0x00f78078),
			(else_try),
			(display_message, "@Battle lost! Press tab key to leave..."),
			(try_end),
			#(play_sound, "snd_battle_sounds"), #Moved to your companions carry you away from the fighting menu
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(gt, "$dmod_current_agent", 0),
			(eq, "$setting_use_dmod", 1),
			(eq, "$dmod_move_camera", 1),
			(agent_get_position, 1, "$dmod_current_agent"),
			(position_move_z, 1, 300),
			(position_move_y, 1, -300),
			(agent_get_horse, ":horse_l_dmod_current_agent", "$dmod_current_agent"),
			(try_begin),
				(ge, ":horse_l_dmod_current_agent", 0),
			(try_end),
			(try_begin),
				(eq, "$pop_camera_on", 1),
				(assign, "$pop_camera_on", 0),
			(try_end),
			(mission_cam_set_position, 1),
			(mission_cam_set_mode, 1),
			(set_fixed_point_multiplier, 100)
		],

		[]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(eq, "$setting_use_dmod", 1),
			(key_clicked, 238),
			(main_hero_fallen),
			(call_script, "script_dmod_cycle_forwards")
		],

		[]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(eq, "$setting_use_dmod", 1),
			(key_clicked, 239),
			(main_hero_fallen),
			(call_script, "script_dmod_cycle_backwards")
		],

		[]),

		(0.0, 0.0, ti_once,
		[],

		[
			(assign, "$pop_camera_on", 0),
			(assign, "$pop_camera_mouse_center_x", 500),
			(assign, "$pop_camera_mouse_center_y", 375),
			(assign, "$pop_camera_mouse_x", "$pop_camera_mouse_center_x"),
			(assign, "$pop_camera_mouse_y", "$pop_camera_mouse_center_y"),
			(assign, "$pop_camera_mouse_counter", 0)
		]),

		(0.0, 4.0, ti_once,
		[
			(eq, "$enable_deahtcam", 1),
			(main_hero_fallen),
			(eq, "$pop_camera_on", 0),
			(assign, "$tom_sand_storm", 0)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_position, 1, ":player_agent_no"),
			(position_get_x, ":position_x_1", 1),
			(position_get_y, ":position_y_1", 1),
			(init_position, 47),
			(position_set_x, 47, ":position_x_1"),
			(position_set_y, 47, ":position_y_1"),
			(position_set_z_to_ground_level, 47),
			(position_move_z, 47, 250),
			(mission_cam_set_mode, 1, 0, 0),
			(mission_cam_set_position, 47),
			(assign, "$pop_camera_rotx", 0),
			(assign, "$pop_camera_on", 1)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(this_or_next|eq, "$dmod_move_camera", 1),
			(eq, "$pop_camera_on", 1),
			(this_or_next|game_key_clicked, 0),
			(this_or_next|game_key_is_down, 0),
			(this_or_next|game_key_clicked, 1),
			(this_or_next|game_key_is_down, 1),
			(this_or_next|game_key_clicked, 2),
			(this_or_next|game_key_is_down, 2),
			(this_or_next|game_key_clicked, 3),
			(game_key_is_down, 3)
		],

		[
			(try_begin),
				(eq, "$dmod_move_camera", 1),
				(mission_cam_set_mode, 1, 0, 0),
				(assign, "$pop_camera_rotx", 0),
				(assign, "$pop_camera_on", 1),
				(assign, "$dmod_move_camera", 0),
			(try_end),
			(mission_cam_get_position, 47),
			(assign, ":value", 0),
			(assign, ":value_2", 0),
			(try_begin),
				(this_or_next|game_key_clicked, 0),
				(game_key_is_down, 0),
				(assign, ":value_2", 10),
			(try_end),
			(try_begin),
				(this_or_next|game_key_clicked, 1),
				(game_key_is_down, 1),
				(assign, ":value_2", -10),
			(try_end),
			(try_begin),
				(this_or_next|game_key_clicked, 2),
				(game_key_is_down, 2),
				(assign, ":value", -10),
			(try_end),
			(try_begin),
				(this_or_next|game_key_clicked, 3),
				(game_key_is_down, 3),
				(assign, ":value", 10),
			(try_end),
			(position_move_x, 47, ":value"),
			(position_move_y, 47, ":value_2"),
			(mission_cam_set_position, 47)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(eq, "$pop_camera_on", 1),
			(neg|is_presentation_active, "prsnt_battle"),
			(mouse_get_position, 1),
			(set_fixed_point_multiplier, 1000),
			(position_get_x, reg1, 1),
			(position_get_y, reg2, 1),
			(set_fixed_point_multiplier, 100),
			(this_or_next|neq, reg1, "$pop_camera_mouse_center_x"),
			(neq, reg2, "$pop_camera_mouse_center_y")
		],

		[
			(assign, ":value", 1),
			(try_begin),
				(eq, reg1, "$pop_camera_mouse_x"),
				(eq, reg2, "$pop_camera_mouse_y"),
				(val_add, "$pop_camera_mouse_counter", 1),
				(try_begin),
					(gt, "$pop_camera_mouse_counter", 50),
					(assign, "$pop_camera_mouse_center_x", reg1),
					(assign, "$pop_camera_mouse_center_y", reg2),
					(assign, "$pop_camera_mouse_counter", 0),
				(try_end),
				(assign, ":value", 0),
			(try_end),
			(eq, ":value", 1),
			(assign, "$pop_camera_mouse_counter", 0),
			(assign, "$pop_camera_mouse_x", reg1),
			(assign, "$pop_camera_mouse_y", reg2),
			(mission_cam_get_position, 47),
			(store_sub, ":value_2", "$pop_camera_mouse_center_x", reg1),
			(store_sub, ":value_3", reg2, "$pop_camera_mouse_center_y"),
			(try_for_range, ":number", 0, 2),
				(try_begin),
					(eq, ":number", 1),
					(assign, ":value_2", ":value_3"),
				(try_end),
				(this_or_next|lt, ":value_2", -2),
				(gt, ":value_2", 2),
				(assign, ":value_4", 1),
				(try_begin),
					(lt, ":value_2", 0),
					(assign, ":value_4", -1),
				(try_end),
				(val_abs, ":value_2"),
				(val_sub, ":value_2", 2),
				(convert_to_fixed_point, ":value_2"),
				(store_sqrt, ":value_2", ":value_2"),
				(convert_from_fixed_point, ":value_2"),
				(val_clamp, ":value_2", 1, 64),
				(val_mul, ":value_2", ":value_4"),
				(try_begin),
					(eq, ":number", 0),
					(store_mul, ":value_5", "$pop_camera_rotx", -1),
					(position_rotate_x, 47, ":value_5"),
					(position_rotate_z, 47, ":value_2"),
					(position_rotate_x, 47, "$pop_camera_rotx"),
				(try_end),
				(try_begin),
					(eq, ":number", 1),
					(position_rotate_x, 47, ":value_2"),
					(val_add, "$pop_camera_rotx", ":value_2"),
				(try_end),
			(try_end),
			(mission_cam_set_position, 47)
		]),

		(1.0, 4.0, ti_once,
		[
			(main_hero_fallen)
		],

		[
			(assign, "$pin_player_fallen", 1),
			(neq, "$use_player_auxiliary", 1),
			(display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
			(display_message, "@If you choose to watch the fight you can use the mouse scroll up and down to switch between troop view or AWDS keys for free camera view.")
		]),

		(0.0, 0.0, 0.0,
		[],

		[
			(game_key_clicked, 22),
			(neg|is_presentation_active, "prsnt_battle"),
			(start_presentation, "prsnt_battle")
		]),

		(0.1, 0.0, 0.0,
		[],

		[
			(is_presentation_active, "prsnt_battle"),
			(call_script, "script_update_order_panel_statistics_and_map")
		]),

		(-22.0, 0.0, 0.0,
		[],

		[
			(display_message, "str_use_baggage_for_inventory")
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_set_matching_sexy_boots", ":trigger_param_1")
		]),

			(0.0, 0.0, 0.0,
		[
			(eq, "$sp_shield_bash", 1),
			(game_key_is_down, 7),
			(game_key_clicked, 6),
			(neg|main_hero_fallen),
		],

		[
		(call_script, "script_shield_bash"),
		]),

			##AI kicking begin
		   (2, 0, 3, #AI kicking
       [], [
	(get_player_agent_no,":player"),
	(try_for_agents, ":agent"),
		(neq, ":agent", ":player"),
		(agent_is_alive, ":agent"),
		(neq, ":agent", -1),
		(agent_is_human, ":agent"),#Only humans can kick....FOR NOW
		(agent_is_active, ":agent"),
		(agent_slot_eq, ":agent", slot_agent_is_running_away, 0),#Isn't fleeing the battle.
		##He's an eligible human.  Now see if he's in a position to kick.
		(agent_get_attack_action, ":attack_action", ":agent"), #returned values: free = 0, readying_attack = 1, releasing_attack = 2, completing_attack_after_hit = 3, attack_parried = 4, reloading = 5, after_release = 6, cancelling_attack = 7
		(agent_get_defend_action, ":defend_action", ":agent"),#
		(this_or_next|eq,":attack_action",4),#Just got parried
		(this_or_next|eq,":defend_action",1),#Parrying an enemy
		##So he'll only try to kick if he just parried an enemy attack, or his own attack just got parried.
		(agent_get_team, ":team", ":agent"),
		(assign, ":maximum_distance", 100),
		#Target Acquisition
		(agent_ai_get_look_target,":suspect",":agent"),
		(gt,":suspect",0),#Make sure there is someone.
		(agent_is_alive, ":suspect"),
		(agent_is_human, ":suspect"),#Only kick humans
		(agent_is_active, ":suspect"),
		(agent_get_team, ":suspect_team", ":suspect"),
		(neq, ":suspect_team", ":team"),#Friends don't let friends kick friends.
		(agent_get_position, pos1, ":agent"),#Distance check
		(agent_get_position, pos2, ":suspect"),
		(neg|position_is_behind_position, pos2, pos1), #Suspect can't be behind kicker.
		(get_distance_between_positions, ":distance", pos1, pos2),
		(le, ":distance", ":maximum_distance"),
		#Check chance
		(store_random_in_range,":kickchance", 1, 10),
		(try_begin),
			(eq,":kickchance",1), #10% chance per check
				#(display_message, "@Agent kicks."),
				(agent_set_animation, ":agent", "anim_prepare_kick_0"),
				(agent_deliver_damage_to_agent, ":agent", ":suspect", 3),
				(agent_set_animation, ":suspect", "anim_strike3_abdomen_front"),#Get Kicked
			(try_end),
	   (try_end),]),
	   
	   ##AI Kicking end
		
		
		(0.25, 0.0, 4.0,
		[
			(eq, "$sp_shield_bash_ai", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(neq, ":var_2", ":player_agent_no"),
				(agent_is_alive, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_active, ":var_2"), #Test to see if it stops AI from shield bashing (new addition v3)
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(store_skill_level, ":skill_level_shield_troop_id_var_2", "skl_shield", ":troop_id_var_2"),
				(store_proficiency_level, ":proficiency_level_troop_id_var_2_0", ":troop_id_var_2", 0),
				(ge, ":skill_level_shield_troop_id_var_2", 4),
				(ge, ":proficiency_level_troop_id_var_2_0", 200),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(le, ":horse_var_2", 0),
				(try_begin),
					(neg|agent_slot_ge, ":var_2", 50, 1),
					(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
					(agent_get_wielded_item, ":wielded_item_var_2_1", ":var_2", 1),
					(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
					(eq, ":type_wielded_item_var_2_1", 7),
					(agent_get_attack_action, ":attack_action_var_2", ":var_2"),
					(eq, ":attack_action_var_2", 0),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_position, 1, ":var_2"),
					(assign, ":value", -1),
					(assign, ":value_2", 125),
					(try_for_agents, ":var_13"),
						(agent_is_alive, ":var_13"),
						(agent_is_human, ":var_13"),
						(agent_get_position, 2, ":var_13"),
						(neg|position_is_behind_position, 2, 1),
						(agent_get_team, ":team_var_13", ":var_13"),
						(neq, ":team_var_13", ":team_var_2"),
						(try_begin),
							(eq, ":team_var_2", 0),
							(assign, ":value_3", 2),
						(else_try),
							(eq, ":team_var_2", 2),
							(assign, ":value_3", 0),
						(else_try),
							(eq, ":team_var_2", 1),
							(assign, ":value_3", 3),
						(else_try),
							(eq, ":team_var_2", 3),
							(assign, ":value_3", 1),
						(try_end),
						(neq, ":team_var_13", ":value_3"),
						(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
						(le, ":distance_between_positions_1_2", ":value_2"),
						(assign, ":value_2", ":distance_between_positions_1_2"),
						(assign, ":value", ":var_13"),
					(try_end),
					(ge, ":value", 0),
					(agent_get_horse, ":horse_var_2", ":value"),
					(eq, ":horse_var_2", -1),
					(store_random_in_range, ":random_in_range_15_26", 15, 26),
					(agent_set_slot, ":var_2", 50, ":random_in_range_15_26"),
					(agent_set_animation, ":var_2", "anim_shield_bash"),
					(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
					(troop_get_type, ":type_wielded_item_var_2_1", ":troop_id_var_2"),
					(try_begin),
						(eq, ":type_wielded_item_var_2_1", 0),
						(agent_play_sound, ":var_2", "snd_man_yell"),
					(else_try),
						(eq, ":type_wielded_item_var_2_1", 1),
						(agent_play_sound, ":var_2", "snd_woman_yell"),
					(try_end),
					(agent_play_sound, ":value", "snd_wooden_hit_low_armor_high_damage"),
					(agent_get_defend_action, ":attack_action_var_2", ":value"),
					(try_begin),
						(eq, ":attack_action_var_2", 2),
						(neg|position_is_behind_position, 1, 2),
						(agent_get_wielded_item, ":wielded_item_var_2_1", ":value", 1),
						(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
						(eq, ":type_wielded_item_var_2_1", 7),
						(agent_set_animation, ":value", "anim_shield_bash"),
					(else_try),
						(agent_set_animation, ":value", "anim_shield_strike"),
					(try_end),
				(try_end),
				(agent_get_slot, ":var_2_50", ":var_2", 50),
				(val_sub, ":var_2_50", 1),
				(val_max, ":var_2_50", 0),
				(agent_set_slot, ":var_2", 50, ":var_2_50"),
			(try_end)
]),

		(0.0, 0.0, ti_once,
		[],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_team, ":team_player_agent_no", ":player_agent_no"),
			(set_show_messages, 0),
			(team_give_order, ":team_player_agent_no", 9, 0),
			(set_show_messages, 1)
		]),

		(0.0, 0.0, ti_once,
		[
			(eq, 0, 1),
			(eq, "$enable_deahtcam", 1),
			(main_hero_fallen)
		],

		[
			(assign, "$fclock", 1),
			(call_script, "script_player_order_formations", 2),
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_team, ":team_player_agent_no", ":player_agent_no"),
			(team_give_order, ":team_player_agent_no", 9, 2)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_is_human, ":trigger_param_1"),
			(agent_is_non_player, ":trigger_param_1"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(lt, ":troop_id_trigger_param_1", "trp_kidnapped_girl"),
			(try_for_range, reg0, 0, 4),
				(agent_get_item_slot, ":item_slot_trigger_param_1_reg0", ":trigger_param_1", reg0),
				(is_between, ":item_slot_trigger_param_1_reg0", 1, "itm_cross_end"), #Previously itm_items_end
				(agent_unequip_item, ":trigger_param_1", ":item_slot_trigger_param_1_reg0"),
			(try_end),
			(try_for_range, reg0, 0, 2),
				(agent_get_wielded_item, ":item_slot_trigger_param_1_reg0", ":trigger_param_1", reg0),
				(is_between, ":item_slot_trigger_param_1_reg0", 1, "itm_cross_end"), #Previously itm_items_end
				(agent_unequip_item, ":trigger_param_1", ":item_slot_trigger_param_1_reg0"),
			(try_end),
			(assign, ":var_4", 0),
			(assign, ":var_5", 25),
			(assign, ":var_6", 50),
			(assign, ":var_7", 75),
			(assign, ":var_8", 100),
			(assign, ":var_18", 125),
			(assign, ":var_10", 150),
			(assign, ":var_11", 175),
			(assign, ":var_12", 200),
			(assign, ":value", 0),
			(assign, ":value_2", 0),
			(assign, ":value_3", 0),
			(assign, ":value_4", 0),
			(assign, ":value_5", 0),
			(assign, ":value_6", 0),
			(assign, ":value_7", 0),
			(assign, ":value_8", 0),
			(assign, ":value_9", 0),
			(troop_get_inventory_capacity, ":inventory_capacity_troop_id_trigger_param_1", ":troop_id_trigger_param_1"),
			(try_for_range, ":localvariable", 0, ":inventory_capacity_troop_id_trigger_param_1"),
				(troop_get_inventory_slot, ":inventory_slot_troop_id_trigger_param_1_localvariable", ":troop_id_trigger_param_1", ":localvariable"),
				(is_between, ":inventory_slot_troop_id_trigger_param_1_localvariable", 1, "itm_cross_end"), #Previously itm_items_end
				(item_get_type, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
				(try_begin),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 4),
					(val_add, ":var_4", 1),
					(troop_set_slot, "trp_items_array", slot_troop_relations_begin, ":var_4"),
					(troop_set_slot, "trp_items_array", ":var_4", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 2),
					(val_add, ":var_5", 1),
					(troop_set_slot, "trp_items_array", slot_troop_last_quest_betrayed, ":var_5"),
					(troop_set_slot, "trp_items_array", ":var_5", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_2", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 7),
					(val_add, ":var_6", 1),
					(troop_set_slot, "trp_items_array", slot_troop_recruitment_random, ":var_6"),
					(troop_set_slot, "trp_items_array", ":var_6", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_3", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 3),
					(val_add, ":var_7", 1),
					(troop_set_slot, "trp_items_array", slot_troop_personalitymatch_object, ":var_7"),
					(troop_set_slot, "trp_items_array", ":var_7", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_4", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 10),
					(val_add, ":var_8", 1),
					(troop_set_slot, "trp_items_array", 100, ":var_8"),
					(troop_set_slot, "trp_items_array", ":var_8", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_5", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 6),
					(val_add, ":var_18", 1),
					(troop_set_slot, "trp_items_array", slot_troop_rehire_speech, ":var_18"),
					(troop_set_slot, "trp_items_array", ":var_18", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_6", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 5),
					(val_add, ":var_10", 1),
					(troop_set_slot, "trp_items_array", slot_troop_days_on_mission, ":var_10"),
					(troop_set_slot, "trp_items_array", ":var_10", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_7", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 8),
					(val_add, ":var_11", 1),
					(troop_set_slot, "trp_items_array", 175, ":var_11"),
					(troop_set_slot, "trp_items_array", ":var_11", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_8", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 9),
					(val_add, ":var_12", 1),
					(troop_set_slot, "trp_items_array", 200, ":var_12"),
					(troop_set_slot, "trp_items_array", ":var_12", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_9", 1),
				(try_end),
			(try_end),
			(try_begin),
				(eq, ":value", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_relations_begin),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 1, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_2", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_last_quest_betrayed),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 26, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_3", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_recruitment_random),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 51, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_4", 1),
				(try_begin),
					(eq, ":value_2", 1),
					(store_random_in_range, ":random_in_range_0_100", 0, 100),
					(lt, ":random_in_range_0_100", 65),
				(else_try),
					(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_personalitymatch_object),
					(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 76, ":items_array_relations_begin"),
					(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
					(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
				(try_end),
			(try_end),
			(try_begin),
				(eq, ":value_5", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", 100),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 101, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_6", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_rehire_speech),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 126, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_7", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_days_on_mission),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 151, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_8", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", 175),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 176, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_9", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", 200),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 201, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end)
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(assign, "$enable_deahtcam", 1),
			(assign, "$auxilary_player_active", 0),
			(eq, "$use_player_auxiliary", 1),
			(assign, "$g_move_heroes", 1),
			(party_clear, "p_temp_casualties_3"),
			(call_script, "script_party_add_party", "p_temp_casualties_3", "p_main_party"),
			(set_player_troop, "trp_player"),
			(assign, "$enable_deahtcam", 0)
		]),

		(5.0, 0.0, 0.0,
		[
			(eq, "$use_player_auxiliary", 1),
			(eq, "$enable_deahtcam", 0),
			(get_player_agent_no, ":player_agent_no"),
			(neg|agent_is_alive, ":player_agent_no")
		],

		[
			(set_fixed_point_multiplier, 100),
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_team, ":team_player_agent_no", ":player_agent_no"),
			(agent_get_division, ":division_player_agent_no", ":player_agent_no"),
			(assign, ":value", 0),
			(try_for_agents, ":var_5"),
				(eq, ":value", 0),
				(agent_is_human, ":var_5"),
				(agent_is_alive, ":var_5"),
				(agent_get_team, ":team_var_5", ":var_5"),
				(agent_get_party_id, ":party_id_var_5", ":var_5"),
				(eq, ":party_id_var_5", "p_main_party"),
				(agent_get_division, ":division_player_agent_no_2", ":player_agent_no"),
				(agent_get_group, ":group_player_agent_no", ":player_agent_no"),
				(eq, ":team_player_agent_no", ":team_var_5"),
				(eq, ":division_player_agent_no", ":division_player_agent_no_2"),
				(agent_get_troop_id, ":troop_id_var_5", ":var_5"),
				(neg|is_between, ":troop_id_var_5", "trp_npc1", "trp_knight_1_1_wife"),
				(set_player_troop, ":troop_id_var_5"),
				(store_agent_hit_points, ":agent_hit_points_var_5_1", ":var_5", 1),
				(agent_get_position, 1, ":var_5"),
				(position_set_z, 1, -2000),
				(position_set_x, 1, 0),
				(position_set_y, 1, 0),
				(agent_get_position, 0, ":var_5"),
				(set_spawn_position, 0),
				(agent_get_horse, ":horse_var_5", ":var_5"),
				(try_begin),
					(gt, ":horse_var_5", 0),
					(agent_set_position, ":horse_var_5", 1),
					(remove_agent, ":horse_var_5"),
				(try_end),
				(agent_set_position, ":var_5", 1),
				(agent_set_slot, ":var_5", 100, 1),
				(agent_get_slot, ":var_5_102", ":var_5", 102),
				(remove_agent, ":var_5"),
				(spawn_agent, ":troop_id_var_5"),
				(assign, ":player_agent_no", reg0),
				(agent_set_slot, ":player_agent_no", 102, ":var_5_102"),
				(agent_set_team, ":player_agent_no", ":team_player_agent_no"),
				(agent_set_hit_points, ":player_agent_no", ":agent_hit_points_var_5_1", 1),
				(agent_set_group, ":player_agent_no", ":group_player_agent_no"),
				(agent_set_slot, ":player_agent_no", 100, 2),
				(agent_set_slot, ":player_agent_no", 101, ":troop_id_var_5"),
				(try_begin),
					(agent_get_horse, ":horse_player_agent_no", ":player_agent_no"),
					(gt, ":horse_player_agent_no", 0),
					(lt, ":horse_var_5", 0),
					(agent_set_position, ":horse_player_agent_no", 1),
					(remove_agent, ":horse_player_agent_no"),
				(try_end),
				(set_player_troop, "trp_player"),
				(assign, ":value", 1),
				(assign, "$auxilary_player_active", 1),
			(try_end),
			(eq, ":value", 0),
			(assign, "$enable_deahtcam", 1)
		])
	] + crouching_triggers ),

	("castle_attack_walls_belfry", mtf_battle_mode, -1,
	"You attack the walls of the castle...",
	[(0, mtef_attackers|mtef_team_1, af_override_horse, aif_start_alarmed, 18, []),
	(0, mtef_attackers|mtef_team_1, af_override_horse, aif_start_alarmed, 0, []),
	(10, mtef_defenders|mtef_team_0, af_override_horse, aif_start_alarmed, 0, []),
	(11, mtef_defenders|mtef_team_0, af_override_horse, aif_start_alarmed, 4, []),
	(15, mtef_defenders|mtef_team_0, af_override_horse, aif_start_alarmed, 0, []),
	(40, mtef_defenders|mtef_team_0|mtef_archers_first, af_override_horse, aif_start_alarmed, 2, []),
	(41, mtef_defenders|mtef_team_0|mtef_archers_first, af_override_horse, aif_start_alarmed, 2, []),
	(42, mtef_defenders|mtef_team_0|mtef_archers_first, af_override_horse, aif_start_alarmed, 2, []),
	(43, mtef_defenders|mtef_team_0|mtef_archers_first, af_override_horse, aif_start_alarmed, 2, []),
	(44, mtef_defenders|mtef_team_0|mtef_archers_first, af_override_horse, aif_start_alarmed, 2, []),
	(45, mtef_defenders|mtef_team_0|mtef_archers_first, af_override_horse, aif_start_alarmed, 2, []),
	(46, mtef_defenders|mtef_team_0|mtef_archers_first, af_override_horse, aif_start_alarmed, 2, []),
	(47, mtef_defenders|mtef_team_0|mtef_archers_first, af_override_horse, aif_start_alarmed, 2, [])],
	[
		
    (7, 0, ti_once,
    [],
    [
	(call_script, "script_assign_traits"),
    ]),


    (0, 0, 1, 
    [
    ],
    [
	(call_script, "script_stumbling"),
    ]),






#Decapitations next level right here.
(ti_on_agent_hit, 0, 0, [(eq, "$dynamic_decap", 1),],
[
   (store_trigger_param_1, ":victim_agent"),
   (store_trigger_param_2, ":attacker_agent"),
   (store_trigger_param_3, ":damage"),
   (assign, ":attacker_item", reg0), ### Transfer the item ID to make sure it dosn't change while the script is running
   (copy_position, pos5, pos0), ### Transfer the position of the hit to make sure it dosn't change while the script is running
   (neq, ":victim_agent", -1),
   (try_begin), #-- Decapitations --#
      (agent_is_human, ":victim_agent"),
	  (ge, ":attacker_item", 0),
	  (assign, ":run", 0), ### Reset the run test variable
#	  (try_begin), ### Special weapons that can decap, ovevrrides the below conditions
#		  (this_or_next|eq, ":attacker_item", "itm_supercrossbow"),
#		  (eq, ":attacker_item", "itm_supersledge"),
#		  (assign, ":run", 1),
	  (try_begin),
		  #(neq, ":attacker_item", "itm_mace_1"), ### List of weapons that cannot decapitate
		  #(neq, ":attacker_item", "itm_mace_2"), ### This would be easier to do with a preperty check (for damage type), but I don't know if that is possible or not
		  #(neq, ":attacker_item", "itm_mace_3"),
		  #(neq, ":attacker_item", "itm_staff"), #Keeping active incase of script errors
		  (agent_get_action_dir, ":attack_dir", ":attacker_agent"), ### Makes sure the attack is either a left or right swing
		  (this_or_next|eq, ":attack_dir", 1), ### Right swing
		  (eq, ":attack_dir", 2), ### Left swing
		  (assign, ":run", 1),
	  (try_end),
	  (eq, ":run", 1), ### One of the checks were true, continue to run script
	  #(assign, reg1, ":damage"), #Debug messages
	  #(display_message, "@Damage: {reg1}"),
	  
	  (assign, ":run", 0), ### Reset the run test variable
	  (try_begin),
		(ge, ":damage", "$decap_damage"), ### 30 Minimum damage required to decapitate an agent
		(assign, ":run", 1),
		
#	  (else_try),  ### If debugging mode is on, this bypasses the damage requirement check
#		  (eq,"$g_decapitations_debugging", 1),
#		  (assign, ":run", 1),
#		  (display_message, "@Decap minimum DMG req bypassed"),
	  (try_end),
	  (eq, ":run", 1),
	  
	  (store_agent_hit_points, ":hp", ":victim_agent", 1),
	  (val_add, ":hp", 10), ### 10 Victim must have the negative of this hp or below after hit for the script to move on (never put this value below 0 since the agent has to be absolutley positvely dead)!
	  (ge, ":damage", ":hp"),
	  
	  
	  ### Compare the hit position to the agent's position
      (agent_get_position, pos4, ":victim_agent"),
      (get_distance_between_positions, ":distance", pos4, pos5), 
	  (agent_get_horse, ":is_mounted", ":victim_agent"),
	  (try_begin), ### If the agent is on horseback, these values are used (note that these values will not be exactly correct if the horse is very large or very small)
		(ge, ":is_mounted", 0), ### Will be -1 if no horse is to be found, so anything above means that the agent is mounted
		(assign, ":min_distance", 240), ### Minimum distance from the agent's horse's hooves from which the hit is valid (240 is an approximate value)
		(assign, ":max_distance", 260), ### Maximum distance from the agent's horse's hooves to which the hit is valid (260 is an approximate value)
	  (else_try),  ### If the agent is on foot, these values are used
	    (assign, ":min_distance", 160), ### Minimum distance from the agent's feet from which the hit is valid (160 = slightly below the neck)
	    (assign, ":max_distance", 176), ### Maximum distance from the agent's feet to which the hit is valid (176 = near the nose)
	  (try_end),
      (is_between, ":distance", ":min_distance", ":max_distance"), ### Check to see if the hit is within the allowed area
	  
	  
	  (assign, ":run", 0), ### Default variable value before damage test
	  (try_begin),
		  (store_div, ":chance", ":damage", "$decap_damage_divider"), ### Chance of decap is damage / 4 right now. Lower this value for higher chances of decapitation (or press M+Right Ctrl for debug more if you just want to test easy decaps in-game).
		  
		  #(assign, reg1, ":chance"), #Debug messages
		  #(display_message, "@Decap chance is: {reg1}"),
		  (store_random_in_range, ":diceroll", 0, "$decap_randomizer"), ### Randomizer, 0-100
		  
		  #(assign, reg1, ":diceroll"), #Debug messages
		  #(display_message, "@Diceroll: {reg1}"),
		  (le, ":diceroll", ":chance"), ### ":diceroll" must be less than or equal to ":chance", if it is, decapitation occurs!
		  
		  (assign, ":run", 1), ### SUCCESS!
		  
#     (else_try),  ### If debugging mode is on, bypass chance calculation
#		  (eq,"$g_decapitations_debugging", 1),
#		  (assign, ":run", 1),
#		  (display_message, "@Decap chance calc bypassed"),
	  (try_end),  
	  (eq, ":run", 1), ### Time for the fun stuff!

	  ### Gender test for spawning the right head type
	  (assign, ":head_type", "itm_cut_off_head_male"),
	  (agent_get_troop_id, ":victim_troop", ":victim_agent"),
	  (try_begin),
	    (ge, ":victim_troop", 0),
		(troop_get_type,":victim_gender",":victim_troop"),
		(eq, ":victim_gender", 1),
		(assign, ":head_type", "itm_cut_off_head_female"),
	  (try_end),
	  
	  ### Randomize the spawned head's and/or helmet's position and orientation
	  (store_random_in_range, ":z_rotation", 0, 360),
	  (store_random_in_range, ":y_rotation", -60, 60),
	  (store_random_in_range, ":x_pos", -90, 90),
	  (store_random_in_range, ":y_pos", -90, 90),
	  (position_rotate_z, pos4,":z_rotation"),
	  (position_rotate_y, pos4,":y_rotation"),
	  (position_move_x, pos4, ":x_pos"),
	  (position_move_y, pos4, ":y_pos"),
	  (position_set_z_to_ground_level, pos4),
	  (position_move_z, pos4, 5),
	  (set_spawn_position, pos4),
	  (assign, ":prunetime", 360), ### This is the time in seconds before the spawned head or helmet gets pruned (removed). Recommended to keep it above 0 to make sure it gets removed eventually or when the scene resets, to prevent performance issues.
	  
	  #(spawn_item, ":head_type", 0, ":prunetime"), ### This is the old way of spawning the head on the ground with the helmet, disabled because of the new dynamic heads. You can comment away (disable) the dynamic heads spawning further down and uncomment this line for a less performance-needing approach (with no physics involved).
	  
	  ### Does the agent have a helmet or hat equipped?
      (agent_get_item_slot, ":item", ":victim_agent", 4), #head slot
      (try_begin),
         (ge, ":item", 1), ### Does it?
         (agent_unequip_item, ":victim_agent", ":item"), ### Yes it does. Unequip it to allow replacement by the invisible helmet further down
		 (try_begin),
			 ### Don't spawn items with "itp_attatch_armature" flag: rigging causes floating bugs
			 ### This would be much better to do with an item flag check, but I haven't found any way to do that
			 #(neq, ":item", "itm_with_itp_attatch_armature"),
			 #(neg|is_between,":item","start_of_itm_range_with_itp_attatch_armature","end_of_itm_range_with_itp_attatch_armature"),
			#(set_spawn_position, pos4),
			(spawn_item, ":item", 0, ":prunetime"), ### Spawns the agent's currently equipped headgear on the dropped head's position
		 (try_end),
      (try_end),
	  
	  (agent_equip_item, ":victim_agent", "itm_invisible_head"), ### Put an invisible helmet on the agent's head to "remove" it
	  
	  
	  (agent_get_position, pos4, ":victim_agent"), ### Refreshes the agent's position
	  (position_move_z, pos4, ":min_distance"), ### Move to the where the neck used to be attached
	  
	  
	  ### Blood effects! The last variable is the strength. Lower or increase it for more/less blood (or tweak the particle effects themselves in "module_particle_systems.py").
      (particle_system_burst, "psys_blood_decapitation", pos4, 40), 
	  (particle_system_burst, "psys_game_blood", pos4, 10),
	  (particle_system_burst, "psys_game_blood_2", pos4, 10),
	  
	  (play_sound_at_position, "snd_decapitation_battle", pos4), ### Play some nasty sounds
	  
	  
	  ### Dynamic head spawning! See the bottom of "module_scene_props.py" for physics-related options and more.
	  (position_move_z, pos4, 20),
	  (set_spawn_position, pos4),
	  (assign, ":head_type", "spr_head_dynamic_male"),
	  (try_begin), ### Gender check (for determening the type of head)
		(eq, ":victim_gender", 1),
		(assign, ":head_type", "spr_head_dynamic_female"),
	  (try_end),
	  (spawn_scene_prop, ":head_type"),
	  
		#Addition check if we should allow the message to appears
			(eq, "$allow_decap_mess", 1), #Possible script error

	  ### This below is for the text that shows up when somebody is decapitated.
	  
	  ### Who decapitated who?
		(agent_get_troop_id, ":attacker_troop", ":attacker_agent"),
		(str_store_troop_name, s0, ":attacker_troop"),

		(agent_get_troop_id, ":victim_troop", ":victim_agent"),
		(str_store_troop_name, s1, ":victim_troop"),

	  
	  ### Colour check (friend or foe?)
	  (get_player_agent_no, ":my_agent"),
	  (agent_get_team, ":my_team", ":my_agent"),
	  (agent_get_team, ":victim_team", ":victim_agent"),
	  (try_begin), ### Display it!
		  (neq, ":my_team", ":victim_team"),
		  (display_message, "@>>> {s0} decapitated {s1}!", 0xFF33DD11), ## Green
	  (else_try),
		  (display_message, "@>>> {s0} decapitated {s1}!", 0xFFFF4422), ## Red
	  (try_end),
   (try_end), #-- Decapitations END --#
   
   ]),



	#AI Sound horn!
			(0.0, 0.0, 2.0,
		[
			##(store_random_in_range, ":horn_chance", 0, 22),
			#(eq, ":horn_chance", 0),
		],
		[
			(call_script, "script_formation_ai_sound_horn"),
		]),
	#AI Sound horn end!










			##################################################
##### troop_ratio_bar
##################################################
      (0, 0, ti_once, [
	  (eq, "$use_troopbars", 1),
	  ], [
	  (start_presentation, "prsnt_troop_ratio_bar"),
	  ]),
##################################################
##### troop_ratio_bar
##################################################
	
###Voice-over for Infantry, archers & Cavalry
		
		(0.0, 0.3, 0.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 29) #Everyone!
		],

		[
		(call_script, "script_identify_battle_voices_all")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 30) #Infantry
		],

		[
		(call_script, "script_identify_battle_voices_inf")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 31) #Archers
		],

		[
		(call_script, "script_identify_battle_voices_archers")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 32) #Cavalry
		],

		[
		(call_script, "script_identify_battle_voices_cav")
		]),
		###Voice-over for Infantry, archers & Cavalry	
		
		
		
							#####MUSICBOX SIEGE VARIANT
	(ti_after_mission_start, 0, ti_once, [ #680 #(ti_after_mission_start, 0, 680, [ #680
 #Obtained from Mod Options, affects mission templates, range: ALL SP Hostile music, co-op variant is additional_music_coop.
 (eq, "$additional_music", 1),
	],
		
  [
    #(play_track, "track_silence", 1), #Stop current module track
	   (music_set_situation, mtf_sit_fight), #Field
   #(music_set_situation, mtf_sit_siege), #Siege probably don't use
	(assign, "$music_timer", 0), #Patch
  #Randomize chance is 1 in a 5 (20%)
  
  #Field related extend to sieges
  (store_random_in_range, ":randomizer", 0, 2), #50% Chance of randomization
  (try_begin),
  (eq, ":randomizer", 0),
  (store_random_in_range, ":euro_randomizernext", 1, 11),
  (store_random_in_range, ":medi_randomizer", 1, 6),
  (store_random_in_range, ":arab_randomizer", 1, 8),
  (assign, "$track_count_field_siege", ":euro_randomizernext"),
  (assign, "$track_count_field_medi_siege", ":medi_randomizer"),
  (assign, "$track_count_field_arabs_siege", ":arab_randomizer"),
  (try_end),
  #Field related extend to sieges
  ]),
	
	(0, 0, 3, [ #680 #(ti_after_mission_start, 0, 680, [ #680
	(eq, "$additional_music", 1),
	 #Obtained from Mod Options, affects mission templates, range: ALL SP Hostile music, co-op variant is additional_music_coop.
	],
		
  [
		  #(display_message, "@Executing music code"),
		  (store_mission_timer_b, ":time_msec"),
		  #(assign, reg10, ":time_msec"),
          #(str_clear, s10),
          #(str_store_string, s10, "@Mission timer B for music: {reg10}"),
		  #(display_message, s10),
			#if next action time is lower than current time, play the sound
			(ge, ":time_msec", "$music_timer"),
			(reset_mission_timer_b), #Resetting mission timer, too.
			(assign, "$music_timer", 0),# Resetting value when track ends.
		
  #Euro only
     (try_begin),
      (ge, "$track_count_field_siege", 11),
      (assign, "$track_count_field_siege", 1),
    (else_try),
      (val_add, "$track_count_field_siege", 1),
	  (ge, "$track_count_field_siege", 11),
	  (assign, "$track_count_field_siege", 1),
    (try_end),
  #Euro only
  
  #Mediterrain only
  
       (try_begin),
      (ge, "$track_count_field_medi_siege", 6),
      (assign, "$track_count_field_medi_siege", 1),
    (else_try),
      (val_add, "$track_count_field_medi_siege", 1),
	  (ge, "$track_count_field_medi_siege", 6),
	  (assign, "$track_count_field_medi_siege", 1),
    (try_end),
  #Mediterrain only
  
  
  #Arabs only

       (try_begin),
      (ge, "$track_count_field_arabs_siege", 8),
      (assign, "$track_count_field_arabs_siege", 1),
    (else_try),
      (val_add, "$track_count_field_arabs_siege", 1),
	  (ge, "$track_count_field_arabs_siege", 8),
	  (assign, "$track_count_field_arabs_siege", 1),
    (try_end),
	#Arabs only
  
  #Pause between music length in seconds
  #(val_add, "$music_timer", 2),# 5 seconds added
  #Pause between music length in seconds
  
	(party_get_current_terrain, ":current_terrain_main_party", "p_main_party"), #Co-Op variant of this trigger should use scenes in_between rather than terrain because player can't obtain terrain in co-op sessions.
	(try_begin),
	(this_or_next|eq, ":current_terrain_main_party", 1), #rt_mountain
	(this_or_next|eq, ":current_terrain_main_party", 2), #rt_steppe
	(eq, ":current_terrain_main_party", 10), #rt_steppe_forest
	#Begin mediterrain music 5 tracks total
	(try_begin),
	(eq, "$track_count_field_medi_siege", 1), #
	(play_track, "track_medib3", 2),
	(val_add, "$music_timer", 209),# 1 second added
	(else_try),
	
	(eq, "$track_count_field_medi_siege", 2), #
	(play_track, "track_medib4", 2),
	(val_add, "$music_timer", 237),#
	(else_try),
	
	(eq, "$track_count_field_medi_siege", 3), #
	(play_track, "track_medib5", 2),
	(val_add, "$music_timer", 229),#
	(else_try),

	(eq, "$track_count_field_medi_siege", 4), #
	(play_track, "track_medis1", 2),
	(val_add, "$music_timer", 195),#
	(else_try),
	(eq, "$track_count_field_medi_siege", 5), #
	(play_track, "track_medis2", 2),
	(val_add, "$music_timer", 66),#
	(try_end),
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 3), #rt_plain
	(this_or_next|eq, ":current_terrain_main_party", 11), #rt_forest
	(eq, ":current_terrain_main_party", 9), #rt_mountain_forest
	#Begin Euro Music
	(try_begin),
	(eq, "$track_count_field_siege", 1), #
	(play_track, "track_euros1", 2),
	(val_add, "$music_timer", 162),#
	(else_try),
	(eq, "$track_count_field_siege", 2), #
	(play_track, "track_euros2", 2),
	(val_add, "$music_timer", 221),#
	(else_try),
	
	(eq, "$track_count_field_siege", 3), #
	(play_track, "track_euros3", 2),
	(val_add, "$music_timer", 190),#
	(else_try),
	
	(eq, "$track_count_field_siege", 4), #
	(play_track, "track_euros4", 2),
	(val_add, "$music_timer", 317),#
	(else_try),
	
	(eq, "$track_count_field_siege", 5), #
	(play_track, "track_euros5", 2),
	(val_add, "$music_timer", 59),#
		(else_try),
	
	(eq, "$track_count_field_siege", 6), #
	(play_track, "track_euros6", 2),
	(val_add, "$music_timer", 59),#
		(else_try),
	
	(eq, "$track_count_field_siege", 7), #
	(play_track, "track_euros7", 2),
	(val_add, "$music_timer", 85),#
		(else_try),
	
	(eq, "$track_count_field_siege", 8), #
	(play_track, "track_euros8", 2),
	(val_add, "$music_timer", 82),#
		(else_try),
	
	(eq, "$track_count_field_siege", 9), #
	(play_track, "track_euros9", 2),
	(val_add, "$music_timer", 199),#
		(else_try),
	
	(eq, "$track_count_field_siege", 10), #
	(play_track, "track_euros10", 2),
	(val_add, "$music_timer", 281),#
	(try_end),
	
	
	
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 4), #rt_snow
	(this_or_next|eq, ":current_terrain_main_party", 12), #rt_snow_forest
	(eq, ":current_terrain_main_party", 7), #rt_bridge
	#Begin Euro Music
	(try_begin),
	(eq, "$track_count_field_siege", 1), #
	(play_track, "track_euros1", 2),
	(val_add, "$music_timer", 162),#
	(else_try),
	(eq, "$track_count_field_siege", 2), #
	(play_track, "track_euros2", 2),
	(val_add, "$music_timer", 221),#
	(else_try),
	
	(eq, "$track_count_field_siege", 3), #
	(play_track, "track_euros3", 2),
	(val_add, "$music_timer", 190),#
	(else_try),
	
	(eq, "$track_count_field_siege", 4), #
	(play_track, "track_euros4", 2),
	(val_add, "$music_timer", 317),#
	(else_try),
	
	(eq, "$track_count_field_siege", 5), #
	(play_track, "track_euros5", 2),
	(val_add, "$music_timer", 59),#
		(else_try),
	
	(eq, "$track_count_field_siege", 6), #
	(play_track, "track_euros6", 2),
	(val_add, "$music_timer", 59),#
		(else_try),
	
	(eq, "$track_count_field_siege", 7), #
	(play_track, "track_euros7", 2),
	(val_add, "$music_timer", 85),#
		(else_try),
	
	(eq, "$track_count_field_siege", 8), #
	(play_track, "track_euros8", 2),
	(val_add, "$music_timer", 82),#
		(else_try),
	
	(eq, "$track_count_field_siege", 9), #
	(play_track, "track_euros9", 2),
	(val_add, "$music_timer", 199),#
		(else_try),
	
	(eq, "$track_count_field_siege", 10), #
	(play_track, "track_euros10", 2),
	(val_add, "$music_timer", 281),#
	(try_end),
	
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 5), #rt_desert
	(eq, ":current_terrain_main_party", 13), #rt_desert_forest
	#Begin arab music
	(try_begin),
	(eq, "$track_count_field_arabs_siege", 1), #
	(play_track, "track_arabs1",  2),
	(val_add, "$music_timer", 198),#
	(else_try),
	(eq, "$track_count_field_arabs_siege", 2), #
	(play_track, "track_arabs2", 2),
	(val_add, "$music_timer", 112),#
	
	(else_try),
	(eq, "$track_count_field_arabs_siege", 3), #
	(play_track, "track_medis1", 2),
	(val_add, "$music_timer", 195),#
	(else_try),
	
	(eq, "$track_count_field_arabs_siege", 4), #
	(play_track, "track_arabs4", 2),
	(val_add, "$music_timer", 79),#
		(else_try),
	
	(eq, "$track_count_field_arabs_siege", 5), #
	(play_track, "track_arabs5", 2),
	(val_add, "$music_timer", 394),#
	
			(else_try),
	(eq, "$track_count_field_arabs_siege", 6), #
	(play_track, "track_arabs3", 2),
	(val_add, "$music_timer", 80),#
			(else_try),
	(eq, "$track_count_field_arabs_siege", 7), #
	(play_track, "track_medis2", 2),
	(val_add, "$music_timer", 66),#
	(try_end),
	(try_end),
	
  ]),
	
	#####MUSICBOX END
		
			#####Camera mode by Rubik None-Coop Version Begin
		(0, 0, 0, [(eq, "$extended_camera_mode", 1)],
  [
    (get_player_agent_no, ":player_agent"),
    (agent_get_look_position, pos1, ":player_agent"),
    (position_move_z, pos1, "$g_camera_z"),
    (position_move_y, pos1, "$g_camera_y"),
    (agent_get_horse, ":horse_agent", ":player_agent"),
    (try_begin),
      (ge, ":horse_agent", 0),
      (position_move_z, pos1, 80),
    (try_end),
    (mission_cam_set_position, pos1),
    (try_begin),
      (key_is_down, key_left_control),
      (assign, ":move_val", 50),
    (else_try),
      (assign, ":move_val", 10),
    (try_end),
    (try_begin),
      (key_clicked, key_up),
      (mission_cam_set_mode, 1),
      (val_add, "$g_camera_z", ":move_val"),
    (else_try),
      (key_clicked, key_down),
      (mission_cam_set_mode, 1),
      (val_sub, "$g_camera_z", ":move_val"),
    (else_try),
      (key_clicked, key_left),
      (mission_cam_set_mode, 1),
      (val_add, "$g_camera_y", ":move_val"),
    (else_try),
      (key_clicked, key_right),
      (mission_cam_set_mode, 1),
      (val_sub, "$g_camera_y", ":move_val"),
    (try_end),
    (try_begin),
      (this_or_next|game_key_clicked, gk_view_char),
      (this_or_next|game_key_clicked, gk_zoom),
      (game_key_clicked, gk_cam_toggle),
      (mission_cam_set_mode, 0),
    (try_end),
  ]),
  #####Camera mode by Rubik None-Coop Version End
		
				#####MUSICBOX DEBUG
#		(0, 0, 10, [
#		],
#  [
#		(party_get_current_terrain, ":current_terrain_main_party", "p_main_party"),
#	      #BEGIN DEBUG
#          (assign, reg10, ":current_terrain_main_party"),
#          (str_clear, s10),
#          (str_store_string, s10, "@Terrain: {reg10}"),
#		  (display_message, s10),
#          #END DEBUG
#  ]),
###########Torch by troycall/Envious Arm begin

																	#(-25.0, 0.0, 0.0, #Enabling this forces random chance to be 100%
																	#(ti_on_agent_spawn, 0, 0, #Enabling this forces random chance to be 100%
																	(20, 0, ti_once, #Proper one, but reinforcements do not get assigned torches.
        [
          (mission_tpl_are_all_agents_spawned), #From VC Header_Operations to prevent weird behavior.
          (is_currently_night) #Check if currently night time
        ],
        [

		  ####DEFAULT
		   #(try_for_agents, ":agent"),
            #(agent_get_wielded_item, ":item", ":agent", 1),
            #(gt, ":item", -1),
            #(agent_unequip_item, ":agent", ":item"),
            #(agent_equip_item, ":agent", "itm_torch"),
            #(agent_set_wielded_item, ":agent", "itm_torch"),           
          #(try_end),
		  ####END DEFAULT
		  
		  (try_for_agents, ":agent"), #Try for agents...
		  #Extension
		  (agent_is_alive, ":agent"), #For performance reasons
		  #End
		  (agent_is_human, ":agent"), #Performance
          (agent_is_non_player, ":agent"), #Uncommenting this includes player on spawning with torch, may be necessary to uncomment at module_coop_mission_templates.
		  


		 ##########Default Order
		 #######		  (agent_is_human, ":agent"), #Performance
         #######(agent_is_non_player, ":agent"), #Uncommenting this includes player on spawning with torch, may be necessary to uncomment at module_coop_mission_templates.
		 #######
		 ########Extension
		 #######(agent_is_active, ":agent"), #For performance reasons
		 #######(agent_is_alive, ":agent"), #For performance reasons
		 ########End
		  ############
		  		  
				#  (try_begin),
				  
		#		          (agent_get_wielded_item, ":rhand", ":agent", 0),  #Right hand
		#  (assign, ":rhanditem", 0), # Preparing local variable.
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000000000100),
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000004000000),
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000008000000),
		#  (neg|item_has_capability, ":rhanditem", 0x0000000170000000),
		# 

		  #
		  
          #BEGIN DEBUG
          #(assign, reg10, ":agent"),
          #(str_clear, s10),
          #(str_store_string, s10, "@New agent: {reg10}"),
          #END DEBUG
		  #(agent_get_wielded_item, ":rhanditem", ":agent", 0),  #Obtain right hand item
         (agent_get_wielded_item, ":rhanditem", ":agent", 0),  #Obtain right hand item
          (agent_get_wielded_item, ":item", ":agent", 1), # Left hand: shield or -1
          #BEGIN DEBUG
          #(assign, reg10, ":item"),
          #(str_store_string, s10, "@{s10}. LH: {reg10}"),
		  #(display_message, "@Main block Phase A finalized"),
          #END DEBUG
		  #(item_get_type, ":type", ":rhanditem"), #If right hand item is polearm, stop reading rest of code.
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_club_with_spike_head", "itm_wooden_shield"),
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_light_lance", "itm_wooden_shield"),
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_light_lance", "itm_wooden_shield"),
          (try_begin),
		  (neg|is_between, ":rhanditem", "itm_club_with_spike_head", "itm_wooden_shield"),
		  (neg|is_between, ":rhanditem", "itm_lance_banner_jer", "itm_cross_end"), #Update item slots
		  #(neg|troop_has_item_equipped, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		  #(neq, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		  
		# (neg|eq, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		    (gt, ":item", -1), #Check if the agent wields any item in the left hand, this or next.
            #(neq, ":item", -1),# Check if the agent wields any item in the left hand
            (neq, ":item", "itm_torch"), #If agent is using torch, ignore him.
            #(display_message, "@PASSED neg tests"), #Debug message

			
            (store_random_in_range, ":chance", 1, 101), # Chance of item being assigned
            (try_begin),
			  (le, ":chance", "$torch_chance"), #25% = 25
				#lt           = neg | ge # less than		-- (lt,<value>,<value>),
				#neq          = neg | eq # not equal to		-- (neq,<value>,<value>),
				#le           = neg | gt # less or equal to	-- (le,<value>,<value>),
              (agent_unequip_item, ":agent", ":item"),
			  
              #BEGIN DEBUG
              #(str_store_item_name, s11, ":item"),
              #(str_store_string, s10, "@{s10}. Removed item: {s11}"),
			  #(display_message, "@(agent_unequip_item, :agent, :item PASSED."),
              #END DEBUG

               
                (agent_equip_item, ":agent", "itm_torch"), #Tell agent to equip the item
                 #(display_message, "@(agent_equip_item, :agent, :item PASSED."),
                  (agent_set_wielded_item, ":agent", "itm_torch"), #Required for infantry only, cavarly can work without it.
                  #(display_message, "@(agent_set_wielded_item, :agent, :item PASSED."),
                 
                 
                  #BEGIN DEBUG
                #(else_try),
                  #(str_store_string, s10, "@{s10}. Failed random chance."),
                (try_end),
               
              #(else_try),
                #(str_store_string, s10, "@{s10}. Invalid agent for torch"),
              (try_end),
             
              #(display_message, s10),
			  (try_end),
              #END DEBUG
			#  (try_end),
      ]),
	  
###########Torch by troycall/Envious Arm end


		(-25.0, 0.0, 0.0,
		[
			(eq, "$freelancer_state", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(ge, ":player_agent_no", 0),
			(agent_is_active, ":player_agent_no"),
			(store_trigger_param_1, ":trigger_param_1"),
			(eq, ":player_agent_no", ":trigger_param_1"),
			(agent_get_team, ":team_player_agent_no", ":player_agent_no"),
			(team_set_order_listener, ":team_player_agent_no", -1),
			(val_add, ":team_player_agent_no", 2),
			(agent_set_team, ":player_agent_no", ":team_player_agent_no")
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(team_set_relation, 0, 2, 1),
			(team_set_relation, 1, 3, 1),
			(call_script, "script_change_banners_and_chest")
		]),

		(-21.0, 0.0, 0.0,
		[],

		[
			(try_begin),
				(eq, "$g_battle_won", 1),
				(call_script, "script_count_mission_casualties_from_agents"),
				(finish_mission, 0),
			(else_try),
				(eq, "$pin_player_fallen", 1),
				(eq, "$g_battle_won", 0),
				(call_script, "script_simulate_retreat", 5, 20, 1),
				(str_store_string, 5, "str_retreat"),
				(call_script, "script_count_mission_casualties_from_agents"),
				(set_mission_result, -1),
				(finish_mission, 0),
			(else_try),
				(eq, "$pin_player_fallen", 1),
				(eq, "$g_battle_won", -1),
				(call_script, "script_count_mission_casualties_from_agents"),
				(finish_mission, 0),
			(else_try),
				(call_script, "script_cf_check_enemies_nearby"),
				(question_box, "str_do_you_want_to_retreat"),
			(else_try),
				(get_player_agent_no, ":player_agent_no"),
				(neg|agent_is_alive, ":player_agent_no"),
				(call_script, "script_cf_check_enemies_nearby"),
				(question_box, "str_do_you_want_to_retreat"),
			(else_try),
				(display_message, "str_can_not_retreat"),
			(try_end)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(call_script, "script_troop_agent_set_banner", "tableau_game_troop_label_banner", ":trigger_param_1", ":troop_id_trigger_param_1")
		]),

		(-8.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(eq, ":trigger_param_1", 0),
			(assign, "$pin_player_fallen", 0),
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_team, ":team_player_agent_no", ":player_agent_no"),
			(try_begin),
				(neq, "$attacker_team", ":team_player_agent_no"),
				(neq, "$attacker_team_2", ":team_player_agent_no"),
				(str_store_string, 5, "str_siege_continues"),
				(call_script, "script_simulate_retreat", 8, 15, 0),
			(else_try),
				(str_store_string, 5, "str_retreat"),
				(call_script, "script_simulate_retreat", 5, 20, 0),
			(try_end),
			(call_script, "script_count_mission_casualties_from_agents"),
			(finish_mission, 0)
		]),

		(0.0, 0.0, ti_once,
		[],

		[
			(assign, "$g_battle_won", 0),
			(assign, "$defender_reinforcement_stage", 0),
			(assign, "$attacker_reinforcement_stage", 0),
			(assign, "$dmod_current_agent", -1),
			(assign, "$dmod_move_camera", -1),
						(try_begin),
			(eq, "$additional_music", 0),
			(call_script, "script_music_set_situation_with_culture", 262144),
			(try_end),
		]),

		(30.0, 0.0, 0.0,
		[],

		[]),

		(0.0, 0.0, ti_once,
		[
			(assign, "$defender_team", 0),
			(assign, "$attacker_team", 1),
			(assign, "$defender_team_2", 2),
			(assign, "$attacker_team_2", 3)
		],

		[]),

		(0.0, 0.0, ti_once,
		[
			(set_show_messages, 0),
			(entry_point_get_position, 10, 10),
			(try_for_range, ":number", 0, 9),
				(neq, ":number", 1),
				(team_give_order, "$defender_team", ":number", 0),
				(team_give_order, "$defender_team", ":number", 7),
				(team_give_order, "$defender_team", ":number", 7),
				(team_give_order, "$defender_team", ":number", 7),
				(team_give_order, "$defender_team_2", ":number", 0),
				(team_give_order, "$defender_team_2", ":number", 7),
				(team_give_order, "$defender_team_2", ":number", 7),
				(team_give_order, "$defender_team_2", ":number", 7),
			(try_end),
			(team_give_order, "$defender_team", 1, 11),
			(team_set_order_position, "$defender_team", 9, 10),
			(team_give_order, "$defender_team_2", 1, 11),
			(team_set_order_position, "$defender_team_2", 9, 10),
			(team_give_order, "$attacker_team", 9, 2),
			(team_give_order, "$attacker_team_2", 9, 2),
			(set_show_messages, 1)
		],

		[]),

		(0.0, 0.0, ti_once,
		[
			(set_show_messages, 0),
			(team_give_order, "$attacker_team", 9, 8),
			(team_give_order, "$attacker_team", 9, 8),
			(team_give_order, "$attacker_team", 9, 8),
			(set_show_messages, 1)
		],

		[]),

		(1.0, 60.0, ti_once,
		[
			(store_mission_timer_a, reg1),
			(ge, reg1, 10),
			(main_hero_fallen),
			(assign, ":var_1", 0),
			(try_for_agents, ":var_2"),
				(agent_is_ally, ":var_2"),
				(agent_is_alive, ":var_2"),
				(val_add, ":var_1", 1),
			(try_end),
			(eq, ":var_1", 0),
			(set_mission_result, -1),
						(try_begin),
			(eq, "$colored_messages", 1),
			(display_message, "@Battle lost...", 0x00f78078),
			(else_try),
			(display_message, "@Battle lost..."),
			(try_end),
			(assign, "$g_battle_won", -1),
			(assign, "$g_battle_result", -1)
		],

		[
			(call_script, "script_count_mission_casualties_from_agents"),
			(finish_mission, 0)
		]),

		(10.0, 0.0, 0.0, # Battle won/lost messages!
		[],

		[
			(eq, "$g_battle_won", -1),
						(try_begin),
			(eq, "$colored_messages", 1),
			(display_message, "@Battle lost! Press tab key to leave...", 0x00f78078),
			(else_try),
			(display_message, "@Battle lost! Press tab key to leave..."),
			(try_end),
			#(play_sound, "snd_battle_sounds"), #Moved to your companions carry you away from the fighting menu
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(gt, "$dmod_current_agent", 0),
			(eq, "$setting_use_dmod", 1),
			(eq, "$dmod_move_camera", 1),
			(agent_get_position, 1, "$dmod_current_agent"),
			(position_move_z, 1, 300),
			(position_move_y, 1, -300),
			(agent_get_horse, ":horse_l_dmod_current_agent", "$dmod_current_agent"),
			(try_begin),
				(ge, ":horse_l_dmod_current_agent", 0),
			(try_end),
			(try_begin),
				(eq, "$pop_camera_on", 1),
				(assign, "$pop_camera_on", 0),
			(try_end),
			(mission_cam_set_position, 1),
			(mission_cam_set_mode, 1),
			(set_fixed_point_multiplier, 100)
		],

		[]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(eq, "$setting_use_dmod", 1),
			(key_clicked, 238),
			(main_hero_fallen),
			(call_script, "script_dmod_cycle_forwards")
		],

		[]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(eq, "$setting_use_dmod", 1),
			(key_clicked, 239),
			(main_hero_fallen),
			(call_script, "script_dmod_cycle_backwards")
		],

		[]),

		(0.0, 0.0, ti_once,
		[],

		[
			(assign, "$pop_camera_on", 0),
			(assign, "$pop_camera_mouse_center_x", 500),
			(assign, "$pop_camera_mouse_center_y", 375),
			(assign, "$pop_camera_mouse_x", "$pop_camera_mouse_center_x"),
			(assign, "$pop_camera_mouse_y", "$pop_camera_mouse_center_y"),
			(assign, "$pop_camera_mouse_counter", 0)
		]),

		(0.0, 4.0, ti_once,
		[
			(eq, "$enable_deahtcam", 1),
			(main_hero_fallen),
			(eq, "$pop_camera_on", 0),
			(assign, "$tom_sand_storm", 0)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_position, 1, ":player_agent_no"),
			(position_get_x, ":position_x_1", 1),
			(position_get_y, ":position_y_1", 1),
			(init_position, 47),
			(position_set_x, 47, ":position_x_1"),
			(position_set_y, 47, ":position_y_1"),
			(position_set_z_to_ground_level, 47),
			(position_move_z, 47, 250),
			(mission_cam_set_mode, 1, 0, 0),
			(mission_cam_set_position, 47),
			(assign, "$pop_camera_rotx", 0),
			(assign, "$pop_camera_on", 1)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(this_or_next|eq, "$dmod_move_camera", 1),
			(eq, "$pop_camera_on", 1),
			(this_or_next|game_key_clicked, 0),
			(this_or_next|game_key_is_down, 0),
			(this_or_next|game_key_clicked, 1),
			(this_or_next|game_key_is_down, 1),
			(this_or_next|game_key_clicked, 2),
			(this_or_next|game_key_is_down, 2),
			(this_or_next|game_key_clicked, 3),
			(game_key_is_down, 3)
		],

		[
			(try_begin),
				(eq, "$dmod_move_camera", 1),
				(mission_cam_set_mode, 1, 0, 0),
				(assign, "$pop_camera_rotx", 0),
				(assign, "$pop_camera_on", 1),
				(assign, "$dmod_move_camera", 0),
			(try_end),
			(mission_cam_get_position, 47),
			(assign, ":value", 0),
			(assign, ":value_2", 0),
			(try_begin),
				(this_or_next|game_key_clicked, 0),
				(game_key_is_down, 0),
				(assign, ":value_2", 10),
			(try_end),
			(try_begin),
				(this_or_next|game_key_clicked, 1),
				(game_key_is_down, 1),
				(assign, ":value_2", -10),
			(try_end),
			(try_begin),
				(this_or_next|game_key_clicked, 2),
				(game_key_is_down, 2),
				(assign, ":value", -10),
			(try_end),
			(try_begin),
				(this_or_next|game_key_clicked, 3),
				(game_key_is_down, 3),
				(assign, ":value", 10),
			(try_end),
			(position_move_x, 47, ":value"),
			(position_move_y, 47, ":value_2"),
			(mission_cam_set_position, 47)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(eq, "$pop_camera_on", 1),
			(neg|is_presentation_active, "prsnt_battle"),
			(mouse_get_position, 1),
			(set_fixed_point_multiplier, 1000),
			(position_get_x, reg1, 1),
			(position_get_y, reg2, 1),
			(set_fixed_point_multiplier, 100),
			(this_or_next|neq, reg1, "$pop_camera_mouse_center_x"),
			(neq, reg2, "$pop_camera_mouse_center_y")
		],

		[
			(assign, ":value", 1),
			(try_begin),
				(eq, reg1, "$pop_camera_mouse_x"),
				(eq, reg2, "$pop_camera_mouse_y"),
				(val_add, "$pop_camera_mouse_counter", 1),
				(try_begin),
					(gt, "$pop_camera_mouse_counter", 50),
					(assign, "$pop_camera_mouse_center_x", reg1),
					(assign, "$pop_camera_mouse_center_y", reg2),
					(assign, "$pop_camera_mouse_counter", 0),
				(try_end),
				(assign, ":value", 0),
			(try_end),
			(eq, ":value", 1),
			(assign, "$pop_camera_mouse_counter", 0),
			(assign, "$pop_camera_mouse_x", reg1),
			(assign, "$pop_camera_mouse_y", reg2),
			(mission_cam_get_position, 47),
			(store_sub, ":value_2", "$pop_camera_mouse_center_x", reg1),
			(store_sub, ":value_3", reg2, "$pop_camera_mouse_center_y"),
			(try_for_range, ":number", 0, 2),
				(try_begin),
					(eq, ":number", 1),
					(assign, ":value_2", ":value_3"),
				(try_end),
				(this_or_next|lt, ":value_2", -2),
				(gt, ":value_2", 2),
				(assign, ":value_4", 1),
				(try_begin),
					(lt, ":value_2", 0),
					(assign, ":value_4", -1),
				(try_end),
				(val_abs, ":value_2"),
				(val_sub, ":value_2", 2),
				(convert_to_fixed_point, ":value_2"),
				(store_sqrt, ":value_2", ":value_2"),
				(convert_from_fixed_point, ":value_2"),
				(val_clamp, ":value_2", 1, 64),
				(val_mul, ":value_2", ":value_4"),
				(try_begin),
					(eq, ":number", 0),
					(store_mul, ":value_5", "$pop_camera_rotx", -1),
					(position_rotate_x, 47, ":value_5"),
					(position_rotate_z, 47, ":value_2"),
					(position_rotate_x, 47, "$pop_camera_rotx"),
				(try_end),
				(try_begin),
					(eq, ":number", 1),
					(position_rotate_x, 47, ":value_2"),
					(val_add, "$pop_camera_rotx", ":value_2"),
				(try_end),
			(try_end),
			(mission_cam_set_position, 47)
		]),

		(-26.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(store_trigger_param_2, ":trigger_param_2"), #Removedforunassignedstuff#
			(store_trigger_param_3, ":trigger_param_3"),
			(try_begin),
				(ge, ":trigger_param_1", 0),
				(neg|agent_is_ally, ":trigger_param_1"),
				(agent_is_human, ":trigger_param_1"),
				(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
				(str_store_troop_name, 6, ":troop_id_trigger_param_1"),
				(party_add_members, "p_total_enemy_casualties", ":troop_id_trigger_param_1", 1),
				(eq, ":trigger_param_3", 1),
				(party_wound_members, "p_total_enemy_casualties", ":troop_id_trigger_param_1", 1),
			(try_end)
		]),

		(0.0, 2.0, ti_once,
		[],

		[
			(try_for_agents, ":var_1"),
				(agent_set_slot, ":var_1", slot_agent_is_not_reinforcement, 1),
			(try_end)
		]),

		(3.0, 0.0, 0.0,
		[],

		[
			(store_mission_timer_a, ":mission_timer_a"),
			(ge, ":mission_timer_a", 10),
			(try_begin),
				(store_mul, ":value", "$attacker_reinforcement_stage", 2),
				(this_or_next|lt, "$defender_reinforcement_stage", 14),
				(le, "$defender_reinforcement_stage", ":value"),
				(store_normalized_team_count, ":normalized_team_count_0", 0),
				(lt, ":normalized_team_count_0", 10),
				(add_reinforcements_to_entry, 4, 7),
				(val_add, "$defender_reinforcement_stage", 1),
			(try_end)
		]),

		(2.0, 0.0, 0.0,
		[
			(gt, "$defender_reinforcement_stage", 0)
		],

		[
			(call_script, "script_siege_move_archers_to_archer_positions")
		]),

		(3.0, 0.0, 0.0,
		[
			(assign, ":value", 1),
			(try_begin),
				(ge, "$attacker_reinforcement_stage", 10),
				(store_mul, ":value_2", "$defender_reinforcement_stage", 2),
				(gt, "$attacker_reinforcement_stage", ":value_2"),
				(assign, ":value", 0),
			(try_end),
			(eq, ":value", 1),
			(store_mission_timer_a, ":mission_timer_a"),
			(ge, ":mission_timer_a", 10),
			(store_normalized_team_count, ":normalized_team_count_1", 1),
			(lt, ":normalized_team_count_1", 6)
		],

		[
			(add_reinforcements_to_entry, 1, 8),
			(val_add, "$attacker_reinforcement_stage", 1)
		]),

		(2.0, 0.0, ti_once,
		[],

		[
			(set_show_messages, 0),
			(try_for_range, ":number", 0, 9),
				(team_give_order, "$attacker_team", ":number", 12),
			(try_end),
			(try_for_range, ":number", 0, 9),
				(team_give_order, "$attacker_team_2", ":number", 12),
			(try_end),
			(set_show_messages, 1)
		]),

		(2.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_check_friendly_kills")
		]),

		(5.0, 60.0, ti_once,
		[
			(store_mission_timer_a, reg1),
			(ge, reg1, 10),
			(all_enemies_defeated, 5),
			(set_mission_result, 1),
			(display_message, "str_msg_battle_won"),
			#(play_sound, "snd_won_battle"), #Moved to victorious main menu
			(assign, "$g_battle_won", 1),
			(assign, "$g_battle_result", 1),
			(call_script, "script_play_victorious_sound")
		],

		[
			(call_script, "script_count_mission_casualties_from_agents"),
			(finish_mission, 1)
		]),

		(10.0, 0.0, 0.0, # Battle won/lost messages!
		[],

		[
			(eq, "$g_battle_won", 1),
			#(play_sound, "snd_won_battle"), #Moved to victorious main menu
			(display_message, "str_msg_battle_won")
		]),

		(30.0, 0.0, 0.0,
		[],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(neq, ":var_2", ":player_agent_no"),
				(agent_is_alive, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_get_team, ":team_var_2", ":var_2"),
				(this_or_next|eq, ":team_var_2", "$defender_team"),
				(eq, ":team_var_2", "$defender_team_2"),
				(agent_refill_ammo, ":var_2"),
			(try_end),
			(try_begin),
				(agent_get_team, ":team_var_2", ":player_agent_no"),
				(this_or_next|eq, ":team_var_2", "$defender_team"),
				(eq, ":team_var_2", "$defender_team_2"),
				(agent_refill_ammo, ":player_agent_no"),
			(try_end)
		]),

		(1.0, 4.0, ti_once,
		[
			(eq, "$enable_deahtcam", 1),
			(main_hero_fallen)
		],

		[
			(assign, "$pin_player_fallen", 1),
			(neq, "$use_player_auxiliary", 1),
			(display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
			(display_message, "@If you choose to watch the fight you can use the mouse scroll up and down to switch between troop view or AWDS keys for free camera view.")
		]),

		(0.0, 0.0, 0.0,
		[],

		[
			(game_key_clicked, 22),
			(neg|is_presentation_active, "prsnt_battle"),
			(start_presentation, "prsnt_battle")
		]),

		(0.1, 0.0, 0.0,
		[],

		[
			(is_presentation_active, "prsnt_battle"),
			(call_script, "script_update_order_panel_statistics_and_map")
		]),

		(-22.0, 0.0, 0.0,
		[
			(display_message, "str_cant_use_inventory_now")
		],

		[]),

		(0.0, 0.0, ti_once,
		[
			(call_script, "script_siege_init_ai_and_belfry")
		],

		[]),

		(0.0, 0.0, ti_once,
		[
			(call_script, "script_cf_siege_move_belfry")
		],

		[]),

		(0.0, 2.0, ti_once,
		[
			(call_script, "script_cf_siege_rotate_belfry_platform")
		],

		[
			(assign, "$belfry_positioned", 3)
		]),

		(0.0, 0.0, ti_once,
		[
			(call_script, "script_cf_siege_assign_men_to_belfry")
		],

		[]),

		(-28.0, 0.3, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(store_trigger_param_2, ":trigger_param_2"),
			(store_trigger_param_3, ":trigger_param_3"),
			(assign, ":var_4", reg0),
			(agent_is_human, ":trigger_param_1"),
			(agent_is_alive, ":trigger_param_1"), #this addition
			(agent_is_active, ":trigger_param_1"), #This addition, i disabled tihs whole mission template to fix the bug too.
			(get_player_agent_no, ":player_agent_no"),
			(try_begin),
				(eq, "$tom_weapon_break", 1),
				(eq, ":trigger_param_1", ":player_agent_no"),
				(store_random_in_range, ":random_in_range_0_1000", 0, 1000),
				(eq, ":random_in_range_0_1000", 1),
				(store_random_in_range, ":random_in_range_4_8", 4, 8),
				(troop_get_inventory_slot, ":inventory_slot_player_random_in_range_4_8", "trp_player", ":random_in_range_4_8"),
				(gt, ":inventory_slot_player_random_in_range_4_8", 0),
				(str_store_item_name, 20, ":inventory_slot_player_random_in_range_4_8"),
				(troop_get_inventory_slot_modifier, ":inventory_slot_modifier_player_random_in_range_4_8", "trp_player", ":random_in_range_4_8"),
				(try_begin),
					(eq, ":inventory_slot_modifier_player_random_in_range_4_8", 6),
					(display_message, "@Your {s20} is too crappy to fall apart!", 0x00ff0000),
				(else_try),
					(troop_add_item, "trp_broken_items", ":inventory_slot_player_random_in_range_4_8", ":inventory_slot_modifier_player_random_in_range_4_8"),
					(troop_set_inventory_slot_modifier, "trp_player", ":random_in_range_4_8", 6),
					(display_message, "@Your {s20} cracks!", 0x00ff0000),
				(try_end),
			(try_end),
			(try_begin),
				(eq, "$tom_weapon_break", 1),
				(eq, ":trigger_param_2", ":player_agent_no"),
				(is_between, ":var_4", 1, "itm_cross_end"), #Previously itm_items_end
				(neg|is_between, ":var_4", "itm_light_lance", "itm_wooden_shield"),
				(item_get_type, ":type_var_4", ":var_4"),
				(ge, ":trigger_param_3", 10),
				(neq, ":type_var_4", 10),
				(neq, ":type_var_4", 8),
				(neq, ":type_var_4", 9),
				(neq, ":type_var_4", 5),
				(neq, ":type_var_4", 6),
				(store_random_in_range, ":random_in_range_0_1000", 0, 600),
				(eq, ":random_in_range_0_1000", 1),
				(assign, ":value", -1),
				(try_for_range, ":random_in_range_4_8", 0, 4),
					(troop_get_inventory_slot, ":inventory_slot_player_random_in_range_4_8_2", "trp_player", ":random_in_range_4_8"),
					(eq, ":inventory_slot_player_random_in_range_4_8_2", ":var_4"),
					(assign, ":value", ":random_in_range_4_8"),
				(try_end),
				(gt, ":value", 0),
				(str_store_item_name, 20, ":var_4"),
				(troop_get_inventory_slot_modifier, ":inventory_slot_modifier_player_random_in_range_4_8", "trp_player", ":value"),
				(try_begin),
					(eq, ":inventory_slot_modifier_player_random_in_range_4_8", 6),
					(display_message, "@Your {s20} falls apart!", 0x00ff0000),
					(agent_unequip_item, ":player_agent_no", ":var_4"),
					(troop_remove_item, "trp_player", ":var_4"),
					(troop_remove_item, "trp_broken_items", ":var_4"),
				(else_try),
					(troop_add_item, "trp_broken_items", ":var_4", ":inventory_slot_modifier_player_random_in_range_4_8"),
					(troop_set_inventory_slot_modifier, "trp_player", ":value", 6),
					(display_message, "@Your {s20} cracks!", 0x00ff0000),
				(try_end),
			(try_end),
			(agent_get_horse, ":horse_trigger_param_2", ":trigger_param_2"),
			(try_begin),
				(eq, "$tom_lance_breaking", 1),
				(gt, ":horse_trigger_param_2", 0),
				(this_or_next|is_between, ":var_4", "itm_light_lance", "itm_spear_a"), #Updated item slots
				(is_between, ":var_4", "itm_lance_banner_jer", "itm_pike_banner_teu"), #Updated item slots
				(ge, ":trigger_param_3", 50),
				(store_random_in_range, ":random_in_range_0_100", 0, 100),
				(gt, ":random_in_range_0_100", 20),
				(try_begin),
					(eq, ":trigger_param_2", ":player_agent_no"),
					(display_message, "@You broke your lance!", 0x00ff0000),
				(try_end),
				########Add effects on weapon break *Lances*
        (agent_get_position, pos1, ":trigger_param_2"),
		(agent_play_sound, ":trigger_param_1", "snd_shield_broken"),
		(particle_system_burst, "psys_lanse", pos1, 10),
        (particle_system_burst, "psys_lanse_straw", pos1, 30),
                ####Extend to Lanse_Blood
		#(particle_system_burst, "psys_lanse_blood", pos1, 10),
        #(particle_system_burst, "psys_lanse_blood", pos1, 30),
		        ########End Effects
				(agent_unequip_item, ":trigger_param_2", ":var_4"),
			(else_try),
				(this_or_next|is_between, ":var_4", "itm_bamboo_spear", "itm_wooden_shield"), #Updated item slots
				(is_between, ":var_4", "itm_pike_banner_teu", "itm_items_end"), #Updated item slots
				(le, ":horse_trigger_param_2", 0),
				(ge, ":trigger_param_3", 8),
				(store_random_in_range, ":random_in_range_0_100", 0, 100),
				(ge, ":random_in_range_0_100", 90),
				(try_begin),
					(eq, ":trigger_param_2", ":player_agent_no"),
					(display_message, "@You broke your spear!", 0x00ff0000),
				(try_end),
				########Add effects on weapon break *Spears*
        (agent_get_position, pos1, ":trigger_param_2"),
		(agent_play_sound, ":trigger_param_1", "snd_shield_broken"),
		(store_random_in_range, ":psys_to_use", "psys_lanse", "psys_lanse_blood"),
		(particle_system_burst, ":psys_to_use", pos1, 7), #Default = 10 (Higher = Bigger Particles)
        (particle_system_burst, ":psys_to_use", pos1, 21), #Default = 30 (Higher = Bigger Particles)
                ####Extend to Lanse_Blood
		#(particle_system_burst, "psys_lanse_blood", pos1, 10),
        #(particle_system_burst, "psys_lanse_blood", pos1, 30),
		        ########End Effects
				(agent_unequip_item, ":trigger_param_2", ":var_4"),
			(try_end),
			###Envfix weapon breaking patch start here
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_set_matching_sexy_boots", ":trigger_param_1")
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$sp_shield_bash", 1),
			(game_key_is_down, 7),
			(game_key_clicked, 6),
			(neg|main_hero_fallen),
		],

		[
		(call_script, "script_shield_bash"),
		]),

			##AI kicking begin
		   (2, 0, 3, #AI kicking
       [], [
	(get_player_agent_no,":player"),
	(try_for_agents, ":agent"),
		(neq, ":agent", ":player"),
		(agent_is_alive, ":agent"),
		(neq, ":agent", -1),
		(agent_is_human, ":agent"),#Only humans can kick....FOR NOW
		(agent_is_active, ":agent"),
		(agent_slot_eq, ":agent", slot_agent_is_running_away, 0),#Isn't fleeing the battle.
		##He's an eligible human.  Now see if he's in a position to kick.
		(agent_get_attack_action, ":attack_action", ":agent"), #returned values: free = 0, readying_attack = 1, releasing_attack = 2, completing_attack_after_hit = 3, attack_parried = 4, reloading = 5, after_release = 6, cancelling_attack = 7
		(agent_get_defend_action, ":defend_action", ":agent"),#
		(this_or_next|eq,":attack_action",4),#Just got parried
		(this_or_next|eq,":defend_action",1),#Parrying an enemy
		##So he'll only try to kick if he just parried an enemy attack, or his own attack just got parried.
		(agent_get_team, ":team", ":agent"),
		(assign, ":maximum_distance", 100),
		#Target Acquisition
		(agent_ai_get_look_target,":suspect",":agent"),
		(gt,":suspect",0),#Make sure there is someone.
		(agent_is_alive, ":suspect"),
		(agent_is_human, ":suspect"),#Only kick humans
		(agent_is_active, ":suspect"),
		(agent_get_team, ":suspect_team", ":suspect"),
		(neq, ":suspect_team", ":team"),#Friends don't let friends kick friends.
		(agent_get_position, pos1, ":agent"),#Distance check
		(agent_get_position, pos2, ":suspect"),
		(neg|position_is_behind_position, pos2, pos1), #Suspect can't be behind kicker.
		(get_distance_between_positions, ":distance", pos1, pos2),
		(le, ":distance", ":maximum_distance"),
		#Check chance
		(store_random_in_range,":kickchance", 1, 10),
		(try_begin),
			(eq,":kickchance",1), #10% chance per check
				#(display_message, "@Agent kicks."),
				(agent_set_animation, ":agent", "anim_prepare_kick_0"),
				(agent_deliver_damage_to_agent, ":agent", ":suspect", 3),
				(agent_set_animation, ":suspect", "anim_strike3_abdomen_front"),#Get Kicked
			(try_end),
	   (try_end),]),
	   
	   ##AI Kicking end
		
		
		(0.25, 0.0, 4.0,
		[
			(eq, "$sp_shield_bash_ai", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(neq, ":var_2", ":player_agent_no"),
				(agent_is_alive, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_active, ":var_2"), #Test to see if it stops AI from shield bashing (new addition v3)
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(store_skill_level, ":skill_level_shield_troop_id_var_2", "skl_shield", ":troop_id_var_2"),
				(store_proficiency_level, ":proficiency_level_troop_id_var_2_0", ":troop_id_var_2", 0),
				(ge, ":skill_level_shield_troop_id_var_2", 4),
				(ge, ":proficiency_level_troop_id_var_2_0", 200),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(le, ":horse_var_2", 0),
				(try_begin),
					(neg|agent_slot_ge, ":var_2", 50, 1),
					(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
					(agent_get_wielded_item, ":wielded_item_var_2_1", ":var_2", 1),
					(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
					(eq, ":type_wielded_item_var_2_1", 7),
					(agent_get_attack_action, ":attack_action_var_2", ":var_2"),
					(eq, ":attack_action_var_2", 0),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_position, 1, ":var_2"),
					(assign, ":value", -1),
					(assign, ":value_2", 125),
					(try_for_agents, ":var_13"),
						(agent_is_alive, ":var_13"),
						(agent_is_human, ":var_13"),
						(agent_get_position, 2, ":var_13"),
						(neg|position_is_behind_position, 2, 1),
						(agent_get_team, ":team_var_13", ":var_13"),
						(neq, ":team_var_13", ":team_var_2"),
						(try_begin),
							(eq, ":team_var_2", 0),
							(assign, ":value_3", 2),
						(else_try),
							(eq, ":team_var_2", 2),
							(assign, ":value_3", 0),
						(else_try),
							(eq, ":team_var_2", 1),
							(assign, ":value_3", 3),
						(else_try),
							(eq, ":team_var_2", 3),
							(assign, ":value_3", 1),
						(try_end),
						(neq, ":team_var_13", ":value_3"),
						(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
						(le, ":distance_between_positions_1_2", ":value_2"),
						(assign, ":value_2", ":distance_between_positions_1_2"),
						(assign, ":value", ":var_13"),
					(try_end),
					(ge, ":value", 0),
					(agent_get_horse, ":horse_var_2", ":value"),
					(eq, ":horse_var_2", -1),
					(store_random_in_range, ":random_in_range_15_26", 15, 26),
					(agent_set_slot, ":var_2", 50, ":random_in_range_15_26"),
					(agent_set_animation, ":var_2", "anim_shield_bash"),
					(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
					(troop_get_type, ":type_wielded_item_var_2_1", ":troop_id_var_2"),
					(try_begin),
						(eq, ":type_wielded_item_var_2_1", 0),
						(agent_play_sound, ":var_2", "snd_man_yell"),
					(else_try),
						(eq, ":type_wielded_item_var_2_1", 1),
						(agent_play_sound, ":var_2", "snd_woman_yell"),
					(try_end),
					(agent_play_sound, ":value", "snd_wooden_hit_low_armor_high_damage"),
					(agent_get_defend_action, ":attack_action_var_2", ":value"),
					(try_begin),
						(eq, ":attack_action_var_2", 2),
						(neg|position_is_behind_position, 1, 2),
						(agent_get_wielded_item, ":wielded_item_var_2_1", ":value", 1),
						(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
						(eq, ":type_wielded_item_var_2_1", 7),
						(agent_set_animation, ":value", "anim_shield_bash"),
					(else_try),
						(agent_set_animation, ":value", "anim_shield_strike"),
					(try_end),
				(try_end),
				(agent_get_slot, ":var_2_50", ":var_2", 50),
				(val_sub, ":var_2_50", 1),
				(val_max, ":var_2_50", 0),
				(agent_set_slot, ":var_2", 50, ":var_2_50"),
			(try_end)
]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(assign, "$tom_sand_storm", 0),
			(call_script, "script_change_rain_or_snow"),
			(set_fixed_point_multiplier, 100),
			(try_begin),
				(is_currently_night),
				#(set_shader_param_float, "@vFresnelMultiplier", 15),
			(else_try),
			#	(set_shader_param_float, "@vFresnelMultiplier", 50),
			(try_end)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$tom_sand_storm", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_position, 0, ":player_agent_no"),
			(position_set_z_to_ground_level, 0),
			(position_get_z, ":position_z_0", 0),
			(val_add, ":position_z_0", 400),
			(position_set_z, 0, ":position_z_0"),
			(particle_system_burst, "psys_desert_storm", 0, 2),
			(set_fixed_point_multiplier, 100)
		]),

#		(0.0, 2.0, ti_once,
#		[
#			(eq, "$tom_use_banners", 1)
#		],
#
#		[
#			(call_script, "script_set_flag_carriers")
#		]),

		(10.0, 0.0, 0.0,
		[
			(eq, "$tom_use_banners", 1),
			(eq, "$tom_bonus_banners", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_range, ":value"),
				(agent_slot_eq, ":value", 107, 1),
				(agent_is_alive, ":value"),
				(agent_is_active, ":value"),
				(agent_get_team, ":team_value", ":value"),
				(agent_get_position, 1, ":value"),
				(try_for_range, ":value_2"),
					(neq, ":value_2", ":value"),
					(agent_get_team, ":team_value_2", ":value_2"),
					(eq, ":team_value", ":team_value_2"),
					(agent_is_alive, ":value_2"),
					(agent_is_active, ":value_2"),
					(agent_is_human, ":value_2"),
					(agent_get_position, 2, ":value_2"),
					(get_distance_between_positions_in_meters, ":distance_between_positions_in_meters_1_2", 1, 2),
					(le, ":distance_between_positions_in_meters_1_2", 10),
					(store_agent_hit_points, ":agent_hit_points_value_2", ":value_2"),
					(val_add, ":agent_hit_points_value_2", 2),
					(val_min, ":agent_hit_points_value_2", 101),
					(agent_set_hit_points, ":value_2", ":agent_hit_points_value_2"),
					(try_begin),
						(eq, ":value_2", ":player_agent_no"),
						(display_message, "@You feel secured standing near the banner, healing some of your HP.", 0x006495ed),
					(try_end),
				(try_end),
			(try_end),
			(assign, ":value", ":player_agent_no"),
			(agent_is_alive, ":value"),
			(agent_get_wielded_item, ":wielded_item_value_0", ":value", 0),
			(is_between, ":wielded_item_value_0", 1198, 1202),
			(agent_get_team, ":team_value", ":value"),
			(agent_get_position, 1, ":value"),
			(try_for_range, ":value_2"),
				(neq, ":value_2", ":value"),
				(agent_get_team, ":team_value_2", ":value_2"),
				(eq, ":team_value", ":team_value_2"),
				(agent_is_alive, ":value_2"),
				(agent_is_active, ":value_2"),
				(agent_is_human, ":value_2"),
				(agent_get_position, 2, ":value_2"),
				(get_distance_between_positions_in_meters, ":distance_between_positions_in_meters_1_2", 1, 2),
				(le, ":distance_between_positions_in_meters_1_2", 10),
				(store_agent_hit_points, ":agent_hit_points_value_2", ":value_2"),
				(try_begin),
					(eq, ":wielded_item_value_0", 1201),
					(val_add, ":agent_hit_points_value_2", 1),
				(try_end),
				(val_add, ":agent_hit_points_value_2", 5),
				(val_max, ":agent_hit_points_value_2", 101),
				(agent_set_hit_points, ":value_2", ":agent_hit_points_value_2"),
			(try_end)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$tom_sand_storm", 3)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_position, 0, ":player_agent_no"),
			(position_set_z_to_ground_level, 0),
			(position_get_z, ":position_z_0", 0),
			(val_add, ":position_z_0", 2100),
			(position_set_z, 0, ":position_z_0"),
			(particle_system_burst, "psys_rain", 0, 1),
			(set_fixed_point_multiplier, 100)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$tom_sand_storm", 2)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_position, 0, ":player_agent_no"),
			(position_set_z_to_ground_level, 0),
			(position_get_z, ":position_z_0", 0),
			(val_add, ":position_z_0", 2000),
			(position_set_z, 0, ":position_z_0"),
			(particle_system_burst, "psys_blizzard", 0, 1),
			(set_fixed_point_multiplier, 100)
		]),

		(8.0, 0.0, 0.0,
		[
			(eq, "$tom_sand_storm", 3)
		],

		[
			(store_random_in_range, ":random_in_range_0_100", 0, 100),
			(try_begin),
				(ge, ":random_in_range_0_100", 90),
				(play_sound, "snd_thunder"),
			(try_end)
		]),

		(0.0, 0.0, ti_once,
		[
			(eq, "$tom_sand_storm", 2)
		],

		[
			(play_sound, "snd_wind")
		]),

		(0.0, 0.0, ti_once,
		[
			(eq, "$tom_sand_storm", 1)
		],

		[
			(play_sound, "snd_wind")
		]),

		(1.0, 0.0, ti_once,
		[
			(neq, "$g_battle_result", 0),
			(get_player_agent_no, ":player_agent_no"),
			(agent_is_alive, ":player_agent_no"),
			(agent_get_troop_id, ":troop_id_player_agent_no", ":player_agent_no"),
			(eq, ":troop_id_player_agent_no", "trp_player")
		],

		[
			(call_script, "script_freelancer_keep_field_loot")
		]),

		(0.0, 1.5, 0.0,
		[
			(key_clicked, 20),
			(get_player_agent_no, ":player_agent_no"),
			(agent_is_alive, ":player_agent_no"),
			(agent_set_animation, ":player_agent_no", "anim_cheer", 1),
			(agent_play_sound, ":player_agent_no", "snd_man_victory")
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_team, ":team_player_agent_no", ":player_agent_no"),
			(agent_get_position, 1, ":player_agent_no"),
			(try_for_agents, ":var_3"),
				(agent_is_alive, ":var_3"),
				(agent_is_human, ":var_3"),
				(agent_get_team, ":team_var_3", ":var_3"),
				(eq, ":team_var_3", ":team_player_agent_no"),
				(agent_get_position, 0, ":var_3"),
				(get_distance_between_positions_in_meters, ":distance_between_positions_in_meters_0_1", 0, 1),
				(lt, ":distance_between_positions_in_meters_0_1", 20),
				(agent_set_animation, ":var_3", "anim_cheer", 1),
				(agent_play_sound, ":var_3", "snd_man_victory"),
				(agent_get_slot, ":var_3_courage_score", ":var_3", slot_agent_courage_score),
				(val_add, ":var_3_courage_score", 5),
				(val_min, ":var_3_courage_score", 9600),
				(agent_set_slot, ":var_3", slot_agent_courage_score, ":var_3_courage_score"),
			(try_end),
			(display_message, "@Huzzah! You encourage your nearby troops.")
		]),

		(0.0, 1.7, 0.0,
		[
			(eq, "$tom_yell_smelly_peasents", 1)
		],

		[
			(call_script, "script_tom_command_cheer"),
			(assign, "$tom_yell_smelly_peasents", 0)
		]),

		(-26.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(store_trigger_param_2, ":trigger_param_2"),
			(neg|agent_is_ally, ":trigger_param_1"),
			(agent_is_human, ":trigger_param_1"),
			(eq, ":trigger_param_2", "$fplayer_agent_no"),
			(val_add, "$killcount", 1)
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_clear_troop_array", "trp_lances_troop_in_combat", 0, "$lance_troop_serving")
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_is_human, ":trigger_param_1"),
			(get_player_agent_no, ":player_agent_no"),
			(neq, ":trigger_param_1", ":player_agent_no"),
			(agent_get_party_id, ":party_id_trigger_param_1", ":trigger_param_1"),
			(eq, ":party_id_trigger_param_1", "p_main_party"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(call_script, "script_search_for_troop", ":troop_id_trigger_param_1"),
			(agent_set_slot, ":trigger_param_1", 102, reg0)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_is_human, ":trigger_param_1"),
			(agent_is_non_player, ":trigger_param_1"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(lt, ":troop_id_trigger_param_1", "trp_kidnapped_girl"),
			(try_for_range, reg0, 0, 4),
				(agent_get_item_slot, ":item_slot_trigger_param_1_reg0", ":trigger_param_1", reg0),
				(is_between, ":item_slot_trigger_param_1_reg0", 1, "itm_cross_end"), #Previously itm_items_end
				(agent_unequip_item, ":trigger_param_1", ":item_slot_trigger_param_1_reg0"),
			(try_end),
			(try_for_range, reg0, 0, 2),
				(agent_get_wielded_item, ":item_slot_trigger_param_1_reg0", ":trigger_param_1", reg0),
				(is_between, ":item_slot_trigger_param_1_reg0", 1, "itm_cross_end"), #Previously itm_items_end
				(agent_unequip_item, ":trigger_param_1", ":item_slot_trigger_param_1_reg0"),
			(try_end),
			(assign, ":var_4", 0),
			(assign, ":var_5", 25),
			(assign, ":var_6", 50),
			(assign, ":var_7", 75),
			(assign, ":var_8", 100),
			(assign, ":var_18", 125),
			(assign, ":var_10", 150),
			(assign, ":var_11", 175),
			(assign, ":var_12", 200),
			(assign, ":value", 0),
			(assign, ":value_2", 0),
			(assign, ":value_3", 0),
			(assign, ":value_4", 0),
			(assign, ":value_5", 0),
			(assign, ":value_6", 0),
			(assign, ":value_7", 0),
			(assign, ":value_8", 0),
			(assign, ":value_9", 0),
			(troop_get_inventory_capacity, ":inventory_capacity_troop_id_trigger_param_1", ":troop_id_trigger_param_1"),
			(try_for_range, ":localvariable", 0, ":inventory_capacity_troop_id_trigger_param_1"),
				(troop_get_inventory_slot, ":inventory_slot_troop_id_trigger_param_1_localvariable", ":troop_id_trigger_param_1", ":localvariable"),
				(is_between, ":inventory_slot_troop_id_trigger_param_1_localvariable", 1, "itm_cross_end"), #Previously itm_items_end
				(item_get_type, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
				(try_begin),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 4),
					(val_add, ":var_4", 1),
					(troop_set_slot, "trp_items_array", slot_troop_relations_begin, ":var_4"),
					(troop_set_slot, "trp_items_array", ":var_4", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 2),
					(val_add, ":var_5", 1),
					(troop_set_slot, "trp_items_array", slot_troop_last_quest_betrayed, ":var_5"),
					(troop_set_slot, "trp_items_array", ":var_5", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_2", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 7),
					(val_add, ":var_6", 1),
					(troop_set_slot, "trp_items_array", slot_troop_recruitment_random, ":var_6"),
					(troop_set_slot, "trp_items_array", ":var_6", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_3", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 3),
					(val_add, ":var_7", 1),
					(troop_set_slot, "trp_items_array", slot_troop_personalitymatch_object, ":var_7"),
					(troop_set_slot, "trp_items_array", ":var_7", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_4", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 10),
					(val_add, ":var_8", 1),
					(troop_set_slot, "trp_items_array", 100, ":var_8"),
					(troop_set_slot, "trp_items_array", ":var_8", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_5", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 6),
					(val_add, ":var_18", 1),
					(troop_set_slot, "trp_items_array", slot_troop_rehire_speech, ":var_18"),
					(troop_set_slot, "trp_items_array", ":var_18", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_6", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 5),
					(val_add, ":var_10", 1),
					(troop_set_slot, "trp_items_array", slot_troop_days_on_mission, ":var_10"),
					(troop_set_slot, "trp_items_array", ":var_10", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_7", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 8),
					(val_add, ":var_11", 1),
					(troop_set_slot, "trp_items_array", 175, ":var_11"),
					(troop_set_slot, "trp_items_array", ":var_11", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_8", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 9),
					(val_add, ":var_12", 1),
					(troop_set_slot, "trp_items_array", 200, ":var_12"),
					(troop_set_slot, "trp_items_array", ":var_12", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_9", 1),
				(try_end),
			(try_end),
			(try_begin),
				(eq, ":value", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_relations_begin),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 1, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_2", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_last_quest_betrayed),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 26, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_3", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_recruitment_random),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 51, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_4", 1),
				(try_begin),
					(eq, ":value_2", 1),
					(store_random_in_range, ":random_in_range_0_100", 0, 100),
					(lt, ":random_in_range_0_100", 65),
				(else_try),
					(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_personalitymatch_object),
					(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 76, ":items_array_relations_begin"),
					(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
					(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
				(try_end),
			(try_end),
			(try_begin),
				(eq, ":value_5", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", 100),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 101, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_6", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_rehire_speech),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 126, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_7", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_days_on_mission),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 151, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_8", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", 175),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 176, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_9", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", 200),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 201, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end)
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(assign, "$enable_deahtcam", 1),
			(assign, "$auxilary_player_active", 0),
			(eq, "$use_player_auxiliary", 1),
			(assign, "$g_move_heroes", 1),
			(party_clear, "p_temp_casualties_3"),
			(call_script, "script_party_add_party", "p_temp_casualties_3", "p_main_party"),
			(set_player_troop, "trp_player"),
			(assign, "$enable_deahtcam", 0)
		]),

		(5.0, 0.0, 0.0,
		[
			(eq, "$use_player_auxiliary", 1),
			(eq, "$enable_deahtcam", 0),
			(get_player_agent_no, ":player_agent_no"),
			(neg|agent_is_alive, ":player_agent_no")
		],

		[
			(set_fixed_point_multiplier, 100),
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_team, ":team_player_agent_no", ":player_agent_no"),
			(agent_get_division, ":division_player_agent_no", ":player_agent_no"),
			(assign, ":value", 0),
			(try_for_agents, ":var_5"),
				(eq, ":value", 0),
				(agent_is_human, ":var_5"),
				(agent_is_alive, ":var_5"),
				(agent_get_team, ":team_var_5", ":var_5"),
				(agent_get_party_id, ":party_id_var_5", ":var_5"),
				(eq, ":party_id_var_5", "p_main_party"),
				(agent_get_division, ":division_player_agent_no_2", ":player_agent_no"),
				(agent_get_group, ":group_player_agent_no", ":player_agent_no"),
				(eq, ":team_player_agent_no", ":team_var_5"),
				(eq, ":division_player_agent_no", ":division_player_agent_no_2"),
				(agent_get_troop_id, ":troop_id_var_5", ":var_5"),
				(neg|is_between, ":troop_id_var_5", "trp_npc1", "trp_knight_1_1_wife"),
				(set_player_troop, ":troop_id_var_5"),
				(store_agent_hit_points, ":agent_hit_points_var_5_1", ":var_5", 1),
				(agent_get_position, 1, ":var_5"),
				(position_set_z, 1, -2000),
				(position_set_x, 1, 0),
				(position_set_y, 1, 0),
				(agent_get_position, 0, ":var_5"),
				(set_spawn_position, 0),
				(agent_get_horse, ":horse_var_5", ":var_5"),
				(try_begin),
					(gt, ":horse_var_5", 0),
					(agent_set_position, ":horse_var_5", 1),
					(remove_agent, ":horse_var_5"),
				(try_end),
				(agent_set_position, ":var_5", 1),
				(agent_set_slot, ":var_5", 100, 1),
				(agent_get_slot, ":var_5_102", ":var_5", 102),
				(remove_agent, ":var_5"),
				(spawn_agent, ":troop_id_var_5"),
				(assign, ":player_agent_no", reg0),
				(agent_set_slot, ":player_agent_no", 102, ":var_5_102"),
				(agent_set_team, ":player_agent_no", ":team_player_agent_no"),
				(agent_set_hit_points, ":player_agent_no", ":agent_hit_points_var_5_1", 1),
				(agent_set_group, ":player_agent_no", ":group_player_agent_no"),
				(agent_set_slot, ":player_agent_no", 100, 2),
				(agent_set_slot, ":player_agent_no", 101, ":troop_id_var_5"),
				(try_begin),
					(agent_get_horse, ":horse_player_agent_no", ":player_agent_no"),
					(gt, ":horse_player_agent_no", 0),
					(lt, ":horse_var_5", 0),
					(agent_set_position, ":horse_player_agent_no", 1),
					(remove_agent, ":horse_player_agent_no"),
				(try_end),
				(set_player_troop, "trp_player"),
				(assign, ":value", 1),
				(assign, "$auxilary_player_active", 1),
			(try_end),
			(eq, ":value", 0),
			(assign, "$enable_deahtcam", 1)
		]),

		(1.0, 0.0, 0.0,
		[],

		[
			(val_add, "$do_the_oil", 1),
			(try_begin),
				(gt, "$do_the_oil", 5),
				(assign, "$do_the_oil", 0),
			(try_end),
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(agent_is_alive, ":var_2"),
				(agent_get_team, ":team_var_2", ":var_2"),
				(this_or_next|eq, ":team_var_2", 1),
				(eq, ":team_var_2", 3),
				(try_begin),
					(neq, ":var_2", ":player_agent_no"),
					(agent_clear_scripted_mode, ":var_2"),
					(agent_force_rethink, ":var_2"),
				(try_end),
				(try_begin),
					(le, "$do_the_oil", 5),
					(troop_get_slot, ":oil_array_relations_begin", "trp_oil_array", slot_troop_relations_begin),
					(try_for_range, ":localvariable", 1, ":oil_array_relations_begin"),
						(troop_get_slot, ":oil_array_localvariable", "trp_oil_array", ":localvariable"),
						(scene_prop_has_agent_on_it, ":oil_array_localvariable", ":var_2"),
						(scene_prop_set_slot, ":oil_array_localvariable", 400, 1),
						(store_agent_hit_points, ":agent_hit_points_var_2_1", ":var_2", 1),
						(val_sub, ":agent_hit_points_var_2_1", 1),
						(try_begin),
							(gt, ":agent_hit_points_var_2_1", 1),
							(agent_set_hit_points, ":var_2", ":agent_hit_points_var_2_1", 1),
						(else_try),
							(agent_deliver_damage_to_agent, ":var_2", ":var_2", 100),
						(try_end),
						(try_begin),
							(eq, ":var_2", ":player_agent_no"),
							(display_message, "@You recieve damage from the hot oil spiled by the defenders on you!"),
						(try_end),
					(try_end),
				(try_end),
				(neq, ":var_2", ":player_agent_no"),
				(agent_get_position, 0, ":var_2"),
				(troop_get_slot, ":oil_array_relations_begin", "trp_temp_array_c", slot_troop_relations_begin),
				(try_for_range, ":localvariable", 1, ":oil_array_relations_begin"),
					(troop_get_slot, ":oil_array_localvariable", "trp_temp_array_c", ":localvariable"),
					(scene_prop_get_hit_points, ":agent_hit_points_var_2_1", ":oil_array_localvariable"),
					(gt, ":agent_hit_points_var_2_1", 0),
					(prop_instance_get_position, 1, ":oil_array_localvariable"),
					(get_distance_between_positions_in_meters, ":distance_between_positions_in_meters_0_1", 0, 1),
					(le, ":distance_between_positions_in_meters_0_1", 1),
					(store_random_in_range, ":random_in_range_0_101", 0, 101),
					(le, ":random_in_range_0_101", 60),
					(agent_set_look_target_position, ":var_2", 1),
					(agent_set_attack_action, ":var_2", 3, 0),
					(val_div, ":random_in_range_0_101", 10),
					(prop_instance_receive_damage, ":oil_array_localvariable", ":var_2", ":random_in_range_0_101"),
				(try_end),
			(try_end),
			(le, "$do_the_oil", 5),
			(troop_get_slot, ":oil_array_relations_begin", "trp_oil_array", slot_troop_relations_begin),
			(try_for_range, ":localvariable", 1, ":oil_array_relations_begin"),
				(troop_get_slot, ":oil_array_localvariable", "trp_oil_array", ":localvariable"),
				(scene_prop_slot_eq, ":oil_array_localvariable", 400, 1),
				(prop_instance_get_position, 1, ":oil_array_localvariable"),
				(particle_system_burst, "psys_gourd_smoke", 1, 100),
				(position_move_z, 1, 500, 1),
				(particle_system_burst, "psys_oil", 1, 100),
				#Add sound to burning Oil
				(play_sound_at_position, "snd_oil_noise", 1),
				#(prop_instance_play_sound, ":oil_array_localvariable" "snd_oil_noise"),
				#End add sound to burning oil
				(scene_prop_set_slot, ":oil_array_localvariable", 400, 0),

			(try_end)
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(assign, ":value", 1),
			(scene_prop_get_num_instances, ":scene_prop_num_instances_1257_earth_gate", "spr_1257_earth_gate"),
			(try_for_range, ":localvariable", 0, ":scene_prop_num_instances_1257_earth_gate"),
				(scene_prop_get_instance, ":scene_prop_instance_1257_earth_gate_localvariable", "spr_1257_earth_gate", ":localvariable"),
				(troop_set_slot, "trp_temp_array_c", ":value", ":scene_prop_instance_1257_earth_gate_localvariable"),
				(val_add, ":value", 1),
				(scene_prop_set_team, ":scene_prop_instance_1257_earth_gate_localvariable", 2),
			(try_end),
			(scene_prop_get_num_instances, ":scene_prop_num_instances_1257_earth_gate", "spr_1257_portcullis"),
			(try_for_range, ":localvariable", 0, ":scene_prop_num_instances_1257_earth_gate"),
				(scene_prop_get_instance, ":scene_prop_instance_1257_earth_gate_localvariable", "spr_1257_portcullis", ":localvariable"),
				(troop_set_slot, "trp_temp_array_c", ":value", ":scene_prop_instance_1257_earth_gate_localvariable"),
				(val_add, ":value", 1),
				(scene_prop_set_team, ":scene_prop_instance_1257_earth_gate_localvariable", 2),
			(try_end),
			(scene_prop_get_num_instances, ":scene_prop_num_instances_1257_earth_gate", "spr_1257_tavern_door_a"),
			(try_for_range, ":localvariable", 0, ":scene_prop_num_instances_1257_earth_gate"),
				(scene_prop_get_instance, ":scene_prop_instance_1257_earth_gate_localvariable", "spr_1257_tavern_door_a", ":localvariable"),
				(troop_set_slot, "trp_temp_array_c", ":value", ":scene_prop_instance_1257_earth_gate_localvariable"),
				(val_add, ":value", 1),
				(scene_prop_set_team, ":scene_prop_instance_1257_earth_gate_localvariable", 2),
			(try_end),
			(scene_prop_get_num_instances, ":scene_prop_num_instances_1257_earth_gate", "spr_1257_tavern_door_b"),
			(try_for_range, ":localvariable", 0, ":scene_prop_num_instances_1257_earth_gate"),
				(scene_prop_get_instance, ":scene_prop_instance_1257_earth_gate_localvariable", "spr_1257_tavern_door_b", ":localvariable"),
				(troop_set_slot, "trp_temp_array_c", ":value", ":scene_prop_instance_1257_earth_gate_localvariable"),
				(val_add, ":value", 1),
				(scene_prop_set_team, ":scene_prop_instance_1257_earth_gate_localvariable", 2),
			(try_end),
			(scene_prop_get_num_instances, ":scene_prop_num_instances_1257_earth_gate", "spr_1257_castle_f_door_a"),
			(try_for_range, ":localvariable", 0, ":scene_prop_num_instances_1257_earth_gate"),
				(scene_prop_get_instance, ":scene_prop_instance_1257_earth_gate_localvariable", "spr_1257_castle_f_door_a", ":localvariable"),
				(troop_set_slot, "trp_temp_array_c", ":value", ":scene_prop_instance_1257_earth_gate_localvariable"),
				(val_add, ":value", 1),
				(scene_prop_set_team, ":scene_prop_instance_1257_earth_gate_localvariable", 2),
			(try_end),
			(troop_set_slot, "trp_temp_array_c", slot_troop_relations_begin, ":value"),
			(assign, ":value", 1),
			(scene_prop_get_num_instances, ":scene_prop_num_instances_1257_earth_gate", "spr_1257_hit_spot_2m"),
			(try_for_range, ":localvariable", 0, ":scene_prop_num_instances_1257_earth_gate"),
				(scene_prop_get_instance, ":scene_prop_instance_1257_earth_gate_localvariable", "spr_1257_hit_spot_2m", ":localvariable"),
				(troop_set_slot, "trp_oil_array", ":value", ":scene_prop_instance_1257_earth_gate_localvariable"),
				(val_add, ":value", 1),
				(scene_prop_set_team, ":scene_prop_instance_1257_earth_gate_localvariable", 2),
			(try_end),
			(scene_prop_get_num_instances, ":scene_prop_num_instances_1257_earth_gate", "spr_1257_hit_spot_4m"),
			(try_for_range, ":localvariable", 0, ":scene_prop_num_instances_1257_earth_gate"),
				(scene_prop_get_instance, ":scene_prop_instance_1257_earth_gate_localvariable", "spr_1257_hit_spot_4m", ":localvariable"),
				(troop_set_slot, "trp_oil_array", ":value", ":scene_prop_instance_1257_earth_gate_localvariable"),
				(val_add, ":value", 1),
				(scene_prop_set_team, ":scene_prop_instance_1257_earth_gate_localvariable", 2),
			(try_end),
			(troop_set_slot, "trp_oil_array", slot_troop_relations_begin, ":value"),
			(assign, "$do_the_oil", 0)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_get_team, ":team_trigger_param_1", ":trigger_param_1"), #Removedforunassignedstuff#
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(try_begin),
				(troop_is_guarantee_ranged, ":troop_id_trigger_param_1"),
				(agent_set_division, ":trigger_param_1", 1),
			(else_try),
				(agent_set_division, ":trigger_param_1", 0),
			(try_end)
		]),

		(-19.0, 0.0, 0.0,
		[],

		[]),

		(2.0, 0.0, 0.0,
		[],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(agent_is_human, ":var_2"),
				(neq, ":player_agent_no", ":var_2"),
				(agent_slot_eq, ":var_2", 100, 0),
				(agent_is_alive, ":var_2"),
				(agent_get_ammo, ":ammo_var_2", ":var_2"),
				(gt, ":ammo_var_2", 0),
				(agent_get_team, ":team_var_2", ":var_2"),
				(this_or_next|neq, ":team_var_2", "$attacker_team"),
				(neq, ":team_var_2", "$attacker_team_2"),
				(call_script, "script_get_closest_enemy_distance_new", ":var_2", ":team_var_2", 150),
				(assign, ":var_5", reg1),
				(gt, ":var_5", 150),
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(troop_is_guarantee_ranged, ":troop_id_var_2"),
				(agent_get_division, ":division_var_2", ":var_2"),
				(team_get_hold_fire_order, ":hold_fire_order_team_var_2_division_var_2", ":team_var_2", ":division_var_2"),
				(neq, ":hold_fire_order_team_var_2_division_var_2", 1),
				(agent_get_wielded_item, ":wielded_item_var_2_0", ":var_2", 0),
				(is_between, ":wielded_item_var_2_0", 1, "itm_cross_end"), #Previously itm_items_end
				(item_get_type, ":type_wielded_item_var_2_0", ":wielded_item_var_2_0"),
				(this_or_next|neq, ":type_wielded_item_var_2_0", 10),
				(this_or_next|neq, ":type_wielded_item_var_2_0", 9),
				(neq, ":type_wielded_item_var_2_0", 8),
				(assign, ":value", 4),
				(try_for_range, reg0, 0, ":value"),
					(agent_get_item_slot, ":item_slot_var_2_reg0", ":var_2", reg0),
					(is_between, ":item_slot_var_2_reg0", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_0", ":item_slot_var_2_reg0"),
					(this_or_next|eq, ":type_wielded_item_var_2_0", 10),
					(this_or_next|eq, ":type_wielded_item_var_2_0", 8),
					(eq, ":type_wielded_item_var_2_0", 9),
					(agent_set_wielded_item, ":var_2", ":item_slot_var_2_reg0"),
					(assign, ":value", -1),
				(try_end),
			(try_end)
		])
	] + crouching_triggers ),

	("castle_attack_walls_ladder", mtf_battle_mode, -1,
	"You attack the walls of the castle...",
	[(0, mtef_attackers|mtef_team_1, af_override_horse, aif_start_alarmed, 18, []),
	(0, mtef_attackers|mtef_team_1, af_override_horse, aif_start_alarmed, 0, []),
	(10, mtef_defenders|mtef_team_0, af_override_horse, aif_start_alarmed, 0, []),
	(11, mtef_defenders|mtef_team_0, af_override_horse, aif_start_alarmed, 4, []),
	(15, mtef_defenders|mtef_team_0, af_override_horse, aif_start_alarmed, 0, []),
	(40, mtef_defenders|mtef_team_0|mtef_archers_first, af_override_horse, aif_start_alarmed, 2, []),
	(41, mtef_defenders|mtef_team_0|mtef_archers_first, af_override_horse, aif_start_alarmed, 2, []),
	(42, mtef_defenders|mtef_team_0|mtef_archers_first, af_override_horse, aif_start_alarmed, 2, []),
	(43, mtef_defenders|mtef_team_0|mtef_archers_first, af_override_horse, aif_start_alarmed, 2, []),
	(44, mtef_defenders|mtef_team_0|mtef_archers_first, af_override_horse, aif_start_alarmed, 2, []),
	(45, mtef_defenders|mtef_team_0|mtef_archers_first, af_override_horse, aif_start_alarmed, 2, []),
	(46, mtef_defenders|mtef_team_0|mtef_archers_first, af_override_horse, aif_start_alarmed, 2, [])],
	[
				

    (7, 0, ti_once,
    [],
    [
	(call_script, "script_assign_traits"),
    ]),


    (0, 0, 1, 
    [
    ],
    [
	(call_script, "script_stumbling"),
    ]),





#Decapitations next level right here.
(ti_on_agent_hit, 0, 0, [(eq, "$dynamic_decap", 1),],
[
   (store_trigger_param_1, ":victim_agent"),
   (store_trigger_param_2, ":attacker_agent"),
   (store_trigger_param_3, ":damage"),
   (assign, ":attacker_item", reg0), ### Transfer the item ID to make sure it dosn't change while the script is running
   (copy_position, pos5, pos0), ### Transfer the position of the hit to make sure it dosn't change while the script is running
   (neq, ":victim_agent", -1),
   (try_begin), #-- Decapitations --#
      (agent_is_human, ":victim_agent"),
	  (ge, ":attacker_item", 0),
	  (assign, ":run", 0), ### Reset the run test variable
#	  (try_begin), ### Special weapons that can decap, ovevrrides the below conditions
#		  (this_or_next|eq, ":attacker_item", "itm_supercrossbow"),
#		  (eq, ":attacker_item", "itm_supersledge"),
#		  (assign, ":run", 1),
	  (try_begin),
		  #(neq, ":attacker_item", "itm_mace_1"), ### List of weapons that cannot decapitate
		  #(neq, ":attacker_item", "itm_mace_2"), ### This would be easier to do with a preperty check (for damage type), but I don't know if that is possible or not
		  #(neq, ":attacker_item", "itm_mace_3"),
		  #(neq, ":attacker_item", "itm_staff"), #Keeping active incase of script errors
		  (agent_get_action_dir, ":attack_dir", ":attacker_agent"), ### Makes sure the attack is either a left or right swing
		  (this_or_next|eq, ":attack_dir", 1), ### Right swing
		  (eq, ":attack_dir", 2), ### Left swing
		  (assign, ":run", 1),
	  (try_end),
	  (eq, ":run", 1), ### One of the checks were true, continue to run script
	  #(assign, reg1, ":damage"), #Debug messages
	  #(display_message, "@Damage: {reg1}"),
	  
	  (assign, ":run", 0), ### Reset the run test variable
	  (try_begin),
		(ge, ":damage", "$decap_damage"), ### 30 Minimum damage required to decapitate an agent
		(assign, ":run", 1),
		
#	  (else_try),  ### If debugging mode is on, this bypasses the damage requirement check
#		  (eq,"$g_decapitations_debugging", 1),
#		  (assign, ":run", 1),
#		  (display_message, "@Decap minimum DMG req bypassed"),
	  (try_end),
	  (eq, ":run", 1),
	  
	  (store_agent_hit_points, ":hp", ":victim_agent", 1),
	  (val_add, ":hp", 10), ### 10 Victim must have the negative of this hp or below after hit for the script to move on (never put this value below 0 since the agent has to be absolutley positvely dead)!
	  (ge, ":damage", ":hp"),
	  
	  
	  ### Compare the hit position to the agent's position
      (agent_get_position, pos4, ":victim_agent"),
      (get_distance_between_positions, ":distance", pos4, pos5), 
	  (agent_get_horse, ":is_mounted", ":victim_agent"),
	  (try_begin), ### If the agent is on horseback, these values are used (note that these values will not be exactly correct if the horse is very large or very small)
		(ge, ":is_mounted", 0), ### Will be -1 if no horse is to be found, so anything above means that the agent is mounted
		(assign, ":min_distance", 240), ### Minimum distance from the agent's horse's hooves from which the hit is valid (240 is an approximate value)
		(assign, ":max_distance", 260), ### Maximum distance from the agent's horse's hooves to which the hit is valid (260 is an approximate value)
	  (else_try),  ### If the agent is on foot, these values are used
	    (assign, ":min_distance", 160), ### Minimum distance from the agent's feet from which the hit is valid (160 = slightly below the neck)
	    (assign, ":max_distance", 176), ### Maximum distance from the agent's feet to which the hit is valid (176 = near the nose)
	  (try_end),
      (is_between, ":distance", ":min_distance", ":max_distance"), ### Check to see if the hit is within the allowed area
	  
	  
	  (assign, ":run", 0), ### Default variable value before damage test
	  (try_begin),
		  (store_div, ":chance", ":damage", "$decap_damage_divider"), ### Chance of decap is damage / 4 right now. Lower this value for higher chances of decapitation (or press M+Right Ctrl for debug more if you just want to test easy decaps in-game).
		  
		  #(assign, reg1, ":chance"), #Debug messages
		  #(display_message, "@Decap chance is: {reg1}"),
		  (store_random_in_range, ":diceroll", 0, "$decap_randomizer"), ### Randomizer, 0-100
		  
		  #(assign, reg1, ":diceroll"), #Debug messages
		  #(display_message, "@Diceroll: {reg1}"),
		  (le, ":diceroll", ":chance"), ### ":diceroll" must be less than or equal to ":chance", if it is, decapitation occurs!
		  
		  (assign, ":run", 1), ### SUCCESS!
		  
#     (else_try),  ### If debugging mode is on, bypass chance calculation
#		  (eq,"$g_decapitations_debugging", 1),
#		  (assign, ":run", 1),
#		  (display_message, "@Decap chance calc bypassed"),
	  (try_end),  
	  (eq, ":run", 1), ### Time for the fun stuff!

	  ### Gender test for spawning the right head type
	  (assign, ":head_type", "itm_cut_off_head_male"),
	  (agent_get_troop_id, ":victim_troop", ":victim_agent"),
	  (try_begin),
	    (ge, ":victim_troop", 0),
		(troop_get_type,":victim_gender",":victim_troop"),
		(eq, ":victim_gender", 1),
		(assign, ":head_type", "itm_cut_off_head_female"),
	  (try_end),
	  
	  ### Randomize the spawned head's and/or helmet's position and orientation
	  (store_random_in_range, ":z_rotation", 0, 360),
	  (store_random_in_range, ":y_rotation", -60, 60),
	  (store_random_in_range, ":x_pos", -90, 90),
	  (store_random_in_range, ":y_pos", -90, 90),
	  (position_rotate_z, pos4,":z_rotation"),
	  (position_rotate_y, pos4,":y_rotation"),
	  (position_move_x, pos4, ":x_pos"),
	  (position_move_y, pos4, ":y_pos"),
	  (position_set_z_to_ground_level, pos4),
	  (position_move_z, pos4, 5),
	  (set_spawn_position, pos4),
	  (assign, ":prunetime", 360), ### This is the time in seconds before the spawned head or helmet gets pruned (removed). Recommended to keep it above 0 to make sure it gets removed eventually or when the scene resets, to prevent performance issues.
	  
	  #(spawn_item, ":head_type", 0, ":prunetime"), ### This is the old way of spawning the head on the ground with the helmet, disabled because of the new dynamic heads. You can comment away (disable) the dynamic heads spawning further down and uncomment this line for a less performance-needing approach (with no physics involved).
	  
	  ### Does the agent have a helmet or hat equipped?
      (agent_get_item_slot, ":item", ":victim_agent", 4), #head slot
      (try_begin),
         (ge, ":item", 1), ### Does it?
         (agent_unequip_item, ":victim_agent", ":item"), ### Yes it does. Unequip it to allow replacement by the invisible helmet further down
		 (try_begin),
			 ### Don't spawn items with "itp_attatch_armature" flag: rigging causes floating bugs
			 ### This would be much better to do with an item flag check, but I haven't found any way to do that
			 #(neq, ":item", "itm_with_itp_attatch_armature"),
			 #(neg|is_between,":item","start_of_itm_range_with_itp_attatch_armature","end_of_itm_range_with_itp_attatch_armature"),
			#(set_spawn_position, pos4),
			(spawn_item, ":item", 0, ":prunetime"), ### Spawns the agent's currently equipped headgear on the dropped head's position
		 (try_end),
      (try_end),
	  
	  (agent_equip_item, ":victim_agent", "itm_invisible_head"), ### Put an invisible helmet on the agent's head to "remove" it
	  
	  
	  (agent_get_position, pos4, ":victim_agent"), ### Refreshes the agent's position
	  (position_move_z, pos4, ":min_distance"), ### Move to the where the neck used to be attached
	  
	  
	  ### Blood effects! The last variable is the strength. Lower or increase it for more/less blood (or tweak the particle effects themselves in "module_particle_systems.py").
      (particle_system_burst, "psys_blood_decapitation", pos4, 40), 
	  (particle_system_burst, "psys_game_blood", pos4, 10),
	  (particle_system_burst, "psys_game_blood_2", pos4, 10),
	  
	  (play_sound_at_position, "snd_decapitation_battle", pos4), ### Play some nasty sounds
	  
	  
	  ### Dynamic head spawning! See the bottom of "module_scene_props.py" for physics-related options and more.
	  (position_move_z, pos4, 20),
	  (set_spawn_position, pos4),
	  (assign, ":head_type", "spr_head_dynamic_male"),
	  (try_begin), ### Gender check (for determening the type of head)
		(eq, ":victim_gender", 1),
		(assign, ":head_type", "spr_head_dynamic_female"),
	  (try_end),
	  (spawn_scene_prop, ":head_type"),
	  
		#Addition check if we should allow the message to appears
			(eq, "$allow_decap_mess", 1), #Possible script error

	  ### This below is for the text that shows up when somebody is decapitated.
	  
	  ### Who decapitated who?
		(agent_get_troop_id, ":attacker_troop", ":attacker_agent"),
		(str_store_troop_name, s0, ":attacker_troop"),

		(agent_get_troop_id, ":victim_troop", ":victim_agent"),
		(str_store_troop_name, s1, ":victim_troop"),

	  
	  ### Colour check (friend or foe?)
	  (get_player_agent_no, ":my_agent"),
	  (agent_get_team, ":my_team", ":my_agent"),
	  (agent_get_team, ":victim_team", ":victim_agent"),
	  (try_begin), ### Display it!
		  (neq, ":my_team", ":victim_team"),
		  (display_message, "@>>> {s0} decapitated {s1}!", 0xFF33DD11), ## Green
	  (else_try),
		  (display_message, "@>>> {s0} decapitated {s1}!", 0xFFFF4422), ## Red
	  (try_end),
   (try_end), #-- Decapitations END --#
   
   ]),



	#AI Sound horn!
			(0.0, 0.0, 2.0,
		[
			##(store_random_in_range, ":horn_chance", 0, 22),
			#(eq, ":horn_chance", 0),
		],
		[
			(call_script, "script_formation_ai_sound_horn"),
		]),
	#AI Sound horn end!









	
			##################################################
##### troop_ratio_bar
##################################################
      (0, 0, ti_once, [
	  (eq, "$use_troopbars", 1),
	  ], [
	  (start_presentation, "prsnt_troop_ratio_bar"),
	  ]),
##################################################
##### troop_ratio_bar
##################################################
	
###Voice-over for Infantry, archers & Cavalry
		
		(0.0, 0.3, 0.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 29) #Everyone!
		],

		[
		(call_script, "script_identify_battle_voices_all")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 30) #Infantry
		],

		[
		(call_script, "script_identify_battle_voices_inf")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 31) #Archers
		],

		[
		(call_script, "script_identify_battle_voices_archers")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 32) #Cavalry
		],

		[
		(call_script, "script_identify_battle_voices_cav")
		]),
		###Voice-over for Infantry, archers & Cavalry	
		
		
		
					#####MUSICBOX SIEGE VARIANT
	(ti_after_mission_start, 0, ti_once, [ #680 #(ti_after_mission_start, 0, 680, [ #680
 #Obtained from Mod Options, affects mission templates, range: ALL SP Hostile music, co-op variant is additional_music_coop.
 (eq, "$additional_music", 1),
	],
		
  [
    #(play_track, "track_silence", 1), #Stop current module track
	   (music_set_situation, mtf_sit_fight), #Field
   #(music_set_situation, mtf_sit_siege), #Siege probably don't use
	(assign, "$music_timer", 0), #Patch
  #Randomize chance is 1 in a 5 (20%)
  
  #Field related extend to sieges
  (store_random_in_range, ":randomizer", 0, 2), #50% Chance of randomization
  (try_begin),
  (eq, ":randomizer", 0),
  (store_random_in_range, ":euro_randomizernext", 1, 11),
  (store_random_in_range, ":medi_randomizer", 1, 6),
  (store_random_in_range, ":arab_randomizer", 1, 8),
  (assign, "$track_count_field_siege", ":euro_randomizernext"),
  (assign, "$track_count_field_medi_siege", ":medi_randomizer"),
  (assign, "$track_count_field_arabs_siege", ":arab_randomizer"),
  (try_end),
  #Field related extend to sieges
  ]),
	
	(0, 0, 3, [ #680 #(ti_after_mission_start, 0, 680, [ #680
	(eq, "$additional_music", 1),
	 #Obtained from Mod Options, affects mission templates, range: ALL SP Hostile music, co-op variant is additional_music_coop.
	],
		
  [
		  #(display_message, "@Executing music code"),
		  (store_mission_timer_b, ":time_msec"),
		  #(assign, reg10, ":time_msec"),
          #(str_clear, s10),
          #(str_store_string, s10, "@Mission timer B for music: {reg10}"),
		  #(display_message, s10),
			#if next action time is lower than current time, play the sound
			(ge, ":time_msec", "$music_timer"),
			(reset_mission_timer_b), #Resetting mission timer, too.
			(assign, "$music_timer", 0),# Resetting value when track ends.
		
  #Euro only
     (try_begin),
      (ge, "$track_count_field_siege", 11),
      (assign, "$track_count_field_siege", 1),
    (else_try),
      (val_add, "$track_count_field_siege", 1),
	  (ge, "$track_count_field_siege", 11),
	  (assign, "$track_count_field_siege", 1),
    (try_end),
  #Euro only
  
  #Mediterrain only
  
       (try_begin),
      (ge, "$track_count_field_medi_siege", 6),
      (assign, "$track_count_field_medi_siege", 1),
    (else_try),
      (val_add, "$track_count_field_medi_siege", 1),
	  (ge, "$track_count_field_medi_siege", 6),
	  (assign, "$track_count_field_medi_siege", 1),
    (try_end),
  #Mediterrain only
  
  
  #Arabs only

       (try_begin),
      (ge, "$track_count_field_arabs_siege", 8),
      (assign, "$track_count_field_arabs_siege", 1),
    (else_try),
      (val_add, "$track_count_field_arabs_siege", 1),
	  (ge, "$track_count_field_arabs_siege", 8),
	  (assign, "$track_count_field_arabs_siege", 1),
    (try_end),
	#Arabs only
  
  #Pause between music length in seconds
  #(val_add, "$music_timer", 2),# 5 seconds added
  #Pause between music length in seconds
  
	(party_get_current_terrain, ":current_terrain_main_party", "p_main_party"), #Co-Op variant of this trigger should use scenes in_between rather than terrain because player can't obtain terrain in co-op sessions.
	(try_begin),
	(this_or_next|eq, ":current_terrain_main_party", 1), #rt_mountain
	(this_or_next|eq, ":current_terrain_main_party", 2), #rt_steppe
	(eq, ":current_terrain_main_party", 10), #rt_steppe_forest
	#Begin mediterrain music 5 tracks total
	(try_begin),
	(eq, "$track_count_field_medi_siege", 1), #
	(play_track, "track_medib3", 2),
	(val_add, "$music_timer", 209),# 1 second added
	(else_try),
	
	(eq, "$track_count_field_medi_siege", 2), #
	(play_track, "track_medib4", 2),
	(val_add, "$music_timer", 237),#
	(else_try),
	
	(eq, "$track_count_field_medi_siege", 3), #
	(play_track, "track_medib5", 2),
	(val_add, "$music_timer", 229),#
	(else_try),

	(eq, "$track_count_field_medi_siege", 4), #
	(play_track, "track_medis1", 2),
	(val_add, "$music_timer", 195),#
	(else_try),
	(eq, "$track_count_field_medi_siege", 5), #
	(play_track, "track_medis2", 2),
	(val_add, "$music_timer", 66),#
	(try_end),
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 3), #rt_plain
	(this_or_next|eq, ":current_terrain_main_party", 11), #rt_forest
	(eq, ":current_terrain_main_party", 9), #rt_mountain_forest
	#Begin Euro Music
	(try_begin),
	(eq, "$track_count_field_siege", 1), #
	(play_track, "track_euros1", 2),
	(val_add, "$music_timer", 162),#
	(else_try),
	(eq, "$track_count_field_siege", 2), #
	(play_track, "track_euros2", 2),
	(val_add, "$music_timer", 221),#
	(else_try),
	
	(eq, "$track_count_field_siege", 3), #
	(play_track, "track_euros3", 2),
	(val_add, "$music_timer", 190),#
	(else_try),
	
	(eq, "$track_count_field_siege", 4), #
	(play_track, "track_euros4", 2),
	(val_add, "$music_timer", 317),#
	(else_try),
	
	(eq, "$track_count_field_siege", 5), #
	(play_track, "track_euros5", 2),
	(val_add, "$music_timer", 59),#
		(else_try),
	
	(eq, "$track_count_field_siege", 6), #
	(play_track, "track_euros6", 2),
	(val_add, "$music_timer", 59),#
		(else_try),
	
	(eq, "$track_count_field_siege", 7), #
	(play_track, "track_euros7", 2),
	(val_add, "$music_timer", 85),#
		(else_try),
	
	(eq, "$track_count_field_siege", 8), #
	(play_track, "track_euros8", 2),
	(val_add, "$music_timer", 82),#
		(else_try),
	
	(eq, "$track_count_field_siege", 9), #
	(play_track, "track_euros9", 2),
	(val_add, "$music_timer", 199),#
		(else_try),
	
	(eq, "$track_count_field_siege", 10), #
	(play_track, "track_euros10", 2),
	(val_add, "$music_timer", 281),#
	(try_end),
	
	
	
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 4), #rt_snow
	(this_or_next|eq, ":current_terrain_main_party", 12), #rt_snow_forest
	(eq, ":current_terrain_main_party", 7), #rt_bridge
	#Begin Euro Music
	(try_begin),
	(eq, "$track_count_field_siege", 1), #
	(play_track, "track_euros1", 2),
	(val_add, "$music_timer", 162),#
	(else_try),
	(eq, "$track_count_field_siege", 2), #
	(play_track, "track_euros2", 2),
	(val_add, "$music_timer", 221),#
	(else_try),
	
	(eq, "$track_count_field_siege", 3), #
	(play_track, "track_euros3", 2),
	(val_add, "$music_timer", 190),#
	(else_try),
	
	(eq, "$track_count_field_siege", 4), #
	(play_track, "track_euros4", 2),
	(val_add, "$music_timer", 317),#
	(else_try),
	
	(eq, "$track_count_field_siege", 5), #
	(play_track, "track_euros5", 2),
	(val_add, "$music_timer", 59),#
		(else_try),
	
	(eq, "$track_count_field_siege", 6), #
	(play_track, "track_euros6", 2),
	(val_add, "$music_timer", 59),#
		(else_try),
	
	(eq, "$track_count_field_siege", 7), #
	(play_track, "track_euros7", 2),
	(val_add, "$music_timer", 85),#
		(else_try),
	
	(eq, "$track_count_field_siege", 8), #
	(play_track, "track_euros8", 2),
	(val_add, "$music_timer", 82),#
		(else_try),
	
	(eq, "$track_count_field_siege", 9), #
	(play_track, "track_euros9", 2),
	(val_add, "$music_timer", 199),#
		(else_try),
	
	(eq, "$track_count_field_siege", 10), #
	(play_track, "track_euros10", 2),
	(val_add, "$music_timer", 281),#
	(try_end),
	
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 5), #rt_desert
	(eq, ":current_terrain_main_party", 13), #rt_desert_forest
	#Begin arab music
	(try_begin),
	(eq, "$track_count_field_arabs_siege", 1), #
	(play_track, "track_arabs1",  2),
	(val_add, "$music_timer", 198),#
	(else_try),
	(eq, "$track_count_field_arabs_siege", 2), #
	(play_track, "track_arabs2", 2),
	(val_add, "$music_timer", 112),#
	
	(else_try),
	(eq, "$track_count_field_arabs_siege", 3), #
	(play_track, "track_medis1", 2),
	(val_add, "$music_timer", 195),#
	(else_try),
	
	(eq, "$track_count_field_arabs_siege", 4), #
	(play_track, "track_arabs4", 2),
	(val_add, "$music_timer", 79),#
		(else_try),
	
	(eq, "$track_count_field_arabs_siege", 5), #
	(play_track, "track_arabs5", 2),
	(val_add, "$music_timer", 394),#
	
			(else_try),
	(eq, "$track_count_field_arabs_siege", 6), #
	(play_track, "track_arabs3", 2),
	(val_add, "$music_timer", 80),#
			(else_try),
	(eq, "$track_count_field_arabs_siege", 7), #
	(play_track, "track_medis2", 2),
	(val_add, "$music_timer", 66),#
	(try_end),
	(try_end),
	
  ]),
	
	#####MUSICBOX END
			#####Camera mode by Rubik None-Coop Version Begin
		(0, 0, 0, [(eq, "$extended_camera_mode", 1)],
  [
    (get_player_agent_no, ":player_agent"),
    (agent_get_look_position, pos1, ":player_agent"),
    (position_move_z, pos1, "$g_camera_z"),
    (position_move_y, pos1, "$g_camera_y"),
    (agent_get_horse, ":horse_agent", ":player_agent"),
    (try_begin),
      (ge, ":horse_agent", 0),
      (position_move_z, pos1, 80),
    (try_end),
    (mission_cam_set_position, pos1),
    (try_begin),
      (key_is_down, key_left_control),
      (assign, ":move_val", 50),
    (else_try),
      (assign, ":move_val", 10),
    (try_end),
    (try_begin),
      (key_clicked, key_up),
      (mission_cam_set_mode, 1),
      (val_add, "$g_camera_z", ":move_val"),
    (else_try),
      (key_clicked, key_down),
      (mission_cam_set_mode, 1),
      (val_sub, "$g_camera_z", ":move_val"),
    (else_try),
      (key_clicked, key_left),
      (mission_cam_set_mode, 1),
      (val_add, "$g_camera_y", ":move_val"),
    (else_try),
      (key_clicked, key_right),
      (mission_cam_set_mode, 1),
      (val_sub, "$g_camera_y", ":move_val"),
    (try_end),
    (try_begin),
      (this_or_next|game_key_clicked, gk_view_char),
      (this_or_next|game_key_clicked, gk_zoom),
      (game_key_clicked, gk_cam_toggle),
      (mission_cam_set_mode, 0),
    (try_end),
  ]),
  #####Camera mode by Rubik None-Coop Version End
		
				#####MUSICBOX DEBUG
#		(0, 0, 10, [
#		],
# [
#		(party_get_current_terrain, ":current_terrain_main_party", "p_main_party"),
#	      #BEGIN DEBUG
#         (assign, reg10, ":current_terrain_main_party"),
#         (str_clear, s10),
#         (str_store_string, s10, "@Terrain: {reg10}"),
#		  (display_message, s10),
#         #END DEBUG
# ]),
###########Torch by troycall/Envious Arm begin

																	#(-25.0, 0.0, 0.0, #Enabling this forces random chance to be 100%
																	#(ti_on_agent_spawn, 0, 0, #Enabling this forces random chance to be 100%
																	(20, 0, ti_once, #Proper one, but reinforcements do not get assigned torches.
        [
          (mission_tpl_are_all_agents_spawned), #From VC Header_Operations to prevent weird behavior.
          (is_currently_night) #Check if currently night time
        ],
        [

		  ####DEFAULT
		   #(try_for_agents, ":agent"),
            #(agent_get_wielded_item, ":item", ":agent", 1),
            #(gt, ":item", -1),
            #(agent_unequip_item, ":agent", ":item"),
            #(agent_equip_item, ":agent", "itm_torch"),
            #(agent_set_wielded_item, ":agent", "itm_torch"),           
          #(try_end),
		  ####END DEFAULT
		  
		  (try_for_agents, ":agent"), #Try for agents...
		  #Extension
		  (agent_is_alive, ":agent"), #For performance reasons
		  #End
		  (agent_is_human, ":agent"), #Performance
          (agent_is_non_player, ":agent"), #Uncommenting this includes player on spawning with torch, may be necessary to uncomment at module_coop_mission_templates.
		  


		 ##########Default Order
		 #######		  (agent_is_human, ":agent"), #Performance
         #######(agent_is_non_player, ":agent"), #Uncommenting this includes player on spawning with torch, may be necessary to uncomment at module_coop_mission_templates.
		 #######
		 ########Extension
		 #######(agent_is_active, ":agent"), #For performance reasons
		 #######(agent_is_alive, ":agent"), #For performance reasons
		 ########End
		  ############
		  		  
				#  (try_begin),
				  
		#		          (agent_get_wielded_item, ":rhand", ":agent", 0),  #Right hand
		#  (assign, ":rhanditem", 0), # Preparing local variable.
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000000000100),
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000004000000),
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000008000000),
		#  (neg|item_has_capability, ":rhanditem", 0x0000000170000000),
		# 

		  #
		  
          #BEGIN DEBUG
          #(assign, reg10, ":agent"),
          #(str_clear, s10),
          #(str_store_string, s10, "@New agent: {reg10}"),
          #END DEBUG
		  #(agent_get_wielded_item, ":rhanditem", ":agent", 0),  #Obtain right hand item
         (agent_get_wielded_item, ":rhanditem", ":agent", 0),  #Obtain right hand item
          (agent_get_wielded_item, ":item", ":agent", 1), # Left hand: shield or -1
          #BEGIN DEBUG
          #(assign, reg10, ":item"),
          #(str_store_string, s10, "@{s10}. LH: {reg10}"),
		  #(display_message, "@Main block Phase A finalized"),
          #END DEBUG
		  #(item_get_type, ":type", ":rhanditem"), #If right hand item is polearm, stop reading rest of code.
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_club_with_spike_head", "itm_wooden_shield"),
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_light_lance", "itm_wooden_shield"),
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_light_lance", "itm_wooden_shield"),
          (try_begin),
		  (neg|is_between, ":rhanditem", "itm_club_with_spike_head", "itm_wooden_shield"),
		  (neg|is_between, ":rhanditem", "itm_lance_banner_jer", "itm_cross_end"), #Update item slots
		  #(neg|troop_has_item_equipped, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		  #(neq, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		  
		# (neg|eq, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		    (gt, ":item", -1), #Check if the agent wields any item in the left hand, this or next.
            #(neq, ":item", -1),# Check if the agent wields any item in the left hand
            (neq, ":item", "itm_torch"), #If agent is using torch, ignore him.
            #(display_message, "@PASSED neg tests"), #Debug message

			
            (store_random_in_range, ":chance", 1, 101), # Chance of item being assigned
            (try_begin),
			  (le, ":chance", "$torch_chance"), #25% = 25
				#lt           = neg | ge # less than		-- (lt,<value>,<value>),
				#neq          = neg | eq # not equal to		-- (neq,<value>,<value>),
				#le           = neg | gt # less or equal to	-- (le,<value>,<value>),
              (agent_unequip_item, ":agent", ":item"),
			  
              #BEGIN DEBUG
              #(str_store_item_name, s11, ":item"),
              #(str_store_string, s10, "@{s10}. Removed item: {s11}"),
			  #(display_message, "@(agent_unequip_item, :agent, :item PASSED."),
              #END DEBUG

               
                (agent_equip_item, ":agent", "itm_torch"), #Tell agent to equip the item
                 #(display_message, "@(agent_equip_item, :agent, :item PASSED."),
                  (agent_set_wielded_item, ":agent", "itm_torch"), #Required for infantry only, cavarly can work without it.
                  #(display_message, "@(agent_set_wielded_item, :agent, :item PASSED."),
                 
                 
                  #BEGIN DEBUG
                #(else_try),
                  #(str_store_string, s10, "@{s10}. Failed random chance."),
                (try_end),
               
              #(else_try),
                #(str_store_string, s10, "@{s10}. Invalid agent for torch"),
              (try_end),
             
              #(display_message, s10),
			  (try_end),
              #END DEBUG
			#  (try_end),
      ]),
	  
###########Torch by troycall/Envious Arm end


		(-28.0, 0.3, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(store_trigger_param_2, ":trigger_param_2"),
			(store_trigger_param_3, ":trigger_param_3"),
			(assign, ":var_4", reg0),
			(agent_is_human, ":trigger_param_1"),
			(agent_is_alive, ":trigger_param_1"), #this addition
			(agent_is_active, ":trigger_param_1"), #This addition, i disabled tihs whole mission template to fix the bug too.
			(get_player_agent_no, ":player_agent_no"),
			(try_begin),
				(eq, "$tom_weapon_break", 1),
				(eq, ":trigger_param_1", ":player_agent_no"),
				(store_random_in_range, ":random_in_range_0_1000", 0, 1000),
				(eq, ":random_in_range_0_1000", 1),
				(store_random_in_range, ":random_in_range_4_8", 4, 8),
				(troop_get_inventory_slot, ":inventory_slot_player_random_in_range_4_8", "trp_player", ":random_in_range_4_8"),
				(gt, ":inventory_slot_player_random_in_range_4_8", 0),
				(str_store_item_name, 20, ":inventory_slot_player_random_in_range_4_8"),
				(troop_get_inventory_slot_modifier, ":inventory_slot_modifier_player_random_in_range_4_8", "trp_player", ":random_in_range_4_8"),
				(try_begin),
					(eq, ":inventory_slot_modifier_player_random_in_range_4_8", 6),
					(display_message, "@Your {s20} is too crappy to fall apart!", 0x00ff0000),
				(else_try),
					(troop_add_item, "trp_broken_items", ":inventory_slot_player_random_in_range_4_8", ":inventory_slot_modifier_player_random_in_range_4_8"),
					(troop_set_inventory_slot_modifier, "trp_player", ":random_in_range_4_8", 6),
					(display_message, "@Your {s20} cracks!", 0x00ff0000),
				(try_end),
			(try_end),
			(try_begin),
				(eq, "$tom_weapon_break", 1),
				(eq, ":trigger_param_2", ":player_agent_no"),
				(is_between, ":var_4", 1, "itm_cross_end"), #Previously itm_items_end
				(neg|is_between, ":var_4", "itm_light_lance", "itm_wooden_shield"),
				(item_get_type, ":type_var_4", ":var_4"),
				(ge, ":trigger_param_3", 10),
				(neq, ":type_var_4", 10),
				(neq, ":type_var_4", 8),
				(neq, ":type_var_4", 9),
				(neq, ":type_var_4", 5),
				(neq, ":type_var_4", 6),
				(store_random_in_range, ":random_in_range_0_1000", 0, 600),
				(eq, ":random_in_range_0_1000", 1),
				(assign, ":value", -1),
				(try_for_range, ":random_in_range_4_8", 0, 4),
					(troop_get_inventory_slot, ":inventory_slot_player_random_in_range_4_8_2", "trp_player", ":random_in_range_4_8"),
					(eq, ":inventory_slot_player_random_in_range_4_8_2", ":var_4"),
					(assign, ":value", ":random_in_range_4_8"),
				(try_end),
				(gt, ":value", 0),
				(str_store_item_name, 20, ":var_4"),
				(troop_get_inventory_slot_modifier, ":inventory_slot_modifier_player_random_in_range_4_8", "trp_player", ":value"),
				(try_begin),
					(eq, ":inventory_slot_modifier_player_random_in_range_4_8", 6),
					(display_message, "@Your {s20} falls apart!", 0x00ff0000),
					(agent_unequip_item, ":player_agent_no", ":var_4"),
					(troop_remove_item, "trp_player", ":var_4"),
					(troop_remove_item, "trp_broken_items", ":var_4"),
				(else_try),
					(troop_add_item, "trp_broken_items", ":var_4", ":inventory_slot_modifier_player_random_in_range_4_8"),
					(troop_set_inventory_slot_modifier, "trp_player", ":value", 6),
					(display_message, "@Your {s20} cracks!", 0x00ff0000),
				(try_end),
			(try_end),
			(agent_get_horse, ":horse_trigger_param_2", ":trigger_param_2"),
			(try_begin),
				(eq, "$tom_lance_breaking", 1),
				(gt, ":horse_trigger_param_2", 0),
				(this_or_next|is_between, ":var_4", "itm_light_lance", "itm_spear_a"), #Updated item slots
				(is_between, ":var_4", "itm_lance_banner_jer", "itm_pike_banner_teu"), #Updated item slots
				(ge, ":trigger_param_3", 50),
				(store_random_in_range, ":random_in_range_0_100", 0, 100),
				(gt, ":random_in_range_0_100", 20),
				(try_begin),
					(eq, ":trigger_param_2", ":player_agent_no"),
					(display_message, "@You broke your lance!", 0x00ff0000),
				(try_end),
				########Add effects on weapon break *Lances*
        (agent_get_position, pos1, ":trigger_param_2"),
		(agent_play_sound, ":trigger_param_1", "snd_shield_broken"),
		(particle_system_burst, "psys_lanse", pos1, 10),
        (particle_system_burst, "psys_lanse_straw", pos1, 30),
                ####Extend to Lanse_Blood
		#(particle_system_burst, "psys_lanse_blood", pos1, 10),
        #(particle_system_burst, "psys_lanse_blood", pos1, 30),
		        ########End Effects
				(agent_unequip_item, ":trigger_param_2", ":var_4"),
			(else_try),
				(this_or_next|is_between, ":var_4", "itm_bamboo_spear", "itm_wooden_shield"), #Updated item slots
				(is_between, ":var_4", "itm_pike_banner_teu", "itm_items_end"), #Updated item slots
				(le, ":horse_trigger_param_2", 0),
				(ge, ":trigger_param_3", 8),
				(store_random_in_range, ":random_in_range_0_100", 0, 100),
				(ge, ":random_in_range_0_100", 90),
				(try_begin),
					(eq, ":trigger_param_2", ":player_agent_no"),
					(display_message, "@You broke your spear!", 0x00ff0000),
				(try_end),
				########Add effects on weapon break *Spears*
        (agent_get_position, pos1, ":trigger_param_2"),
		(agent_play_sound, ":trigger_param_1", "snd_shield_broken"),
		(store_random_in_range, ":psys_to_use", "psys_lanse", "psys_lanse_blood"),
		(particle_system_burst, ":psys_to_use", pos1, 7), #Default = 10 (Higher = Bigger Particles)
        (particle_system_burst, ":psys_to_use", pos1, 21), #Default = 30 (Higher = Bigger Particles)
                ####Extend to Lanse_Blood
		#(particle_system_burst, "psys_lanse_blood", pos1, 10),
        #(particle_system_burst, "psys_lanse_blood", pos1, 30),
		        ########End Effects
				(agent_unequip_item, ":trigger_param_2", ":var_4"),
			(try_end),
			###Envfix weapon breaking patch start here
		]),

		(-25.0, 0.0, 0.0,
		[
			(eq, "$freelancer_state", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(ge, ":player_agent_no", 0),
			(agent_is_active, ":player_agent_no"),
			(store_trigger_param_1, ":trigger_param_1"),
			(eq, ":player_agent_no", ":trigger_param_1"),
			(agent_get_team, ":team_player_agent_no", ":player_agent_no"),
			(team_set_order_listener, ":team_player_agent_no", -1),
			(val_add, ":team_player_agent_no", 2),
			(agent_set_team, ":player_agent_no", ":team_player_agent_no")
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(team_set_relation, 0, 2, 1),
			(team_set_relation, 1, 3, 1),
			(call_script, "script_change_banners_and_chest")
		]),

		(-21.0, 0.0, 0.0,
		[],

		[
			(try_begin),
				(eq, "$g_battle_won", 1),
				(call_script, "script_count_mission_casualties_from_agents"),
				(finish_mission, 0),
			(else_try),
				(eq, "$pin_player_fallen", 1),
				(eq, "$g_battle_won", 0),
				(call_script, "script_simulate_retreat", 5, 20, 1),
				(str_store_string, 5, "str_retreat"),
				(call_script, "script_count_mission_casualties_from_agents"),
				(set_mission_result, -1),
				(finish_mission, 0),
			(else_try),
				(eq, "$pin_player_fallen", 1),
				(eq, "$g_battle_won", -1),
				(call_script, "script_count_mission_casualties_from_agents"),
				(finish_mission, 0),
			(else_try),
				(call_script, "script_cf_check_enemies_nearby"),
				(question_box, "str_do_you_want_to_retreat"),
			(else_try),
				(get_player_agent_no, ":player_agent_no"),
				(neg|agent_is_alive, ":player_agent_no"),
				(call_script, "script_cf_check_enemies_nearby"),
				(question_box, "str_do_you_want_to_retreat"),
			(else_try),
				(display_message, "str_can_not_retreat"),
			(try_end)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(call_script, "script_troop_agent_set_banner", "tableau_game_troop_label_banner", ":trigger_param_1", ":troop_id_trigger_param_1")
		]),

		(-8.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(eq, ":trigger_param_1", 0),
			(assign, "$pin_player_fallen", 0),
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_team, ":team_player_agent_no", ":player_agent_no"),
			(try_begin),
				(neq, "$attacker_team", ":team_player_agent_no"),
				(neq, "$attacker_team_2", ":team_player_agent_no"),
				(str_store_string, 5, "str_siege_continues"),
				(call_script, "script_simulate_retreat", 8, 15, 0),
			(else_try),
				(str_store_string, 5, "str_retreat"),
				(call_script, "script_simulate_retreat", 5, 20, 0),
			(try_end),
			(call_script, "script_count_mission_casualties_from_agents"),
			(finish_mission, 0)
		]),

		(0.0, 0.0, ti_once,
		[],

		[
			(assign, "$g_battle_won", 0),
			(assign, "$defender_reinforcement_stage", 0),
			(assign, "$attacker_reinforcement_stage", 0),
			(assign, "$dmod_current_agent", -1),
			(assign, "$dmod_move_camera", -1),
						(try_begin),
			(eq, "$additional_music", 0),
			(call_script, "script_music_set_situation_with_culture", 262144),
			(try_end),
		]),

		(30.0, 0.0, 0.0,
		[],

		[]),

		(0.0, 0.0, ti_once,
		[
			(assign, "$defender_team", 0),
			(assign, "$attacker_team", 1),
			(assign, "$defender_team_2", 2),
			(assign, "$attacker_team_2", 3)
		],

		[]),

		(0.0, 0.0, ti_once,
		[
			(set_show_messages, 0),
			(entry_point_get_position, 10, 10),
			(try_for_range, ":number", 0, 9),
				(neq, ":number", 1),
				(team_give_order, "$defender_team", ":number", 0),
				(team_give_order, "$defender_team", ":number", 7),
				(team_give_order, "$defender_team", ":number", 7),
				(team_give_order, "$defender_team", ":number", 7),
				(team_give_order, "$defender_team_2", ":number", 0),
				(team_give_order, "$defender_team_2", ":number", 7),
				(team_give_order, "$defender_team_2", ":number", 7),
				(team_give_order, "$defender_team_2", ":number", 7),
			(try_end),
			(team_give_order, "$defender_team", 1, 11),
			(team_set_order_position, "$defender_team", 9, 10),
			(team_give_order, "$defender_team_2", 1, 11),
			(team_set_order_position, "$defender_team_2", 9, 10),
			(team_give_order, "$attacker_team", 9, 2),
			(team_give_order, "$attacker_team_2", 9, 2),
			(set_show_messages, 1)
		],

		[]),

		(0.0, 2.0, ti_once,
		[],

		[
			(try_for_agents, ":var_1"),
				(agent_set_slot, ":var_1", slot_agent_is_not_reinforcement, 1),
			(try_end)
		]),

		(3.0, 0.0, 0.0,
		[],

		[
			(store_mission_timer_a, ":mission_timer_a"),
			(ge, ":mission_timer_a", 10),
			(try_begin),
				(store_mul, ":value", "$attacker_reinforcement_stage", 2),
				(this_or_next|lt, "$defender_reinforcement_stage", 14),
				(le, "$defender_reinforcement_stage", ":value"),
				(store_normalized_team_count, ":normalized_team_count_0", 0),
				(lt, ":normalized_team_count_0", 10),
				(add_reinforcements_to_entry, 4, 7),
				(val_add, "$defender_reinforcement_stage", 1),
			(try_end)
		]),

		(2.0, 0.0, 0.0,
		[
			(gt, "$defender_reinforcement_stage", 0)
		],

		[
			(call_script, "script_siege_move_archers_to_archer_positions")
		]),

		(3.0, 0.0, 0.0,
		[
			(assign, ":value", 1),
			(try_begin),
				(ge, "$attacker_reinforcement_stage", 10),
				(store_mul, ":value_2", "$defender_reinforcement_stage", 2),
				(gt, "$attacker_reinforcement_stage", ":value_2"),
				(assign, ":value", 0),
			(try_end),
			(eq, ":value", 1),
			(store_mission_timer_a, ":mission_timer_a"),
			(ge, ":mission_timer_a", 10),
			(store_normalized_team_count, ":normalized_team_count_1", 1),
			(lt, ":normalized_team_count_1", 6)
		],

		[
			(add_reinforcements_to_entry, 1, 8),
			(val_add, "$attacker_reinforcement_stage", 1)
		]),

		(2.0, 0.0, ti_once,
		[],

		[
			(set_show_messages, 0),
			(try_for_range, ":number", 0, 9),
				(team_give_order, "$attacker_team", ":number", 12),
			(try_end),
			(try_for_range, ":number", 0, 9),
				(team_give_order, "$attacker_team_2", ":number", 12),
			(try_end),
			(set_show_messages, 1)
		]),

		(2.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_check_friendly_kills")
		]),

		(5.0, 60.0, ti_once,
		[
			(store_mission_timer_a, reg1),
			(ge, reg1, 10),
			(all_enemies_defeated, 5),
			(set_mission_result, 1),
			(display_message, "str_msg_battle_won"),
			#(play_sound, "snd_won_battle"), #Moved to victorious main menu
			(assign, "$g_battle_won", 1),
			(assign, "$g_battle_result", 1),
			(call_script, "script_play_victorious_sound")
		],

		[
			(call_script, "script_count_mission_casualties_from_agents"),
			(finish_mission, 1)
		]),

		(10.0, 0.0, 0.0, # Battle won/lost messages!
		[],

		[
			(eq, "$g_battle_won", 1),
			#(play_sound, "snd_won_battle"), #Moved to victorious main menu
			(display_message, "str_msg_battle_won")
		]),

		(30.0, 0.0, 0.0,
		[],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(neq, ":var_2", ":player_agent_no"),
				(agent_is_alive, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_get_team, ":team_var_2", ":var_2"),
				(this_or_next|eq, ":team_var_2", "$defender_team"),
				(eq, ":team_var_2", "$defender_team_2"),
				(agent_refill_ammo, ":var_2"),
			(try_end),
			(try_begin),
				(agent_get_team, ":team_var_2", ":player_agent_no"),
				(this_or_next|eq, ":team_var_2", "$defender_team"),
				(eq, ":team_var_2", "$defender_team_2"),
				(agent_refill_ammo, ":player_agent_no"),
			(try_end)
		]),

		(1.0, 4.0, ti_once,
		[
			(eq, "$enable_deahtcam", 1),
			(main_hero_fallen)
		],

		[
			(assign, "$pin_player_fallen", 1),
			(neq, "$use_player_auxiliary", 1),
			(display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
			(display_message, "@If you choose to watch the fight you can use the mouse scroll up and down to switch between troop view or AWDS keys for free camera view.")
		]),

		(0.0, 0.0, 0.0,
		[],

		[
			(game_key_clicked, 22),
			(neg|is_presentation_active, "prsnt_battle"),
			(start_presentation, "prsnt_battle")
		]),

		(0.1, 0.0, 0.0,
		[],

		[
			(is_presentation_active, "prsnt_battle"),
			(call_script, "script_update_order_panel_statistics_and_map")
		]),

		(-22.0, 0.0, 0.0,
		[
			(display_message, "str_cant_use_inventory_now")
		],

		[]),

		(1.0, 60.0, ti_once,
		[
			(store_mission_timer_a, reg1),
			(ge, reg1, 10),
			(main_hero_fallen),
			(assign, ":var_1", 0),
			(try_for_agents, ":var_2"),
				(agent_is_ally, ":var_2"),
				(agent_is_alive, ":var_2"),
				(val_add, ":var_1", 1),
			(try_end),
			(eq, ":var_1", 0),
			(set_mission_result, -1),
						(try_begin),
			(eq, "$colored_messages", 1),
			(display_message, "@Battle lost...", 0x00f78078),
			(else_try),
			(display_message, "@Battle lost..."),
			(try_end),
			(assign, "$g_battle_won", -1),
			(assign, "$g_battle_result", -1)
		],

		[
			(call_script, "script_count_mission_casualties_from_agents"),
			(finish_mission, 0)
		]),

		(10.0, 0.0, 0.0, # Battle won/lost messages!
		[],

		[
			(eq, "$g_battle_won", -1),
						(try_begin),
			(eq, "$colored_messages", 1),
			(display_message, "@Battle lost! Press tab key to leave...", 0x00f78078),
			(else_try),
			(display_message, "@Battle lost! Press tab key to leave..."),
			(try_end),
			#(play_sound, "snd_battle_sounds"), #Moved to your companions carry you away from the fighting menu
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(gt, "$dmod_current_agent", 0),
			(eq, "$setting_use_dmod", 1),
			(eq, "$dmod_move_camera", 1),
			(agent_get_position, 1, "$dmod_current_agent"),
			(position_move_z, 1, 300),
			(position_move_y, 1, -300),
			(agent_get_horse, ":horse_l_dmod_current_agent", "$dmod_current_agent"),
			(try_begin),
				(ge, ":horse_l_dmod_current_agent", 0),
			(try_end),
			(try_begin),
				(eq, "$pop_camera_on", 1),
				(assign, "$pop_camera_on", 0),
			(try_end),
			(mission_cam_set_position, 1),
			(mission_cam_set_mode, 1),
			(set_fixed_point_multiplier, 100)
		],

		[]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(eq, "$setting_use_dmod", 1),
			(key_clicked, 238),
			(main_hero_fallen),
			(call_script, "script_dmod_cycle_forwards")
		],

		[]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(eq, "$setting_use_dmod", 1),
			(key_clicked, 239),
			(main_hero_fallen),
			(call_script, "script_dmod_cycle_backwards")
		],

		[]),

		(0.0, 0.0, ti_once,
		[],

		[
			(assign, "$pop_camera_on", 0),
			(assign, "$pop_camera_mouse_center_x", 500),
			(assign, "$pop_camera_mouse_center_y", 375),
			(assign, "$pop_camera_mouse_x", "$pop_camera_mouse_center_x"),
			(assign, "$pop_camera_mouse_y", "$pop_camera_mouse_center_y"),
			(assign, "$pop_camera_mouse_counter", 0)
		]),

		(0.0, 4.0, ti_once,
		[
			(eq, "$enable_deahtcam", 1),
			(main_hero_fallen),
			(eq, "$pop_camera_on", 0),
			(assign, "$tom_sand_storm", 0)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_position, 1, ":player_agent_no"),
			(position_get_x, ":position_x_1", 1),
			(position_get_y, ":position_y_1", 1),
			(init_position, 47),
			(position_set_x, 47, ":position_x_1"),
			(position_set_y, 47, ":position_y_1"),
			(position_set_z_to_ground_level, 47),
			(position_move_z, 47, 250),
			(mission_cam_set_mode, 1, 0, 0),
			(mission_cam_set_position, 47),
			(assign, "$pop_camera_rotx", 0),
			(assign, "$pop_camera_on", 1)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(this_or_next|eq, "$dmod_move_camera", 1),
			(eq, "$pop_camera_on", 1),
			(this_or_next|game_key_clicked, 0),
			(this_or_next|game_key_is_down, 0),
			(this_or_next|game_key_clicked, 1),
			(this_or_next|game_key_is_down, 1),
			(this_or_next|game_key_clicked, 2),
			(this_or_next|game_key_is_down, 2),
			(this_or_next|game_key_clicked, 3),
			(game_key_is_down, 3)
		],

		[
			(try_begin),
				(eq, "$dmod_move_camera", 1),
				(mission_cam_set_mode, 1, 0, 0),
				(assign, "$pop_camera_rotx", 0),
				(assign, "$pop_camera_on", 1),
				(assign, "$dmod_move_camera", 0),
			(try_end),
			(mission_cam_get_position, 47),
			(assign, ":value", 0),
			(assign, ":value_2", 0),
			(try_begin),
				(this_or_next|game_key_clicked, 0),
				(game_key_is_down, 0),
				(assign, ":value_2", 10),
			(try_end),
			(try_begin),
				(this_or_next|game_key_clicked, 1),
				(game_key_is_down, 1),
				(assign, ":value_2", -10),
			(try_end),
			(try_begin),
				(this_or_next|game_key_clicked, 2),
				(game_key_is_down, 2),
				(assign, ":value", -10),
			(try_end),
			(try_begin),
				(this_or_next|game_key_clicked, 3),
				(game_key_is_down, 3),
				(assign, ":value", 10),
			(try_end),
			(position_move_x, 47, ":value"),
			(position_move_y, 47, ":value_2"),
			(mission_cam_set_position, 47)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(eq, "$pop_camera_on", 1),
			(neg|is_presentation_active, "prsnt_battle"),
			(mouse_get_position, 1),
			(set_fixed_point_multiplier, 1000),
			(position_get_x, reg1, 1),
			(position_get_y, reg2, 1),
			(set_fixed_point_multiplier, 100),
			(this_or_next|neq, reg1, "$pop_camera_mouse_center_x"),
			(neq, reg2, "$pop_camera_mouse_center_y")
		],

		[
			(assign, ":value", 1),
			(try_begin),
				(eq, reg1, "$pop_camera_mouse_x"),
				(eq, reg2, "$pop_camera_mouse_y"),
				(val_add, "$pop_camera_mouse_counter", 1),
				(try_begin),
					(gt, "$pop_camera_mouse_counter", 50),
					(assign, "$pop_camera_mouse_center_x", reg1),
					(assign, "$pop_camera_mouse_center_y", reg2),
					(assign, "$pop_camera_mouse_counter", 0),
				(try_end),
				(assign, ":value", 0),
			(try_end),
			(eq, ":value", 1),
			(assign, "$pop_camera_mouse_counter", 0),
			(assign, "$pop_camera_mouse_x", reg1),
			(assign, "$pop_camera_mouse_y", reg2),
			(mission_cam_get_position, 47),
			(store_sub, ":value_2", "$pop_camera_mouse_center_x", reg1),
			(store_sub, ":value_3", reg2, "$pop_camera_mouse_center_y"),
			(try_for_range, ":number", 0, 2),
				(try_begin),
					(eq, ":number", 1),
					(assign, ":value_2", ":value_3"),
				(try_end),
				(this_or_next|lt, ":value_2", -2),
				(gt, ":value_2", 2),
				(assign, ":value_4", 1),
				(try_begin),
					(lt, ":value_2", 0),
					(assign, ":value_4", -1),
				(try_end),
				(val_abs, ":value_2"),
				(val_sub, ":value_2", 2),
				(convert_to_fixed_point, ":value_2"),
				(store_sqrt, ":value_2", ":value_2"),
				(convert_from_fixed_point, ":value_2"),
				(val_clamp, ":value_2", 1, 64),
				(val_mul, ":value_2", ":value_4"),
				(try_begin),
					(eq, ":number", 0),
					(store_mul, ":value_5", "$pop_camera_rotx", -1),
					(position_rotate_x, 47, ":value_5"),
					(position_rotate_z, 47, ":value_2"),
					(position_rotate_x, 47, "$pop_camera_rotx"),
				(try_end),
				(try_begin),
					(eq, ":number", 1),
					(position_rotate_x, 47, ":value_2"),
					(val_add, "$pop_camera_rotx", ":value_2"),
				(try_end),
			(try_end),
			(mission_cam_set_position, 47)
		]),

		(-26.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(store_trigger_param_2, ":trigger_param_2"), #Removedforunassignedstuff#
			(store_trigger_param_3, ":trigger_param_3"),
			(try_begin),
				(ge, ":trigger_param_1", 0),
				(neg|agent_is_ally, ":trigger_param_1"),
				(agent_is_human, ":trigger_param_1"),
				(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
				(party_add_members, "p_total_enemy_casualties", ":troop_id_trigger_param_1", 1),
				(eq, ":trigger_param_3", 1),
				(party_wound_members, "p_total_enemy_casualties", ":troop_id_trigger_param_1", 1),
			(try_end)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_set_matching_sexy_boots", ":trigger_param_1")
		]),

			(0.0, 0.0, 0.0,
		[
			(eq, "$sp_shield_bash", 1),
			(game_key_is_down, 7),
			(game_key_clicked, 6),
			(neg|main_hero_fallen),
		],

		[
		(call_script, "script_shield_bash"),
		]),

			##AI kicking begin
		   (2, 0, 3, #AI kicking
       [], [
	(get_player_agent_no,":player"),
	(try_for_agents, ":agent"),
		(neq, ":agent", ":player"),
		(agent_is_alive, ":agent"),
		(neq, ":agent", -1),
		(agent_is_human, ":agent"),#Only humans can kick....FOR NOW
		(agent_is_active, ":agent"),
		(agent_slot_eq, ":agent", slot_agent_is_running_away, 0),#Isn't fleeing the battle.
		##He's an eligible human.  Now see if he's in a position to kick.
		(agent_get_attack_action, ":attack_action", ":agent"), #returned values: free = 0, readying_attack = 1, releasing_attack = 2, completing_attack_after_hit = 3, attack_parried = 4, reloading = 5, after_release = 6, cancelling_attack = 7
		(agent_get_defend_action, ":defend_action", ":agent"),#
		(this_or_next|eq,":attack_action",4),#Just got parried
		(this_or_next|eq,":defend_action",1),#Parrying an enemy
		##So he'll only try to kick if he just parried an enemy attack, or his own attack just got parried.
		(agent_get_team, ":team", ":agent"),
		(assign, ":maximum_distance", 100),
		#Target Acquisition
		(agent_ai_get_look_target,":suspect",":agent"),
		(gt,":suspect",0),#Make sure there is someone.
		(agent_is_alive, ":suspect"),
		(agent_is_human, ":suspect"),#Only kick humans
		(agent_is_active, ":suspect"),
		(agent_get_team, ":suspect_team", ":suspect"),
		(neq, ":suspect_team", ":team"),#Friends don't let friends kick friends.
		(agent_get_position, pos1, ":agent"),#Distance check
		(agent_get_position, pos2, ":suspect"),
		(neg|position_is_behind_position, pos2, pos1), #Suspect can't be behind kicker.
		(get_distance_between_positions, ":distance", pos1, pos2),
		(le, ":distance", ":maximum_distance"),
		#Check chance
		(store_random_in_range,":kickchance", 1, 10),
		(try_begin),
			(eq,":kickchance",1), #10% chance per check
				#(display_message, "@Agent kicks."),
				(agent_set_animation, ":agent", "anim_prepare_kick_0"),
				(agent_deliver_damage_to_agent, ":agent", ":suspect", 3),
				(agent_set_animation, ":suspect", "anim_strike3_abdomen_front"),#Get Kicked
			(try_end),
	   (try_end),]),
	   
	   ##AI Kicking end
		
		
		(0.25, 0.0, 4.0,
		[
			(eq, "$sp_shield_bash_ai", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(neq, ":var_2", ":player_agent_no"),
				(agent_is_alive, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_active, ":var_2"), #Test to see if it stops AI from shield bashing (new addition v3)
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(store_skill_level, ":skill_level_shield_troop_id_var_2", "skl_shield", ":troop_id_var_2"),
				(store_proficiency_level, ":proficiency_level_troop_id_var_2_0", ":troop_id_var_2", 0),
				(ge, ":skill_level_shield_troop_id_var_2", 4),
				(ge, ":proficiency_level_troop_id_var_2_0", 200),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(le, ":horse_var_2", 0),
				(try_begin),
					(neg|agent_slot_ge, ":var_2", 50, 1),
					(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
					(agent_get_wielded_item, ":wielded_item_var_2_1", ":var_2", 1),
					(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
					(eq, ":type_wielded_item_var_2_1", 7),
					(agent_get_attack_action, ":attack_action_var_2", ":var_2"),
					(eq, ":attack_action_var_2", 0),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_position, 1, ":var_2"),
					(assign, ":value", -1),
					(assign, ":value_2", 125),
					(try_for_agents, ":var_13"),
						(agent_is_alive, ":var_13"),
						(agent_is_human, ":var_13"),
						(agent_get_position, 2, ":var_13"),
						(neg|position_is_behind_position, 2, 1),
						(agent_get_team, ":team_var_13", ":var_13"),
						(neq, ":team_var_13", ":team_var_2"),
						(try_begin),
							(eq, ":team_var_2", 0),
							(assign, ":value_3", 2),
						(else_try),
							(eq, ":team_var_2", 2),
							(assign, ":value_3", 0),
						(else_try),
							(eq, ":team_var_2", 1),
							(assign, ":value_3", 3),
						(else_try),
							(eq, ":team_var_2", 3),
							(assign, ":value_3", 1),
						(try_end),
						(neq, ":team_var_13", ":value_3"),
						(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
						(le, ":distance_between_positions_1_2", ":value_2"),
						(assign, ":value_2", ":distance_between_positions_1_2"),
						(assign, ":value", ":var_13"),
					(try_end),
					(ge, ":value", 0),
					(agent_get_horse, ":horse_var_2", ":value"),
					(eq, ":horse_var_2", -1),
					(store_random_in_range, ":random_in_range_15_26", 15, 26),
					(agent_set_slot, ":var_2", 50, ":random_in_range_15_26"),
					(agent_set_animation, ":var_2", "anim_shield_bash"),
					(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
					(troop_get_type, ":type_wielded_item_var_2_1", ":troop_id_var_2"),
					(try_begin),
						(eq, ":type_wielded_item_var_2_1", 0),
						(agent_play_sound, ":var_2", "snd_man_yell"),
					(else_try),
						(eq, ":type_wielded_item_var_2_1", 1),
						(agent_play_sound, ":var_2", "snd_woman_yell"),
					(try_end),
					(agent_play_sound, ":value", "snd_wooden_hit_low_armor_high_damage"),
					(agent_get_defend_action, ":attack_action_var_2", ":value"),
					(try_begin),
						(eq, ":attack_action_var_2", 2),
						(neg|position_is_behind_position, 1, 2),
						(agent_get_wielded_item, ":wielded_item_var_2_1", ":value", 1),
						(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
						(eq, ":type_wielded_item_var_2_1", 7),
						(agent_set_animation, ":value", "anim_shield_bash"),
					(else_try),
						(agent_set_animation, ":value", "anim_shield_strike"),
					(try_end),
				(try_end),
				(agent_get_slot, ":var_2_50", ":var_2", 50),
				(val_sub, ":var_2_50", 1),
				(val_max, ":var_2_50", 0),
				(agent_set_slot, ":var_2", 50, ":var_2_50"),
			(try_end)
]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_is_human, ":trigger_param_1"),
			(agent_is_non_player, ":trigger_param_1"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(lt, ":troop_id_trigger_param_1", "trp_kidnapped_girl"),
			(try_for_range, reg0, 0, 4),
				(agent_get_item_slot, ":item_slot_trigger_param_1_reg0", ":trigger_param_1", reg0),
				(is_between, ":item_slot_trigger_param_1_reg0", 1, "itm_cross_end"), #Previously itm_items_end
				(agent_unequip_item, ":trigger_param_1", ":item_slot_trigger_param_1_reg0"),
			(try_end),
			(try_for_range, reg0, 0, 2),
				(agent_get_wielded_item, ":item_slot_trigger_param_1_reg0", ":trigger_param_1", reg0),
				(is_between, ":item_slot_trigger_param_1_reg0", 1, "itm_cross_end"), #Previously itm_items_end
				(agent_unequip_item, ":trigger_param_1", ":item_slot_trigger_param_1_reg0"),
			(try_end),
			(assign, ":var_4", 0),
			(assign, ":var_5", 25),
			(assign, ":var_6", 50),
			(assign, ":var_7", 75),
			(assign, ":var_8", 100),
			(assign, ":var_18", 125),
			(assign, ":var_10", 150),
			(assign, ":var_11", 175),
			(assign, ":var_12", 200),
			(assign, ":value", 0),
			(assign, ":value_2", 0),
			(assign, ":value_3", 0),
			(assign, ":value_4", 0),
			(assign, ":value_5", 0),
			(assign, ":value_6", 0),
			(assign, ":value_7", 0),
			(assign, ":value_8", 0),
			(assign, ":value_9", 0),
			(troop_get_inventory_capacity, ":inventory_capacity_troop_id_trigger_param_1", ":troop_id_trigger_param_1"),
			(try_for_range, ":localvariable", 0, ":inventory_capacity_troop_id_trigger_param_1"),
				(troop_get_inventory_slot, ":inventory_slot_troop_id_trigger_param_1_localvariable", ":troop_id_trigger_param_1", ":localvariable"),
				(is_between, ":inventory_slot_troop_id_trigger_param_1_localvariable", 1, "itm_cross_end"), #Previously itm_items_end
				(item_get_type, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
				(try_begin),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 4),
					(val_add, ":var_4", 1),
					(troop_set_slot, "trp_items_array", slot_troop_relations_begin, ":var_4"),
					(troop_set_slot, "trp_items_array", ":var_4", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 2),
					(val_add, ":var_5", 1),
					(troop_set_slot, "trp_items_array", slot_troop_last_quest_betrayed, ":var_5"),
					(troop_set_slot, "trp_items_array", ":var_5", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_2", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 7),
					(val_add, ":var_6", 1),
					(troop_set_slot, "trp_items_array", slot_troop_recruitment_random, ":var_6"),
					(troop_set_slot, "trp_items_array", ":var_6", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_3", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 3),
					(val_add, ":var_7", 1),
					(troop_set_slot, "trp_items_array", slot_troop_personalitymatch_object, ":var_7"),
					(troop_set_slot, "trp_items_array", ":var_7", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_4", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 10),
					(val_add, ":var_8", 1),
					(troop_set_slot, "trp_items_array", 100, ":var_8"),
					(troop_set_slot, "trp_items_array", ":var_8", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_5", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 6),
					(val_add, ":var_18", 1),
					(troop_set_slot, "trp_items_array", slot_troop_rehire_speech, ":var_18"),
					(troop_set_slot, "trp_items_array", ":var_18", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_6", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 5),
					(val_add, ":var_10", 1),
					(troop_set_slot, "trp_items_array", slot_troop_days_on_mission, ":var_10"),
					(troop_set_slot, "trp_items_array", ":var_10", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_7", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 8),
					(val_add, ":var_11", 1),
					(troop_set_slot, "trp_items_array", 175, ":var_11"),
					(troop_set_slot, "trp_items_array", ":var_11", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_8", 1),
				(else_try),
					(eq, ":type_inventory_slot_troop_id_trigger_param_1_localvariable", 9),
					(val_add, ":var_12", 1),
					(troop_set_slot, "trp_items_array", 200, ":var_12"),
					(troop_set_slot, "trp_items_array", ":var_12", ":inventory_slot_troop_id_trigger_param_1_localvariable"),
					(assign, ":value_9", 1),
				(try_end),
			(try_end),
			(try_begin),
				(eq, ":value", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_relations_begin),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 1, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_2", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_last_quest_betrayed),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 26, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_3", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_recruitment_random),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 51, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_4", 1),
				(try_begin),
					(eq, ":value_2", 1),
					(store_random_in_range, ":random_in_range_0_100", 0, 100),
					(lt, ":random_in_range_0_100", 65),
				(else_try),
					(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_personalitymatch_object),
					(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 76, ":items_array_relations_begin"),
					(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
					(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
				(try_end),
			(try_end),
			(try_begin),
				(eq, ":value_5", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", 100),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 101, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_6", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_rehire_speech),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 126, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_7", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", slot_troop_days_on_mission),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 151, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_8", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", 175),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 176, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end),
			(try_begin),
				(eq, ":value_9", 1),
				(troop_get_slot, ":items_array_relations_begin", "trp_items_array", 200),
				(store_random_in_range, ":random_in_range_1_items_array_relations_begin", 201, ":items_array_relations_begin"),
				(troop_get_slot, ":items_array_random_in_range_1_items_array_relations_begin", "trp_items_array", ":random_in_range_1_items_array_relations_begin"),
				(agent_equip_item, ":trigger_param_1", ":items_array_random_in_range_1_items_array_relations_begin"),
			(try_end)
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(assign, "$tom_sand_storm", 0),
			(call_script, "script_change_rain_or_snow"),
			(set_fixed_point_multiplier, 100),
			(try_begin),
				(is_currently_night),
			#	(set_shader_param_float, "@vFresnelMultiplier", 15),
			(else_try),
			#	(set_shader_param_float, "@vFresnelMultiplier", 50),
			(try_end)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$tom_sand_storm", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_position, 0, ":player_agent_no"),
			(position_set_z_to_ground_level, 0),
			(position_get_z, ":position_z_0", 0),
			(val_add, ":position_z_0", 400),
			(position_set_z, 0, ":position_z_0"),
			(particle_system_burst, "psys_desert_storm", 0, 2),
			(set_fixed_point_multiplier, 100)
		]),

#		(0.0, 2.0, ti_once,
#		[
#			(eq, "$tom_use_banners", 1)
#		],
#
#		[
#			(call_script, "script_set_flag_carriers")
#		]),

		(10.0, 0.0, 0.0,
		[
			(eq, "$tom_use_banners", 1),
			(eq, "$tom_bonus_banners", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_range, ":value"),
				(agent_slot_eq, ":value", 107, 1),
				(agent_is_alive, ":value"),
				(agent_is_active, ":value"),
				(agent_get_team, ":team_value", ":value"),
				(agent_get_position, 1, ":value"),
				(try_for_range, ":value_2"),
					(neq, ":value_2", ":value"),
					(agent_get_team, ":team_value_2", ":value_2"),
					(eq, ":team_value", ":team_value_2"),
					(agent_is_alive, ":value_2"),
					(agent_is_active, ":value_2"),
					(agent_is_human, ":value_2"),
					(agent_get_position, 2, ":value_2"),
					(get_distance_between_positions_in_meters, ":distance_between_positions_in_meters_1_2", 1, 2),
					(le, ":distance_between_positions_in_meters_1_2", 10),
					(store_agent_hit_points, ":agent_hit_points_value_2", ":value_2"),
					(val_add, ":agent_hit_points_value_2", 2),
					(val_min, ":agent_hit_points_value_2", 101),
					(agent_set_hit_points, ":value_2", ":agent_hit_points_value_2"),
					(try_begin),
						(eq, ":value_2", ":player_agent_no"),
						(display_message, "@You feel secured standing near the banner, healing some of your HP.", 0x006495ed),
					(try_end),
				(try_end),
			(try_end),
			(assign, ":value", ":player_agent_no"),
			(agent_is_alive, ":value"),
			(agent_get_wielded_item, ":wielded_item_value_0", ":value", 0),
			(is_between, ":wielded_item_value_0", 1198, 1202),
			(agent_get_team, ":team_value", ":value"),
			(agent_get_position, 1, ":value"),
			(try_for_range, ":value_2"),
				(neq, ":value_2", ":value"),
				(agent_get_team, ":team_value_2", ":value_2"),
				(eq, ":team_value", ":team_value_2"),
				(agent_is_alive, ":value_2"),
				(agent_is_active, ":value_2"),
				(agent_is_human, ":value_2"),
				(agent_get_position, 2, ":value_2"),
				(get_distance_between_positions_in_meters, ":distance_between_positions_in_meters_1_2", 1, 2),
				(le, ":distance_between_positions_in_meters_1_2", 10),
				(store_agent_hit_points, ":agent_hit_points_value_2", ":value_2"),
				(try_begin),
					(eq, ":wielded_item_value_0", 1201),
					(val_add, ":agent_hit_points_value_2", 1),
				(try_end),
				(val_add, ":agent_hit_points_value_2", 5),
				(val_max, ":agent_hit_points_value_2", 101),
				(agent_set_hit_points, ":value_2", ":agent_hit_points_value_2"),
			(try_end)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$tom_sand_storm", 3)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_position, 0, ":player_agent_no"),
			(position_set_z_to_ground_level, 0),
			(position_get_z, ":position_z_0", 0),
			(val_add, ":position_z_0", 2100),
			(position_set_z, 0, ":position_z_0"),
			(particle_system_burst, "psys_rain", 0, 1),
			(set_fixed_point_multiplier, 100)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$tom_sand_storm", 2)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_position, 0, ":player_agent_no"),
			(position_set_z_to_ground_level, 0),
			(position_get_z, ":position_z_0", 0),
			(val_add, ":position_z_0", 2000),
			(position_set_z, 0, ":position_z_0"),
			(particle_system_burst, "psys_blizzard", 0, 1),
			(set_fixed_point_multiplier, 100)
		]),

		(8.0, 0.0, 0.0,
		[
			(eq, "$tom_sand_storm", 3)
		],

		[
			(store_random_in_range, ":random_in_range_0_100", 0, 100),
			(try_begin),
				(ge, ":random_in_range_0_100", 90),
				(play_sound, "snd_thunder"),
			(try_end)
		]),

		(0.0, 0.0, ti_once,
		[
			(eq, "$tom_sand_storm", 2)
		],

		[
			(play_sound, "snd_wind")
		]),

		(0.0, 0.0, ti_once,
		[
			(eq, "$tom_sand_storm", 1)
		],

		[
			(play_sound, "snd_wind")
		]),

		(1.0, 0.0, ti_once,
		[
			(neq, "$g_battle_result", 0),
			(get_player_agent_no, ":player_agent_no"),
			(agent_is_alive, ":player_agent_no"),
			(agent_get_troop_id, ":troop_id_player_agent_no", ":player_agent_no"),
			(eq, ":troop_id_player_agent_no", "trp_player")
		],

		[
			(call_script, "script_freelancer_keep_field_loot")
		]),

		(0.0, 1.5, 0.0,
		[
			(key_clicked, 20),
			(get_player_agent_no, ":player_agent_no"),
			(agent_is_alive, ":player_agent_no"),
			(agent_set_animation, ":player_agent_no", "anim_cheer", 1),
			(agent_play_sound, ":player_agent_no", "snd_man_victory")
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_team, ":team_player_agent_no", ":player_agent_no"),
			(agent_get_position, 1, ":player_agent_no"),
			(try_for_agents, ":var_3"),
				(agent_is_alive, ":var_3"),
				(agent_is_human, ":var_3"),
				(agent_get_team, ":team_var_3", ":var_3"),
				(eq, ":team_var_3", ":team_player_agent_no"),
				(agent_get_position, 0, ":var_3"),
				(get_distance_between_positions_in_meters, ":distance_between_positions_in_meters_0_1", 0, 1),
				(lt, ":distance_between_positions_in_meters_0_1", 20),
				(agent_set_animation, ":var_3", "anim_cheer", 1),
				(agent_play_sound, ":var_3", "snd_man_victory"),
				(agent_get_slot, ":var_3_courage_score", ":var_3", slot_agent_courage_score),
				(val_add, ":var_3_courage_score", 5),
				(val_min, ":var_3_courage_score", 9600),
				(agent_set_slot, ":var_3", slot_agent_courage_score, ":var_3_courage_score"),
			(try_end),
			(display_message, "@Huzzah! You encourage your nearby troops.")
		]),

		(0.0, 1.7, 0.0,
		[
			(eq, "$tom_yell_smelly_peasents", 1)
		],

		[
			(call_script, "script_tom_command_cheer"),
			(assign, "$tom_yell_smelly_peasents", 0)
		]),

		(-26.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(store_trigger_param_2, ":trigger_param_2"),
			(neg|agent_is_ally, ":trigger_param_1"),
			(agent_is_human, ":trigger_param_1"),
			(eq, ":trigger_param_2", "$fplayer_agent_no"),
			(val_add, "$killcount", 1)
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_clear_troop_array", "trp_lances_troop_in_combat", 0, "$lance_troop_serving")
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_is_human, ":trigger_param_1"),
			(get_player_agent_no, ":player_agent_no"),
			(neq, ":trigger_param_1", ":player_agent_no"),
			(agent_get_party_id, ":party_id_trigger_param_1", ":trigger_param_1"),
			(eq, ":party_id_trigger_param_1", "p_main_party"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(call_script, "script_search_for_troop", ":troop_id_trigger_param_1"),
			(agent_set_slot, ":trigger_param_1", 102, reg0)
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(assign, "$enable_deahtcam", 1),
			(assign, "$auxilary_player_active", 0),
			(eq, "$use_player_auxiliary", 1),
			(assign, "$g_move_heroes", 1),
			(party_clear, "p_temp_casualties_3"),
			(call_script, "script_party_add_party", "p_temp_casualties_3", "p_main_party"),
			(set_player_troop, "trp_player"),
			(assign, "$enable_deahtcam", 0)
		]),

		(5.0, 0.0, 0.0,
		[
			(eq, "$use_player_auxiliary", 1),
			(eq, "$enable_deahtcam", 0),
			(get_player_agent_no, ":player_agent_no"),
			(neg|agent_is_alive, ":player_agent_no")
		],

		[
			(set_fixed_point_multiplier, 100),
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_team, ":team_player_agent_no", ":player_agent_no"),
			(agent_get_division, ":division_player_agent_no", ":player_agent_no"),
			(assign, ":value", 0),
			(try_for_agents, ":var_5"),
				(eq, ":value", 0),
				(agent_is_human, ":var_5"),
				(agent_is_alive, ":var_5"),
				(agent_get_team, ":team_var_5", ":var_5"),
				(agent_get_party_id, ":party_id_var_5", ":var_5"),
				(eq, ":party_id_var_5", "p_main_party"),
				(agent_get_division, ":division_player_agent_no_2", ":player_agent_no"),
				(agent_get_group, ":group_player_agent_no", ":player_agent_no"),
				(eq, ":team_player_agent_no", ":team_var_5"),
				(eq, ":division_player_agent_no", ":division_player_agent_no_2"),
				(agent_get_troop_id, ":troop_id_var_5", ":var_5"),
				(neg|is_between, ":troop_id_var_5", "trp_npc1", "trp_knight_1_1_wife"),
				(set_player_troop, ":troop_id_var_5"),
				(store_agent_hit_points, ":agent_hit_points_var_5_1", ":var_5", 1),
				(agent_get_position, 1, ":var_5"),
				(position_set_z, 1, -2000),
				(position_set_x, 1, 0),
				(position_set_y, 1, 0),
				(agent_get_position, 0, ":var_5"),
				(set_spawn_position, 0),
				(agent_get_horse, ":horse_var_5", ":var_5"),
				(try_begin),
					(gt, ":horse_var_5", 0),
					(agent_set_position, ":horse_var_5", 1),
					(remove_agent, ":horse_var_5"),
				(try_end),
				(agent_set_position, ":var_5", 1),
				(agent_set_slot, ":var_5", 100, 1),
				(agent_get_slot, ":var_5_102", ":var_5", 102),
				(remove_agent, ":var_5"),
				(spawn_agent, ":troop_id_var_5"),
				(assign, ":player_agent_no", reg0),
				(agent_set_slot, ":player_agent_no", 102, ":var_5_102"),
				(agent_set_team, ":player_agent_no", ":team_player_agent_no"),
				(agent_set_hit_points, ":player_agent_no", ":agent_hit_points_var_5_1", 1),
				(agent_set_group, ":player_agent_no", ":group_player_agent_no"),
				(agent_set_slot, ":player_agent_no", 100, 2),
				(agent_set_slot, ":player_agent_no", 101, ":troop_id_var_5"),
				(try_begin),
					(agent_get_horse, ":horse_player_agent_no", ":player_agent_no"),
					(gt, ":horse_player_agent_no", 0),
					(lt, ":horse_var_5", 0),
					(agent_set_position, ":horse_player_agent_no", 1),
					(remove_agent, ":horse_player_agent_no"),
				(try_end),
				(set_player_troop, "trp_player"),
				(assign, ":value", 1),
				(assign, "$auxilary_player_active", 1),
			(try_end),
			(eq, ":value", 0),
			(assign, "$enable_deahtcam", 1)
		]),

		(1.0, 0.0, 0.0,
		[],

		[
			(val_add, "$do_the_oil", 1),
			(try_begin),
				(gt, "$do_the_oil", 5),
				(assign, "$do_the_oil", 0),
			(try_end),
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(agent_is_alive, ":var_2"),
				(agent_get_team, ":team_var_2", ":var_2"),
				(this_or_next|eq, ":team_var_2", 1),
				(eq, ":team_var_2", 3),
				(try_begin),
					(neq, ":var_2", ":player_agent_no"),
					(agent_clear_scripted_mode, ":var_2"),
					(agent_force_rethink, ":var_2"),
				(try_end),
				(try_begin),
					(le, "$do_the_oil", 5),
					(troop_get_slot, ":oil_array_relations_begin", "trp_oil_array", slot_troop_relations_begin),
					(try_for_range, ":localvariable", 1, ":oil_array_relations_begin"),
						(troop_get_slot, ":oil_array_localvariable", "trp_oil_array", ":localvariable"),
						(scene_prop_has_agent_on_it, ":oil_array_localvariable", ":var_2"),
						(scene_prop_set_slot, ":oil_array_localvariable", 400, 1),
						(store_agent_hit_points, ":agent_hit_points_var_2_1", ":var_2", 1),
						(val_sub, ":agent_hit_points_var_2_1", 1),
						(try_begin),
							(gt, ":agent_hit_points_var_2_1", 1),
							(agent_set_hit_points, ":var_2", ":agent_hit_points_var_2_1", 1),
						(else_try),
							(agent_deliver_damage_to_agent, ":var_2", ":var_2", 100),
						(try_end),
						(try_begin),
							(eq, ":var_2", ":player_agent_no"),
							(display_message, "@You recieve damage from the hot oil spiled by the defenders on you!"),
						(try_end),
					(try_end),
				(try_end),
				(neq, ":var_2", ":player_agent_no"),
				(agent_get_position, 0, ":var_2"),
				(troop_get_slot, ":oil_array_relations_begin", "trp_temp_array_c", slot_troop_relations_begin),
				(try_for_range, ":localvariable", 1, ":oil_array_relations_begin"),
					(troop_get_slot, ":oil_array_localvariable", "trp_temp_array_c", ":localvariable"),
					(scene_prop_get_hit_points, ":agent_hit_points_var_2_1", ":oil_array_localvariable"),
					(gt, ":agent_hit_points_var_2_1", 0),
					(prop_instance_get_position, 1, ":oil_array_localvariable"),
					(get_distance_between_positions_in_meters, ":distance_between_positions_in_meters_0_1", 0, 1),
					(le, ":distance_between_positions_in_meters_0_1", 1),
					(store_random_in_range, ":random_in_range_0_101", 0, 101),
					(le, ":random_in_range_0_101", 60),
					(agent_set_look_target_position, ":var_2", 1),
					(agent_set_attack_action, ":var_2", 3, 0),
					(val_div, ":random_in_range_0_101", 10),
					(prop_instance_receive_damage, ":oil_array_localvariable", ":var_2", ":random_in_range_0_101"),
				(try_end),
			(try_end),
			(le, "$do_the_oil", 5),
			(troop_get_slot, ":oil_array_relations_begin", "trp_oil_array", slot_troop_relations_begin),
			(try_for_range, ":localvariable", 1, ":oil_array_relations_begin"),
				(troop_get_slot, ":oil_array_localvariable", "trp_oil_array", ":localvariable"),
				(scene_prop_slot_eq, ":oil_array_localvariable", 400, 1),
				(prop_instance_get_position, 1, ":oil_array_localvariable"),
				(particle_system_burst, "psys_gourd_smoke", 1, 100),
				(position_move_z, 1, 500, 1),
				(particle_system_burst, "psys_oil", 1, 100),
				#Add sound to burning Oil
				(play_sound_at_position, "snd_oil_noise", 1),
				#(prop_instance_play_sound, ":oil_array_localvariable" "snd_oil_noise"),
				#End add sound to burning oil
				(scene_prop_set_slot, ":oil_array_localvariable", 400, 0),
			(try_end)
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(assign, ":value", 1),
			(scene_prop_get_num_instances, ":scene_prop_num_instances_1257_earth_gate", "spr_1257_earth_gate"),
			(try_for_range, ":localvariable", 0, ":scene_prop_num_instances_1257_earth_gate"),
				(scene_prop_get_instance, ":scene_prop_instance_1257_earth_gate_localvariable", "spr_1257_earth_gate", ":localvariable"),
				(troop_set_slot, "trp_temp_array_c", ":value", ":scene_prop_instance_1257_earth_gate_localvariable"),
				(val_add, ":value", 1),
				(scene_prop_set_team, ":scene_prop_instance_1257_earth_gate_localvariable", 2),
			(try_end),
			(scene_prop_get_num_instances, ":scene_prop_num_instances_1257_earth_gate", "spr_1257_portcullis"),
			(try_for_range, ":localvariable", 0, ":scene_prop_num_instances_1257_earth_gate"),
				(scene_prop_get_instance, ":scene_prop_instance_1257_earth_gate_localvariable", "spr_1257_portcullis", ":localvariable"),
				(troop_set_slot, "trp_temp_array_c", ":value", ":scene_prop_instance_1257_earth_gate_localvariable"),
				(val_add, ":value", 1),
				(scene_prop_set_team, ":scene_prop_instance_1257_earth_gate_localvariable", 2),
			(try_end),
			(scene_prop_get_num_instances, ":scene_prop_num_instances_1257_earth_gate", "spr_1257_tavern_door_a"),
			(try_for_range, ":localvariable", 0, ":scene_prop_num_instances_1257_earth_gate"),
				(scene_prop_get_instance, ":scene_prop_instance_1257_earth_gate_localvariable", "spr_1257_tavern_door_a", ":localvariable"),
				(troop_set_slot, "trp_temp_array_c", ":value", ":scene_prop_instance_1257_earth_gate_localvariable"),
				(val_add, ":value", 1),
				(scene_prop_set_team, ":scene_prop_instance_1257_earth_gate_localvariable", 2),
			(try_end),
			(scene_prop_get_num_instances, ":scene_prop_num_instances_1257_earth_gate", "spr_1257_tavern_door_b"),
			(try_for_range, ":localvariable", 0, ":scene_prop_num_instances_1257_earth_gate"),
				(scene_prop_get_instance, ":scene_prop_instance_1257_earth_gate_localvariable", "spr_1257_tavern_door_b", ":localvariable"),
				(troop_set_slot, "trp_temp_array_c", ":value", ":scene_prop_instance_1257_earth_gate_localvariable"),
				(val_add, ":value", 1),
				(scene_prop_set_team, ":scene_prop_instance_1257_earth_gate_localvariable", 2),
			(try_end),
			(scene_prop_get_num_instances, ":scene_prop_num_instances_1257_earth_gate", "spr_1257_castle_f_door_a"),
			(try_for_range, ":localvariable", 0, ":scene_prop_num_instances_1257_earth_gate"),
				(scene_prop_get_instance, ":scene_prop_instance_1257_earth_gate_localvariable", "spr_1257_castle_f_door_a", ":localvariable"),
				(troop_set_slot, "trp_temp_array_c", ":value", ":scene_prop_instance_1257_earth_gate_localvariable"),
				(val_add, ":value", 1),
				(scene_prop_set_team, ":scene_prop_instance_1257_earth_gate_localvariable", 2),
			(try_end),
			(troop_set_slot, "trp_temp_array_c", slot_troop_relations_begin, ":value"),
			(assign, ":value", 1),
			(scene_prop_get_num_instances, ":scene_prop_num_instances_1257_earth_gate", "spr_1257_hit_spot_2m"),
			(try_for_range, ":localvariable", 0, ":scene_prop_num_instances_1257_earth_gate"),
				(scene_prop_get_instance, ":scene_prop_instance_1257_earth_gate_localvariable", "spr_1257_hit_spot_2m", ":localvariable"),
				(troop_set_slot, "trp_oil_array", ":value", ":scene_prop_instance_1257_earth_gate_localvariable"),
				(val_add, ":value", 1),
				(scene_prop_set_team, ":scene_prop_instance_1257_earth_gate_localvariable", 2),
			(try_end),
			(scene_prop_get_num_instances, ":scene_prop_num_instances_1257_earth_gate", "spr_1257_hit_spot_4m"),
			(try_for_range, ":localvariable", 0, ":scene_prop_num_instances_1257_earth_gate"),
				(scene_prop_get_instance, ":scene_prop_instance_1257_earth_gate_localvariable", "spr_1257_hit_spot_4m", ":localvariable"),
				(troop_set_slot, "trp_oil_array", ":value", ":scene_prop_instance_1257_earth_gate_localvariable"),
				(val_add, ":value", 1),
				(scene_prop_set_team, ":scene_prop_instance_1257_earth_gate_localvariable", 2),
			(try_end),
			(troop_set_slot, "trp_oil_array", slot_troop_relations_begin, ":value"),
			(assign, "$do_the_oil", 0)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_get_team, ":team_trigger_param_1", ":trigger_param_1"), #Removedforunassignedstuff#
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(try_begin),
				(troop_is_guarantee_ranged, ":troop_id_trigger_param_1"),
				(agent_set_division, ":trigger_param_1", 1),
			(else_try),
				(agent_set_division, ":trigger_param_1", 0),
			(try_end)
		]),

		(-19.0, 0.0, 0.0,
		[],

		[]),

		(2.0, 0.0, 0.0,
		[],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(agent_is_human, ":var_2"),
				(neq, ":player_agent_no", ":var_2"),
				(agent_slot_eq, ":var_2", 100, 0),
				(agent_is_alive, ":var_2"),
				(agent_get_ammo, ":ammo_var_2", ":var_2"),
				(gt, ":ammo_var_2", 0),
				(agent_get_team, ":team_var_2", ":var_2"),
				(this_or_next|neq, ":team_var_2", "$attacker_team"),
				(neq, ":team_var_2", "$attacker_team_2"),
				(call_script, "script_get_closest_enemy_distance_new", ":var_2", ":team_var_2", 150),
				(assign, ":var_5", reg1),
				(gt, ":var_5", 150),
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(troop_is_guarantee_ranged, ":troop_id_var_2"),
				(agent_get_division, ":division_var_2", ":var_2"),
				(team_get_hold_fire_order, ":hold_fire_order_team_var_2_division_var_2", ":team_var_2", ":division_var_2"),
				(neq, ":hold_fire_order_team_var_2_division_var_2", 1),
				(agent_get_wielded_item, ":wielded_item_var_2_0", ":var_2", 0),
				(is_between, ":wielded_item_var_2_0", 1, "itm_cross_end"), #Previously itm_items_end
				(item_get_type, ":type_wielded_item_var_2_0", ":wielded_item_var_2_0"),
				(this_or_next|neq, ":type_wielded_item_var_2_0", 10),
				(this_or_next|neq, ":type_wielded_item_var_2_0", 9),
				(neq, ":type_wielded_item_var_2_0", 8),
				(assign, ":value", 4),
				(try_for_range, reg0, 0, ":value"),
					(agent_get_item_slot, ":item_slot_var_2_reg0", ":var_2", reg0),
					(is_between, ":item_slot_var_2_reg0", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_0", ":item_slot_var_2_reg0"),
					(this_or_next|eq, ":type_wielded_item_var_2_0", 10),
					(this_or_next|eq, ":type_wielded_item_var_2_0", 8),
					(eq, ":type_wielded_item_var_2_0", 9),
					(agent_set_wielded_item, ":var_2", ":item_slot_var_2_reg0"),
					(assign, ":value", -1),
				(try_end),
			(try_end)
		])
	] ),

	("castle_visit", 0, -1,
	"Castle visit",
	[(0, mtef_scene_source|mtef_team_0, af_override_weapons|af_override_head|af_override_horse, 0, 1, [itm_priest_robe_1, itm_priest_cap_1, itm_shoes, itm_sword_type_xii, itm_talak_buckler, itm_throwing_daggers]),
	(1, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, [itm_priest_robe_1, itm_priest_cap_1, itm_shoes, itm_sword_type_xii, itm_talak_buckler, itm_throwing_daggers]),
	(2, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, [itm_priest_robe_1, itm_priest_cap_1, itm_shoes, itm_sword_type_xii, itm_talak_buckler, itm_throwing_daggers]),
	(3, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, [itm_priest_robe_1, itm_priest_cap_1, itm_shoes, itm_sword_type_xii, itm_talak_buckler, itm_throwing_daggers]),
	(4, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, [itm_priest_robe_1, itm_priest_cap_1, itm_shoes, itm_sword_type_xii, itm_talak_buckler, itm_throwing_daggers]),
	(5, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, [itm_priest_robe_1, itm_priest_cap_1, itm_shoes, itm_sword_type_xii, itm_talak_buckler, itm_throwing_daggers]),
	(6, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, [itm_priest_robe_1, itm_priest_cap_1, itm_shoes, itm_sword_type_xii, itm_talak_buckler, itm_throwing_daggers]),
	(7, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, [itm_priest_robe_1, itm_priest_cap_1, itm_shoes, itm_sword_type_xii, itm_talak_buckler, itm_throwing_daggers]),
	(8, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(9, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(10, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(11, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(12, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(13, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(14, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(15, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(16, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(17, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(18, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(19, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(20, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(21, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(22, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(23, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(24, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(25, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(26, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(27, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(28, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(29, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(30, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(31, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(32, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(33, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(34, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(35, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(36, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(37, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(38, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(39, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(40, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(41, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(42, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(43, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(44, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(45, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(46, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, [])],
	[
		(-19.0, 0.0, 0.0,
		[],

		[
			(assign, "$tom_sand_storm", 0),
			(call_script, "script_change_rain_or_snow"),
			(set_fixed_point_multiplier, 100),
			(try_begin),
				(is_currently_night),
			#	(set_shader_param_float, "@vFresnelMultiplier", 15),
			(else_try),
				#(set_shader_param_float, "@vFresnelMultiplier", 50),
			(try_end)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_init_town_agent", ":trigger_param_1"),
			(get_player_agent_no, ":player_agent_no"),
			(try_begin),
				(neq, ":player_agent_no", ":trigger_param_1"),
				(agent_set_team, ":trigger_param_1", 7),
			(try_end),
			(try_begin),
				(this_or_next|eq, "$talk_context", 19),
				(eq, "$talk_context", 18),
				(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
				(troop_get_slot, ":troop_id_trigger_param_1_will_join_prison_break", ":troop_id_trigger_param_1", slot_troop_will_join_prison_break),
				(eq, ":troop_id_trigger_param_1_will_join_prison_break", 1),
				(get_player_agent_no, ":player_agent_no"),
				(agent_get_team, ":team_player_agent_no", ":player_agent_no"),
				(agent_set_team, ":trigger_param_1", ":team_player_agent_no"),
				(agent_ai_set_aggressiveness, ":trigger_param_1", 5),
				(troop_set_slot, ":troop_id_trigger_param_1", slot_troop_will_join_prison_break, 0),
				(try_begin),
					(troop_slot_eq, ":troop_id_trigger_param_1", slot_troop_mission_participation, 3),
					(agent_get_position, 1, ":trigger_param_1"),
					(agent_set_scripted_destination, ":trigger_param_1", 1),
				(try_end),
			(try_end)
		]),

		(-26.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(store_trigger_param_2, ":trigger_param_2"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(agent_get_troop_id, ":troop_id_trigger_param_2", ":trigger_param_2"),
			(try_begin),
				(this_or_next|eq, ":troop_id_trigger_param_1", "trp_teutonic_prison_guard"),
				(this_or_next|eq, ":troop_id_trigger_param_1", "trp_lithuanian_prison_guard"),
				(this_or_next|eq, ":troop_id_trigger_param_1", "trp_tatar_prison_guard"),
				(this_or_next|eq, ":troop_id_trigger_param_1", "trp_danish_prison_guard"),
				(this_or_next|eq, ":troop_id_trigger_param_1", "trp_polish_prison_guard"),
				(this_or_next|eq, ":troop_id_trigger_param_1", "trp_hre_prison_guard"),
				(this_or_next|eq, ":troop_id_trigger_param_1", "trp_hungarian_prison_guard"),
				(this_or_next|eq, ":troop_id_trigger_param_1", "trp_russian_prison_guard"),
				(this_or_next|eq, ":troop_id_trigger_param_1", "trp_english_prison_guard"),
				(this_or_next|eq, ":troop_id_trigger_param_1", "trp_french_prison_guard"),
				(this_or_next|eq, ":troop_id_trigger_param_1", "trp_swedish_prison_guard"),
				(this_or_next|eq, ":troop_id_trigger_param_1", "trp_norwegian_prison_guard"),
				(this_or_next|eq, ":troop_id_trigger_param_1", "trp_scottish_prison_guard"),
				(eq, ":troop_id_trigger_param_1", "trp_irish_prison_guard"),
				(eq, ":troop_id_trigger_param_2", "trp_player"),
				(display_message, "@You got keys of dungeon."),
			(try_end)
		]),

		(1.0, 0.0, 0.0,
		[
			(this_or_next|eq, "$talk_context", 18),
			(eq, "$talk_context", 19)
		],

		[
			(call_script, "script_neutral_behavior_in_fight"),
			(mission_disable_talk)
		]),

		(1.0, 0.0, ti_once,
		[
			(eq, "$talk_context", 19)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(assign, reg6, ":player_agent_no"),
			(call_script, "script_activate_town_guard"),
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_position, 4, ":player_agent_no"),
			(try_for_range, ":troop", "trp_npc1", "trp_heroes_end"),
				(troop_slot_ge, ":troop", 149, 1),
				(str_store_troop_name, 4, ":troop"),
				(display_message, "str_s4_joins_prison_break"),
				(store_current_scene, ":current_scene"),
				(modify_visitors_at_site, ":current_scene"),
				(store_current_scene, ":current_scene"),
				(modify_visitors_at_site, ":current_scene"),
				(assign, ":var_4", 24),
				(add_visitors_to_current_scene, ":var_4", ":troop", 1, 0, 0),
				(troop_set_slot, ":troop", slot_troop_will_join_prison_break, 1),
			(try_end)
		]),

		(-21.0, 0.0, 0.0,
		[
			(try_begin),
				(this_or_next|eq, "$talk_context", 19),
				(eq, "$talk_context", 18),
				(display_message, "str_cannot_leave_now"),
			(else_try),
				(this_or_next|eq, "$g_mt_mode", 0),
				(eq, "$g_mt_mode", 1),
				(set_trigger_result, 1),
				(mission_enable_talk),
			(else_try),
				(display_message, "str_cannot_leave_now"),
			(try_end)
		],

		[]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_change_banners_and_chest"),
			(call_script, "script_remove_siege_objects")
		]),

		(3.0, 0.0, 0.0,
		[
			(main_hero_fallen, 0)
		],

		[
			(try_begin),
				(this_or_next|eq, "$talk_context", 18),
				(eq, "$talk_context", 19),
				(call_script, "script_deduct_casualties_from_garrison"),
				(jump_to_menu, "mnu_captivity_start_castle_defeat"),
				(assign, ":var_1", "trp_heroes_end"),
				(try_for_range, ":troop", "trp_npc1", ":var_1"),
					(troop_set_slot, ":troop", slot_troop_mission_participation, 0),
				(try_end),
				(mission_enable_talk),
				(finish_mission, 0),
			(else_try),
				(mission_enable_talk),
				(finish_mission, 0),
				(set_trigger_result, 1),
			(try_end)
		]),

		(3.0, 0.0, 0.0,
		[
			(eq, "$talk_context", 19),
			(neg|main_hero_fallen, 0),
			(store_mission_timer_a, ":mission_timer_a"),
			(ge, ":mission_timer_a", 10),
			(all_enemies_defeated)
		],

		[
			(call_script, "script_deduct_casualties_from_garrison"),
			(try_for_agents, ":var_1"),
				(agent_get_troop_id, ":troop_id_var_1", ":var_1"),
				(troop_slot_ge, ":troop_id_var_1", 149, 2),
				(try_begin),
					(agent_is_alive, ":var_1"),
					(troop_set_slot, ":troop_id_var_1", slot_troop_mission_participation, 4),
				(else_try),
					(troop_set_slot, ":troop_id_var_1", slot_troop_mission_participation, 5),
				(try_end),
			(try_end),
			(jump_to_menu, "mnu_sneak_into_town_caught_ran_away"),
			(mission_enable_talk),
			(finish_mission, 0)
		]),

		(0.0, 0.0, 0.0,
		[],

		[
			(game_key_clicked, 22),
			(neg|is_presentation_active, "prsnt_battle"),
			(start_presentation, "prsnt_battle")
		]),

		(0.1, 0.0, 0.0,
		[],

		[
			(is_presentation_active, "prsnt_battle"),
			(call_script, "script_update_order_panel_statistics_and_map")
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_set_matching_sexy_boots", ":trigger_param_1")
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$sp_shield_bash", 1),
			(game_key_is_down, 7),
			(game_key_clicked, 6),
			(neg|main_hero_fallen),
		],

		[
		(call_script, "script_shield_bash"),
		]),

			##AI kicking begin
		   (2, 0, 3, #AI kicking
       [], [
	(get_player_agent_no,":player"),
	(try_for_agents, ":agent"),
		(neq, ":agent", ":player"),
		(agent_is_alive, ":agent"),
		(neq, ":agent", -1),
		(agent_is_human, ":agent"),#Only humans can kick....FOR NOW
		(agent_is_active, ":agent"),
		(agent_slot_eq, ":agent", slot_agent_is_running_away, 0),#Isn't fleeing the battle.
		##He's an eligible human.  Now see if he's in a position to kick.
		(agent_get_attack_action, ":attack_action", ":agent"), #returned values: free = 0, readying_attack = 1, releasing_attack = 2, completing_attack_after_hit = 3, attack_parried = 4, reloading = 5, after_release = 6, cancelling_attack = 7
		(agent_get_defend_action, ":defend_action", ":agent"),#
		(this_or_next|eq,":attack_action",4),#Just got parried
		(this_or_next|eq,":defend_action",1),#Parrying an enemy
		##So he'll only try to kick if he just parried an enemy attack, or his own attack just got parried.
		(agent_get_team, ":team", ":agent"),
		(assign, ":maximum_distance", 100),
		#Target Acquisition
		(agent_ai_get_look_target,":suspect",":agent"),
		(gt,":suspect",0),#Make sure there is someone.
		(agent_is_alive, ":suspect"),
		(agent_is_human, ":suspect"),#Only kick humans
		(agent_is_active, ":suspect"),
		(agent_get_team, ":suspect_team", ":suspect"),
		(neq, ":suspect_team", ":team"),#Friends don't let friends kick friends.
		(agent_get_position, pos1, ":agent"),#Distance check
		(agent_get_position, pos2, ":suspect"),
		(neg|position_is_behind_position, pos2, pos1), #Suspect can't be behind kicker.
		(get_distance_between_positions, ":distance", pos1, pos2),
		(le, ":distance", ":maximum_distance"),
		#Check chance
		(store_random_in_range,":kickchance", 1, 10),
		(try_begin),
			(eq,":kickchance",1), #10% chance per check
				#(display_message, "@Agent kicks."),
				(agent_set_animation, ":agent", "anim_prepare_kick_0"),
				(agent_deliver_damage_to_agent, ":agent", ":suspect", 3),
				(agent_set_animation, ":suspect", "anim_strike3_abdomen_front"),#Get Kicked
			(try_end),
	   (try_end),]),
	   
	   ##AI Kicking end
		
		
		(0.25, 0.0, 4.0,
		[
			(eq, "$sp_shield_bash_ai", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(neq, ":var_2", ":player_agent_no"),
				(agent_is_alive, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_active, ":var_2"), #Test to see if it stops AI from shield bashing (new addition v3)
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(store_skill_level, ":skill_level_shield_troop_id_var_2", "skl_shield", ":troop_id_var_2"),
				(store_proficiency_level, ":proficiency_level_troop_id_var_2_0", ":troop_id_var_2", 0),
				(ge, ":skill_level_shield_troop_id_var_2", 4),
				(ge, ":proficiency_level_troop_id_var_2_0", 200),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(le, ":horse_var_2", 0),
				(try_begin),
					(neg|agent_slot_ge, ":var_2", 50, 1),
					(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
					(agent_get_wielded_item, ":wielded_item_var_2_1", ":var_2", 1),
					(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
					(eq, ":type_wielded_item_var_2_1", 7),
					(agent_get_attack_action, ":attack_action_var_2", ":var_2"),
					(eq, ":attack_action_var_2", 0),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_position, 1, ":var_2"),
					(assign, ":value", -1),
					(assign, ":value_2", 125),
					(try_for_agents, ":var_13"),
						(agent_is_alive, ":var_13"),
						(agent_is_human, ":var_13"),
						(agent_get_position, 2, ":var_13"),
						(neg|position_is_behind_position, 2, 1),
						(agent_get_team, ":team_var_13", ":var_13"),
						(neq, ":team_var_13", ":team_var_2"),
						(try_begin),
							(eq, ":team_var_2", 0),
							(assign, ":value_3", 2),
						(else_try),
							(eq, ":team_var_2", 2),
							(assign, ":value_3", 0),
						(else_try),
							(eq, ":team_var_2", 1),
							(assign, ":value_3", 3),
						(else_try),
							(eq, ":team_var_2", 3),
							(assign, ":value_3", 1),
						(try_end),
						(neq, ":team_var_13", ":value_3"),
						(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
						(le, ":distance_between_positions_1_2", ":value_2"),
						(assign, ":value_2", ":distance_between_positions_1_2"),
						(assign, ":value", ":var_13"),
					(try_end),
					(ge, ":value", 0),
					(agent_get_horse, ":horse_var_2", ":value"),
					(eq, ":horse_var_2", -1),
					(store_random_in_range, ":random_in_range_15_26", 15, 26),
					(agent_set_slot, ":var_2", 50, ":random_in_range_15_26"),
					(agent_set_animation, ":var_2", "anim_shield_bash"),
					(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
					(troop_get_type, ":type_wielded_item_var_2_1", ":troop_id_var_2"),
					(try_begin),
						(eq, ":type_wielded_item_var_2_1", 0),
						(agent_play_sound, ":var_2", "snd_man_yell"),
					(else_try),
						(eq, ":type_wielded_item_var_2_1", 1),
						(agent_play_sound, ":var_2", "snd_woman_yell"),
					(try_end),
					(agent_play_sound, ":value", "snd_wooden_hit_low_armor_high_damage"),
					(agent_get_defend_action, ":attack_action_var_2", ":value"),
					(try_begin),
						(eq, ":attack_action_var_2", 2),
						(neg|position_is_behind_position, 1, 2),
						(agent_get_wielded_item, ":wielded_item_var_2_1", ":value", 1),
						(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
						(eq, ":type_wielded_item_var_2_1", 7),
						(agent_set_animation, ":value", "anim_shield_bash"),
					(else_try),
						(agent_set_animation, ":value", "anim_shield_strike"),
					(try_end),
				(try_end),
				(agent_get_slot, ":var_2_50", ":var_2", 50),
				(val_sub, ":var_2_50", 1),
				(val_max, ":var_2_50", 0),
				(agent_set_slot, ":var_2", 50, ":var_2_50"),
			(try_end)
		])
	] ),

	("training_ground_trainer_talk", 0, -1,
	"Training.",
	[(0, mtef_scene_source|mtef_team_0, af_override_weapons|af_override_horse, 0, 1, []),
	(1, mtef_scene_source|mtef_team_0, af_override_weapons|af_override_horse, 0, 1, []),
	(2, mtef_scene_source|mtef_team_0, af_override_weapons|af_override_horse, 0, 1, []),
	(3, mtef_scene_source|mtef_team_0, af_override_weapons|af_override_horse, 0, 1, []),
	(4, mtef_scene_source|mtef_team_0, af_override_weapons|af_override_horse, 0, 1, []),
	(5, mtef_scene_source|mtef_team_0, af_override_weapons|af_override_horse, 0, 1, []),
	(6, mtef_scene_source|mtef_team_0, 0, 0, 1, [])],
	[
		(-19.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_change_banners_and_chest")
		]),

		(-22.0, 0.0, 0.0,
		[
			(set_trigger_result, 1)
		],

		[]),

		(-21.0, 0.0, 0.0,
		[
			(set_trigger_result, 1)
		],

		[]),

		(0.0, 1.0, 2.0,
		[
			(lt, "$trainer_help_message", 2)
		],

		[
			(try_begin),
				(eq, "$trainer_help_message", 0),
			(else_try),
			(try_end),
			(val_add, "$trainer_help_message", 1)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_set_matching_sexy_boots", ":trigger_param_1")
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$sp_shield_bash", 1),
			(game_key_is_down, 7),
			(game_key_clicked, 6),
			(neg|main_hero_fallen),
		],

		[
		(call_script, "script_shield_bash"),
		]),

			##AI kicking begin
		   (2, 0, 3, #AI kicking
       [], [
	(get_player_agent_no,":player"),
	(try_for_agents, ":agent"),
		(neq, ":agent", ":player"),
		(agent_is_alive, ":agent"),
		(neq, ":agent", -1),
		(agent_is_human, ":agent"),#Only humans can kick....FOR NOW
		(agent_is_active, ":agent"),
		(agent_slot_eq, ":agent", slot_agent_is_running_away, 0),#Isn't fleeing the battle.
		##He's an eligible human.  Now see if he's in a position to kick.
		(agent_get_attack_action, ":attack_action", ":agent"), #returned values: free = 0, readying_attack = 1, releasing_attack = 2, completing_attack_after_hit = 3, attack_parried = 4, reloading = 5, after_release = 6, cancelling_attack = 7
		(agent_get_defend_action, ":defend_action", ":agent"),#
		(this_or_next|eq,":attack_action",4),#Just got parried
		(this_or_next|eq,":defend_action",1),#Parrying an enemy
		##So he'll only try to kick if he just parried an enemy attack, or his own attack just got parried.
		(agent_get_team, ":team", ":agent"),
		(assign, ":maximum_distance", 100),
		#Target Acquisition
		(agent_ai_get_look_target,":suspect",":agent"),
		(gt,":suspect",0),#Make sure there is someone.
		(agent_is_alive, ":suspect"),
		(agent_is_human, ":suspect"),#Only kick humans
		(agent_is_active, ":suspect"),
		(agent_get_team, ":suspect_team", ":suspect"),
		(neq, ":suspect_team", ":team"),#Friends don't let friends kick friends.
		(agent_get_position, pos1, ":agent"),#Distance check
		(agent_get_position, pos2, ":suspect"),
		(neg|position_is_behind_position, pos2, pos1), #Suspect can't be behind kicker.
		(get_distance_between_positions, ":distance", pos1, pos2),
		(le, ":distance", ":maximum_distance"),
		#Check chance
		(store_random_in_range,":kickchance", 1, 10),
		(try_begin),
			(eq,":kickchance",1), #10% chance per check
				#(display_message, "@Agent kicks."),
				(agent_set_animation, ":agent", "anim_prepare_kick_0"),
				(agent_deliver_damage_to_agent, ":agent", ":suspect", 3),
				(agent_set_animation, ":suspect", "anim_strike3_abdomen_front"),#Get Kicked
			(try_end),
	   (try_end),]),
	   
	   ##AI Kicking end
		
		
		(0.25, 0.0, 4.0,
		[
			(eq, "$sp_shield_bash_ai", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(neq, ":var_2", ":player_agent_no"),
				(agent_is_alive, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_active, ":var_2"), #Test to see if it stops AI from shield bashing (new addition v3)
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(store_skill_level, ":skill_level_shield_troop_id_var_2", "skl_shield", ":troop_id_var_2"),
				(store_proficiency_level, ":proficiency_level_troop_id_var_2_0", ":troop_id_var_2", 0),
				(ge, ":skill_level_shield_troop_id_var_2", 4),
				(ge, ":proficiency_level_troop_id_var_2_0", 200),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(le, ":horse_var_2", 0),
				(try_begin),
					(neg|agent_slot_ge, ":var_2", 50, 1),
					(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
					(agent_get_wielded_item, ":wielded_item_var_2_1", ":var_2", 1),
					(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
					(eq, ":type_wielded_item_var_2_1", 7),
					(agent_get_attack_action, ":attack_action_var_2", ":var_2"),
					(eq, ":attack_action_var_2", 0),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_position, 1, ":var_2"),
					(assign, ":value", -1),
					(assign, ":value_2", 125),
					(try_for_agents, ":var_13"),
						(agent_is_alive, ":var_13"),
						(agent_is_human, ":var_13"),
						(agent_get_position, 2, ":var_13"),
						(neg|position_is_behind_position, 2, 1),
						(agent_get_team, ":team_var_13", ":var_13"),
						(neq, ":team_var_13", ":team_var_2"),
						(try_begin),
							(eq, ":team_var_2", 0),
							(assign, ":value_3", 2),
						(else_try),
							(eq, ":team_var_2", 2),
							(assign, ":value_3", 0),
						(else_try),
							(eq, ":team_var_2", 1),
							(assign, ":value_3", 3),
						(else_try),
							(eq, ":team_var_2", 3),
							(assign, ":value_3", 1),
						(try_end),
						(neq, ":team_var_13", ":value_3"),
						(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
						(le, ":distance_between_positions_1_2", ":value_2"),
						(assign, ":value_2", ":distance_between_positions_1_2"),
						(assign, ":value", ":var_13"),
					(try_end),
					(ge, ":value", 0),
					(agent_get_horse, ":horse_var_2", ":value"),
					(eq, ":horse_var_2", -1),
					(store_random_in_range, ":random_in_range_15_26", 15, 26),
					(agent_set_slot, ":var_2", 50, ":random_in_range_15_26"),
					(agent_set_animation, ":var_2", "anim_shield_bash"),
					(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
					(troop_get_type, ":type_wielded_item_var_2_1", ":troop_id_var_2"),
					(try_begin),
						(eq, ":type_wielded_item_var_2_1", 0),
						(agent_play_sound, ":var_2", "snd_man_yell"),
					(else_try),
						(eq, ":type_wielded_item_var_2_1", 1),
						(agent_play_sound, ":var_2", "snd_woman_yell"),
					(try_end),
					(agent_play_sound, ":value", "snd_wooden_hit_low_armor_high_damage"),
					(agent_get_defend_action, ":attack_action_var_2", ":value"),
					(try_begin),
						(eq, ":attack_action_var_2", 2),
						(neg|position_is_behind_position, 1, 2),
						(agent_get_wielded_item, ":wielded_item_var_2_1", ":value", 1),
						(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
						(eq, ":type_wielded_item_var_2_1", 7),
						(agent_set_animation, ":value", "anim_shield_bash"),
					(else_try),
						(agent_set_animation, ":value", "anim_shield_strike"),
					(try_end),
				(try_end),
				(agent_get_slot, ":var_2_50", ":var_2", 50),
				(val_sub, ":var_2_50", 1),
				(val_max, ":var_2_50", 0),
				(agent_set_slot, ":var_2", 50, ":var_2_50"),
			(try_end)
		])
	] + crouching_triggers ),

	("training_ground_trainer_training", mtf_arena_fight|mtf_team_fight, -1,
	"You will fight a match in the arena.",
	[(16, mtef_visitor_source|mtef_team_0, af_override_everything, aif_start_alarmed, 1, [itm_practice_shield, itm_practice_sword, itm_practice_boots]),
	(17, mtef_visitor_source|mtef_team_1, af_override_everything, aif_start_alarmed, 1, [itm_practice_staff, itm_practice_boots]),
	(18, mtef_visitor_source|mtef_team_2, af_override_everything, aif_start_alarmed, 1, [itm_practice_staff, itm_practice_boots]),
	(19, mtef_visitor_source|mtef_team_3, af_override_everything, aif_start_alarmed, 1, [itm_heavy_practice_sword, itm_practice_boots]),
	(20, mtef_visitor_source, 0, 0, 1, [])],
	[
		(-19.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_change_banners_and_chest")
		]),

		(-21.0, 0.0, 0.0,
		[],

		[
			(question_box, "str_give_up_fight")
		]),

		(-8.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(eq, ":trigger_param_1", 0),
			(set_jump_mission, "mt_training_ground_trainer_talk"),
			(modify_visitors_at_site, "$g_training_ground_melee_training_scene"),
			(reset_visitors),
			(set_jump_entry, 5),
			(jump_to_scene, "$g_training_ground_melee_training_scene")
		]),

		(1.0, 3.0, ti_once,
		[
			(main_hero_fallen, 0)
		],

		[
			(set_jump_mission, "mt_training_ground_trainer_talk"),
			(modify_visitors_at_site, "$g_training_ground_melee_training_scene"),
			(reset_visitors),
			(set_jump_entry, 5),
			(jump_to_scene, "$g_training_ground_melee_training_scene")
		]),

		(1.0, 3.0, ti_once,
		[
			(store_mission_timer_a, reg1),
			(ge, reg1, 1),
			(num_active_teams_le, 1),
			(neg|main_hero_fallen),
			(assign, "$training_fight_won", 1)
		],

		[
			(set_jump_mission, "mt_training_ground_trainer_talk"),
			(modify_visitors_at_site, "$g_training_ground_melee_training_scene"),
			(reset_visitors),
			(set_jump_entry, 5),
			(jump_to_scene, "$g_training_ground_melee_training_scene")
		]),

		(-22.0, 0.0, 0.0,
		[
			(display_message, "str_cant_use_inventory_arena")
		],

		[]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_set_matching_sexy_boots", ":trigger_param_1")
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$sp_shield_bash", 1),
			(game_key_is_down, 7),
			(game_key_clicked, 6),
			(neg|main_hero_fallen),
		],

		[
		(call_script, "script_shield_bash"),
		]),

			##AI kicking begin
		   (2, 0, 3, #AI kicking
       [], [
	(get_player_agent_no,":player"),
	(try_for_agents, ":agent"),
		(neq, ":agent", ":player"),
		(agent_is_alive, ":agent"),
		(neq, ":agent", -1),
		(agent_is_human, ":agent"),#Only humans can kick....FOR NOW
		(agent_is_active, ":agent"),
		(agent_slot_eq, ":agent", slot_agent_is_running_away, 0),#Isn't fleeing the battle.
		##He's an eligible human.  Now see if he's in a position to kick.
		(agent_get_attack_action, ":attack_action", ":agent"), #returned values: free = 0, readying_attack = 1, releasing_attack = 2, completing_attack_after_hit = 3, attack_parried = 4, reloading = 5, after_release = 6, cancelling_attack = 7
		(agent_get_defend_action, ":defend_action", ":agent"),#
		(this_or_next|eq,":attack_action",4),#Just got parried
		(this_or_next|eq,":defend_action",1),#Parrying an enemy
		##So he'll only try to kick if he just parried an enemy attack, or his own attack just got parried.
		(agent_get_team, ":team", ":agent"),
		(assign, ":maximum_distance", 100),
		#Target Acquisition
		(agent_ai_get_look_target,":suspect",":agent"),
		(gt,":suspect",0),#Make sure there is someone.
		(agent_is_alive, ":suspect"),
		(agent_is_human, ":suspect"),#Only kick humans
		(agent_is_active, ":suspect"),
		(agent_get_team, ":suspect_team", ":suspect"),
		(neq, ":suspect_team", ":team"),#Friends don't let friends kick friends.
		(agent_get_position, pos1, ":agent"),#Distance check
		(agent_get_position, pos2, ":suspect"),
		(neg|position_is_behind_position, pos2, pos1), #Suspect can't be behind kicker.
		(get_distance_between_positions, ":distance", pos1, pos2),
		(le, ":distance", ":maximum_distance"),
		#Check chance
		(store_random_in_range,":kickchance", 1, 10),
		(try_begin),
			(eq,":kickchance",1), #10% chance per check
				#(display_message, "@Agent kicks."),
				(agent_set_animation, ":agent", "anim_prepare_kick_0"),
				(agent_deliver_damage_to_agent, ":agent", ":suspect", 3),
				(agent_set_animation, ":suspect", "anim_strike3_abdomen_front"),#Get Kicked
			(try_end),
	   (try_end),]),
	   
	   ##AI Kicking end
		
		
		(0.25, 0.0, 4.0,
		[
			(eq, "$sp_shield_bash_ai", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(neq, ":var_2", ":player_agent_no"),
				(agent_is_alive, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_active, ":var_2"), #Test to see if it stops AI from shield bashing (new addition v3)
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(store_skill_level, ":skill_level_shield_troop_id_var_2", "skl_shield", ":troop_id_var_2"),
				(store_proficiency_level, ":proficiency_level_troop_id_var_2_0", ":troop_id_var_2", 0),
				(ge, ":skill_level_shield_troop_id_var_2", 4),
				(ge, ":proficiency_level_troop_id_var_2_0", 200),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(le, ":horse_var_2", 0),
				(try_begin),
					(neg|agent_slot_ge, ":var_2", 50, 1),
					(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
					(agent_get_wielded_item, ":wielded_item_var_2_1", ":var_2", 1),
					(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
					(eq, ":type_wielded_item_var_2_1", 7),
					(agent_get_attack_action, ":attack_action_var_2", ":var_2"),
					(eq, ":attack_action_var_2", 0),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_position, 1, ":var_2"),
					(assign, ":value", -1),
					(assign, ":value_2", 125),
					(try_for_agents, ":var_13"),
						(agent_is_alive, ":var_13"),
						(agent_is_human, ":var_13"),
						(agent_get_position, 2, ":var_13"),
						(neg|position_is_behind_position, 2, 1),
						(agent_get_team, ":team_var_13", ":var_13"),
						(neq, ":team_var_13", ":team_var_2"),
						(try_begin),
							(eq, ":team_var_2", 0),
							(assign, ":value_3", 2),
						(else_try),
							(eq, ":team_var_2", 2),
							(assign, ":value_3", 0),
						(else_try),
							(eq, ":team_var_2", 1),
							(assign, ":value_3", 3),
						(else_try),
							(eq, ":team_var_2", 3),
							(assign, ":value_3", 1),
						(try_end),
						(neq, ":team_var_13", ":value_3"),
						(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
						(le, ":distance_between_positions_1_2", ":value_2"),
						(assign, ":value_2", ":distance_between_positions_1_2"),
						(assign, ":value", ":var_13"),
					(try_end),
					(ge, ":value", 0),
					(agent_get_horse, ":horse_var_2", ":value"),
					(eq, ":horse_var_2", -1),
					(store_random_in_range, ":random_in_range_15_26", 15, 26),
					(agent_set_slot, ":var_2", 50, ":random_in_range_15_26"),
					(agent_set_animation, ":var_2", "anim_shield_bash"),
					(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
					(troop_get_type, ":type_wielded_item_var_2_1", ":troop_id_var_2"),
					(try_begin),
						(eq, ":type_wielded_item_var_2_1", 0),
						(agent_play_sound, ":var_2", "snd_man_yell"),
					(else_try),
						(eq, ":type_wielded_item_var_2_1", 1),
						(agent_play_sound, ":var_2", "snd_woman_yell"),
					(try_end),
					(agent_play_sound, ":value", "snd_wooden_hit_low_armor_high_damage"),
					(agent_get_defend_action, ":attack_action_var_2", ":value"),
					(try_begin),
						(eq, ":attack_action_var_2", 2),
						(neg|position_is_behind_position, 1, 2),
						(agent_get_wielded_item, ":wielded_item_var_2_1", ":value", 1),
						(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
						(eq, ":type_wielded_item_var_2_1", 7),
						(agent_set_animation, ":value", "anim_shield_bash"),
					(else_try),
						(agent_set_animation, ":value", "anim_shield_strike"),
					(try_end),
				(try_end),
				(agent_get_slot, ":var_2_50", ":var_2", 50),
				(val_sub, ":var_2_50", 1),
				(val_max, ":var_2_50", 0),
				(agent_set_slot, ":var_2", 50, ":var_2_50"),
			(try_end)
		])
	] ),

	("training_ground_training", mtf_arena_fight|mtf_team_fight, -1,
	"Training.",
	[(0, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(1, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(2, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(3, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(4, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(8, mtef_visitor_source, af_override_weapons|af_override_head|af_override_horse, 0, 1, []),
	(9, mtef_visitor_source, af_override_weapons|af_override_head|af_override_horse, 0, 1, []),
	(10, mtef_visitor_source, af_override_weapons|af_override_head|af_override_horse, 0, 1, []),
	(11, mtef_visitor_source, af_override_weapons|af_override_head|af_override_horse, 0, 1, []),
	(12, mtef_visitor_source, af_override_weapons|af_override_head|af_override_horse, 0, 1, []),
	(13, mtef_visitor_source, af_override_weapons|af_override_head|af_override_horse, 0, 1, []),
	(14, mtef_visitor_source, af_override_weapons|af_override_head|af_override_horse, 0, 1, []),
	(15, mtef_visitor_source, af_override_weapons|af_override_head|af_override_horse, 0, 1, [])],
	[
		(-19.0, 0.0, 0.0,
		[],

		[
			(assign, "$g_last_destroyed_gourds", 0),
			(call_script, "script_change_banners_and_chest")
		]),

		(-21.0, 0.0, 0.0,
		[],

		[
			(question_box, "str_give_up_fight")
		]),

		(-8.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(eq, ":trigger_param_1", 0),
			(assign, "$g_training_ground_training_success_ratio", 0),
			(jump_to_menu, "mnu_training_ground_training_result"),
			(finish_mission)
		]),

		(-22.0, 0.0, 0.0,
		[
			(display_message, "str_cant_use_inventory_now")
		],

		[]),

		(0.0, 0.0, ti_once,
		[
			(try_begin),
				(eq, "$g_mt_mode", 2),
				(set_fixed_point_multiplier, 100),
				(entry_point_get_position, 1, 0),
				(init_position, 2),
				(position_set_y, 2, "$g_training_ground_ranged_distance"),
				(position_transform_position_to_parent, 3, 1, 2),
				(copy_position, 1, 3),
				(assign, ":value", 10),
				(assign, ":var_2", 0),
				(try_for_range, ":localvariable", 0, ":value"),
					(store_sub, ":value_2", ":localvariable", ":var_2"),
					(scene_prop_get_instance, ":scene_prop_instance_gourd_value_2", "spr_gourd", ":value_2"),
					(copy_position, 2, 1),
					(init_position, 0),
					(store_random_in_range, ":random_in_range_0_360", 0, 360),
					(position_rotate_z, 2, ":random_in_range_0_360"),
					(store_random_in_range, ":random_in_range_0_360", 50, 600),
					(position_move_x, 2, ":random_in_range_0_360"),
					(store_random_in_range, ":random_in_range_0_360", 0, 360),
					(position_transform_position_to_local, 3, 1, 2),
					(position_rotate_z, 0, ":random_in_range_0_360"),
					(position_transform_position_to_parent, 4, 0, 3),
					(position_transform_position_to_parent, 2, 1, 4),
					(position_set_z_to_ground_level, 2),
					(position_move_z, 2, 150),
					(assign, ":value_3", 1),
					(try_for_range, ":number", 0, 10),
						(eq, ":value_3", 1),
						(neq, ":value_2", ":number"),
						(scene_prop_get_instance, ":scene_prop_instance_gourd_number", "spr_gourd", ":number"),
						(prop_instance_get_position, 3, ":scene_prop_instance_gourd_number"),
						(get_distance_between_positions, ":distance_between_positions_2_3", 2, 3),
						(lt, ":distance_between_positions_2_3", 100),
						(assign, ":value_3", 0),
					(try_end),
					(try_begin),
						(eq, ":value_3", 0),
						(val_add, ":value", 1),
						(val_add, ":var_2", 1),
					(else_try),
						(prop_instance_set_position, ":scene_prop_instance_gourd_value_2", 2),
						(prop_instance_animate_to_position, ":scene_prop_instance_gourd_value_2", 2, 1),
						(scene_prop_get_instance, ":scene_prop_instance_gourd_number", "spr_gourd_spike", ":value_2"),
						(position_move_z, 2, -150),
						(prop_instance_set_position, ":scene_prop_instance_gourd_number", 2),
						(prop_instance_animate_to_position, ":scene_prop_instance_gourd_number", 2, 1),
					(try_end),
				(try_end),
			(else_try),
				(eq, "$g_mt_mode", 3),
				(assign, ":var_11", 0),
				(try_for_range, ":localvariable", 0, 100),
					(scene_prop_get_instance, ":scene_prop_instance_gourd_value_2", "spr_gourd", ":localvariable"),
					(scene_prop_get_instance, ":scene_prop_instance_gourd_number", "spr_gourd_spike", ":localvariable"),
					(ge, ":scene_prop_instance_gourd_value_2", 0),
					(ge, ":scene_prop_instance_gourd_number", 0),
					(val_add, ":var_11", 1),
					(prop_instance_get_position, 0, ":scene_prop_instance_gourd_number"),
					(position_move_z, 0, 150),
					(prop_instance_set_position, ":scene_prop_instance_gourd_value_2", 0),
					(prop_instance_animate_to_position, ":scene_prop_instance_gourd_value_2", 0, 1),
				(try_end),
				(store_sub, ":value", ":var_11", "$g_training_ground_training_num_gourds_to_destroy"),
				(try_for_range, ":localvariable", 0, ":value"),
					(store_random_in_range, ":random_in_range_0_var_11", 0, ":var_11"),
					(scene_prop_get_instance, ":scene_prop_instance_gourd_value_2", "spr_gourd", ":random_in_range_0_var_11"),
					(prop_instance_get_position, 0, ":scene_prop_instance_gourd_value_2"),
					(position_get_z, ":position_z_0", 0),
					(try_begin),
						(lt, ":position_z_0", -50000),
					(else_try),
						(position_set_z, 0, -100000),
						(prop_instance_set_position, ":scene_prop_instance_gourd_value_2", 0),
						(prop_instance_animate_to_position, ":scene_prop_instance_gourd_value_2", 0, 1),
						(scene_prop_get_instance, ":scene_prop_instance_gourd_number", "spr_gourd_spike", ":random_in_range_0_var_11"),
						(prop_instance_set_position, ":scene_prop_instance_gourd_number", 0),
						(prop_instance_animate_to_position, ":scene_prop_instance_gourd_number", 0, 1),
					(try_end),
				(try_end),
			(try_end)
		],

		[]),

		(1.0, 3.0, ti_once,
		[
			(eq, "$g_mt_mode", 1),
			(this_or_next|main_hero_fallen),
			(num_active_teams_le, 1)
		],

		[
			(try_begin),
				(neg|main_hero_fallen),
				(assign, "$g_training_ground_training_success_ratio", 100),
			(else_try),
				(assign, ":var_1", 0),
				(try_for_agents, ":var_2"),
					(agent_is_alive, ":var_2"),
					(agent_is_human, ":var_2"),
					(agent_get_team, ":team_var_2", ":var_2"),
					(eq, ":team_var_2", 1),
					(val_add, ":var_1", 1),
				(try_end),
				(store_sub, ":value", "$g_training_ground_training_num_enemies", ":var_1"),
				(store_mul, "$g_training_ground_training_success_ratio", ":value", 100),
				(val_div, "$g_training_ground_training_success_ratio", "$g_training_ground_training_num_enemies"),
			(try_end),
			(jump_to_menu, "mnu_training_ground_training_result"),
			(finish_mission)
		]),

		(1.0, 3.0, ti_once,
		[
			(eq, "$g_mt_mode", 2),
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_ammo, ":ammo_player_agent_no", ":player_agent_no"),
			(store_mission_timer_a, ":mission_timer_a"),
			(this_or_next|main_hero_fallen),
			(this_or_next|eq, ":ammo_player_agent_no", 0),
			(gt, ":mission_timer_a", 116)
		],

		[
			(store_mul, "$g_training_ground_training_success_ratio", "$scene_num_total_gourds_destroyed", 10),
			(jump_to_menu, "mnu_training_ground_training_result"),
			(finish_mission)
		]),

		(1.0, 3.0, ti_once,
		[
			(eq, "$g_mt_mode", 3),
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_horse, ":horse_player_agent_no", ":player_agent_no"),
			(store_mission_timer_a, ":mission_timer_a"),
			(this_or_next|lt, ":horse_player_agent_no", 0),
			(this_or_next|main_hero_fallen),
			(this_or_next|ge, "$scene_num_total_gourds_destroyed", "$g_training_ground_training_num_gourds_to_destroy"),
			(gt, ":mission_timer_a", 120)
		],

		[
			(store_mul, "$g_training_ground_training_success_ratio", "$scene_num_total_gourds_destroyed", 100),
			(val_div, "$g_training_ground_training_success_ratio", "$g_training_ground_training_num_gourds_to_destroy"),
			(jump_to_menu, "mnu_training_ground_training_result"),
			(finish_mission)
		]),

		(0.0, 0.0, 0.0,
		[
			(gt, "$g_last_destroyed_gourds", 0),
			(try_begin),
				(eq, "$g_mt_mode", 2),
				(entry_point_get_position, 1, 0),
				(position_move_y, 1, 100, 0),
				(get_player_agent_no, ":player_agent_no"),
				(agent_get_position, 2, ":player_agent_no"),
				(try_begin),
					(position_is_behind_position, 2, 1),
					(val_add, "$scene_num_total_gourds_destroyed", "$g_last_destroyed_gourds"),
				(else_try),
					(display_message, "@You must stay behind the line on the ground! Point is not counted."),
				(try_end),
			(else_try),
				(val_add, "$scene_num_total_gourds_destroyed", "$g_last_destroyed_gourds"),
			(try_end),
			(assign, "$g_last_destroyed_gourds", 0)
		],

		[]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_set_matching_sexy_boots", ":trigger_param_1")
		]),

			(0.0, 0.0, 0.0,
		[
			(eq, "$sp_shield_bash", 1),
			(game_key_is_down, 7),
			(game_key_clicked, 6),
			(neg|main_hero_fallen),
		],

		[
		(call_script, "script_shield_bash"),
		]),

			##AI kicking begin
		   (2, 0, 3, #AI kicking
       [], [
	(get_player_agent_no,":player"),
	(try_for_agents, ":agent"),
		(neq, ":agent", ":player"),
		(agent_is_alive, ":agent"),
		(neq, ":agent", -1),
		(agent_is_human, ":agent"),#Only humans can kick....FOR NOW
		(agent_is_active, ":agent"),
		(agent_slot_eq, ":agent", slot_agent_is_running_away, 0),#Isn't fleeing the battle.
		##He's an eligible human.  Now see if he's in a position to kick.
		(agent_get_attack_action, ":attack_action", ":agent"), #returned values: free = 0, readying_attack = 1, releasing_attack = 2, completing_attack_after_hit = 3, attack_parried = 4, reloading = 5, after_release = 6, cancelling_attack = 7
		(agent_get_defend_action, ":defend_action", ":agent"),#
		(this_or_next|eq,":attack_action",4),#Just got parried
		(this_or_next|eq,":defend_action",1),#Parrying an enemy
		##So he'll only try to kick if he just parried an enemy attack, or his own attack just got parried.
		(agent_get_team, ":team", ":agent"),
		(assign, ":maximum_distance", 100),
		#Target Acquisition
		(agent_ai_get_look_target,":suspect",":agent"),
		(gt,":suspect",0),#Make sure there is someone.
		(agent_is_alive, ":suspect"),
		(agent_is_human, ":suspect"),#Only kick humans
		(agent_is_active, ":suspect"),
		(agent_get_team, ":suspect_team", ":suspect"),
		(neq, ":suspect_team", ":team"),#Friends don't let friends kick friends.
		(agent_get_position, pos1, ":agent"),#Distance check
		(agent_get_position, pos2, ":suspect"),
		(neg|position_is_behind_position, pos2, pos1), #Suspect can't be behind kicker.
		(get_distance_between_positions, ":distance", pos1, pos2),
		(le, ":distance", ":maximum_distance"),
		#Check chance
		(store_random_in_range,":kickchance", 1, 10),
		(try_begin),
			(eq,":kickchance",1), #10% chance per check
				#(display_message, "@Agent kicks."),
				(agent_set_animation, ":agent", "anim_prepare_kick_0"),
				(agent_deliver_damage_to_agent, ":agent", ":suspect", 3),
				(agent_set_animation, ":suspect", "anim_strike3_abdomen_front"),#Get Kicked
			(try_end),
	   (try_end),]),
	   
	   ##AI Kicking end
		
		
		(0.25, 0.0, 4.0,
		[
			(eq, "$sp_shield_bash_ai", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(neq, ":var_2", ":player_agent_no"),
				(agent_is_alive, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_active, ":var_2"), #Test to see if it stops AI from shield bashing (new addition v3)
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(store_skill_level, ":skill_level_shield_troop_id_var_2", "skl_shield", ":troop_id_var_2"),
				(store_proficiency_level, ":proficiency_level_troop_id_var_2_0", ":troop_id_var_2", 0),
				(ge, ":skill_level_shield_troop_id_var_2", 4),
				(ge, ":proficiency_level_troop_id_var_2_0", 200),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(le, ":horse_var_2", 0),
				(try_begin),
					(neg|agent_slot_ge, ":var_2", 50, 1),
					(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
					(agent_get_wielded_item, ":wielded_item_var_2_1", ":var_2", 1),
					(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
					(eq, ":type_wielded_item_var_2_1", 7),
					(agent_get_attack_action, ":attack_action_var_2", ":var_2"),
					(eq, ":attack_action_var_2", 0),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_position, 1, ":var_2"),
					(assign, ":value", -1),
					(assign, ":value_2", 125),
					(try_for_agents, ":var_13"),
						(agent_is_alive, ":var_13"),
						(agent_is_human, ":var_13"),
						(agent_get_position, 2, ":var_13"),
						(neg|position_is_behind_position, 2, 1),
						(agent_get_team, ":team_var_13", ":var_13"),
						(neq, ":team_var_13", ":team_var_2"),
						(try_begin),
							(eq, ":team_var_2", 0),
							(assign, ":value_3", 2),
						(else_try),
							(eq, ":team_var_2", 2),
							(assign, ":value_3", 0),
						(else_try),
							(eq, ":team_var_2", 1),
							(assign, ":value_3", 3),
						(else_try),
							(eq, ":team_var_2", 3),
							(assign, ":value_3", 1),
						(try_end),
						(neq, ":team_var_13", ":value_3"),
						(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
						(le, ":distance_between_positions_1_2", ":value_2"),
						(assign, ":value_2", ":distance_between_positions_1_2"),
						(assign, ":value", ":var_13"),
					(try_end),
					(ge, ":value", 0),
					(agent_get_horse, ":horse_var_2", ":value"),
					(eq, ":horse_var_2", -1),
					(store_random_in_range, ":random_in_range_15_26", 15, 26),
					(agent_set_slot, ":var_2", 50, ":random_in_range_15_26"),
					(agent_set_animation, ":var_2", "anim_shield_bash"),
					(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
					(troop_get_type, ":type_wielded_item_var_2_1", ":troop_id_var_2"),
					(try_begin),
						(eq, ":type_wielded_item_var_2_1", 0),
						(agent_play_sound, ":var_2", "snd_man_yell"),
					(else_try),
						(eq, ":type_wielded_item_var_2_1", 1),
						(agent_play_sound, ":var_2", "snd_woman_yell"),
					(try_end),
					(agent_play_sound, ":value", "snd_wooden_hit_low_armor_high_damage"),
					(agent_get_defend_action, ":attack_action_var_2", ":value"),
					(try_begin),
						(eq, ":attack_action_var_2", 2),
						(neg|position_is_behind_position, 1, 2),
						(agent_get_wielded_item, ":wielded_item_var_2_1", ":value", 1),
						(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
						(eq, ":type_wielded_item_var_2_1", 7),
						(agent_set_animation, ":value", "anim_shield_bash"),
					(else_try),
						(agent_set_animation, ":value", "anim_shield_strike"),
					(try_end),
				(try_end),
				(agent_get_slot, ":var_2_50", ":var_2", 50),
				(val_sub, ":var_2_50", 1),
				(val_max, ":var_2_50", 0),
				(agent_set_slot, ":var_2", 50, ":var_2_50"),
			(try_end)
		])
	] + crouching_triggers ),

	("sneak_caught_fight", mtf_battle_mode, -1,
	"You must fight your way out!",
	[(0, mtef_scene_source|mtef_team_0, af_override_all, aif_start_alarmed, 1, [itm_priest_robe_1, itm_priest_cap_1, itm_shoes, itm_sword_type_xii, itm_talak_buckler, itm_throwing_daggers]),
	(1, mtef_scene_source|mtef_team_0, af_override_all, aif_start_alarmed, 1, [itm_priest_robe_1, itm_priest_cap_1, itm_shoes, itm_sword_type_xii, itm_talak_buckler, itm_throwing_daggers]),
	(2, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(3, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(4, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(5, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(6, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(7, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(8, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(9, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(10, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(11, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(12, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(13, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(14, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(15, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(16, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(17, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(18, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(19, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(20, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(21, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(22, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(23, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(24, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(25, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(26, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(27, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(28, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(29, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(30, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(31, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(32, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(33, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(34, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(35, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(36, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(37, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(38, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(39, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(40, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(41, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(42, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(43, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(44, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(45, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(46, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(47, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(48, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(49, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(50, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(51, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(52, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(53, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(54, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(55, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(56, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(57, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(58, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(59, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(60, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(61, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(62, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(63, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(64, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, [])],
	[
				
			
	
    (7, 0, ti_once,
    [],
    [
	(call_script, "script_assign_traits"),
    ]),


    (0, 0, 1, 
    [
    ],
    [
	(call_script, "script_stumbling"),
    ]),






#Decapitations next level right here.
(ti_on_agent_hit, 0, 0, [(eq, "$dynamic_decap", 1),],
[
   (store_trigger_param_1, ":victim_agent"),
   (store_trigger_param_2, ":attacker_agent"),
   (store_trigger_param_3, ":damage"),
   (assign, ":attacker_item", reg0), ### Transfer the item ID to make sure it dosn't change while the script is running
   (copy_position, pos5, pos0), ### Transfer the position of the hit to make sure it dosn't change while the script is running
   (neq, ":victim_agent", -1),
   (try_begin), #-- Decapitations --#
      (agent_is_human, ":victim_agent"),
	  (ge, ":attacker_item", 0),
	  (assign, ":run", 0), ### Reset the run test variable
#	  (try_begin), ### Special weapons that can decap, ovevrrides the below conditions
#		  (this_or_next|eq, ":attacker_item", "itm_supercrossbow"),
#		  (eq, ":attacker_item", "itm_supersledge"),
#		  (assign, ":run", 1),
	  (try_begin),
		  #(neq, ":attacker_item", "itm_mace_1"), ### List of weapons that cannot decapitate
		  #(neq, ":attacker_item", "itm_mace_2"), ### This would be easier to do with a preperty check (for damage type), but I don't know if that is possible or not
		  #(neq, ":attacker_item", "itm_mace_3"),
		  #(neq, ":attacker_item", "itm_staff"), #Keeping active incase of script errors
		  (agent_get_action_dir, ":attack_dir", ":attacker_agent"), ### Makes sure the attack is either a left or right swing
		  (this_or_next|eq, ":attack_dir", 1), ### Right swing
		  (eq, ":attack_dir", 2), ### Left swing
		  (assign, ":run", 1),
	  (try_end),
	  (eq, ":run", 1), ### One of the checks were true, continue to run script
	  #(assign, reg1, ":damage"), #Debug messages
	  #(display_message, "@Damage: {reg1}"),
	  
	  (assign, ":run", 0), ### Reset the run test variable
	  (try_begin),
		(ge, ":damage", "$decap_damage"), ### 30 Minimum damage required to decapitate an agent
		(assign, ":run", 1),
		
#	  (else_try),  ### If debugging mode is on, this bypasses the damage requirement check
#		  (eq,"$g_decapitations_debugging", 1),
#		  (assign, ":run", 1),
#		  (display_message, "@Decap minimum DMG req bypassed"),
	  (try_end),
	  (eq, ":run", 1),
	  
	  (store_agent_hit_points, ":hp", ":victim_agent", 1),
	  (val_add, ":hp", 10), ### 10 Victim must have the negative of this hp or below after hit for the script to move on (never put this value below 0 since the agent has to be absolutley positvely dead)!
	  (ge, ":damage", ":hp"),
	  
	  
	  ### Compare the hit position to the agent's position
      (agent_get_position, pos4, ":victim_agent"),
      (get_distance_between_positions, ":distance", pos4, pos5), 
	  (agent_get_horse, ":is_mounted", ":victim_agent"),
	  (try_begin), ### If the agent is on horseback, these values are used (note that these values will not be exactly correct if the horse is very large or very small)
		(ge, ":is_mounted", 0), ### Will be -1 if no horse is to be found, so anything above means that the agent is mounted
		(assign, ":min_distance", 240), ### Minimum distance from the agent's horse's hooves from which the hit is valid (240 is an approximate value)
		(assign, ":max_distance", 260), ### Maximum distance from the agent's horse's hooves to which the hit is valid (260 is an approximate value)
	  (else_try),  ### If the agent is on foot, these values are used
	    (assign, ":min_distance", 160), ### Minimum distance from the agent's feet from which the hit is valid (160 = slightly below the neck)
	    (assign, ":max_distance", 176), ### Maximum distance from the agent's feet to which the hit is valid (176 = near the nose)
	  (try_end),
      (is_between, ":distance", ":min_distance", ":max_distance"), ### Check to see if the hit is within the allowed area
	  
	  
	  (assign, ":run", 0), ### Default variable value before damage test
	  (try_begin),
		  (store_div, ":chance", ":damage", "$decap_damage_divider"), ### Chance of decap is damage / 4 right now. Lower this value for higher chances of decapitation (or press M+Right Ctrl for debug more if you just want to test easy decaps in-game).
		  
		  #(assign, reg1, ":chance"), #Debug messages
		  #(display_message, "@Decap chance is: {reg1}"),
		  (store_random_in_range, ":diceroll", 0, "$decap_randomizer"), ### Randomizer, 0-100
		  
		  #(assign, reg1, ":diceroll"), #Debug messages
		  #(display_message, "@Diceroll: {reg1}"),
		  (le, ":diceroll", ":chance"), ### ":diceroll" must be less than or equal to ":chance", if it is, decapitation occurs!
		  
		  (assign, ":run", 1), ### SUCCESS!
		  
#     (else_try),  ### If debugging mode is on, bypass chance calculation
#		  (eq,"$g_decapitations_debugging", 1),
#		  (assign, ":run", 1),
#		  (display_message, "@Decap chance calc bypassed"),
	  (try_end),  
	  (eq, ":run", 1), ### Time for the fun stuff!

	  ### Gender test for spawning the right head type
	  (assign, ":head_type", "itm_cut_off_head_male"),
	  (agent_get_troop_id, ":victim_troop", ":victim_agent"),
	  (try_begin),
	    (ge, ":victim_troop", 0),
		(troop_get_type,":victim_gender",":victim_troop"),
		(eq, ":victim_gender", 1),
		(assign, ":head_type", "itm_cut_off_head_female"),
	  (try_end),
	  
	  ### Randomize the spawned head's and/or helmet's position and orientation
	  (store_random_in_range, ":z_rotation", 0, 360),
	  (store_random_in_range, ":y_rotation", -60, 60),
	  (store_random_in_range, ":x_pos", -90, 90),
	  (store_random_in_range, ":y_pos", -90, 90),
	  (position_rotate_z, pos4,":z_rotation"),
	  (position_rotate_y, pos4,":y_rotation"),
	  (position_move_x, pos4, ":x_pos"),
	  (position_move_y, pos4, ":y_pos"),
	  (position_set_z_to_ground_level, pos4),
	  (position_move_z, pos4, 5),
	  (set_spawn_position, pos4),
	  (assign, ":prunetime", 360), ### This is the time in seconds before the spawned head or helmet gets pruned (removed). Recommended to keep it above 0 to make sure it gets removed eventually or when the scene resets, to prevent performance issues.
	  
	  #(spawn_item, ":head_type", 0, ":prunetime"), ### This is the old way of spawning the head on the ground with the helmet, disabled because of the new dynamic heads. You can comment away (disable) the dynamic heads spawning further down and uncomment this line for a less performance-needing approach (with no physics involved).
	  
	  ### Does the agent have a helmet or hat equipped?
      (agent_get_item_slot, ":item", ":victim_agent", 4), #head slot
      (try_begin),
         (ge, ":item", 1), ### Does it?
         (agent_unequip_item, ":victim_agent", ":item"), ### Yes it does. Unequip it to allow replacement by the invisible helmet further down
		 (try_begin),
			 ### Don't spawn items with "itp_attatch_armature" flag: rigging causes floating bugs
			 ### This would be much better to do with an item flag check, but I haven't found any way to do that
			 #(neq, ":item", "itm_with_itp_attatch_armature"),
			 #(neg|is_between,":item","start_of_itm_range_with_itp_attatch_armature","end_of_itm_range_with_itp_attatch_armature"),
			#(set_spawn_position, pos4),
			(spawn_item, ":item", 0, ":prunetime"), ### Spawns the agent's currently equipped headgear on the dropped head's position
		 (try_end),
      (try_end),
	  
	  (agent_equip_item, ":victim_agent", "itm_invisible_head"), ### Put an invisible helmet on the agent's head to "remove" it
	  
	  
	  (agent_get_position, pos4, ":victim_agent"), ### Refreshes the agent's position
	  (position_move_z, pos4, ":min_distance"), ### Move to the where the neck used to be attached
	  
	  
	  ### Blood effects! The last variable is the strength. Lower or increase it for more/less blood (or tweak the particle effects themselves in "module_particle_systems.py").
      (particle_system_burst, "psys_blood_decapitation", pos4, 40), 
	  (particle_system_burst, "psys_game_blood", pos4, 10),
	  (particle_system_burst, "psys_game_blood_2", pos4, 10),
	  
	  (play_sound_at_position, "snd_decapitation_battle", pos4), ### Play some nasty sounds
	  
	  
	  ### Dynamic head spawning! See the bottom of "module_scene_props.py" for physics-related options and more.
	  (position_move_z, pos4, 20),
	  (set_spawn_position, pos4),
	  (assign, ":head_type", "spr_head_dynamic_male"),
	  (try_begin), ### Gender check (for determening the type of head)
		(eq, ":victim_gender", 1),
		(assign, ":head_type", "spr_head_dynamic_female"),
	  (try_end),
	  (spawn_scene_prop, ":head_type"),
	  
		#Addition check if we should allow the message to appears
			(eq, "$allow_decap_mess", 1), #Possible script error

	  ### This below is for the text that shows up when somebody is decapitated.
	  
	  ### Who decapitated who?
		(agent_get_troop_id, ":attacker_troop", ":attacker_agent"),
		(str_store_troop_name, s0, ":attacker_troop"),

		(agent_get_troop_id, ":victim_troop", ":victim_agent"),
		(str_store_troop_name, s1, ":victim_troop"),

	  
	  ### Colour check (friend or foe?)
	  (get_player_agent_no, ":my_agent"),
	  (agent_get_team, ":my_team", ":my_agent"),
	  (agent_get_team, ":victim_team", ":victim_agent"),
	  (try_begin), ### Display it!
		  (neq, ":my_team", ":victim_team"),
		  (display_message, "@>>> {s0} decapitated {s1}!", 0xFF33DD11), ## Green
	  (else_try),
		  (display_message, "@>>> {s0} decapitated {s1}!", 0xFFFF4422), ## Red
	  (try_end),
   (try_end), #-- Decapitations END --#
   
   ]),












	
###Voice-over for Infantry, archers & Cavalry
		
		(0.0, 0.3, 0.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 29) #Everyone!
		],

		[
		(call_script, "script_identify_battle_voices_all")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 30) #Infantry
		],

		[
		(call_script, "script_identify_battle_voices_inf")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 31) #Archers
		],

		[
		(call_script, "script_identify_battle_voices_archers")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 32) #Cavalry
		],

		[
		(call_script, "script_identify_battle_voices_cav")
		]),
		###Voice-over for Infantry, archers & Cavalry	
		
		
		
			#####Camera mode by Rubik None-Coop Version Begin
		(0, 0, 0, [(eq, "$extended_camera_mode", 1)],
  [
    (get_player_agent_no, ":player_agent"),
    (agent_get_look_position, pos1, ":player_agent"),
    (position_move_z, pos1, "$g_camera_z"),
    (position_move_y, pos1, "$g_camera_y"),
    (agent_get_horse, ":horse_agent", ":player_agent"),
    (try_begin),
      (ge, ":horse_agent", 0),
      (position_move_z, pos1, 80),
    (try_end),
    (mission_cam_set_position, pos1),
    (try_begin),
      (key_is_down, key_left_control),
      (assign, ":move_val", 50),
    (else_try),
      (assign, ":move_val", 10),
    (try_end),
    (try_begin),
      (key_clicked, key_up),
      (mission_cam_set_mode, 1),
      (val_add, "$g_camera_z", ":move_val"),
    (else_try),
      (key_clicked, key_down),
      (mission_cam_set_mode, 1),
      (val_sub, "$g_camera_z", ":move_val"),
    (else_try),
      (key_clicked, key_left),
      (mission_cam_set_mode, 1),
      (val_add, "$g_camera_y", ":move_val"),
    (else_try),
      (key_clicked, key_right),
      (mission_cam_set_mode, 1),
      (val_sub, "$g_camera_y", ":move_val"),
    (try_end),
    (try_begin),
      (this_or_next|game_key_clicked, gk_view_char),
      (this_or_next|game_key_clicked, gk_zoom),
      (game_key_clicked, gk_cam_toggle),
      (mission_cam_set_mode, 0),
    (try_end),
  ]),
  #####Camera mode by Rubik None-Coop Version End
		
		
###########Torch by troycall/Envious Arm begin

																	#(-25.0, 0.0, 0.0, #Enabling this forces random chance to be 100%
																	#(ti_on_agent_spawn, 0, 0, #Enabling this forces random chance to be 100%
																	(20, 0, ti_once, #Proper one, but reinforcements do not get assigned torches.
        [
          (mission_tpl_are_all_agents_spawned), #From VC Header_Operations to prevent weird behavior.
          (is_currently_night) #Check if currently night time
        ],
        [

		  ####DEFAULT
		   #(try_for_agents, ":agent"),
            #(agent_get_wielded_item, ":item", ":agent", 1),
            #(gt, ":item", -1),
            #(agent_unequip_item, ":agent", ":item"),
            #(agent_equip_item, ":agent", "itm_torch"),
            #(agent_set_wielded_item, ":agent", "itm_torch"),           
          #(try_end),
		  ####END DEFAULT
		  
		  (try_for_agents, ":agent"), #Try for agents...
		  #Extension
		  (agent_is_alive, ":agent"), #For performance reasons
		  #End
		  (agent_is_human, ":agent"), #Performance
          (agent_is_non_player, ":agent"), #Uncommenting this includes player on spawning with torch, may be necessary to uncomment at module_coop_mission_templates.
		  


		 ##########Default Order
		 #######		  (agent_is_human, ":agent"), #Performance
         #######(agent_is_non_player, ":agent"), #Uncommenting this includes player on spawning with torch, may be necessary to uncomment at module_coop_mission_templates.
		 #######
		 ########Extension
		 #######(agent_is_active, ":agent"), #For performance reasons
		 #######(agent_is_alive, ":agent"), #For performance reasons
		 ########End
		  ############
		  		  
				#  (try_begin),
				  
		#		          (agent_get_wielded_item, ":rhand", ":agent", 0),  #Right hand
		#  (assign, ":rhanditem", 0), # Preparing local variable.
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000000000100),
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000004000000),
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000008000000),
		#  (neg|item_has_capability, ":rhanditem", 0x0000000170000000),
		# 

		  #
		  
          #BEGIN DEBUG
          #(assign, reg10, ":agent"),
          #(str_clear, s10),
          #(str_store_string, s10, "@New agent: {reg10}"),
          #END DEBUG
		  #(agent_get_wielded_item, ":rhanditem", ":agent", 0),  #Obtain right hand item
         (agent_get_wielded_item, ":rhanditem", ":agent", 0),  #Obtain right hand item
          (agent_get_wielded_item, ":item", ":agent", 1), # Left hand: shield or -1
          #BEGIN DEBUG
          #(assign, reg10, ":item"),
          #(str_store_string, s10, "@{s10}. LH: {reg10}"),
		  #(display_message, "@Main block Phase A finalized"),
          #END DEBUG
		  #(item_get_type, ":type", ":rhanditem"), #If right hand item is polearm, stop reading rest of code.
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_club_with_spike_head", "itm_wooden_shield"),
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_light_lance", "itm_wooden_shield"),
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_light_lance", "itm_wooden_shield"),
          (try_begin),
		  (neg|is_between, ":rhanditem", "itm_club_with_spike_head", "itm_wooden_shield"),
		  (neg|is_between, ":rhanditem", "itm_lance_banner_jer", "itm_cross_end"), #Update item slots
		  #(neg|troop_has_item_equipped, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		  #(neq, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		  
		# (neg|eq, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		    (gt, ":item", -1), #Check if the agent wields any item in the left hand, this or next.
            #(neq, ":item", -1),# Check if the agent wields any item in the left hand
            (neq, ":item", "itm_torch"), #If agent is using torch, ignore him.
            #(display_message, "@PASSED neg tests"), #Debug message

			
            (store_random_in_range, ":chance", 1, 101), # Chance of item being assigned
            (try_begin),
			  (le, ":chance", "$torch_chance"), #25% = 25
				#lt           = neg | ge # less than		-- (lt,<value>,<value>),
				#neq          = neg | eq # not equal to		-- (neq,<value>,<value>),
				#le           = neg | gt # less or equal to	-- (le,<value>,<value>),
              (agent_unequip_item, ":agent", ":item"),
			  
              #BEGIN DEBUG
              #(str_store_item_name, s11, ":item"),
              #(str_store_string, s10, "@{s10}. Removed item: {s11}"),
			  #(display_message, "@(agent_unequip_item, :agent, :item PASSED."),
              #END DEBUG

               
                (agent_equip_item, ":agent", "itm_torch"), #Tell agent to equip the item
                 #(display_message, "@(agent_equip_item, :agent, :item PASSED."),
                  (agent_set_wielded_item, ":agent", "itm_torch"), #Required for infantry only, cavarly can work without it.
                  #(display_message, "@(agent_set_wielded_item, :agent, :item PASSED."),
                 
                 
                  #BEGIN DEBUG
                #(else_try),
                  #(str_store_string, s10, "@{s10}. Failed random chance."),
                (try_end),
               
              #(else_try),
                #(str_store_string, s10, "@{s10}. Invalid agent for torch"),
              (try_end),
             
              #(display_message, s10),
			  (try_end),
              #END DEBUG
			#  (try_end),
      ]),
	  
###########Torch by troycall/Envious Arm end


		(-19.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_change_banners_and_chest")
		]),

		(-20.0, 0.0, 0.0,
		[],

		[
			(assign, ":value", 5),
			(try_begin),
				(party_get_slot, ":current_town_town_last_nearby_fire_time", "$current_town", slot_town_last_nearby_fire_time),
				(store_current_hours, ":current_hours"),
				(store_add, ":value_2", ":current_town_town_last_nearby_fire_time", 4),
				(is_between, ":current_hours", ":value_2", ":current_town_town_last_nearby_fire_time"),
				(assign, ":value", 2),
			(else_try),
				(this_or_next|eq, "$talk_context", 19),
				(eq, "$talk_context", 18),
				(assign, ":value", 4),
			(try_end),
			(try_begin),
				(this_or_next|eq, "$talk_context", 19),
				(eq, "$talk_context", 18),
				(entry_point_get_position, 0, 7),
			(else_try),
				(party_slot_eq, "$current_town", slot_party_type, 3),
				(entry_point_get_position, 0, 0),
			(else_try),
				(entry_point_get_position, 0, 1),
			(try_end),
			(assign, ":value_3", -1),
			(assign, ":value_4", -1),
			(try_for_range, ":localvariable", 0, ":value"),
				(assign, ":value_5", 100000),
				(try_for_range, ":number", 2, 64),
					(neq, ":value_4", ":number"),
					(entry_point_get_position, 1, ":number"),
					(get_distance_between_positions, ":distance_between_positions_0_1", 0, 1),
					(lt, ":distance_between_positions_0_1", ":value_5"),
					(gt, ":distance_between_positions_0_1", ":value_3"),
					(assign, ":value_5", ":distance_between_positions_0_1"),
					(assign, ":var_11", ":number"),
				(try_end),
				(store_faction_of_party, ":faction_of_party_current_town", "$current_town"),
				(try_begin),
					(this_or_next|eq, ":localvariable", 0),
					(eq, ":localvariable", 2),
					(faction_get_slot, ":faction_of_party_current_town_quick_battle_tier_2_infantry", ":faction_of_party_current_town", slot_faction_quick_battle_tier_2_infantry),
				(else_try),
					(faction_get_slot, ":faction_of_party_current_town_quick_battle_tier_2_infantry", ":faction_of_party_current_town", slot_faction_quick_battle_tier_2_infantry),
				(try_end),
				(assign, ":value_4", ":var_11"),
				(assign, ":value_3", ":value_5"),
				(add_visitors_to_current_scene, ":var_11", ":faction_of_party_current_town_quick_battle_tier_2_infantry", 1, 0),
			(try_end)
		]),

		(-21.0, 0.0, 0.0,
		[],

		[
			(question_box, "str_do_you_wish_to_surrender")
		]),

		(-8.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(eq, ":trigger_param_1", 0),
			(jump_to_menu, "mnu_captivity_start_castle_defeat"),
			(finish_mission, 0)
		]),

		(1.0, 0.0, ti_once,
		[],

		[
			(play_sound, "snd_sneak_town_halt"),
			(call_script, "script_music_set_situation_with_culture", 1024)
		]),

		(0.0, 3.0, 0.0,
		[
			(main_hero_fallen, 0)
		],

		[
			(jump_to_menu, "mnu_captivity_start_castle_defeat"),
			(finish_mission, 0)
		]),

		(1.0, 0.0, 0.0,
		[],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_position, 0, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(neq, ":var_2", ":player_agent_no"),
				(agent_is_alive, ":var_2"),
				(agent_get_team, ":team_var_2", ":var_2"),
				(eq, ":team_var_2", 1),
				(agent_get_position, 1, ":var_2"),
				(get_distance_between_positions, ":distance_between_positions_0_1", 0, 1),
				(try_begin),
					(le, ":distance_between_positions_0_1", 800),
					(agent_clear_scripted_mode, ":var_2"),
				(else_try),
					(agent_set_scripted_destination, ":var_2", 0, 0),
				(try_end),
			(try_end)
		]),

		(5.0, 1.0, ti_once,
		[
			(num_active_teams_le, 1),
			(neg|main_hero_fallen),
			(store_mission_timer_a, ":mission_timer_a"),
			(ge, ":mission_timer_a", 5)
		],

		[
			(assign, "$auto_menu", -1),
			(jump_to_menu, "mnu_sneak_into_town_caught_dispersed_guards"),
			(finish_mission, 1)
		]),

		(-30.0, 0.0, ti_once,
		[],

		[
			(assign, "$auto_menu", -1),
			(jump_to_menu, "mnu_sneak_into_town_caught_ran_away"),
			(finish_mission, 0)
		]),

		(-22.0, 0.0, 0.0,
		[
			(display_message, "str_cant_use_inventory_arena")
		],

		[]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_set_matching_sexy_boots", ":trigger_param_1")
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$sp_shield_bash", 1),
			(game_key_is_down, 7),
			(game_key_clicked, 6),
			(neg|main_hero_fallen),
		],

		[
		(call_script, "script_shield_bash"),
		]),

			##AI kicking begin
		   (2, 0, 3, #AI kicking
       [], [
	(get_player_agent_no,":player"),
	(try_for_agents, ":agent"),
		(neq, ":agent", ":player"),
		(agent_is_alive, ":agent"),
		(neq, ":agent", -1),
		(agent_is_human, ":agent"),#Only humans can kick....FOR NOW
		(agent_is_active, ":agent"),
		(agent_slot_eq, ":agent", slot_agent_is_running_away, 0),#Isn't fleeing the battle.
		##He's an eligible human.  Now see if he's in a position to kick.
		(agent_get_attack_action, ":attack_action", ":agent"), #returned values: free = 0, readying_attack = 1, releasing_attack = 2, completing_attack_after_hit = 3, attack_parried = 4, reloading = 5, after_release = 6, cancelling_attack = 7
		(agent_get_defend_action, ":defend_action", ":agent"),#
		(this_or_next|eq,":attack_action",4),#Just got parried
		(this_or_next|eq,":defend_action",1),#Parrying an enemy
		##So he'll only try to kick if he just parried an enemy attack, or his own attack just got parried.
		(agent_get_team, ":team", ":agent"),
		(assign, ":maximum_distance", 100),
		#Target Acquisition
		(agent_ai_get_look_target,":suspect",":agent"),
		(gt,":suspect",0),#Make sure there is someone.
		(agent_is_alive, ":suspect"),
		(agent_is_human, ":suspect"),#Only kick humans
		(agent_is_active, ":suspect"),
		(agent_get_team, ":suspect_team", ":suspect"),
		(neq, ":suspect_team", ":team"),#Friends don't let friends kick friends.
		(agent_get_position, pos1, ":agent"),#Distance check
		(agent_get_position, pos2, ":suspect"),
		(neg|position_is_behind_position, pos2, pos1), #Suspect can't be behind kicker.
		(get_distance_between_positions, ":distance", pos1, pos2),
		(le, ":distance", ":maximum_distance"),
		#Check chance
		(store_random_in_range,":kickchance", 1, 10),
		(try_begin),
			(eq,":kickchance",1), #10% chance per check
				#(display_message, "@Agent kicks."),
				(agent_set_animation, ":agent", "anim_prepare_kick_0"),
				(agent_deliver_damage_to_agent, ":agent", ":suspect", 3),
				(agent_set_animation, ":suspect", "anim_strike3_abdomen_front"),#Get Kicked
			(try_end),
	   (try_end),]),
	   
	   ##AI Kicking end
		
		
		(0.25, 0.0, 4.0,
		[
			(eq, "$sp_shield_bash_ai", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(neq, ":var_2", ":player_agent_no"),
				(agent_is_alive, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_active, ":var_2"), #Test to see if it stops AI from shield bashing (new addition v3)
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(store_skill_level, ":skill_level_shield_troop_id_var_2", "skl_shield", ":troop_id_var_2"),
				(store_proficiency_level, ":proficiency_level_troop_id_var_2_0", ":troop_id_var_2", 0),
				(ge, ":skill_level_shield_troop_id_var_2", 4),
				(ge, ":proficiency_level_troop_id_var_2_0", 200),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(le, ":horse_var_2", 0),
				(try_begin),
					(neg|agent_slot_ge, ":var_2", 50, 1),
					(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
					(agent_get_wielded_item, ":wielded_item_var_2_1", ":var_2", 1),
					(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
					(eq, ":type_wielded_item_var_2_1", 7),
					(agent_get_attack_action, ":attack_action_var_2", ":var_2"),
					(eq, ":attack_action_var_2", 0),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_position, 1, ":var_2"),
					(assign, ":value", -1),
					(assign, ":value_2", 125),
					(try_for_agents, ":var_13"),
						(agent_is_alive, ":var_13"),
						(agent_is_human, ":var_13"),
						(agent_get_position, 2, ":var_13"),
						(neg|position_is_behind_position, 2, 1),
						(agent_get_team, ":team_var_13", ":var_13"),
						(neq, ":team_var_13", ":team_var_2"),
						(try_begin),
							(eq, ":team_var_2", 0),
							(assign, ":value_3", 2),
						(else_try),
							(eq, ":team_var_2", 2),
							(assign, ":value_3", 0),
						(else_try),
							(eq, ":team_var_2", 1),
							(assign, ":value_3", 3),
						(else_try),
							(eq, ":team_var_2", 3),
							(assign, ":value_3", 1),
						(try_end),
						(neq, ":team_var_13", ":value_3"),
						(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
						(le, ":distance_between_positions_1_2", ":value_2"),
						(assign, ":value_2", ":distance_between_positions_1_2"),
						(assign, ":value", ":var_13"),
					(try_end),
					(ge, ":value", 0),
					(agent_get_horse, ":horse_var_2", ":value"),
					(eq, ":horse_var_2", -1),
					(store_random_in_range, ":random_in_range_15_26", 15, 26),
					(agent_set_slot, ":var_2", 50, ":random_in_range_15_26"),
					(agent_set_animation, ":var_2", "anim_shield_bash"),
					(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
					(troop_get_type, ":type_wielded_item_var_2_1", ":troop_id_var_2"),
					(try_begin),
						(eq, ":type_wielded_item_var_2_1", 0),
						(agent_play_sound, ":var_2", "snd_man_yell"),
					(else_try),
						(eq, ":type_wielded_item_var_2_1", 1),
						(agent_play_sound, ":var_2", "snd_woman_yell"),
					(try_end),
					(agent_play_sound, ":value", "snd_wooden_hit_low_armor_high_damage"),
					(agent_get_defend_action, ":attack_action_var_2", ":value"),
					(try_begin),
						(eq, ":attack_action_var_2", 2),
						(neg|position_is_behind_position, 1, 2),
						(agent_get_wielded_item, ":wielded_item_var_2_1", ":value", 1),
						(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
						(eq, ":type_wielded_item_var_2_1", 7),
						(agent_set_animation, ":value", "anim_shield_bash"),
					(else_try),
						(agent_set_animation, ":value", "anim_shield_strike"),
					(try_end),
				(try_end),
				(agent_get_slot, ":var_2_50", ":var_2", 50),
				(val_sub, ":var_2_50", 1),
				(val_max, ":var_2_50", 0),
				(agent_set_slot, ":var_2", 50, ":var_2_50"),
			(try_end)
		])
	] + crouching_triggers ),

	("ai_training", 0, -1,
	"You start training.",
	[(0, 0, 0, aif_start_alarmed, 30, [])],
	[
		(-21.0, 0.0, 0.0,
		[],

		[
			(finish_mission, 0)
		]),

		(0.0, 0.0, 0.0,
		[],

		[
			(game_key_clicked, 22),
			(neg|is_presentation_active, "prsnt_battle"),
			(start_presentation, "prsnt_battle")
		]),

		(0.1, 0.0, 0.0,
		[],

		[
			(is_presentation_active, "prsnt_battle"),
			(call_script, "script_update_order_panel_statistics_and_map")
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_set_matching_sexy_boots", ":trigger_param_1")
		]),

			(0.0, 0.0, 0.0,
		[
			(eq, "$sp_shield_bash", 1),
			(game_key_is_down, 7),
			(game_key_clicked, 6),
			(neg|main_hero_fallen),
		],

		[
		(call_script, "script_shield_bash"),
		]),

			##AI kicking begin
		   (2, 0, 3, #AI kicking
       [], [
	(get_player_agent_no,":player"),
	(try_for_agents, ":agent"),
		(neq, ":agent", ":player"),
		(agent_is_alive, ":agent"),
		(neq, ":agent", -1),
		(agent_is_human, ":agent"),#Only humans can kick....FOR NOW
		(agent_is_active, ":agent"),
		(agent_slot_eq, ":agent", slot_agent_is_running_away, 0),#Isn't fleeing the battle.
		##He's an eligible human.  Now see if he's in a position to kick.
		(agent_get_attack_action, ":attack_action", ":agent"), #returned values: free = 0, readying_attack = 1, releasing_attack = 2, completing_attack_after_hit = 3, attack_parried = 4, reloading = 5, after_release = 6, cancelling_attack = 7
		(agent_get_defend_action, ":defend_action", ":agent"),#
		(this_or_next|eq,":attack_action",4),#Just got parried
		(this_or_next|eq,":defend_action",1),#Parrying an enemy
		##So he'll only try to kick if he just parried an enemy attack, or his own attack just got parried.
		(agent_get_team, ":team", ":agent"),
		(assign, ":maximum_distance", 100),
		#Target Acquisition
		(agent_ai_get_look_target,":suspect",":agent"),
		(gt,":suspect",0),#Make sure there is someone.
		(agent_is_alive, ":suspect"),
		(agent_is_human, ":suspect"),#Only kick humans
		(agent_is_active, ":suspect"),
		(agent_get_team, ":suspect_team", ":suspect"),
		(neq, ":suspect_team", ":team"),#Friends don't let friends kick friends.
		(agent_get_position, pos1, ":agent"),#Distance check
		(agent_get_position, pos2, ":suspect"),
		(neg|position_is_behind_position, pos2, pos1), #Suspect can't be behind kicker.
		(get_distance_between_positions, ":distance", pos1, pos2),
		(le, ":distance", ":maximum_distance"),
		#Check chance
		(store_random_in_range,":kickchance", 1, 10),
		(try_begin),
			(eq,":kickchance",1), #10% chance per check
				#(display_message, "@Agent kicks."),
				(agent_set_animation, ":agent", "anim_prepare_kick_0"),
				(agent_deliver_damage_to_agent, ":agent", ":suspect", 3),
				(agent_set_animation, ":suspect", "anim_strike3_abdomen_front"),#Get Kicked
			(try_end),
	   (try_end),]),
	   
	   ##AI Kicking end
		
		
		(0.25, 0.0, 4.0,
		[
			(eq, "$sp_shield_bash_ai", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(neq, ":var_2", ":player_agent_no"),
				(agent_is_alive, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_active, ":var_2"), #Test to see if it stops AI from shield bashing (new addition v3)
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(store_skill_level, ":skill_level_shield_troop_id_var_2", "skl_shield", ":troop_id_var_2"),
				(store_proficiency_level, ":proficiency_level_troop_id_var_2_0", ":troop_id_var_2", 0),
				(ge, ":skill_level_shield_troop_id_var_2", 4),
				(ge, ":proficiency_level_troop_id_var_2_0", 200),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(le, ":horse_var_2", 0),
				(try_begin),
					(neg|agent_slot_ge, ":var_2", 50, 1),
					(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
					(agent_get_wielded_item, ":wielded_item_var_2_1", ":var_2", 1),
					(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
					(eq, ":type_wielded_item_var_2_1", 7),
					(agent_get_attack_action, ":attack_action_var_2", ":var_2"),
					(eq, ":attack_action_var_2", 0),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_position, 1, ":var_2"),
					(assign, ":value", -1),
					(assign, ":value_2", 125),
					(try_for_agents, ":var_13"),
						(agent_is_alive, ":var_13"),
						(agent_is_human, ":var_13"),
						(agent_get_position, 2, ":var_13"),
						(neg|position_is_behind_position, 2, 1),
						(agent_get_team, ":team_var_13", ":var_13"),
						(neq, ":team_var_13", ":team_var_2"),
						(try_begin),
							(eq, ":team_var_2", 0),
							(assign, ":value_3", 2),
						(else_try),
							(eq, ":team_var_2", 2),
							(assign, ":value_3", 0),
						(else_try),
							(eq, ":team_var_2", 1),
							(assign, ":value_3", 3),
						(else_try),
							(eq, ":team_var_2", 3),
							(assign, ":value_3", 1),
						(try_end),
						(neq, ":team_var_13", ":value_3"),
						(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
						(le, ":distance_between_positions_1_2", ":value_2"),
						(assign, ":value_2", ":distance_between_positions_1_2"),
						(assign, ":value", ":var_13"),
					(try_end),
					(ge, ":value", 0),
					(agent_get_horse, ":horse_var_2", ":value"),
					(eq, ":horse_var_2", -1),
					(store_random_in_range, ":random_in_range_15_26", 15, 26),
					(agent_set_slot, ":var_2", 50, ":random_in_range_15_26"),
					(agent_set_animation, ":var_2", "anim_shield_bash"),
					(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
					(troop_get_type, ":type_wielded_item_var_2_1", ":troop_id_var_2"),
					(try_begin),
						(eq, ":type_wielded_item_var_2_1", 0),
						(agent_play_sound, ":var_2", "snd_man_yell"),
					(else_try),
						(eq, ":type_wielded_item_var_2_1", 1),
						(agent_play_sound, ":var_2", "snd_woman_yell"),
					(try_end),
					(agent_play_sound, ":value", "snd_wooden_hit_low_armor_high_damage"),
					(agent_get_defend_action, ":attack_action_var_2", ":value"),
					(try_begin),
						(eq, ":attack_action_var_2", 2),
						(neg|position_is_behind_position, 1, 2),
						(agent_get_wielded_item, ":wielded_item_var_2_1", ":value", 1),
						(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
						(eq, ":type_wielded_item_var_2_1", 7),
						(agent_set_animation, ":value", "anim_shield_bash"),
					(else_try),
						(agent_set_animation, ":value", "anim_shield_strike"),
					(try_end),
				(try_end),
				(agent_get_slot, ":var_2_50", ":var_2", 50),
				(val_sub, ":var_2_50", 1),
				(val_max, ":var_2_50", 0),
				(agent_set_slot, ":var_2", 50, ":var_2_50"),
			(try_end)
		])
	] ),

	("camera_test", 0, -1,
	"camera Test.",
	[],
	[
		(1.0, 0.0, 0.0,
		[
			(mission_cam_set_mode, 1),
			(entry_point_get_position, 3, 3),
			(mission_cam_set_position, 3)
		],

		[]),

		(-21.0, 0.0, 0.0,
		[],

		[
			(finish_mission, 0)
		])
	] + crouching_triggers ),

	("arena_melee_fight", mtf_arena_fight|mtf_team_fight, -1,
	"You enter a melee fight in the arena.",
	[(0, mtef_visitor_source|mtef_team_0, af_override_all, aif_start_alarmed, 1, [itm_practice_bow, itm_practice_arrows, itm_practice_horse]),
	(1, mtef_visitor_source|mtef_team_0, af_override_all, aif_start_alarmed, 1, [itm_heavy_practice_sword]),
	(2, mtef_visitor_source|mtef_team_0, af_override_all, aif_start_alarmed, 1, [itm_heavy_practice_sword, itm_practice_horse]),
	(3, mtef_visitor_source|mtef_team_0, af_override_all, aif_start_alarmed, 1, [itm_practice_lance, itm_practice_shield, itm_practice_horse]),
	(4, mtef_visitor_source|mtef_team_0, af_override_all, aif_start_alarmed, 1, [itm_practice_bow, itm_practice_arrows, itm_practice_dagger]),
	(5, mtef_visitor_source|mtef_team_0, af_override_all, aif_start_alarmed, 1, [itm_practice_sword, itm_practice_shield]),
	(6, mtef_visitor_source|mtef_team_0, af_override_all, aif_start_alarmed, 1, [itm_heavy_practice_sword, itm_practice_horse]),
	(7, mtef_visitor_source|mtef_team_0, af_override_all, aif_start_alarmed, 1, [itm_practice_lance, itm_practice_shield, itm_practice_horse]),
	(8, mtef_visitor_source|mtef_team_1, af_override_all, aif_start_alarmed, 1, [itm_practice_bow, itm_practice_arrows, itm_practice_dagger]),
	(9, mtef_visitor_source|mtef_team_1, af_override_all, aif_start_alarmed, 1, [itm_practice_lance, itm_practice_shield, itm_practice_horse]),
	(10, mtef_visitor_source|mtef_team_1, af_override_all, aif_start_alarmed, 1, [itm_heavy_practice_sword]),
	(11, mtef_visitor_source|mtef_team_1, af_override_all, aif_start_alarmed, 1, [itm_practice_sword, itm_practice_shield]),
	(12, mtef_visitor_source|mtef_team_1, af_override_all, aif_start_alarmed, 1, [itm_practice_bow, itm_practice_arrows, itm_practice_horse]),
	(13, mtef_visitor_source|mtef_team_1, af_override_all, aif_start_alarmed, 1, [itm_practice_lance, itm_practice_shield, itm_practice_horse]),
	(14, mtef_visitor_source|mtef_team_1, af_override_all, aif_start_alarmed, 1, [itm_heavy_practice_sword]),
	(15, mtef_visitor_source|mtef_team_1, af_override_all, aif_start_alarmed, 1, [itm_practice_sword, itm_practice_shield]),
	(16, mtef_visitor_source|mtef_team_2, af_override_all, aif_start_alarmed, 1, [itm_practice_bow, itm_practice_arrows, itm_practice_horse]),
	(17, mtef_visitor_source|mtef_team_2, af_override_all, aif_start_alarmed, 1, [itm_heavy_practice_sword]),
	(18, mtef_visitor_source|mtef_team_2, af_override_all, aif_start_alarmed, 1, [itm_heavy_practice_sword, itm_practice_horse]),
	(19, mtef_visitor_source|mtef_team_2, af_override_all, aif_start_alarmed, 1, [itm_practice_lance, itm_practice_shield, itm_practice_horse]),
	(20, mtef_visitor_source|mtef_team_2, af_override_all, aif_start_alarmed, 1, [itm_practice_bow, itm_practice_arrows, itm_practice_dagger]),
	(21, mtef_visitor_source|mtef_team_2, af_override_all, aif_start_alarmed, 1, [itm_practice_sword, itm_practice_shield]),
	(22, mtef_visitor_source|mtef_team_2, af_override_all, aif_start_alarmed, 1, [itm_heavy_practice_sword, itm_practice_horse]),
	(23, mtef_visitor_source|mtef_team_2, af_override_all, aif_start_alarmed, 1, [itm_practice_lance, itm_practice_shield, itm_practice_horse]),
	(24, mtef_visitor_source|mtef_team_3, af_override_all, aif_start_alarmed, 1, [itm_practice_bow, itm_practice_arrows, itm_practice_horse]),
	(25, mtef_visitor_source|mtef_team_3, af_override_all, aif_start_alarmed, 1, [itm_heavy_practice_sword]),
	(26, mtef_visitor_source|mtef_team_3, af_override_all, aif_start_alarmed, 1, [itm_heavy_practice_sword, itm_practice_horse]),
	(27, mtef_visitor_source|mtef_team_3, af_override_all, aif_start_alarmed, 1, [itm_practice_lance, itm_practice_shield, itm_practice_horse]),
	(28, mtef_visitor_source|mtef_team_3, af_override_all, aif_start_alarmed, 1, [itm_practice_bow, itm_practice_arrows, itm_practice_dagger]),
	(29, mtef_visitor_source|mtef_team_3, af_override_all, aif_start_alarmed, 1, [itm_practice_sword, itm_practice_shield]),
	(30, mtef_visitor_source|mtef_team_3, af_override_all, aif_start_alarmed, 1, [itm_heavy_practice_sword, itm_practice_horse]),
	(31, mtef_visitor_source|mtef_team_3, af_override_all, aif_start_alarmed, 1, [itm_practice_lance, itm_practice_shield, itm_practice_horse]),
	(32, mtef_visitor_source|mtef_team_1, af_override_all, aif_start_alarmed, 1, [itm_heavy_practice_sword]),
	(33, mtef_visitor_source|mtef_team_2, af_override_all, aif_start_alarmed, 1, [itm_practice_staff]),
	(34, mtef_visitor_source|mtef_team_3, af_override_all, aif_start_alarmed, 1, [itm_practice_sword, itm_practice_shield]),
	(35, mtef_visitor_source|mtef_team_4, af_override_all, aif_start_alarmed, 1, [itm_practice_staff]),
	(36, mtef_visitor_source|mtef_team_1, af_override_all, aif_start_alarmed, 1, [itm_practice_bow, itm_practice_arrows, itm_practice_dagger]),
	(37, mtef_visitor_source|mtef_team_2, af_override_all, aif_start_alarmed, 1, [itm_practice_sword, itm_practice_shield]),
	(38, mtef_visitor_source|mtef_team_3, af_override_all, aif_start_alarmed, 1, [itm_heavy_practice_sword]),
	(39, mtef_visitor_source|mtef_team_4, af_override_all, aif_start_alarmed, 1, [itm_practice_staff]),
	(24, mtef_visitor_source|mtef_team_3, af_override_all, aif_start_alarmed, 1, [itm_practice_bow, itm_practice_arrows, itm_practice_horse]),
	(24, mtef_visitor_source|mtef_team_3, af_override_all, aif_start_alarmed, 1, [itm_heavy_practice_sword]),
	(24, mtef_visitor_source|mtef_team_3, af_override_all, aif_start_alarmed, 1, [itm_heavy_practice_sword, itm_practice_horse]),
	(24, mtef_visitor_source|mtef_team_3, af_override_all, aif_start_alarmed, 1, [itm_practice_lance, itm_practice_shield, itm_practice_horse]),
	(24, mtef_visitor_source|mtef_team_3, af_override_all, aif_start_alarmed, 1, [itm_practice_bow, itm_practice_arrows, itm_practice_dagger]),
	(24, mtef_visitor_source|mtef_team_3, af_override_all, aif_start_alarmed, 1, [itm_practice_sword, itm_practice_shield]),
	(24, mtef_visitor_source|mtef_team_3, af_override_all, aif_start_alarmed, 1, [itm_heavy_practice_sword, itm_practice_horse]),
	(24, mtef_visitor_source|mtef_team_3, af_override_all, aif_start_alarmed, 1, [itm_practice_lance, itm_practice_shield, itm_practice_horse]),
	(24, mtef_visitor_source|mtef_team_3, af_override_all, aif_start_alarmed, 1, [itm_practice_bow, itm_practice_arrows, itm_practice_horse]),
	(24, mtef_visitor_source|mtef_team_3, af_override_all, aif_start_alarmed, 1, [itm_practice_bow, itm_practice_arrows, itm_practice_horse]),
	(50, mtef_scene_source, af_override_weapons|af_override_head|af_override_horse, 0, 1, []),
	(51, mtef_visitor_source, af_override_weapons|af_override_head|af_override_horse, 0, 1, []),
	(52, mtef_visitor_source, af_override_horse, 0, 1, []),
	(53, mtef_scene_source, af_override_horse, 0, 1, []),
	(54, mtef_scene_source, af_override_horse, 0, 1, []),
	(55, mtef_scene_source, af_override_horse, 0, 1, []),
	(56, mtef_visitor_source|mtef_team_0, af_override_all, aif_start_alarmed, 1, [itm_practice_sword, itm_practice_shield, itm_padded_cloth, itm_footman_helmet]),
	(57, mtef_visitor_source|mtef_team_0, af_override_all, aif_start_alarmed, 1, [itm_practice_sword, itm_practice_shield, itm_padded_cloth, itm_footman_helmet])],
	[
		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(call_script, "script_troop_agent_set_banner", "tableau_game_troop_label_banner", ":trigger_param_1", ":troop_id_trigger_param_1")
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_change_banners_and_chest"),
			(assign, "$g_arena_training_num_agents_spawned", 0)
		]),

		(-22.0, 0.0, 0.0,
		[
			(display_message, "str_cant_use_inventory_arena")
		],

		[]),

		(-21.0, 0.0, 0.0,
		[],

		[
			(try_begin),
				(eq, "$g_mt_mode", 2),
				(set_trigger_result, 1),
			(else_try),
				(question_box, "str_give_up_fight"),
			(try_end)
		]),

		(-8.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(eq, ":trigger_param_1", 0),
			(try_begin),
				(eq, "$g_mt_mode", 3),
				(call_script, "script_end_tournament_fight_new", 0),
			(else_try),
				(eq, "$g_mt_mode", 1),
				(get_player_agent_no, ":player_agent_no"),
				(agent_get_kill_count, "$g_arena_training_kills", ":player_agent_no", 1),
			(try_end),
			(finish_mission, 0)
		]),

		(1.0, 0.0, ti_once,
		[],

		[
			(eq, "$g_mt_mode", 2),
			(call_script, "script_music_set_situation_with_culture", 65536),
			(store_current_scene, reg1),
			(scene_set_slot, reg1, slot_scene_visited, 1),
			(mission_enable_talk),
			(get_player_agent_no, ":player_agent_no"),
			(assign, ":value", 0),
			(try_for_agents, ":var_3"),
				(neq, ":var_3", ":player_agent_no"),
				(agent_get_troop_id, ":troop_id_var_3", ":var_3"),
				(is_between, ":troop_id_var_3", "trp_novice_fighter", "trp_tournament_master"),
				(eq, ":value", 0),
				(agent_set_team, ":var_3", 1),
				(assign, ":value", 1),
			(try_end)
		]),

		(0.0, 0.0, ti_once,
		[],

		[
			(eq, "$g_mt_mode", 3),
			(play_sound, "snd_arena_ambiance", 2),
			(call_script, "script_music_set_situation_with_culture", 131072)
		]),

		(1.0, 4.0, ti_once,
		[
			(eq, "$g_mt_mode", 3),
			(num_active_teams_le, 1)
		],

		[
			(try_begin),
				(get_player_agent_no, ":player_agent_no"),
				(agent_get_team, ":team_player_agent_no", ":player_agent_no"),
				(assign, ":value", 0),
				(try_for_agents, ":var_4"),
					(agent_is_alive, ":var_4"),
					(agent_is_human, ":var_4"),
					(agent_get_team, ":team_var_4", ":var_4"),
					(eq, ":team_var_4", ":team_player_agent_no"),
					(assign, ":value", 1),
				(try_end),
				(eq, ":value", 1),
				(call_script, "script_end_tournament_fight_new", 1),
				(call_script, "script_play_victorious_sound"),
				(finish_mission),
			(else_try),
				(call_script, "script_end_tournament_fight_new", 0),
				(finish_mission),
			(try_end)
		]),

		(-24.0, 0.0, 0.0,
		[],

		[
			(eq, "$g_mt_mode", 1),
			(start_presentation, "prsnt_arena_training")
		]),

		(0.0, 0.0, ti_once,
		[],

		[
			(eq, "$g_mt_mode", 1),
			(assign, "$g_arena_training_max_opponents", 40),
			(assign, "$g_arena_training_num_agents_spawned", 0),
			(assign, "$g_arena_training_kills", 0),
			(assign, "$g_arena_training_won", 0),
			(call_script, "script_music_set_situation_with_culture", 131072)
		]),

		(1.0, 4.0, ti_once,
		[
			(eq, "$g_mt_mode", 1),
			(store_mission_timer_a, ":mission_timer_a"),
			(gt, ":mission_timer_a", 3),
			(assign, ":value", 0),
			(try_begin),
				(ge, "$g_arena_training_num_agents_spawned", "$g_arena_training_max_opponents"),
				(num_active_teams_le, 1),
				(assign, ":value", 1),
			(try_end),
			(this_or_next|eq, ":value", 1),
			(main_hero_fallen)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_kill_count, "$g_arena_training_kills", ":player_agent_no", 1),
			(assign, "$g_arena_training_won", 0),
			(try_begin),
				(neg|main_hero_fallen),
				(assign, "$g_arena_training_won", 1),
			(try_end),
			(assign, "$g_mt_mode", 2),
			(set_jump_mission, "mt_arena_melee_fight"),
			(party_get_slot, ":current_town_town_arena", "$current_town", slot_town_arena),
			(modify_visitors_at_site, ":current_town_town_arena"),
			(reset_visitors),
			(set_visitor, 35, "trp_veteran_fighter"),
			(set_visitor, 36, "trp_euro_horse_4"),
			(party_get_slot, ":current_town_600", "$current_town", 600),
			(set_visitor, 52, ":current_town_600"),
			(set_jump_entry, 50),
			(jump_to_scene, ":current_town_town_arena")
		]),

		(0.2, 0.0, 0.0,
		[
			(eq, "$g_mt_mode", 1),
			(assign, ":var_1", 0),
			(try_for_agents, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_alive, ":var_2"),
				(agent_get_team, ":team_var_2", ":var_2"),
				(is_between, ":team_var_2", 0, 7),
				(val_add, ":var_1", 1),
			(try_end),
			(lt, ":var_1", 7),
			(neg|main_hero_fallen),
			(store_mission_timer_a, ":mission_timer_a"),
			(this_or_next|ge, ":mission_timer_a", "$g_arena_training_next_spawn_time"),
			(this_or_next|lt, "$g_arena_training_num_agents_spawned", 6),
			(num_active_teams_le, 1),
			(lt, "$g_arena_training_num_agents_spawned", "$g_arena_training_max_opponents")
		],

		[
			(assign, ":value", "$g_arena_training_num_agents_spawned"),
			(store_div, ":value", "$g_arena_training_num_agents_spawned", 6),
			(assign, ":var_2", "$g_arena_training_num_agents_spawned"),
			(val_mod, ":var_2", 6),
			(val_add, ":value", ":var_2"),
			(val_min, ":value", 9),
			(val_add, ":value", "trp_arena_training_fighter_1"),
			(assign, ":value_2", 10000),
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_position, 5, ":player_agent_no"),
			(try_for_range, ":unused", 0, ":value_2"),
				(store_random_in_range, ":random_in_range_32_40", 32, 40),
				(neq, ":random_in_range_32_40", "$g_player_entry_point"),
				(entry_point_get_position, 1, ":random_in_range_32_40"),
				(get_distance_between_positions, ":distance_between_positions_5_1", 5, 1),
				(gt, ":distance_between_positions_5_1", 1200),
				(assign, ":value_2", 0),
			(try_end),
			(add_visitors_to_current_scene, ":random_in_range_32_40", ":value", 1),
			(store_add, ":value_3", "$g_arena_training_num_agents_spawned", 1),
			(store_mission_timer_a, ":mission_timer_a"),
			(store_add, "$g_arena_training_next_spawn_time", ":mission_timer_a", 14),
			(store_div, ":value_4", ":value_3", 3),
			(val_sub, "$g_arena_training_next_spawn_time", ":value_4")
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$g_mt_mode", 1)
		],

		[
			(assign, ":var_1", 6),
			(val_max, ":var_1", 1),
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_3"),
				(agent_is_human, ":var_3"),
				(agent_is_alive, ":var_3"),
				(agent_slot_eq, ":var_3", slot_agent_arena_team_set, 0),
				(agent_get_team, ":team_var_3", ":var_3"),
				(is_between, ":team_var_3", 0, 7),
				(try_begin),
					(eq, ":var_3", ":player_agent_no"),
					(agent_set_team, ":var_3", 6),
				(else_try),
					(store_random_in_range, ":random_in_range_0_var_1", 0, ":var_1"),
					(try_for_range, ":number", 0, 6),
						(troop_set_slot, "trp_temp_array_a", ":number", 0),
					(try_end),
					(try_for_agents, ":var_7"),
						(agent_is_human, ":var_7"),
						(agent_is_alive, ":var_7"),
						(neq, ":var_3", ":player_agent_no"),
						(agent_slot_eq, ":var_7", slot_agent_arena_team_set, 1),
						(agent_get_team, ":team_var_7", ":var_7"),
						(troop_get_slot, ":temp_array_a_team_var_7", "trp_temp_array_a", ":team_var_7"),
						(val_add, ":temp_array_a_team_var_7", 1),
						(troop_set_slot, "trp_temp_array_a", ":team_var_7", ":temp_array_a_team_var_7"),
					(try_end),
					(assign, ":value", 0),
					(troop_get_slot, ":temp_array_a_relations_begin", "trp_temp_array_a", slot_troop_relations_begin),
					(try_for_range, ":number", 1, 6),
						(troop_slot_ge, "trp_temp_array_a", ":number", ":temp_array_a_relations_begin"),
						(troop_get_slot, ":temp_array_a_relations_begin", "trp_temp_array_a", ":number"),
						(assign, ":value", ":number"),
					(try_end),
					(store_random_in_range, ":random_in_range_5_100", 5, 100),
					(try_begin),
						(lt, ":random_in_range_5_100", "$g_arena_training_num_agents_spawned"),
						(assign, ":random_in_range_0_var_1", ":value"),
					(try_end),
					(agent_set_team, ":var_3", ":random_in_range_0_var_1"),
				(try_end),
				(agent_set_slot, ":var_3", slot_agent_arena_team_set, 1),
				(try_begin),
					(neq, ":var_3", ":player_agent_no"),
					(val_add, "$g_arena_training_num_agents_spawned", 1),
				(try_end),
			(try_end)
		]),

		(-28.0, 0.3, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(store_trigger_param_2, ":trigger_param_2"),
			(store_trigger_param_3, ":trigger_param_3"),
			(assign, ":var_4", reg0),
			(agent_is_human, ":trigger_param_1"),
			(agent_is_alive, ":trigger_param_1"), #this addition
			(agent_is_active, ":trigger_param_1"), #This addition, i disabled tihs whole mission template to fix the bug too.
			(get_player_agent_no, ":player_agent_no"),
			(try_begin),
				(eq, "$tom_weapon_break", 1),
				(eq, ":trigger_param_1", ":player_agent_no"),
				(store_random_in_range, ":random_in_range_0_1000", 0, 1000),
				(eq, ":random_in_range_0_1000", 1),
				(store_random_in_range, ":random_in_range_4_8", 4, 8),
				(troop_get_inventory_slot, ":inventory_slot_player_random_in_range_4_8", "trp_player", ":random_in_range_4_8"),
				(gt, ":inventory_slot_player_random_in_range_4_8", 0),
				(str_store_item_name, 20, ":inventory_slot_player_random_in_range_4_8"),
				(troop_get_inventory_slot_modifier, ":inventory_slot_modifier_player_random_in_range_4_8", "trp_player", ":random_in_range_4_8"),
				(try_begin),
					(eq, ":inventory_slot_modifier_player_random_in_range_4_8", 6),
					(display_message, "@Your {s20} is too crappy to fall apart!", 0x00ff0000),
				(else_try),
					(troop_add_item, "trp_broken_items", ":inventory_slot_player_random_in_range_4_8", ":inventory_slot_modifier_player_random_in_range_4_8"),
					(troop_set_inventory_slot_modifier, "trp_player", ":random_in_range_4_8", 6),
					(display_message, "@Your {s20} cracks!", 0x00ff0000),
				(try_end),
			(try_end),
			(try_begin),
				(eq, "$tom_weapon_break", 1),
				(eq, ":trigger_param_2", ":player_agent_no"),
				(is_between, ":var_4", 1, "itm_cross_end"), #Previously itm_items_end
				(neg|is_between, ":var_4", "itm_light_lance", "itm_wooden_shield"),
				(item_get_type, ":type_var_4", ":var_4"),
				(ge, ":trigger_param_3", 10),
				(neq, ":type_var_4", 10),
				(neq, ":type_var_4", 8),
				(neq, ":type_var_4", 9),
				(neq, ":type_var_4", 5),
				(neq, ":type_var_4", 6),
				(store_random_in_range, ":random_in_range_0_1000", 0, 600),
				(eq, ":random_in_range_0_1000", 1),
				(assign, ":value", -1),
				(try_for_range, ":random_in_range_4_8", 0, 4),
					(troop_get_inventory_slot, ":inventory_slot_player_random_in_range_4_8_2", "trp_player", ":random_in_range_4_8"),
					(eq, ":inventory_slot_player_random_in_range_4_8_2", ":var_4"),
					(assign, ":value", ":random_in_range_4_8"),
				(try_end),
				(gt, ":value", 0),
				(str_store_item_name, 20, ":var_4"),
				(troop_get_inventory_slot_modifier, ":inventory_slot_modifier_player_random_in_range_4_8", "trp_player", ":value"),
				(try_begin),
					(eq, ":inventory_slot_modifier_player_random_in_range_4_8", 6),
					(display_message, "@Your {s20} falls apart!", 0x00ff0000),
					(agent_unequip_item, ":player_agent_no", ":var_4"),
					(troop_remove_item, "trp_player", ":var_4"),
					(troop_remove_item, "trp_broken_items", ":var_4"),
				(else_try),
					(troop_add_item, "trp_broken_items", ":var_4", ":inventory_slot_modifier_player_random_in_range_4_8"),
					(troop_set_inventory_slot_modifier, "trp_player", ":value", 6),
					(display_message, "@Your {s20} cracks!", 0x00ff0000),
				(try_end),
			(try_end),
			(agent_get_horse, ":horse_trigger_param_2", ":trigger_param_2"),
			(try_begin),
				(eq, "$tom_lance_breaking", 1),
				(gt, ":horse_trigger_param_2", 0),
				(this_or_next|is_between, ":var_4", "itm_light_lance", "itm_spear_a"), #Updated item slots
				(is_between, ":var_4", "itm_lance_banner_jer", "itm_pike_banner_teu"), #Updated item slots
				(ge, ":trigger_param_3", 50),
				(store_random_in_range, ":random_in_range_0_100", 0, 100),
				(gt, ":random_in_range_0_100", 20),
				(try_begin),
					(eq, ":trigger_param_2", ":player_agent_no"),
					(display_message, "@You broke your lance!", 0x00ff0000),
				(try_end),
				########Add effects on weapon break *Lances*
        (agent_get_position, pos1, ":trigger_param_2"),
		(agent_play_sound, ":trigger_param_1", "snd_shield_broken"),
		(particle_system_burst, "psys_lanse", pos1, 10),
        (particle_system_burst, "psys_lanse_straw", pos1, 30),
                ####Extend to Lanse_Blood
		#(particle_system_burst, "psys_lanse_blood", pos1, 10),
        #(particle_system_burst, "psys_lanse_blood", pos1, 30),
		        ########End Effects
				(agent_unequip_item, ":trigger_param_2", ":var_4"),
			(else_try),
				(this_or_next|is_between, ":var_4", "itm_bamboo_spear", "itm_wooden_shield"), #Updated item slots
				(is_between, ":var_4", "itm_pike_banner_teu", "itm_items_end"), #Updated item slots
				(le, ":horse_trigger_param_2", 0),
				(ge, ":trigger_param_3", 8),
				(store_random_in_range, ":random_in_range_0_100", 0, 100),
				(ge, ":random_in_range_0_100", 90),
				(try_begin),
					(eq, ":trigger_param_2", ":player_agent_no"),
					(display_message, "@You broke your spear!", 0x00ff0000),
				(try_end),
				########Add effects on weapon break *Spears*
        (agent_get_position, pos1, ":trigger_param_2"),
		(agent_play_sound, ":trigger_param_1", "snd_shield_broken"),
		(store_random_in_range, ":psys_to_use", "psys_lanse", "psys_lanse_blood"),
		(particle_system_burst, ":psys_to_use", pos1, 7), #Default = 10 (Higher = Bigger Particles)
        (particle_system_burst, ":psys_to_use", pos1, 21), #Default = 30 (Higher = Bigger Particles)
                ####Extend to Lanse_Blood
		#(particle_system_burst, "psys_lanse_blood", pos1, 10),
        #(particle_system_burst, "psys_lanse_blood", pos1, 30),
		        ########End Effects
				(agent_unequip_item, ":trigger_param_2", ":var_4"),
			(try_end),
			###Envfix weapon breaking patch start here
		]),

		(0.0, 0.0, 5.0,
		[],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_non_player, ":var_2"), #Agent must not be a player V1.0998D2
				(neq, ":player_agent_no", ":var_2"),
				(agent_slot_eq, ":var_2", 100, 0),
				(agent_is_alive, ":var_2"),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(agent_get_ammo, ":ammo_var_2", ":var_2"),
				(le, ":ammo_var_2", 0),
				(try_begin),
					(gt, ":horse_var_2", 0),
					(neg|troop_is_guarantee_ranged, ":troop_id_var_2"),
					(agent_get_wielded_item, ":wielded_item_var_2_0", ":var_2", 0),
					(neg|is_between, ":wielded_item_var_2_0", "itm_light_lance", "itm_spear_a"),
					(try_for_range, ":item", "itm_light_lance", "itm_spear_a"),
						(agent_set_wielded_item, ":var_2", ":item"),
					(try_end),
				(else_try),
					(eq, "$tom_use_banners", 1),
					(try_for_range, ":item", 1198, 1202),
						(agent_set_wielded_item, ":var_2", ":item"),
					(try_end),
					(agent_get_wielded_item, ":item", ":var_2", 0),
					(is_between, ":item", 1198, 1202),
				(else_try),
					(neg|troop_is_guarantee_ranged, ":troop_id_var_2"),
					(le, ":horse_var_2", 0),
					(agent_get_wielded_item, ":wielded_item_var_2_0", ":var_2", 0),
					(is_between, ":wielded_item_var_2_0", "itm_light_lance", "itm_spear_a"),
					(try_for_range, reg0, 0, 4),
						(agent_get_item_slot, ":item", ":var_2", reg0),
						(is_between, ":item", 1, "itm_cross_end"), #Previously itm_items_end
						(neg|is_between, ":item", "itm_light_lance", "itm_bamboo_spear"),
						(item_get_type, ":type_item", ":item"),
						(this_or_next|eq, ":type_item", 3),
						(this_or_next|eq, ":type_item", 4),
						(eq, ":type_item", 2),
						(agent_set_wielded_item, ":var_2", ":item"),
					(try_end),
				(else_try),
					(neg|troop_is_guarantee_ranged, ":troop_id_var_2"),
					(le, ":horse_var_2", 0),
					(agent_get_wielded_item, ":wielded_item_var_2_0", ":var_2", 0),
					(neg|is_between, ":wielded_item_var_2_0", "itm_bamboo_spear", "itm_wooden_shield"),
					(try_for_range, ":item", "itm_bamboo_spear", "itm_wooden_shield"),
						(agent_set_wielded_item, ":var_2", ":item"),
					(try_end),
				(else_try),
					(troop_is_guarantee_ranged, ":troop_id_var_2"),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_division, ":division_var_2", ":var_2"),
					(team_get_hold_fire_order, ":hold_fire_order_team_var_2_division_var_2", ":team_var_2", ":division_var_2"),
					(neq, ":hold_fire_order_team_var_2_division_var_2", 1),
					(is_between, ":wielded_item_var_2_0", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_0", ":wielded_item_var_2_0"),
					(this_or_next|le, ":wielded_item_var_2_0", -1),
					(this_or_next|neq, ":type_wielded_item_var_2_0", 10),
					(this_or_next|neq, ":type_wielded_item_var_2_0", 9),
					(neq, ":type_wielded_item_var_2_0", 8),
					(call_script, "script_get_closest_enemy_distance_new", ":var_2", ":team_var_2", 300),
					(assign, ":var_13", reg1),
					(gt, ":var_13", 300),
					(assign, ":value", 4),
					(try_for_range, reg0, 0, ":value"),
						(agent_get_item_slot, ":item_slot_var_2_reg0", ":var_2", reg0),
						(is_between, ":item_slot_var_2_reg0", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_0", ":item_slot_var_2_reg0"),
						(this_or_next|eq, ":type_wielded_item_var_2_0", 10),
						(this_or_next|eq, ":type_wielded_item_var_2_0", 8),
						(eq, ":type_wielded_item_var_2_0", 9),
						(agent_set_wielded_item, ":var_2", ":item_slot_var_2_reg0"),
						(assign, ":value", -1),
					(try_end),
				(try_end),
			(try_end)
		])
	] + crouching_triggers ),

	("arena_challenge_fight", mtf_arena_fight|mtf_team_fight|mtf_commit_casualties, -1,
	"You enter a melee fight in the arena.",
	[(56, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(58, mtef_visitor_source|mtef_team_2, 0, aif_start_alarmed, 1, [])],
	[
		(-22.0, 0.0, 0.0,
		[
			(display_message, "str_cant_use_inventory_now")
		],

		[]),

		(-21.0, 0.0, 0.0,
		[
			(display_message, "str_cannot_leave_now")
		],

		[]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_change_banners_and_chest")
		]),

		(0.0, 0.0, ti_once,
		[],

		[
			(call_script, "script_music_set_situation_with_culture", 131072)
		]),

		(1.0, 4.0, ti_once,
		[
			(this_or_next|main_hero_fallen),
			(num_active_teams_le, 1)
		],

		[
			(try_begin),
				(main_hero_fallen),
				(check_quest_active, "qst_duel_for_lady"),
				(quest_slot_eq, "qst_duel_for_lady", slot_quest_target_troop, "$g_duel_troop"),
				(call_script, "script_fail_quest", "qst_duel_for_lady"),
			(else_try),
				(check_quest_active, "qst_duel_for_lady"),
				(quest_slot_eq, "qst_duel_for_lady", slot_quest_target_troop, "$g_duel_troop"),
				(call_script, "script_succeed_quest", "qst_duel_for_lady"),
			(else_try),
				(main_hero_fallen),
				(check_quest_active, "qst_duel_courtship_rival"),
				(quest_slot_eq, "qst_duel_courtship_rival", slot_quest_target_troop, "$g_duel_troop"),
				(call_script, "script_fail_quest", "qst_duel_courtship_rival"),
			(else_try),
				(check_quest_active, "qst_duel_courtship_rival"),
				(quest_slot_eq, "qst_duel_courtship_rival", slot_quest_target_troop, "$g_duel_troop"),
				(call_script, "script_succeed_quest", "qst_duel_courtship_rival"),
			(else_try),
				(main_hero_fallen),
				(check_quest_active, "qst_duel_avenge_insult"),
				(quest_slot_eq, "qst_duel_avenge_insult", slot_quest_target_troop, "$g_duel_troop"),
				(call_script, "script_fail_quest", "qst_duel_avenge_insult"),
			(else_try),
				(check_quest_active, "qst_duel_avenge_insult"),
				(quest_slot_eq, "qst_duel_avenge_insult", slot_quest_target_troop, "$g_duel_troop"),
				(call_script, "script_succeed_quest", "qst_duel_avenge_insult"),
			(else_try),
				(main_hero_fallen),
				(check_quest_active, "qst_denounce_lord"),
				(quest_slot_eq, "qst_denounce_lord", slot_quest_target_troop, "$g_duel_troop"),
				(call_script, "script_fail_quest", "qst_denounce_lord"),
			(else_try),
				(check_quest_active, "qst_denounce_lord"),
				(quest_slot_eq, "qst_denounce_lord", slot_quest_target_troop, "$g_duel_troop"),
				(call_script, "script_succeed_quest", "qst_denounce_lord"),
			(else_try),
				(quest_get_slot, ":denounce_lord_target_troop", "qst_denounce_lord", slot_quest_target_troop),
				(str_store_troop_name, 4, ":denounce_lord_target_troop"),
			(try_end),
			(finish_mission)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_set_matching_sexy_boots", ":trigger_param_1")
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$sp_shield_bash", 1),
			(game_key_is_down, 7),
			(game_key_clicked, 6),
			(neg|main_hero_fallen),
		],

		[
		(call_script, "script_shield_bash"),
		]),

			##AI kicking begin
		   (2, 0, 3, #AI kicking
       [], [
	(get_player_agent_no,":player"),
	(try_for_agents, ":agent"),
		(neq, ":agent", ":player"),
		(agent_is_alive, ":agent"),
		(neq, ":agent", -1),
		(agent_is_human, ":agent"),#Only humans can kick....FOR NOW
		(agent_is_active, ":agent"),
		(agent_slot_eq, ":agent", slot_agent_is_running_away, 0),#Isn't fleeing the battle.
		##He's an eligible human.  Now see if he's in a position to kick.
		(agent_get_attack_action, ":attack_action", ":agent"), #returned values: free = 0, readying_attack = 1, releasing_attack = 2, completing_attack_after_hit = 3, attack_parried = 4, reloading = 5, after_release = 6, cancelling_attack = 7
		(agent_get_defend_action, ":defend_action", ":agent"),#
		(this_or_next|eq,":attack_action",4),#Just got parried
		(this_or_next|eq,":defend_action",1),#Parrying an enemy
		##So he'll only try to kick if he just parried an enemy attack, or his own attack just got parried.
		(agent_get_team, ":team", ":agent"),
		(assign, ":maximum_distance", 100),
		#Target Acquisition
		(agent_ai_get_look_target,":suspect",":agent"),
		(gt,":suspect",0),#Make sure there is someone.
		(agent_is_alive, ":suspect"),
		(agent_is_human, ":suspect"),#Only kick humans
		(agent_is_active, ":suspect"),
		(agent_get_team, ":suspect_team", ":suspect"),
		(neq, ":suspect_team", ":team"),#Friends don't let friends kick friends.
		(agent_get_position, pos1, ":agent"),#Distance check
		(agent_get_position, pos2, ":suspect"),
		(neg|position_is_behind_position, pos2, pos1), #Suspect can't be behind kicker.
		(get_distance_between_positions, ":distance", pos1, pos2),
		(le, ":distance", ":maximum_distance"),
		#Check chance
		(store_random_in_range,":kickchance", 1, 10),
		(try_begin),
			(eq,":kickchance",1), #10% chance per check
				#(display_message, "@Agent kicks."),
				(agent_set_animation, ":agent", "anim_prepare_kick_0"),
				(agent_deliver_damage_to_agent, ":agent", ":suspect", 3),
				(agent_set_animation, ":suspect", "anim_strike3_abdomen_front"),#Get Kicked
			(try_end),
	   (try_end),]),
	   
	   ##AI Kicking end
		
		
		(0.25, 0.0, 4.0,
		[
			(eq, "$sp_shield_bash_ai", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(neq, ":var_2", ":player_agent_no"),
				(agent_is_alive, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_active, ":var_2"), #Test to see if it stops AI from shield bashing (new addition v3)
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(store_skill_level, ":skill_level_shield_troop_id_var_2", "skl_shield", ":troop_id_var_2"),
				(store_proficiency_level, ":proficiency_level_troop_id_var_2_0", ":troop_id_var_2", 0),
				(ge, ":skill_level_shield_troop_id_var_2", 4),
				(ge, ":proficiency_level_troop_id_var_2_0", 200),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(le, ":horse_var_2", 0),
				(try_begin),
					(neg|agent_slot_ge, ":var_2", 50, 1),
					(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
					(agent_get_wielded_item, ":wielded_item_var_2_1", ":var_2", 1),
					(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
					(eq, ":type_wielded_item_var_2_1", 7),
					(agent_get_attack_action, ":attack_action_var_2", ":var_2"),
					(eq, ":attack_action_var_2", 0),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_position, 1, ":var_2"),
					(assign, ":value", -1),
					(assign, ":value_2", 125),
					(try_for_agents, ":var_13"),
						(agent_is_alive, ":var_13"),
						(agent_is_human, ":var_13"),
						(agent_get_position, 2, ":var_13"),
						(neg|position_is_behind_position, 2, 1),
						(agent_get_team, ":team_var_13", ":var_13"),
						(neq, ":team_var_13", ":team_var_2"),
						(try_begin),
							(eq, ":team_var_2", 0),
							(assign, ":value_3", 2),
						(else_try),
							(eq, ":team_var_2", 2),
							(assign, ":value_3", 0),
						(else_try),
							(eq, ":team_var_2", 1),
							(assign, ":value_3", 3),
						(else_try),
							(eq, ":team_var_2", 3),
							(assign, ":value_3", 1),
						(try_end),
						(neq, ":team_var_13", ":value_3"),
						(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
						(le, ":distance_between_positions_1_2", ":value_2"),
						(assign, ":value_2", ":distance_between_positions_1_2"),
						(assign, ":value", ":var_13"),
					(try_end),
					(ge, ":value", 0),
					(agent_get_horse, ":horse_var_2", ":value"),
					(eq, ":horse_var_2", -1),
					(store_random_in_range, ":random_in_range_15_26", 15, 26),
					(agent_set_slot, ":var_2", 50, ":random_in_range_15_26"),
					(agent_set_animation, ":var_2", "anim_shield_bash"),
					(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
					(troop_get_type, ":type_wielded_item_var_2_1", ":troop_id_var_2"),
					(try_begin),
						(eq, ":type_wielded_item_var_2_1", 0),
						(agent_play_sound, ":var_2", "snd_man_yell"),
					(else_try),
						(eq, ":type_wielded_item_var_2_1", 1),
						(agent_play_sound, ":var_2", "snd_woman_yell"),
					(try_end),
					(agent_play_sound, ":value", "snd_wooden_hit_low_armor_high_damage"),
					(agent_get_defend_action, ":attack_action_var_2", ":value"),
					(try_begin),
						(eq, ":attack_action_var_2", 2),
						(neg|position_is_behind_position, 1, 2),
						(agent_get_wielded_item, ":wielded_item_var_2_1", ":value", 1),
						(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
						(eq, ":type_wielded_item_var_2_1", 7),
						(agent_set_animation, ":value", "anim_shield_bash"),
					(else_try),
						(agent_set_animation, ":value", "anim_shield_strike"),
					(try_end),
				(try_end),
				(agent_get_slot, ":var_2_50", ":var_2", 50),
				(val_sub, ":var_2_50", 1),
				(val_max, ":var_2_50", 0),
				(agent_set_slot, ":var_2", 50, ":var_2_50"),
			(try_end)
		])
	] + crouching_triggers ),

	("duel_with_lord", mtf_arena_fight|mtf_team_fight|mtf_commit_casualties, -1,
	"You enter a melee fight in the arena.",
	[(0, mtef_visitor_source|mtef_team_0, af_override_all, aif_start_alarmed, 1, [itm_sword_type_xiiib]),
	(16, mtef_visitor_source|mtef_team_1, af_override_all, aif_start_alarmed, 1, [itm_sword_type_xiiib])],
	[
		(-22.0, 0.0, 0.0,
		[
			(display_message, "str_cant_use_inventory_now")
		],

		[]),

		(-21.0, 0.0, 0.0,
		[
			(display_message, "str_cannot_leave_now")
		],

		[]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_change_banners_and_chest")
		]),

		(0.0, 0.0, ti_once,
		[],

		[
			(call_script, "script_music_set_situation_with_culture", 131072)
		]),

		(1.0, 4.0, ti_once,
		[
			(this_or_next|main_hero_fallen),
			(num_active_teams_le, 1)
		],

		[
			(try_begin),
				(main_hero_fallen),
				(check_quest_active, "qst_duel_for_lady"),
				(quest_slot_eq, "qst_duel_for_lady", slot_quest_target_troop, "$g_duel_troop"),
				(call_script, "script_fail_quest", "qst_duel_for_lady"),
			(else_try),
				(check_quest_active, "qst_duel_for_lady"),
				(quest_slot_eq, "qst_duel_for_lady", slot_quest_target_troop, "$g_duel_troop"),
				(call_script, "script_succeed_quest", "qst_duel_for_lady"),
			(else_try),
				(main_hero_fallen),
				(check_quest_active, "qst_duel_courtship_rival"),
				(quest_slot_eq, "qst_duel_courtship_rival", slot_quest_target_troop, "$g_duel_troop"),
				(call_script, "script_fail_quest", "qst_duel_courtship_rival"),
			(else_try),
				(check_quest_active, "qst_duel_courtship_rival"),
				(quest_slot_eq, "qst_duel_courtship_rival", slot_quest_target_troop, "$g_duel_troop"),
				(call_script, "script_succeed_quest", "qst_duel_courtship_rival"),
			(else_try),
				(main_hero_fallen),
				(check_quest_active, "qst_duel_avenge_insult"),
				(quest_slot_eq, "qst_duel_avenge_insult", slot_quest_target_troop, "$g_duel_troop"),
				(call_script, "script_fail_quest", "qst_duel_avenge_insult"),
			(else_try),
				(check_quest_active, "qst_duel_avenge_insult"),
				(quest_slot_eq, "qst_duel_avenge_insult", slot_quest_target_troop, "$g_duel_troop"),
				(call_script, "script_succeed_quest", "qst_duel_avenge_insult"),
			(else_try),
				(main_hero_fallen),
				(check_quest_active, "qst_denounce_lord"),
				(quest_slot_eq, "qst_denounce_lord", slot_quest_target_troop, "$g_duel_troop"),
				(call_script, "script_fail_quest", "qst_denounce_lord"),
			(else_try),
				(check_quest_active, "qst_denounce_lord"),
				(quest_slot_eq, "qst_denounce_lord", slot_quest_target_troop, "$g_duel_troop"),
				(call_script, "script_succeed_quest", "qst_denounce_lord"),
			(else_try),
				(quest_get_slot, ":denounce_lord_target_troop", "qst_denounce_lord", slot_quest_target_troop),
				(str_store_troop_name, 4, ":denounce_lord_target_troop"),
			(try_end),
			(finish_mission)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_set_matching_sexy_boots", ":trigger_param_1")
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$sp_shield_bash", 1),
			(game_key_is_down, 7),
			(game_key_clicked, 6),
			(neg|main_hero_fallen),
		],

		[
		(call_script, "script_shield_bash"),
		]),

			##AI kicking begin
		   (2, 0, 3, #AI kicking
       [], [
	(get_player_agent_no,":player"),
	(try_for_agents, ":agent"),
		(neq, ":agent", ":player"),
		(agent_is_alive, ":agent"),
		(neq, ":agent", -1),
		(agent_is_human, ":agent"),#Only humans can kick....FOR NOW
		(agent_is_active, ":agent"),
		(agent_slot_eq, ":agent", slot_agent_is_running_away, 0),#Isn't fleeing the battle.
		##He's an eligible human.  Now see if he's in a position to kick.
		(agent_get_attack_action, ":attack_action", ":agent"), #returned values: free = 0, readying_attack = 1, releasing_attack = 2, completing_attack_after_hit = 3, attack_parried = 4, reloading = 5, after_release = 6, cancelling_attack = 7
		(agent_get_defend_action, ":defend_action", ":agent"),#
		(this_or_next|eq,":attack_action",4),#Just got parried
		(this_or_next|eq,":defend_action",1),#Parrying an enemy
		##So he'll only try to kick if he just parried an enemy attack, or his own attack just got parried.
		(agent_get_team, ":team", ":agent"),
		(assign, ":maximum_distance", 100),
		#Target Acquisition
		(agent_ai_get_look_target,":suspect",":agent"),
		(gt,":suspect",0),#Make sure there is someone.
		(agent_is_alive, ":suspect"),
		(agent_is_human, ":suspect"),#Only kick humans
		(agent_is_active, ":suspect"),
		(agent_get_team, ":suspect_team", ":suspect"),
		(neq, ":suspect_team", ":team"),#Friends don't let friends kick friends.
		(agent_get_position, pos1, ":agent"),#Distance check
		(agent_get_position, pos2, ":suspect"),
		(neg|position_is_behind_position, pos2, pos1), #Suspect can't be behind kicker.
		(get_distance_between_positions, ":distance", pos1, pos2),
		(le, ":distance", ":maximum_distance"),
		#Check chance
		(store_random_in_range,":kickchance", 1, 10),
		(try_begin),
			(eq,":kickchance",1), #10% chance per check
				#(display_message, "@Agent kicks."),
				(agent_set_animation, ":agent", "anim_prepare_kick_0"),
				(agent_deliver_damage_to_agent, ":agent", ":suspect", 3),
				(agent_set_animation, ":suspect", "anim_strike3_abdomen_front"),#Get Kicked
			(try_end),
	   (try_end),]),
	   
	   ##AI Kicking end
		
		
		(0.25, 0.0, 4.0,
		[
			(eq, "$sp_shield_bash_ai", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(neq, ":var_2", ":player_agent_no"),
				(agent_is_alive, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_active, ":var_2"), #Test to see if it stops AI from shield bashing (new addition v3)
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(store_skill_level, ":skill_level_shield_troop_id_var_2", "skl_shield", ":troop_id_var_2"),
				(store_proficiency_level, ":proficiency_level_troop_id_var_2_0", ":troop_id_var_2", 0),
				(ge, ":skill_level_shield_troop_id_var_2", 4),
				(ge, ":proficiency_level_troop_id_var_2_0", 200),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(le, ":horse_var_2", 0),
				(try_begin),
					(neg|agent_slot_ge, ":var_2", 50, 1),
					(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
					(agent_get_wielded_item, ":wielded_item_var_2_1", ":var_2", 1),
					(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
					(eq, ":type_wielded_item_var_2_1", 7),
					(agent_get_attack_action, ":attack_action_var_2", ":var_2"),
					(eq, ":attack_action_var_2", 0),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_position, 1, ":var_2"),
					(assign, ":value", -1),
					(assign, ":value_2", 125),
					(try_for_agents, ":var_13"),
						(agent_is_alive, ":var_13"),
						(agent_is_human, ":var_13"),
						(agent_get_position, 2, ":var_13"),
						(neg|position_is_behind_position, 2, 1),
						(agent_get_team, ":team_var_13", ":var_13"),
						(neq, ":team_var_13", ":team_var_2"),
						(try_begin),
							(eq, ":team_var_2", 0),
							(assign, ":value_3", 2),
						(else_try),
							(eq, ":team_var_2", 2),
							(assign, ":value_3", 0),
						(else_try),
							(eq, ":team_var_2", 1),
							(assign, ":value_3", 3),
						(else_try),
							(eq, ":team_var_2", 3),
							(assign, ":value_3", 1),
						(try_end),
						(neq, ":team_var_13", ":value_3"),
						(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
						(le, ":distance_between_positions_1_2", ":value_2"),
						(assign, ":value_2", ":distance_between_positions_1_2"),
						(assign, ":value", ":var_13"),
					(try_end),
					(ge, ":value", 0),
					(agent_get_horse, ":horse_var_2", ":value"),
					(eq, ":horse_var_2", -1),
					(store_random_in_range, ":random_in_range_15_26", 15, 26),
					(agent_set_slot, ":var_2", 50, ":random_in_range_15_26"),
					(agent_set_animation, ":var_2", "anim_shield_bash"),
					(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
					(troop_get_type, ":type_wielded_item_var_2_1", ":troop_id_var_2"),
					(try_begin),
						(eq, ":type_wielded_item_var_2_1", 0),
						(agent_play_sound, ":var_2", "snd_man_yell"),
					(else_try),
						(eq, ":type_wielded_item_var_2_1", 1),
						(agent_play_sound, ":var_2", "snd_woman_yell"),
					(try_end),
					(agent_play_sound, ":value", "snd_wooden_hit_low_armor_high_damage"),
					(agent_get_defend_action, ":attack_action_var_2", ":value"),
					(try_begin),
						(eq, ":attack_action_var_2", 2),
						(neg|position_is_behind_position, 1, 2),
						(agent_get_wielded_item, ":wielded_item_var_2_1", ":value", 1),
						(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
						(eq, ":type_wielded_item_var_2_1", 7),
						(agent_set_animation, ":value", "anim_shield_bash"),
					(else_try),
						(agent_set_animation, ":value", "anim_shield_strike"),
					(try_end),
				(try_end),
				(agent_get_slot, ":var_2_50", ":var_2", 50),
				(val_sub, ":var_2_50", 1),
				(val_max, ":var_2_50", 0),
				(agent_set_slot, ":var_2", 50, ":var_2_50"),
			(try_end)
		])
	] ),

	("wedding", 0, -1,
	"Wedding",
	[(0, mtef_visitor_source, af_override_everything, 0, 1, [itm_archer_a, itm_ankle_boots]),
	(1, mtef_visitor_source, af_override_everything, 0, 1, [itm_bride_dress, itm_bride_crown, itm_bride_shoes]),
	(2, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, []),
	(3, mtef_visitor_source, af_override_everything, 0, 1, [itm_merchant_outfit, itm_blue_hose]),
	(4, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, []),
	(5, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, []),
	(6, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, []),
	(7, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, []),
	(8, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, []),
	(9, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, []),
	(10, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, []),
	(11, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, []),
	(12, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, []),
	(13, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, []),
	(14, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, []),
	(15, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, []),
	(16, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, []),
	(17, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, []),
	(18, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, []),
	(19, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, []),
	(20, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, []),
	(21, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, []),
	(22, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, []),
	(23, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, []),
	(24, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, []),
	(25, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, []),
	(26, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, []),
	(27, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, []),
	(28, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, []),
	(29, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, []),
	(30, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, []),
	(31, mtef_visitor_source, af_override_weapons|af_override_head|af_override_gloves|af_override_horse, 0, 1, [])],
	[
		(-21.0, 0.0, 0.0,
		[],

		[
			(show_object_details_overlay, 1),
			(finish_mission, 0)
		]),

		(-8.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(eq, ":trigger_param_1", 0),
			(show_object_details_overlay, 1),
			(finish_mission, 0)
		]),

		(-20.0, 0.0, 0.0,
		[],

		[
			(assign, "$g_wedding_state", 0),
			(play_track, "track_wedding", 2),
			(show_object_details_overlay, 0)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(troop_get_type, ":type_troop_id_trigger_param_1", ":troop_id_trigger_param_1"),
			(set_fixed_point_multiplier, 100),
			(try_begin),
				(eq, ":troop_id_trigger_param_1", "$g_wedding_bishop_troop"),
			(else_try),
				(eq, ":troop_id_trigger_param_1", "$g_wedding_bride_troop"),
				(agent_set_no_dynamics, ":trigger_param_1", 1),
				(init_position, 1),
				(position_set_z, 1, -1000),
				(agent_set_position, ":trigger_param_1", 1),
			(else_try),
				(eq, ":troop_id_trigger_param_1", "$g_wedding_brides_dad_troop"),
				(agent_set_no_dynamics, ":trigger_param_1", 1),
				(init_position, 1),
				(position_set_z, 1, -1000),
				(agent_set_position, ":trigger_param_1", 1),
			(else_try),
				(eq, ":troop_id_trigger_param_1", "$g_wedding_groom_troop"),
				(agent_set_no_dynamics, ":trigger_param_1", 1),
				(init_position, 1),
				(position_move_x, 1, 175),
				(position_move_z, 1, 10),
				(position_rotate_z, 1, 180),
				(agent_set_position, ":trigger_param_1", 1),
				(agent_set_animation, ":trigger_param_1", "anim_wedding_groom_wait"),
			(else_try),
				(try_begin),
					(eq, ":type_troop_id_trigger_param_1", 0),
					(store_random_in_range, ":random_in_range_0_3", 0, 3),
					(try_begin),
						(eq, ":random_in_range_0_3", 0),
						(agent_set_slot, ":trigger_param_1", slot_agent_cur_animation, "anim_wedding_guest_notr"),
						(agent_set_animation, ":trigger_param_1", "anim_wedding_guest_notr"),
					(else_try),
						(agent_set_slot, ":trigger_param_1", slot_agent_cur_animation, "anim_wedding_guest"),
						(agent_set_animation, ":trigger_param_1", "anim_wedding_guest"),
					(try_end),
				(else_try),
					(agent_set_slot, ":trigger_param_1", slot_agent_cur_animation, "anim_wedding_guest_woman"),
					(agent_set_animation, ":trigger_param_1", "anim_wedding_guest_woman"),
				(try_end),
				(store_random_in_range, ":random_in_range_0_100", 0, 100),
				(agent_set_animation_progress, ":trigger_param_1", ":random_in_range_0_100"),
			(try_end)
		]),

		(0.0, 0.0, 0.0,
		[
			(store_mission_timer_a, ":mission_timer_a"),
			(set_fixed_point_multiplier, 100),
			(try_for_agents, ":value"),
				(agent_get_troop_id, ":troop_id_value", ":value"),
				(try_begin),
					(eq, ":troop_id_value", "$g_wedding_groom_troop"),
				(else_try),
					(eq, ":troop_id_value", "$g_wedding_bride_troop"),
				(else_try),
					(eq, ":troop_id_value", "$g_wedding_brides_dad_troop"),
				(else_try),
					(eq, ":troop_id_value", "$g_wedding_bishop_troop"),
				(else_try),
					(agent_get_slot, ":value_cur_animation", ":value", slot_agent_cur_animation),
					(agent_set_animation, ":value", ":value_cur_animation"),
				(try_end),
			(try_end),
			(try_begin),
				(eq, "$g_wedding_state", 0),
				(mission_cam_set_mode, 1, 0, 0),
				(init_position, 1),
				(position_rotate_z, 1, 180),
				(position_rotate_x, 1, 5),
				(position_set_x, 1, -500),
				(position_set_y, 1, 1000),
				(position_set_z, 1, 600),
				(mission_cam_set_position, 1),
				(init_position, 1),
				(position_rotate_z, 1, 180),
				(position_rotate_x, 1, -15),
				(position_set_x, 1, -500),
				(position_set_y, 1, 1000),
				(position_set_z, 1, 600),
				(mission_cam_animate_to_position, 1, 4000, 0),
				(val_add, "$g_wedding_state", 1),
			(else_try),
				(eq, "$g_wedding_state", 1),
				(ge, ":mission_timer_a", 4),
				(init_position, 1),
				(position_rotate_z, 1, 90),
				(position_rotate_x, 1, -10),
				(position_set_x, 1, -580),
				(position_set_y, 1, 700),
				(position_set_z, 1, 200),
				(mission_cam_set_position, 1),
				(init_position, 1),
				(position_rotate_z, 1, 150),
				(position_rotate_x, 1, -10),
				(position_set_x, 1, -580),
				(position_set_y, 1, 100),
				(position_set_z, 1, 200),
				(mission_cam_animate_to_position, 1, 6000, 1),
				(val_add, "$g_wedding_state", 1),
			(else_try),
				(eq, "$g_wedding_state", 2),
				(ge, ":mission_timer_a", 9),
				(mission_cam_animate_to_screen_color, 4278190080, 1000),
				(val_add, "$g_wedding_state", 1),
			(else_try),
				(eq, "$g_wedding_state", 3),
				(ge, ":mission_timer_a", 10),
				(init_position, 1),
				(position_move_x, 1, 175),
				(position_move_z, 1, 10),
				(position_rotate_z, 1, 180),
				(try_for_agents, ":value"),
					(agent_get_troop_id, ":troop_id_value_2", ":value"),
					(try_begin),
						(eq, ":troop_id_value_2", "$g_wedding_bride_troop"),
						(agent_set_position, ":value", 1),
						(agent_set_animation, ":value", "anim_wedding_bride_stairs"),
					(else_try),
						(eq, ":troop_id_value_2", "$g_wedding_brides_dad_troop"),
						(agent_set_position, ":value", 1),
						(agent_set_animation, ":value", "anim_wedding_dad_stairs"),
					(try_end),
				(try_end),
				(init_position, 1),
				(position_rotate_z, 1, -90),
				(position_set_x, 1, 300),
				(position_set_y, 1, 950),
				(position_set_z, 1, 420),
				(mission_cam_set_position, 1),
				(position_set_x, 1, 175),
				(position_set_y, 1, 950),
				(position_set_z, 1, 320),
				(mission_cam_animate_to_position, 1, 4000, 0),
				(mission_cam_animate_to_screen_color, 0, 500),
				(val_add, "$g_wedding_state", 1),
			(else_try),
				(eq, "$g_wedding_state", 4),
				(ge, ":mission_timer_a", 14),
				(init_position, 1),
				(position_rotate_z, 1, -60),
				(position_rotate_x, 1, 10),
				(position_set_x, 1, -400),
				(position_set_y, 1, 200),
				(position_set_z, 1, 115),
				(mission_cam_set_position, 1),
				(val_add, "$g_wedding_state", 1),
			(else_try),
				(eq, "$g_wedding_state", 5),
				(ge, ":mission_timer_a", 20),
				(init_position, 1),
				(position_move_x, 1, 175),
				(position_move_z, 1, 10),
				(position_rotate_z, 1, 180),
				(try_for_agents, ":value"),
					(agent_get_troop_id, ":troop_id_value_2", ":value"),
					(try_begin),
						(eq, ":troop_id_value_2", "$g_wedding_bride_troop"),
						(agent_set_position, ":value", 1),
						(agent_set_animation, ":value", "anim_wedding_bride_walk"),
					(else_try),
						(eq, ":troop_id_value_2", "$g_wedding_brides_dad_troop"),
						(agent_set_position, ":value", 1),
						(agent_set_animation, ":value", "anim_wedding_dad_walk"),
					(try_end),
				(try_end),
				(init_position, 1),
				(position_rotate_z, 1, -140),
				(position_rotate_x, 1, -15),
				(position_set_x, 1, -625),
				(position_set_y, 1, -530),
				(position_set_z, 1, 180),
				(mission_cam_set_position, 1),
				(val_add, "$g_wedding_state", 1),
			(else_try),
				(eq, "$g_wedding_state", 6),
				(ge, ":mission_timer_a", 22),
				(init_position, 1),
				(position_rotate_z, 1, 45),
				(position_rotate_x, 1, -10),
				(position_set_x, 1, -260),
				(position_set_y, 1, 120),
				(position_set_z, 1, 275),
				(mission_cam_set_position, 1),
				(position_rotate_z, 1, 10),
				(mission_cam_animate_to_position, 1, 2000, 0),
				(val_add, "$g_wedding_state", 1),
			(else_try),
				(eq, "$g_wedding_state", 7),
				(ge, ":mission_timer_a", 24),
				(init_position, 1),
				(position_move_x, 1, 175),
				(position_move_z, 1, 10),
				(position_rotate_z, 1, 180),
				(try_for_agents, ":value"),
					(agent_get_troop_id, ":troop_id_value_2", ":value"),
					(try_begin),
						(eq, ":troop_id_value_2", "$g_wedding_bride_troop"),
						(agent_set_position, ":value", 1),
						(agent_set_animation, ":value", "anim_wedding_bride_last"),
					(else_try),
						(eq, ":troop_id_value_2", "$g_wedding_brides_dad_troop"),
						(agent_set_position, ":value", 1),
						(agent_set_animation, ":value", "anim_wedding_dad_last"),
					(else_try),
						(eq, ":troop_id_value_2", "$g_wedding_groom_troop"),
						(agent_set_position, ":value", 1),
						(agent_set_animation, ":value", "anim_wedding_groom_last"),
					(try_end),
				(try_end),
				(init_position, 1),
				(position_rotate_z, 1, -45),
				(position_rotate_x, 1, -10),
				(position_set_x, 1, -900),
				(position_set_y, 1, -850),
				(position_set_z, 1, 230),
				(mission_cam_set_position, 1),
				(val_add, "$g_wedding_state", 1),
			(else_try),
				(eq, "$g_wedding_state", 8),
				(ge, ":mission_timer_a", 31),
				(init_position, 1),
				(position_set_x, 1, -550),
				(position_set_y, 1, -625),
				(position_set_z, 1, 1500),
				(particle_system_burst, "psys_wedding_rose", 1, 750),
				(val_add, "$g_wedding_state", 1),
			(else_try),
				(eq, "$g_wedding_state", 9),
				(ge, ":mission_timer_a", 33),
				(init_position, 1),
				(position_rotate_z, 1, 180),
				(position_set_x, 1, -536),
				(position_set_y, 1, -415),
				(position_set_z, 1, 135),
				(mission_cam_set_position, 1),
				(position_rotate_z, 1, -8),
				(position_set_z, 1, 350),
				(position_rotate_x, 1, 35),
				(mission_cam_animate_to_position_and_aperture, 1, 10, 9000, 1),
				(val_add, "$g_wedding_state", 1),
			(else_try),
				(eq, "$g_wedding_state", 10),
				(ge, ":mission_timer_a", 41),
				(mission_cam_set_screen_color, 16777215),
				(mission_cam_animate_to_screen_color, 4294967295, 3000),
				(val_add, "$g_wedding_state", 1),
			(else_try),
				(eq, "$g_wedding_state", 11),
				(ge, ":mission_timer_a", 48),
				(show_object_details_overlay, 1),
				(finish_mission, 0),
			(try_end)
		],

		[]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_set_matching_sexy_boots", ":trigger_param_1")
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$sp_shield_bash", 1),
			(game_key_is_down, 7),
			(game_key_clicked, 6),
			(neg|main_hero_fallen),
		],

		[
		(call_script, "script_shield_bash"),
		]),

			##AI kicking begin
		   (2, 0, 3, #AI kicking
       [], [
	(get_player_agent_no,":player"),
	(try_for_agents, ":agent"),
		(neq, ":agent", ":player"),
		(agent_is_alive, ":agent"),
		(neq, ":agent", -1),
		(agent_is_human, ":agent"),#Only humans can kick....FOR NOW
		(agent_is_active, ":agent"),
		(agent_slot_eq, ":agent", slot_agent_is_running_away, 0),#Isn't fleeing the battle.
		##He's an eligible human.  Now see if he's in a position to kick.
		(agent_get_attack_action, ":attack_action", ":agent"), #returned values: free = 0, readying_attack = 1, releasing_attack = 2, completing_attack_after_hit = 3, attack_parried = 4, reloading = 5, after_release = 6, cancelling_attack = 7
		(agent_get_defend_action, ":defend_action", ":agent"),#
		(this_or_next|eq,":attack_action",4),#Just got parried
		(this_or_next|eq,":defend_action",1),#Parrying an enemy
		##So he'll only try to kick if he just parried an enemy attack, or his own attack just got parried.
		(agent_get_team, ":team", ":agent"),
		(assign, ":maximum_distance", 100),
		#Target Acquisition
		(agent_ai_get_look_target,":suspect",":agent"),
		(gt,":suspect",0),#Make sure there is someone.
		(agent_is_alive, ":suspect"),
		(agent_is_human, ":suspect"),#Only kick humans
		(agent_is_active, ":suspect"),
		(agent_get_team, ":suspect_team", ":suspect"),
		(neq, ":suspect_team", ":team"),#Friends don't let friends kick friends.
		(agent_get_position, pos1, ":agent"),#Distance check
		(agent_get_position, pos2, ":suspect"),
		(neg|position_is_behind_position, pos2, pos1), #Suspect can't be behind kicker.
		(get_distance_between_positions, ":distance", pos1, pos2),
		(le, ":distance", ":maximum_distance"),
		#Check chance
		(store_random_in_range,":kickchance", 1, 10),
		(try_begin),
			(eq,":kickchance",1), #10% chance per check
				#(display_message, "@Agent kicks."),
				(agent_set_animation, ":agent", "anim_prepare_kick_0"),
				(agent_deliver_damage_to_agent, ":agent", ":suspect", 3),
				(agent_set_animation, ":suspect", "anim_strike3_abdomen_front"),#Get Kicked
			(try_end),
	   (try_end),]),
	   
	   ##AI Kicking end
		
		
		(0.25, 0.0, 4.0,
		[
			(eq, "$sp_shield_bash_ai", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(neq, ":var_2", ":player_agent_no"),
				(agent_is_alive, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_active, ":var_2"), #Test to see if it stops AI from shield bashing (new addition v3)
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(store_skill_level, ":skill_level_shield_troop_id_var_2", "skl_shield", ":troop_id_var_2"),
				(store_proficiency_level, ":proficiency_level_troop_id_var_2_0", ":troop_id_var_2", 0),
				(ge, ":skill_level_shield_troop_id_var_2", 4),
				(ge, ":proficiency_level_troop_id_var_2_0", 200),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(le, ":horse_var_2", 0),
				(try_begin),
					(neg|agent_slot_ge, ":var_2", 50, 1),
					(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
					(agent_get_wielded_item, ":wielded_item_var_2_1", ":var_2", 1),
					(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
					(eq, ":type_wielded_item_var_2_1", 7),
					(agent_get_attack_action, ":attack_action_var_2", ":var_2"),
					(eq, ":attack_action_var_2", 0),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_position, 1, ":var_2"),
					(assign, ":value", -1),
					(assign, ":value_2", 125),
					(try_for_agents, ":var_13"),
						(agent_is_alive, ":var_13"),
						(agent_is_human, ":var_13"),
						(agent_get_position, 2, ":var_13"),
						(neg|position_is_behind_position, 2, 1),
						(agent_get_team, ":team_var_13", ":var_13"),
						(neq, ":team_var_13", ":team_var_2"),
						(try_begin),
							(eq, ":team_var_2", 0),
							(assign, ":value_3", 2),
						(else_try),
							(eq, ":team_var_2", 2),
							(assign, ":value_3", 0),
						(else_try),
							(eq, ":team_var_2", 1),
							(assign, ":value_3", 3),
						(else_try),
							(eq, ":team_var_2", 3),
							(assign, ":value_3", 1),
						(try_end),
						(neq, ":team_var_13", ":value_3"),
						(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
						(le, ":distance_between_positions_1_2", ":value_2"),
						(assign, ":value_2", ":distance_between_positions_1_2"),
						(assign, ":value", ":var_13"),
					(try_end),
					(ge, ":value", 0),
					(agent_get_horse, ":horse_var_2", ":value"),
					(eq, ":horse_var_2", -1),
					(store_random_in_range, ":random_in_range_15_26", 15, 26),
					(agent_set_slot, ":var_2", 50, ":random_in_range_15_26"),
					(agent_set_animation, ":var_2", "anim_shield_bash"),
					(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
					(troop_get_type, ":type_wielded_item_var_2_1", ":troop_id_var_2"),
					(try_begin),
						(eq, ":type_wielded_item_var_2_1", 0),
						(agent_play_sound, ":var_2", "snd_man_yell"),
					(else_try),
						(eq, ":type_wielded_item_var_2_1", 1),
						(agent_play_sound, ":var_2", "snd_woman_yell"),
					(try_end),
					(agent_play_sound, ":value", "snd_wooden_hit_low_armor_high_damage"),
					(agent_get_defend_action, ":attack_action_var_2", ":value"),
					(try_begin),
						(eq, ":attack_action_var_2", 2),
						(neg|position_is_behind_position, 1, 2),
						(agent_get_wielded_item, ":wielded_item_var_2_1", ":value", 1),
						(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
						(eq, ":type_wielded_item_var_2_1", 7),
						(agent_set_animation, ":value", "anim_shield_bash"),
					(else_try),
						(agent_set_animation, ":value", "anim_shield_strike"),
					(try_end),
				(try_end),
				(agent_get_slot, ":var_2_50", ":var_2", 50),
				(val_sub, ":var_2_50", 1),
				(val_max, ":var_2_50", 0),
				(agent_set_slot, ":var_2", 50, ":var_2_50"),
			(try_end)
	  ])
	] + crouching_triggers ),

	("tutorial_training_ground", mtf_arena_fight|mtf_team_fight, -1,
	"You enter the training ground.",
	[(0, mtef_visitor_source|mtef_team_0, 0, 0, 1, []),
	(1, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(2, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(3, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(4, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(5, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(6, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(7, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(8, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(9, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(10, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(11, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(12, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(13, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(14, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(15, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(16, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(17, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(18, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(19, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(20, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(21, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(22, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(23, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(24, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(25, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(26, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(27, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(28, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(29, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(30, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(31, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(32, mtef_visitor_source|mtef_team_0, af_override_weapons, aif_start_alarmed, 1, [itm_practice_sword]),
	(33, mtef_visitor_source|mtef_team_0, af_override_weapons, aif_start_alarmed, 1, [itm_practice_sword]),
	(34, mtef_visitor_source|mtef_team_0, af_override_weapons, aif_start_alarmed, 1, [itm_practice_sword]),
	(35, mtef_visitor_source|mtef_team_0, af_override_weapons, aif_start_alarmed, 1, [itm_practice_sword]),
	(36, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(37, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(38, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(39, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(40, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(41, mtef_visitor_source|mtef_team_0, af_override_weapons, aif_start_alarmed, 1, [itm_practice_bow, itm_practice_arrows]),
	(42, mtef_visitor_source|mtef_team_0, af_override_weapons, aif_start_alarmed, 1, [itm_practice_bow, itm_practice_arrows]),
	(43, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(44, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(45, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(46, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(47, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(48, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(49, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(50, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(51, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(52, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(53, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(54, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(55, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(56, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(57, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(58, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(59, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(60, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(61, mtef_visitor_source|mtef_team_0, af_override_weapons, aif_start_alarmed, 1, [itm_practice_sword]),
	(62, mtef_visitor_source|mtef_team_0, af_override_weapons, aif_start_alarmed, 1, [itm_practice_sword]),
	(63, mtef_visitor_source|mtef_team_0, af_override_weapons, aif_start_alarmed, 1, [itm_practice_bow, itm_practice_arrows]),
	(64, mtef_visitor_source|mtef_team_0, af_override_weapons, aif_start_alarmed, 1, [itm_practice_bow, itm_practice_arrows])],
	[
		(-21.0, 0.0, 0.0,
		[],

		[
			(try_begin),
				(lt, "$g_tutorial_training_ground_state", 20),
				(question_box, "str_do_you_wish_to_leave_tutorial"),
			(else_try),
				(finish_mission, 0),
			(try_end)
		]),

		(-8.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(eq, ":trigger_param_1", 0),
			(finish_mission, 0)
		]),

		(-22.0, 0.0, 0.0,
		[
			(display_message, "str_cant_use_inventory_tutorial")
		],

		[]),

		(-24.0, 0.0, 0.0,
		[],

		[
			(start_presentation, "prsnt_tutorial_show_mouse_movement")
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_ai_set_always_attack_in_melee, ":trigger_param_1", 1),
			(agent_set_no_death_knock_down_only, ":trigger_param_1", 1),
			(agent_set_invulnerable_shield, ":trigger_param_1", 1),
			(agent_get_position, 1, ":trigger_param_1"),
			(agent_set_slot, ":trigger_param_1", slot_agent_spawn_entry_point, -1),
			(get_player_agent_no, ":player_agent_no"),
			(try_begin),
				(eq, ":trigger_param_1", ":player_agent_no"),
				(agent_set_team, ":trigger_param_1", 7),
			(try_end),
			(try_for_range, ":number", 0, 64),
				(entry_point_get_position, 2, ":number"),
				(get_sq_distance_between_positions, ":sq_distance_between_positions_1_2", 1, 2),
				(lt, ":sq_distance_between_positions_1_2", 100),
				(agent_set_slot, ":trigger_param_1", slot_agent_spawn_entry_point, ":number"),
			(try_end),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(try_begin),
				(eq, ":troop_id_trigger_param_1", "trp_tutorial_archer_1"),
				(agent_get_position, 1, ":trigger_param_1"),
				(agent_set_scripted_destination, ":trigger_param_1", 1),
				(scene_prop_get_num_instances, ":scene_prop_num_instances_archery_target_with_hit_a", "spr_archery_target_with_hit_a"),
				(assign, ":value", 10000000),
				(assign, ":value_2", -1),
				(try_for_range, ":localvariable", 0, ":scene_prop_num_instances_archery_target_with_hit_a"),
					(scene_prop_get_instance, ":scene_prop_instance_archery_target_with_hit_a_localvariable", "spr_archery_target_with_hit_a", ":localvariable"),
					(prop_instance_get_position, 2, ":scene_prop_instance_archery_target_with_hit_a_localvariable"),
					(get_sq_distance_between_positions, ":sq_distance_between_positions_1_2_2", 1, 2),
					(lt, ":sq_distance_between_positions_1_2_2", ":value"),
					(assign, ":value", ":sq_distance_between_positions_1_2_2"),
					(assign, ":value_2", ":scene_prop_instance_archery_target_with_hit_a_localvariable"),
				(try_end),
				(agent_set_slot, ":trigger_param_1", slot_agent_target_prop_instance, ":value_2"),
			(else_try),
				(this_or_next|eq, ":troop_id_trigger_param_1", "trp_tutorial_rider_1"),
				(eq, ":troop_id_trigger_param_1", "trp_tutorial_rider_2"),
				(agent_set_slot, ":trigger_param_1", 11, 48),
				(agent_set_slot, ":trigger_param_1", slot_agent_target_prop_instance, -1),
				(entry_point_get_position, 1, 48),
				(agent_set_scripted_destination, ":trigger_param_1", 1),
			(try_end)
		]),

		(-27.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(store_trigger_param_2, ":trigger_param_2"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(agent_get_troop_id, ":troop_id_trigger_param_2", ":trigger_param_2"),
			(try_begin),
				(ge, "$g_tutorial_training_ground_melee_trainer_attack", 0),
			(else_try),
				(ge, "$g_tutorial_training_ground_melee_trainer_parry", 0),
				(try_begin),
					(eq, ":troop_id_trigger_param_1", "trp_player"),
					(eq, ":troop_id_trigger_param_2", "$g_tutorial_training_ground_melee_trainer_parry"),
					(assign, "$g_tutorial_training_ground_melee_state", 0),
					(agent_set_team, ":trigger_param_1", 0),
					(agent_set_team, ":trigger_param_2", 7),
					(tutorial_message, -1),
					(assign, "$g_tutorial_mouse_dir", -1),
					(assign, "$g_tutorial_mouse_click", -1),
					(assign, "$g_tutorial_training_ground_conversation_state", 2),
					(play_sound, "snd_tutorial_fail"),
					(start_mission_conversation, "$g_tutorial_training_ground_melee_trainer_parry"),
					(assign, "$g_tutorial_training_ground_melee_trainer_parry", -1),
					(try_begin),
						(eq, "$g_tutorial_training_ground_melee_trainer_action_state", 1),
						(agent_set_attack_action, ":trigger_param_1", 0, 0),
					(try_end),
				(else_try),
					(eq, ":troop_id_trigger_param_2", "trp_player"),
					(eq, ":troop_id_trigger_param_1", "$g_tutorial_training_ground_melee_trainer_parry"),
					(agent_set_team, ":trigger_param_1", 7),
					(agent_set_team, ":trigger_param_2", 0),
					(tutorial_message, -1),
					(assign, "$g_tutorial_mouse_dir", -1),
					(assign, "$g_tutorial_mouse_click", -1),
					(assign, "$g_tutorial_training_ground_conversation_state", 3),
					(play_sound, "snd_tutorial_fail"),
					(start_mission_conversation, "$g_tutorial_training_ground_melee_trainer_parry"),
					(assign, "$g_tutorial_training_ground_melee_trainer_parry", -1),
					(try_begin),
						(eq, "$g_tutorial_training_ground_melee_trainer_action_state", 1),
						(agent_set_attack_action, ":trigger_param_1", 0, 0),
					(try_end),
				(try_end),
			(else_try),
				(ge, "$g_tutorial_training_ground_melee_trainer_chamber", 0),
				(try_begin),
					(eq, ":troop_id_trigger_param_1", "trp_player"),
					(eq, ":troop_id_trigger_param_2", "$g_tutorial_training_ground_melee_trainer_chamber"),
					(assign, "$g_tutorial_training_ground_melee_state", 0),
					(agent_set_team, ":trigger_param_1", 0),
					(agent_set_team, ":trigger_param_2", 7),
					(tutorial_message, -1),
					(assign, "$g_tutorial_mouse_dir", -1),
					(assign, "$g_tutorial_mouse_click", -1),
					(assign, "$g_tutorial_training_ground_conversation_state", 7),
					(play_sound, "snd_tutorial_fail"),
					(start_mission_conversation, "$g_tutorial_training_ground_melee_trainer_chamber"),
					(assign, "$g_tutorial_training_ground_melee_trainer_chamber", -1),
					(try_begin),
						(eq, "$g_tutorial_training_ground_melee_trainer_action_state", 1),
						(agent_set_attack_action, ":trigger_param_1", 0, 0),
					(try_end),
				(else_try),
					(eq, ":troop_id_trigger_param_2", "trp_player"),
					(eq, ":troop_id_trigger_param_1", "$g_tutorial_training_ground_melee_trainer_chamber"),
					(agent_set_team, ":trigger_param_1", 7),
					(agent_set_team, ":trigger_param_2", 0),
					(tutorial_message, -1),
					(assign, "$g_tutorial_mouse_dir", -1),
					(assign, "$g_tutorial_mouse_click", -1),
					(assign, "$g_tutorial_training_ground_conversation_state", 8),
					(play_sound, "snd_tutorial_fail"),
					(start_mission_conversation, "$g_tutorial_training_ground_melee_trainer_chamber"),
					(assign, "$g_tutorial_training_ground_melee_trainer_chamber", -1),
					(try_begin),
						(eq, "$g_tutorial_training_ground_melee_trainer_action_state", 1),
						(agent_set_attack_action, ":trigger_param_1", 0, 0),
					(try_end),
				(try_end),
			(else_try),
				(ge, "$g_tutorial_training_ground_melee_trainer_combat", 0),
				(try_begin),
					(eq, ":troop_id_trigger_param_1", "trp_player"),
					(eq, ":troop_id_trigger_param_2", "$g_tutorial_training_ground_melee_trainer_combat"),
					(assign, "$g_tutorial_training_ground_melee_state", 0),
					(agent_set_team, ":trigger_param_1", 0),
					(agent_set_team, ":trigger_param_2", 7),
					(tutorial_message, -1),
					(assign, "$g_tutorial_training_ground_conversation_state", 4),
					(play_sound, "snd_tutorial_fail"),
					(start_mission_conversation, "$g_tutorial_training_ground_melee_trainer_combat"),
					(assign, "$g_tutorial_training_ground_melee_trainer_combat", -1),
				(else_try),
					(eq, ":troop_id_trigger_param_2", "trp_player"),
					(eq, ":troop_id_trigger_param_1", "$g_tutorial_training_ground_melee_trainer_combat"),
					(assign, "$g_tutorial_training_ground_melee_state", 0),
					(agent_set_team, ":trigger_param_1", 7),
					(agent_set_team, ":trigger_param_2", 0),
					(tutorial_message, -1),
					(assign, "$g_tutorial_training_ground_conversation_state", 5),
					(play_sound, "snd_tutorial_2"),
					(start_mission_conversation, "$g_tutorial_training_ground_melee_trainer_combat"),
					(assign, "$g_tutorial_training_ground_melee_trainer_combat", -1),
				(try_end),
			(else_try),
				(agent_is_human, ":trigger_param_1"),
				(assign, "$g_tutorial_training_ground_melee_last_winner", ":trigger_param_2"),
				(assign, "$g_tutorial_training_ground_melee_last_loser", ":trigger_param_1"),
				(assign, "$g_tutorial_training_ground_melee_state", 0),
				(agent_set_team, "$g_tutorial_training_ground_melee_cur_fighter_1", 7),
				(agent_set_team, "$g_tutorial_training_ground_melee_cur_fighter_2", 7),
				(agent_force_rethink, "$g_tutorial_training_ground_melee_cur_fighter_1"),
				(agent_force_rethink, "$g_tutorial_training_ground_melee_cur_fighter_2"),
			(try_end),
			(agent_set_hit_points, ":trigger_param_1", 100, 0),
			(agent_set_hit_points, ":trigger_param_2", 100, 0)
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(scene_set_day_time, 13),
			(team_set_relation, 0, 1, 0),
			(team_set_relation, 0, 2, 0),
			(team_set_relation, 0, 3, 0),
			(team_set_relation, 0, 7, 0),
			(team_set_relation, 7, 1, 1),
			(team_set_relation, 7, 2, 1),
			(team_set_relation, 7, 3, 1),
			(team_set_relation, 1, 2, -1),
			(team_set_relation, 1, 3, 1),
			(team_set_relation, 2, 3, 1),
			(assign, "$g_position_to_use_for_replacing_scene_items", 8),
			(call_script, "script_replace_scene_items_with_spawn_items_before_ms"),
			(assign, "$g_tutorial_training_ground_state", 0),
			(assign, "$g_tutorial_training_ground_conversation_state", 0),
			(assign, "$g_tutorial_training_ground_melee_paused", 0),
			(assign, "$g_tutorial_training_ground_melee_state", 0),
			(assign, "$g_tutorial_training_ground_melee_next_action_time", 0),
			(assign, "$g_tutorial_training_ground_melee_last_winner", -1),
			(assign, "$g_tutorial_training_ground_melee_last_loser", -1),
			(assign, "$g_tutorial_training_ground_melee_cur_fighter_1", -1),
			(assign, "$g_tutorial_training_ground_melee_cur_fighter_2", -1),
			(assign, "$g_tutorial_training_ground_melee_trainer_attack", -1),
			(assign, "$g_tutorial_training_ground_melee_trainer_parry", -1),
			(assign, "$g_tutorial_training_ground_melee_trainer_combat", -1),
			(assign, "$g_tutorial_training_ground_melee_trainer_chamber", -1),
			(assign, "$g_tutorial_training_ground_melee_trainer_next_action_time", 0),
			(assign, "$g_tutorial_training_ground_archer_trainer_state", 0),
			(assign, "$g_tutorial_training_ground_archer_trainer_completed_chapters", 0),
			(assign, "$g_tutorial_training_ground_horseman_trainer_state", 0),
			(assign, "$g_tutorial_training_ground_horseman_trainer_completed_chapters", 0),
			(assign, "$g_tutorial_training_ground_next_score_time", 0),
			(assign, "$g_tutorial_mouse_dir", -1),
			(assign, "$g_tutorial_mouse_click", -1),
			(assign, "$g_pointer_arrow_height_adder", -1000)
		]),

		(0.0, 0.0, ti_once,
		[],

		[
			(tutorial_message_set_size, 17, 17),
			(tutorial_message_set_position, 500, 650),
			(tutorial_message_set_center_justify, 0),
			(mission_enable_talk),
			(call_script, "script_replace_scene_items_with_spawn_items_after_ms"),
			(entry_point_get_position, 1, 59),
			(set_spawn_position, 1),
			(spawn_horse, "itm_practice_horse", 0),
			(assign, "$g_tutorial_training_ground_intro_message_being_displayed", 1),
			(scene_spawned_item_get_instance, ":scene_spawned_item_instance_practice_bow_0", "itm_practice_bow", 0),
			(prop_instance_get_position, 0, ":scene_spawned_item_instance_practice_bow_0"),
			(position_move_z, 0, -1000, 1),
			(prop_instance_set_position, ":scene_spawned_item_instance_practice_bow_0", 0),
			(scene_spawned_item_get_instance, ":scene_spawned_item_instance_practice_bow_0", "itm_practice_bow_2", 0),
			(prop_instance_get_position, 0, ":scene_spawned_item_instance_practice_bow_0"),
			(position_move_z, 0, -1000, 1),
			(prop_instance_set_position, ":scene_spawned_item_instance_practice_bow_0", 0),
			(scene_spawned_item_get_instance, ":scene_spawned_item_instance_practice_bow_0", "itm_practice_arrows", 0),
			(prop_instance_get_position, 0, ":scene_spawned_item_instance_practice_bow_0"),
			(position_move_z, 0, -1000, 1),
			(prop_instance_set_position, ":scene_spawned_item_instance_practice_bow_0", 0),
			(scene_spawned_item_get_instance, ":scene_spawned_item_instance_practice_bow_0", "itm_practice_arrows_2", 0),
			(prop_instance_get_position, 0, ":scene_spawned_item_instance_practice_bow_0"),
			(position_move_z, 0, -1000, 1),
			(prop_instance_set_position, ":scene_spawned_item_instance_practice_bow_0", 0),
			(scene_spawned_item_get_instance, ":scene_spawned_item_instance_practice_bow_0", "itm_practice_crossbow", 0),
			(prop_instance_get_position, 0, ":scene_spawned_item_instance_practice_bow_0"),
			(position_move_z, 0, -1000, 1),
			(prop_instance_set_position, ":scene_spawned_item_instance_practice_bow_0", 0),
			(scene_spawned_item_get_instance, ":scene_spawned_item_instance_practice_bow_0", "itm_practice_bolts", 0),
			(prop_instance_get_position, 0, ":scene_spawned_item_instance_practice_bow_0"),
			(position_move_z, 0, -1000, 1),
			(prop_instance_set_position, ":scene_spawned_item_instance_practice_bow_0", 0),
			(scene_spawned_item_get_instance, ":scene_spawned_item_instance_practice_bow_0", "itm_practice_javelin", 0),
			(prop_instance_get_position, 0, ":scene_spawned_item_instance_practice_bow_0"),
			(position_move_z, 0, -1000, 1),
			(prop_instance_set_position, ":scene_spawned_item_instance_practice_bow_0", 0),
			(scene_spawned_item_get_instance, ":scene_spawned_item_instance_practice_bow_0", "itm_arena_lance", 0),
			(prop_instance_get_position, 0, ":scene_spawned_item_instance_practice_bow_0"),
			(position_move_z, 0, -1000, 1),
			(prop_instance_set_position, ":scene_spawned_item_instance_practice_bow_0", 0)
		]),

		(0.0, 1.0, ti_once,
		[],

		[
			(tutorial_message_set_background, 1),
			(tutorial_message, "str_tutorial_training_ground_intro_message")
		]),

		(0.0, 0.0, 0.0,
		[
			(store_mission_timer_a, ":mission_timer_a"),
			(try_for_agents, ":var_2"),
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(eq, ":troop_id_var_2", "trp_tutorial_archer_1"),
				(try_begin),
					(agent_get_wielded_item, ":wielded_item_var_2_0", ":var_2", 0),
					(neq, ":wielded_item_var_2_0", "itm_practice_bow"),
					(agent_set_wielded_item, ":var_2", "itm_practice_bow"),
				(else_try),
					(agent_get_slot, ":var_2_target_prop_instance", ":var_2", slot_agent_target_prop_instance),
					(prop_instance_get_position, 1, ":var_2_target_prop_instance"),
					(position_move_z, 1, 10),
					(agent_set_look_target_position, ":var_2", 1),
					(try_begin),
						(neg|agent_slot_ge, ":var_2", 19, ":mission_timer_a"),
						(agent_set_attack_action, ":var_2", 0),
						(store_random_in_range, ":random_in_range_3_13", 3, 13),
						(val_add, ":random_in_range_3_13", ":mission_timer_a"),
						(agent_set_slot, ":var_2", slot_agent_next_action_time, ":random_in_range_3_13"),
					(try_end),
				(try_end),
			(try_end)
		],

		[]),

		(0.0, 0.0, 0.0,
		[
			(set_fixed_point_multiplier, 100),
			(try_for_agents, ":var_1"),
				(agent_get_troop_id, ":troop_id_var_1", ":var_1"),
				(this_or_next|eq, ":troop_id_var_1", "trp_tutorial_rider_1"),
				(eq, ":troop_id_var_1", "trp_tutorial_rider_2"),
				(agent_get_slot, ":var_1_11", ":var_1", 11),
				(entry_point_get_position, 1, ":var_1_11"),
				(agent_get_position, 2, ":var_1"),
				(get_sq_distance_between_positions, ":sq_distance_between_positions_1_2", 1, 2),
				(try_begin),
					(lt, ":sq_distance_between_positions_1_2", 6400),
					(val_add, ":var_1_11", 1),
					(try_begin),
						(gt, ":var_1_11", 57),
						(assign, ":var_1_11", 48),
					(try_end),
					(agent_set_slot, ":var_1", 11, ":var_1_11"),
					(entry_point_get_position, 1, ":var_1_11"),
					(agent_set_scripted_destination, ":var_1", 1),
				(try_end),
				(try_begin),
					(eq, ":troop_id_var_1", "trp_tutorial_rider_2"),
					(try_begin),
						(agent_get_wielded_item, ":wielded_item_var_1_0", ":var_1", 0),
						(neq, ":wielded_item_var_1_0", "itm_practice_bow"),
						(agent_set_wielded_item, ":var_1", "itm_practice_bow"),
					(else_try),
						(scene_prop_get_num_instances, ":scene_prop_num_instances_archery_target_with_hit_a", "spr_archery_target_with_hit_a"),
						(assign, ":value", 10000000),
						(assign, ":value_2", -1),
						(try_for_range, ":localvariable", 0, ":scene_prop_num_instances_archery_target_with_hit_a"),
							(scene_prop_get_instance, ":scene_prop_instance_archery_target_with_hit_a_localvariable", "spr_archery_target_with_hit_a", ":localvariable"),
							(neg|agent_slot_eq, ":var_1", slot_agent_target_prop_instance, ":scene_prop_instance_archery_target_with_hit_a_localvariable"),
							(prop_instance_get_position, 1, ":scene_prop_instance_archery_target_with_hit_a_localvariable"),
							(position_is_behind_position, 2, 1),
							(get_sq_distance_between_positions, ":sq_distance_between_positions_1_2", 1, 2),
							(lt, ":sq_distance_between_positions_1_2", ":value"),
							(assign, ":value", ":sq_distance_between_positions_1_2"),
							(assign, ":value_2", ":scene_prop_instance_archery_target_with_hit_a_localvariable"),
						(try_end),
						(try_begin),
							(lt, ":value", 40000),
							(prop_instance_get_position, 1, ":value_2"),
							(position_move_z, 1, 10),
							(init_position, 3),
							(position_set_x, 3, -160),
							(position_transform_position_to_parent, 4, 1, 3),
							(copy_position, 1, 4),
							(agent_set_look_target_position, ":var_1", 1),
							(lt, ":value", 22500),
							(agent_set_slot, ":var_1", slot_agent_target_prop_instance, ":value_2"),
							(agent_set_attack_action, ":var_1", 0),
						(else_try),
							(agent_get_slot, ":var_1_target_prop_instance", ":var_1", slot_agent_target_prop_instance),
							(ge, ":var_1_target_prop_instance", 0),
							(prop_instance_get_position, 1, ":var_1_target_prop_instance"),
							(get_sq_distance_between_positions, ":sq_distance_between_positions_1_2", 1, 2),
							(lt, ":sq_distance_between_positions_1_2", 40000),
							(position_move_z, 1, 10),
							(init_position, 3),
							(position_set_x, 3, -160),
							(position_transform_position_to_parent, 4, 1, 3),
							(copy_position, 1, 4),
							(agent_set_look_target_position, ":var_1", 1),
						(try_end),
					(try_end),
				(else_try),
					(eq, ":troop_id_var_1", "trp_tutorial_rider_1"),
					(try_begin),
						(agent_get_wielded_item, ":wielded_item_var_1_0", ":var_1", 0),
						(neq, ":wielded_item_var_1_0", "itm_practice_sword"),
						(agent_set_wielded_item, ":var_1", "itm_practice_sword"),
					(else_try),
						(scene_prop_get_num_instances, ":scene_prop_num_instances_archery_target_with_hit_a", "spr_dummy_a_undestructable"),
						(assign, ":value", 10000000),
						(assign, ":value_2", -1),
						(try_for_range, ":localvariable", 0, ":scene_prop_num_instances_archery_target_with_hit_a"),
							(scene_prop_get_instance, ":scene_prop_instance_archery_target_with_hit_a_localvariable", "spr_dummy_a_undestructable", ":localvariable"),
							(neg|agent_slot_eq, ":var_1", slot_agent_target_prop_instance, ":scene_prop_instance_archery_target_with_hit_a_localvariable"),
							(prop_instance_get_position, 1, ":scene_prop_instance_archery_target_with_hit_a_localvariable"),
							(get_sq_distance_between_positions, ":sq_distance_between_positions_1_2", 1, 2),
							(lt, ":sq_distance_between_positions_1_2", ":value"),
							(assign, ":value", ":sq_distance_between_positions_1_2"),
							(assign, ":value_2", ":scene_prop_instance_archery_target_with_hit_a_localvariable"),
						(try_end),
						(try_begin),
							(lt, ":value", 10000),
							(prop_instance_get_position, 1, ":value_2"),
							(position_transform_position_to_local, 3, 2, 1),
							(position_get_x, ":position_x_3", 3),
							(position_get_y, ":position_y_3", 3),
							(is_between, ":position_x_3", -200, 200),
							(gt, ":position_y_3", -100),
							(init_position, 3),
							(try_begin),
								(lt, ":position_x_3", 0),
								(position_move_x, 3, -100),
								(position_move_z, 3, 100),
							(else_try),
								(position_move_x, 3, 100),
								(position_move_z, 3, 150),
							(try_end),
							(position_transform_position_to_parent, 4, 2, 3),
							(agent_set_look_target_position, ":var_1", 4),
							(try_begin),
								(lt, ":position_x_3", 0),
								(agent_set_attack_action, ":var_1", 2, 1),
							(else_try),
								(agent_set_attack_action, ":var_1", 1, 1),
							(try_end),
							(this_or_next|lt, ":value", 900),
							(lt, ":position_y_3", 100),
							(agent_set_attack_action, ":var_1", 0, 0),
							(agent_set_slot, ":var_1", slot_agent_target_prop_instance, ":value_2"),
						(else_try),
							(agent_get_slot, ":var_1_target_prop_instance", ":var_1", slot_agent_target_prop_instance),
							(ge, ":var_1_target_prop_instance", 0),
							(prop_instance_get_position, 1, ":var_1_target_prop_instance"),
							(get_sq_distance_between_positions, ":sq_distance_between_positions_1_2", 1, 2),
							(lt, ":sq_distance_between_positions_1_2", 10000),
							(position_transform_position_to_local, 3, 2, 1),
							(position_get_x, ":position_x_3", 3),
							(position_get_y, ":position_y_3", 3),
							(is_between, ":position_x_3", -200, 200),
							(gt, ":position_y_3", -100),
							(init_position, 3),
							(try_begin),
								(lt, ":position_x_3", 0),
								(position_move_x, 3, -100),
								(position_move_z, 3, 100),
							(else_try),
								(position_move_x, 3, 100),
								(position_move_z, 3, 150),
							(try_end),
							(position_transform_position_to_parent, 4, 2, 3),
							(agent_set_look_target_position, ":var_1", 4),
						(try_end),
					(try_end),
				(try_end),
			(try_end)
		],

		[]),

		(0.0, 0.0, 0.0,
		[
			(store_mission_timer_a, ":mission_timer_a"),
			(try_for_agents, ":var_2"),
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(eq, ":troop_id_var_2", "trp_tutorial_archer_1"),
				(try_begin),
					(agent_get_wielded_item, ":wielded_item_var_2_0", ":var_2", 0),
					(neq, ":wielded_item_var_2_0", "itm_practice_bow"),
					(agent_set_wielded_item, ":var_2", "itm_practice_bow"),
				(else_try),
					(agent_get_slot, ":var_2_target_prop_instance", ":var_2", slot_agent_target_prop_instance),
					(prop_instance_get_position, 1, ":var_2_target_prop_instance"),
					(agent_set_look_target_position, ":var_2", 1),
					(try_begin),
						(neg|agent_slot_ge, ":var_2", 19, ":mission_timer_a"),
						(agent_set_attack_action, ":var_2", 0),
						(store_random_in_range, ":random_in_range_3_13", 3, 13),
						(val_add, ":random_in_range_3_13", ":mission_timer_a"),
						(agent_set_slot, ":var_2", slot_agent_next_action_time, ":random_in_range_3_13"),
					(try_end),
				(try_end),
			(try_end)
		],

		[]),

		(0.0, 0.0, 0.0,
		[
			(call_script, "script_iterate_pointer_arrow")
		],

		[]),

		(5.0, 0.0, 0.0,
		[
			(try_begin),
				(store_mission_timer_a, ":mission_timer_a"),
				(ge, ":mission_timer_a", 30),
				(eq, "$g_tutorial_training_ground_intro_message_being_displayed", 1),
				(assign, "$g_tutorial_training_ground_intro_message_being_displayed", 0),
				(tutorial_message, -1),
			(try_end),
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_3"),
				(agent_is_human, ":var_3"),
				(neq, ":var_3", ":player_agent_no"),
				(agent_refill_ammo, ":var_3"),
			(try_end)
		],

		[]),

		(0.0, 0.0, 0.0,
		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_wielded_item, ":wielded_item_player_agent_no_0", ":player_agent_no", 0),
			(assign, ":value", 0),
			(try_begin),
				(eq, ":wielded_item_player_agent_no_0", "itm_practice_bow"),
				(agent_has_item_equipped, ":player_agent_no", "itm_practice_arrows"),
				(agent_get_ammo, ":ammo_player_agent_no_1", ":player_agent_no", 1),
				(eq, ":ammo_player_agent_no_1", 0),
				(assign, ":value", 1),
			(else_try),
				(eq, ":wielded_item_player_agent_no_0", "itm_practice_bow_2"),
				(agent_has_item_equipped, ":player_agent_no", "itm_practice_arrows_2"),
				(agent_get_ammo, ":ammo_player_agent_no_1", ":player_agent_no", 1),
				(eq, ":ammo_player_agent_no_1", 0),
				(assign, ":value", 1),
			(else_try),
				(eq, ":wielded_item_player_agent_no_0", "itm_practice_crossbow"),
				(agent_has_item_equipped, ":player_agent_no", "itm_practice_bolts"),
				(agent_get_ammo, ":ammo_player_agent_no_1", ":player_agent_no", 1),
				(eq, ":ammo_player_agent_no_1", 0),
				(assign, ":value", 1),
			(else_try),
				(eq, ":wielded_item_player_agent_no_0", "itm_practice_javelin"),
				(agent_get_ammo, ":ammo_player_agent_no_1", ":player_agent_no", 1),
				(le, ":ammo_player_agent_no_1", 1),
				(assign, ":value", 1),
			(try_end),
			(eq, ":value", 1),
			(agent_refill_ammo, ":player_agent_no"),
			(dialog_box, "str_tutorial_training_ground_ammo_refill", "@Tutorial")
		],

		[]),

		(0.0, 0.0, 0.0,
		[
			(get_player_agent_no, ":player_agent_no"),
			(neq, "$g_tutorial_training_ground_horseman_trainer_state", 0),
			(mission_disable_talk),
			(try_begin),
				(eq, "$g_tutorial_training_ground_horseman_trainer_state", 1),
				(assign, "$g_tutorial_training_ground_current_score", 0),
				(val_add, "$g_tutorial_training_ground_horseman_trainer_state", 1),
			(else_try),
				(eq, "$g_tutorial_training_ground_horseman_trainer_state", 2),
				(try_begin),
					(try_begin),
						(ge, "$g_tutorial_training_ground_horseman_trainer_item_1", 0),
						(scene_spawned_item_get_instance, ":scene_spawned_item_instance_g_tutorial_training_ground_horseman_trainer_item_1_0", "$g_tutorial_training_ground_horseman_trainer_item_1", 0),
						(prop_instance_get_position, 0, ":scene_spawned_item_instance_g_tutorial_training_ground_horseman_trainer_item_1_0"),
						(position_move_z, 0, 1000, 1),
						(prop_instance_set_position, ":scene_spawned_item_instance_g_tutorial_training_ground_horseman_trainer_item_1_0", 0),
						(scene_prop_get_instance, ":scene_prop_instance_pointer_arrow_0", "spr_pointer_arrow", 0),
						(prop_instance_set_position, ":scene_prop_instance_pointer_arrow_0", 0),
						(assign, "$g_pointer_arrow_height_adder", 200),
						(try_begin),
							(ge, "$g_tutorial_training_ground_horseman_trainer_item_2", 0),
							(scene_spawned_item_get_instance, ":scene_spawned_item_instance_g_tutorial_training_ground_horseman_trainer_item_1_0", "$g_tutorial_training_ground_horseman_trainer_item_2", 0),
							(prop_instance_get_position, 0, ":scene_spawned_item_instance_g_tutorial_training_ground_horseman_trainer_item_1_0"),
							(position_move_z, 0, 1000, 1),
							(prop_instance_set_position, ":scene_spawned_item_instance_g_tutorial_training_ground_horseman_trainer_item_1_0", 0),
						(try_end),
					(try_end),
					(val_add, "$g_tutorial_training_ground_horseman_trainer_state", 1),
				(try_end),
			(else_try),
				(eq, "$g_tutorial_training_ground_horseman_trainer_state", 3),
				(try_begin),
					(ge, "$g_tutorial_training_ground_horseman_trainer_item_1", 0),
					(try_begin),
						(str_store_item_name, 0, "$g_tutorial_training_ground_horseman_trainer_item_1"),
						(tutorial_message, "str_tutorial_training_ground_horseman_text_1"),
						(agent_has_item_equipped, ":player_agent_no", "$g_tutorial_training_ground_horseman_trainer_item_1"),
						(val_add, "$g_tutorial_training_ground_horseman_trainer_state", 1),
						(play_sound, "snd_tutorial_1"),
					(try_end),
				(else_try),
					(val_add, "$g_tutorial_training_ground_horseman_trainer_state", 1),
				(try_end),
			(else_try),
				(eq, "$g_tutorial_training_ground_horseman_trainer_state", 4),
				(try_begin),
					(ge, "$g_tutorial_training_ground_horseman_trainer_item_2", 0),
					(try_begin),
						(str_store_item_name, 0, "$g_tutorial_training_ground_horseman_trainer_item_2"),
						(tutorial_message, "str_tutorial_training_ground_horseman_text_1"),
						(agent_has_item_equipped, ":player_agent_no", "$g_tutorial_training_ground_horseman_trainer_item_2"),
						(val_add, "$g_tutorial_training_ground_horseman_trainer_state", 1),
						(play_sound, "snd_tutorial_1"),
					(try_end),
				(else_try),
					(val_add, "$g_tutorial_training_ground_horseman_trainer_state", 1),
				(try_end),
			(else_try),
				(eq, "$g_tutorial_training_ground_horseman_trainer_state", 5),
				(try_begin),
					(agent_get_horse, ":horse_player_agent_no", ":player_agent_no"),
					(lt, ":horse_player_agent_no", 0),
					(tutorial_message, "str_tutorial_training_ground_horseman_text_2"),
					(try_begin),
						(assign, ":value", -1),
						(try_for_agents, ":var_6"),
							(agent_get_item_id, ":item_id_var_6", ":var_6"),
							(eq, ":item_id_var_6", "itm_practice_horse"),
							(assign, ":value", ":var_6"),
						(try_end),
						(agent_get_position, 0, ":value"),
						(scene_prop_get_instance, ":scene_prop_instance_pointer_arrow_0", "spr_pointer_arrow", 0),
						(prop_instance_get_position, 1, ":scene_prop_instance_pointer_arrow_0"),
						(set_fixed_point_multiplier, 100),
						(position_get_x, ":position_x_0", 0),
						(position_get_x, ":position_x_1", 1),
						(position_get_y, ":position_y_0", 0),
						(position_get_y, ":position_y_1", 1),
						(this_or_next|neq, ":position_x_0", ":position_x_1"),
						(neq, ":position_y_0", ":position_y_1"),
						(prop_instance_set_position, ":scene_prop_instance_pointer_arrow_0", 0),
						(assign, "$g_pointer_arrow_height_adder", 200),
					(try_end),
				(else_try),
					(val_add, "$g_tutorial_training_ground_horseman_trainer_state", 1),
				(try_end),
			(else_try),
				(eq, "$g_tutorial_training_ground_horseman_trainer_state", 6),
				(try_begin),
					(eq, "$g_tutorial_training_ground_horseman_trainer_completed_chapters", 0),
					(tutorial_message, "str_tutorial_training_ground_horseman_text_3"),
				(else_try),
					(eq, "$g_tutorial_training_ground_horseman_trainer_completed_chapters", 1),
					(assign, ":value_2", "spr_dummy_a_undestructable"),
					(tutorial_message, "str_tutorial_training_ground_horseman_text_4"),
				(else_try),
					(assign, ":value_2", "spr_archery_target_with_hit_a"),
					(tutorial_message, "str_tutorial_training_ground_horseman_text_5"),
				(try_end),
				(try_begin),
					(eq, "$g_tutorial_training_ground_horseman_trainer_completed_chapters", 0),
					(store_add, ":value_3", "$g_tutorial_training_ground_current_score", 48),
					(entry_point_get_position, 0, ":value_3"),
					(init_position, 2),
					(position_move_y, 2, -800),
					(position_transform_position_to_parent, 3, 0, 2),
					(copy_position, 0, 3),
					(agent_get_position, 2, ":player_agent_no"),
					(try_begin),
						(get_distance_between_positions, ":distance_between_positions_0_2", 0, 2),
						(lt, ":distance_between_positions_0_2", 500),
						(val_add, "$g_tutorial_training_ground_current_score", 1),
						(ge, "$g_tutorial_training_ground_current_score", 10),
						(assign, "$g_pointer_arrow_height_adder", -1000),
						(tutorial_message, "str_tutorial_training_ground_horseman_text_6", 0, 10),
						(assign, "$g_tutorial_training_ground_horseman_trainer_state", 0),
						(val_add, "$g_tutorial_training_ground_horseman_trainer_completed_chapters", 1),
						(play_sound, "snd_tutorial_2"),
					(try_end),
					(try_begin),
						(scene_prop_get_instance, ":scene_prop_instance_pointer_arrow_0", "spr_pointer_arrow", 0),
						(prop_instance_get_position, 1, ":scene_prop_instance_pointer_arrow_0"),
						(set_fixed_point_multiplier, 1),
						(position_get_x, ":position_x_0", 0),
						(position_get_x, ":position_x_1", 1),
						(position_get_y, ":position_y_0", 0),
						(position_get_y, ":position_y_1", 1),
						(this_or_next|neq, ":position_x_0", ":position_x_1"),
						(neq, ":position_y_0", ":position_y_1"),
						(prop_instance_set_position, ":scene_prop_instance_pointer_arrow_0", 0),
						(assign, "$g_pointer_arrow_height_adder", 150),
						(play_sound, "snd_tutorial_1"),
					(try_end),
				(else_try),
					(scene_prop_get_num_instances, ":scene_prop_num_instances_value_2", ":value_2"),
					(try_begin),
						(lt, "$g_tutorial_training_ground_current_score", 6),
						(assign, ":value_4", -1),
						(store_add, ":value_5", "$g_tutorial_training_ground_current_score", 1),
						(try_for_range, ":localvariable", 0, ":scene_prop_num_instances_value_2"),
							(scene_prop_get_instance, ":scene_prop_instance_value_2_localvariable", ":value_2", ":localvariable"),
							(prop_instance_get_variation_id_2, ":prop_instance_variation_id_2_scene_prop_instance_value_2_localvariable", ":scene_prop_instance_value_2_localvariable"),
							(eq, ":value_5", ":prop_instance_variation_id_2_scene_prop_instance_value_2_localvariable"),
							(assign, ":value_4", ":scene_prop_instance_value_2_localvariable"),
							(assign, ":scene_prop_num_instances_value_2", 0),
						(try_end),
						(try_begin),
							(prop_instance_get_position, 0, ":value_4"),
							(scene_prop_get_instance, ":scene_prop_instance_pointer_arrow_0", "spr_pointer_arrow", 0),
							(prop_instance_get_position, 1, ":scene_prop_instance_pointer_arrow_0"),
							(set_fixed_point_multiplier, 1),
							(position_get_x, ":position_x_0", 0),
							(position_get_x, ":position_x_1", 1),
							(position_get_y, ":position_y_0", 0),
							(position_get_y, ":position_y_1", 1),
							(this_or_next|neq, ":position_x_0", ":position_x_1"),
							(neq, ":position_y_0", ":position_y_1"),
							(prop_instance_set_position, ":scene_prop_instance_pointer_arrow_0", 0),
							(assign, "$g_pointer_arrow_height_adder", 200),
							(play_sound, "snd_tutorial_1"),
						(try_end),
					(else_try),
						(assign, "$g_pointer_arrow_height_adder", -1000),
						(try_begin),
							(ge, "$g_tutorial_training_ground_horseman_trainer_item_2", 0),
							(agent_unequip_item, ":player_agent_no", "$g_tutorial_training_ground_horseman_trainer_item_2"),
						(try_end),
						(agent_unequip_item, ":player_agent_no", "$g_tutorial_training_ground_horseman_trainer_item_1"),
						(tutorial_message, "str_tutorial_training_ground_horseman_text_6", 0, 10),
						(assign, "$g_tutorial_training_ground_horseman_trainer_state", 0),
						(val_add, "$g_tutorial_training_ground_horseman_trainer_completed_chapters", 1),
						(play_sound, "snd_tutorial_2"),
					(try_end),
				(try_end),
			(try_end)
		],

		[]),

		(0.0, 0.0, 0.0,
		[
			(get_player_agent_no, ":player_agent_no"),
			(neq, "$g_tutorial_training_ground_archer_trainer_state", 0),
			(mission_disable_talk),
			(try_begin),
				(eq, "$g_tutorial_training_ground_archer_trainer_state", 1),
				(try_begin),
					(assign, "$g_last_destroyed_gourds", 0),
					(assign, "$g_tutorial_training_ground_current_score", 0),
					(scene_spawned_item_get_instance, ":scene_spawned_item_instance_g_tutorial_training_ground_archer_trainer_item_1_0", "$g_tutorial_training_ground_archer_trainer_item_1", 0),
					(prop_instance_get_position, 0, ":scene_spawned_item_instance_g_tutorial_training_ground_archer_trainer_item_1_0"),
					(position_move_z, 0, 1000, 1),
					(prop_instance_set_position, ":scene_spawned_item_instance_g_tutorial_training_ground_archer_trainer_item_1_0", 0),
					(scene_prop_get_instance, ":scene_prop_instance_pointer_arrow_0", "spr_pointer_arrow", 0),
					(prop_instance_set_position, ":scene_prop_instance_pointer_arrow_0", 0),
					(assign, "$g_pointer_arrow_height_adder", 100),
					(try_begin),
						(ge, "$g_tutorial_training_ground_archer_trainer_item_2", 0),
						(scene_spawned_item_get_instance, ":scene_spawned_item_instance_g_tutorial_training_ground_archer_trainer_item_1_0", "$g_tutorial_training_ground_archer_trainer_item_2", 0),
						(prop_instance_get_position, 0, ":scene_spawned_item_instance_g_tutorial_training_ground_archer_trainer_item_1_0"),
						(position_move_z, 0, 1000, 1),
						(prop_instance_set_position, ":scene_spawned_item_instance_g_tutorial_training_ground_archer_trainer_item_1_0", 0),
					(try_end),
					(val_add, "$g_tutorial_training_ground_archer_trainer_state", 1),
				(try_end),
			(else_try),
				(eq, "$g_tutorial_training_ground_archer_trainer_state", 2),
				(try_begin),
					(str_store_item_name, 0, "$g_tutorial_training_ground_archer_trainer_item_1"),
					(tutorial_message, "str_tutorial_training_ground_archer_text_1"),
					(agent_has_item_equipped, ":player_agent_no", "$g_tutorial_training_ground_archer_trainer_item_1"),
					(val_add, "$g_tutorial_training_ground_archer_trainer_state", 1),
					(play_sound, "snd_tutorial_1"),
				(try_end),
			(else_try),
				(eq, "$g_tutorial_training_ground_archer_trainer_state", 3),
				(try_begin),
					(ge, "$g_tutorial_training_ground_archer_trainer_item_2", 0),
					(try_begin),
						(str_store_item_name, 0, "$g_tutorial_training_ground_archer_trainer_item_2"),
						(tutorial_message, "str_tutorial_training_ground_archer_text_1"),
						(agent_has_item_equipped, ":player_agent_no", "$g_tutorial_training_ground_archer_trainer_item_2"),
						(val_add, "$g_tutorial_training_ground_archer_trainer_state", 1),
						(play_sound, "snd_tutorial_1"),
					(try_end),
				(else_try),
					(val_add, "$g_tutorial_training_ground_archer_trainer_state", 1),
				(try_end),
			(else_try),
				(eq, "$g_tutorial_training_ground_archer_trainer_state", 4),
				(try_begin),
					(try_for_range, ":number", 0, 3),
						(scene_prop_get_instance, ":scene_prop_instance_gourd_number", "spr_gourd", ":number"),
						(prop_instance_refill_hit_points, ":scene_prop_instance_gourd_number"),
						(entry_point_get_position, 0, 45),
						(init_position, 1),
						(store_sub, ":value", ":number", 1),
						(val_mul, ":value", 5),
						(position_rotate_z, 1, ":value"),
						(try_begin),
							(ge, "$g_tutorial_training_ground_archer_trainer_item_2", 0),
							(position_move_y, 1, 1300),
						(else_try),
							(position_move_y, 1, 800),
							(val_mul, ":value", 2),
						(try_end),
						(position_transform_position_to_parent, 2, 0, 1),
						(position_set_z_to_ground_level, 2),
						(scene_prop_get_instance, ":scene_prop_instance_gourd_spike_number", "spr_gourd_spike", ":number"),
						(prop_instance_set_position, ":scene_prop_instance_gourd_spike_number", 2),
						(position_move_z, 2, 150, 1),
						(prop_instance_set_position, ":scene_prop_instance_gourd_number", 2),
					(try_end),
					(scene_prop_get_instance, ":scene_prop_instance_pointer_arrow_0", "spr_pointer_arrow", 0),
					(scene_prop_get_instance, ":scene_prop_instance_gourd_spike_number", "spr_gourd_spike", 1),
					(prop_instance_get_position, 1, ":scene_prop_instance_gourd_spike_number"),
					(prop_instance_set_position, ":scene_prop_instance_pointer_arrow_0", 1),
					(assign, "$g_pointer_arrow_height_adder", 200),
					(tutorial_message, "str_tutorial_training_ground_archer_text_2"),
					(val_add, "$g_tutorial_training_ground_archer_trainer_state", 1),
				(try_end),
			(else_try),
				(eq, "$g_tutorial_training_ground_archer_trainer_state", 5),
				(try_begin),
					(try_begin),
						(neq, "$g_tutorial_training_ground_current_score", "$g_last_destroyed_gourds"),
						(assign, "$g_tutorial_training_ground_current_score", "$g_last_destroyed_gourds"),
						(try_begin),
							(lt, "$g_last_destroyed_gourds", 3),
							(play_sound, "snd_tutorial_1"),
						(else_try),
							(play_sound, "snd_tutorial_2"),
						(try_end),
					(try_end),
					(try_begin),
						(eq, "$g_tutorial_training_ground_archer_trainer_completed_chapters", 0),
						(eq, "$g_last_destroyed_gourds", 0),
						(entry_point_get_position, 0, 45),
						(agent_get_position, 1, ":player_agent_no"),
						(neg|position_is_behind_position, 1, 0),
						(tutorial_message, "str_tutorial_training_ground_archer_text_3"),
					(else_try),
						(eq, "$g_tutorial_training_ground_archer_trainer_completed_chapters", 0),
						(eq, "$g_last_destroyed_gourds", 1),
						(tutorial_message, "str_tutorial_training_ground_archer_text_4"),
					(try_end),
					(ge, "$g_last_destroyed_gourds", 3),
					(assign, "$g_pointer_arrow_height_adder", -1000),
					(val_add, "$g_tutorial_training_ground_archer_trainer_state", 1),
				(try_end),
			(else_try),
				(eq, "$g_tutorial_training_ground_archer_trainer_state", 6),
				(try_begin),
					(try_begin),
						(ge, "$g_tutorial_training_ground_archer_trainer_item_2", 0),
						(agent_unequip_item, ":player_agent_no", "$g_tutorial_training_ground_archer_trainer_item_2"),
					(try_end),
					(agent_unequip_item, ":player_agent_no", "$g_tutorial_training_ground_archer_trainer_item_1"),
					(tutorial_message, "str_tutorial_training_ground_archer_text_5", 0, 10),
					(assign, "$g_tutorial_training_ground_archer_trainer_state", 0),
					(val_add, "$g_tutorial_training_ground_archer_trainer_completed_chapters", 1),
				(try_end),
			(try_end)
		],

		[]),

		(0.0, 0.0, 0.0,
		[
			(get_player_agent_no, ":player_agent_no"),
			(neq, "$g_tutorial_training_ground_melee_trainer_attack", -1),
			(mission_disable_talk),
			(try_for_agents, ":value"),
				(agent_get_troop_id, ":troop_id_value", ":value"),
				(eq, ":troop_id_value", "$g_tutorial_training_ground_melee_trainer_attack"),
				(assign, ":var_4", ":value"),
			(try_end),
			(try_begin),
				(eq, "$g_tutorial_training_ground_melee_state", 0),
				(try_begin),
					(try_for_agents, ":value"),
						(agent_get_troop_id, ":troop_id_value", ":value"),
						(this_or_next|eq, ":troop_id_value", "trp_tutorial_fighter_1"),
						(this_or_next|eq, ":troop_id_value", "trp_tutorial_fighter_2"),
						(this_or_next|eq, ":troop_id_value", "trp_tutorial_fighter_3"),
						(eq, ":troop_id_value", "trp_tutorial_fighter_4"),
						(agent_set_team, ":value", 7),
						(agent_get_slot, ":value_spawn_entry_point", ":value", slot_agent_spawn_entry_point),
						(entry_point_get_position, 1, ":value_spawn_entry_point"),
						(agent_set_scripted_destination, ":value", 1),
						(agent_force_rethink, ":value"),
					(try_end),
					(agent_set_wielded_item, ":var_4", "itm_practice_sword"),
					(store_random_in_range, "$g_tutorial_training_ground_melee_state", 1, 5),
					(assign, "$g_tutorial_update_mouse_presentation", 1),
					(assign, "$g_tutorial_training_ground_next_score_time", 0),
				(try_end),
			(else_try),
				(gt, "$g_tutorial_training_ground_melee_state", 0),
				(try_begin),
					(agent_set_team, ":player_agent_no", 1),
					(agent_set_team, ":var_4", 2),
					(agent_get_position, 1, ":player_agent_no"),
					(agent_set_scripted_destination_no_attack, ":var_4", 1),
					(agent_get_attack_action, ":attack_action_player_agent_no", ":player_agent_no"),
					(try_begin),
						(eq, ":attack_action_player_agent_no", 2),
						(agent_get_action_dir, ":action_dir_player_agent_no", ":player_agent_no"),
						(try_begin),
							(eq, ":action_dir_player_agent_no", 0),
							(agent_set_defend_action, ":var_4", 0, 1),
						(else_try),
							(eq, ":action_dir_player_agent_no", 3),
							(agent_set_defend_action, ":var_4", 3, 1),
						(else_try),
							(eq, ":action_dir_player_agent_no", 1),
							(agent_set_defend_action, ":var_4", 2, 1),
						(else_try),
							(eq, ":action_dir_player_agent_no", 2),
							(agent_set_defend_action, ":var_4", 1, 1),
						(try_end),
					(try_end),
					(try_begin),
						(ge, "$g_tutorial_training_ground_current_score", 5),
						(tutorial_message, -1),
						(assign, "$g_tutorial_training_ground_melee_state", 0),
						(agent_set_team, ":player_agent_no", 0),
						(agent_set_team, ":var_4", 7),
						(agent_set_hit_points, ":player_agent_no", 100, 0),
						(agent_set_hit_points, ":var_4", 100, 0),
						(assign, "$g_tutorial_training_ground_conversation_state", 9),
						(start_mission_conversation, "$g_tutorial_training_ground_melee_trainer_attack"),
						(assign, "$g_tutorial_training_ground_melee_trainer_attack", -1),
					(try_end),
				(try_end),
			(try_end),
			(try_begin),
				(agent_get_attack_action, ":attack_action_player_agent_no", ":player_agent_no"),
				(eq, ":attack_action_player_agent_no", 2),
				(agent_get_action_dir, ":action_dir_player_agent_no", ":player_agent_no"),
				(store_add, ":value_2", ":action_dir_player_agent_no", 1),
				(agent_get_wielded_item, ":wielded_item_player_agent_no_0", ":player_agent_no", 0),
				(call_script, "script_cf_is_melee_weapon_for_tutorial", ":wielded_item_player_agent_no_0"),
				(store_mission_timer_a, ":mission_timer_a"),
				(gt, ":mission_timer_a", "$g_tutorial_training_ground_next_score_time"),
				(try_begin),
					(eq, ":value_2", "$g_tutorial_training_ground_melee_state"),
					(val_add, "$g_tutorial_training_ground_current_score", 1),
					(try_begin),
						(ge, "$g_tutorial_training_ground_current_score", 5),
						(assign, "$g_tutorial_training_ground_melee_state", 5),
						(play_sound, "snd_tutorial_2"),
					(else_try),
						(play_sound, "snd_tutorial_1"),
						(assign, ":value_3", 100),
						(try_for_range, ":unused", 0, ":value_3"),
							(store_random_in_range, ":random_in_range_1_5", 1, 5),
							(neq, ":random_in_range_1_5", "$g_tutorial_training_ground_melee_state"),
							(assign, "$g_tutorial_training_ground_melee_state", ":random_in_range_1_5"),
							(assign, ":value_3", 0),
						(try_end),
					(try_end),
					(assign, "$g_tutorial_update_mouse_presentation", 1),
				(else_try),
					(val_add, "$g_tutorial_training_ground_current_score_2", 1),
					(play_sound, "snd_tutorial_fail"),
				(try_end),
				(store_add, "$g_tutorial_training_ground_next_score_time", ":mission_timer_a", 1),
			(try_end),
			(assign, reg0, "$g_tutorial_training_ground_current_score"),
			(assign, reg1, "$g_tutorial_training_ground_current_score_2"),
			(str_clear, 0),
			(assign, "$g_tutorial_mouse_dir", -1),
			(assign, "$g_tutorial_mouse_click", -1),
			(try_begin),
				(neq, "$g_tutorial_training_ground_melee_state", 5),
				(store_mission_timer_a, ":mission_timer_a"),
				(this_or_next|eq, "$g_tutorial_update_mouse_presentation", 0),
				(gt, ":mission_timer_a", "$g_tutorial_training_ground_next_score_time"),
				(try_begin),
					(eq, "$g_tutorial_training_ground_melee_state", 1),
					(str_store_string, 0, "str_tutorial_training_ground_attack_training_down"),
				(else_try),
					(eq, "$g_tutorial_training_ground_melee_state", 4),
					(str_store_string, 0, "str_tutorial_training_ground_attack_training_up"),
				(else_try),
					(eq, "$g_tutorial_training_ground_melee_state", 2),
					(str_store_string, 0, "str_tutorial_training_ground_attack_training_right"),
				(else_try),
					(eq, "$g_tutorial_training_ground_melee_state", 3),
					(str_store_string, 0, "str_tutorial_training_ground_attack_training_left"),
				(try_end),
				(store_sub, "$g_tutorial_mouse_dir", "$g_tutorial_training_ground_melee_state", 1),
				(assign, "$g_tutorial_mouse_click", 0),
				(try_begin),
					(eq, "$g_tutorial_update_mouse_presentation", 1),
					(assign, "$g_tutorial_update_mouse_presentation", 0),
					(start_presentation, "prsnt_tutorial_show_mouse_movement"),
				(try_end),
			(try_end),
			(try_begin),
				(agent_get_wielded_item, ":wielded_item_player_agent_no_0", ":player_agent_no", 0),
				(call_script, "script_cf_is_melee_weapon_for_tutorial", ":wielded_item_player_agent_no_0"),
				(tutorial_message, "str_tutorial_training_ground_attack_training"),
			(else_try),
				(tutorial_message, "str_tutorial_training_ground_warning_melee"),
			(try_end)
		],

		[]),

		(0.0, 0.0, 0.0,
		[
			(get_player_agent_no, ":player_agent_no"),
			(neq, "$g_tutorial_training_ground_melee_trainer_parry", -1),
			(mission_disable_talk),
			(try_for_agents, ":value"),
				(agent_get_troop_id, ":troop_id_value", ":value"),
				(eq, ":troop_id_value", "$g_tutorial_training_ground_melee_trainer_parry"),
				(assign, ":var_4", ":value"),
			(try_end),
			(try_begin),
				(eq, "$g_tutorial_training_ground_melee_state", 0),
				(try_begin),
					(try_for_agents, ":value"),
						(agent_get_troop_id, ":troop_id_value", ":value"),
						(this_or_next|eq, ":troop_id_value", "trp_tutorial_fighter_1"),
						(this_or_next|eq, ":troop_id_value", "trp_tutorial_fighter_2"),
						(this_or_next|eq, ":troop_id_value", "trp_tutorial_fighter_3"),
						(eq, ":troop_id_value", "trp_tutorial_fighter_4"),
						(agent_set_team, ":value", 7),
						(agent_get_slot, ":value_spawn_entry_point", ":value", slot_agent_spawn_entry_point),
						(entry_point_get_position, 1, ":value_spawn_entry_point"),
						(agent_set_scripted_destination, ":value", 1),
						(agent_force_rethink, ":value"),
					(try_end),
					(agent_set_wielded_item, ":var_4", "itm_practice_sword"),
					(val_add, "$g_tutorial_training_ground_melee_state", 1),
					(store_mission_timer_a, "$g_tutorial_training_ground_melee_next_action_time"),
					(val_add, "$g_tutorial_training_ground_melee_next_action_time", 1),
				(try_end),
			(else_try),
				(eq, "$g_tutorial_training_ground_melee_state", 1),
				(try_begin),
					(store_mission_timer_a, ":mission_timer_a"),
					(gt, ":mission_timer_a", "$g_tutorial_training_ground_melee_next_action_time"),
					(agent_set_team, ":player_agent_no", 1),
					(agent_set_team, ":var_4", 2),
					(agent_get_position, 1, ":player_agent_no"),
					(agent_set_scripted_destination_no_attack, ":var_4", 1),
					(agent_get_position, 2, ":var_4"),
					(get_sq_distance_between_positions, ":sq_distance_between_positions_1_2", 1, 2),
					(lt, ":sq_distance_between_positions_1_2", 400),
					(try_begin),
						(eq, "$g_tutorial_training_ground_melee_trainer_action_state", 0),
						(try_begin),
							(ge, "$g_tutorial_training_ground_current_score", 5),
							(assign, "$g_tutorial_mouse_dir", -1),
							(assign, "$g_tutorial_mouse_click", -1),
							(tutorial_message, -1),
							(assign, "$g_tutorial_training_ground_melee_state", 0),
							(agent_set_team, ":player_agent_no", 0),
							(agent_set_team, ":var_4", 7),
							(agent_set_hit_points, ":player_agent_no", 100, 0),
							(agent_set_hit_points, ":var_4", 100, 0),
							(assign, "$g_tutorial_training_ground_conversation_state", 1),
							(start_mission_conversation, "$g_tutorial_training_ground_melee_trainer_parry"),
							(assign, "$g_tutorial_training_ground_melee_trainer_parry", -1),
						(else_try),
							(store_random_in_range, ":random_in_range_0_4", 0, 4),
							(agent_set_attack_action, ":var_4", ":random_in_range_0_4", 1),
							(val_add, "$g_tutorial_training_ground_melee_trainer_action_state", 1),
							(assign, "$g_tutorial_mouse_dir", ":random_in_range_0_4"),
							(try_begin),
								(is_between, ":random_in_range_0_4", 1, 3),
								(store_sub, "$g_tutorial_mouse_dir", 3, ":random_in_range_0_4"),
							(try_end),
							(assign, "$g_tutorial_mouse_click", 1),
							(start_presentation, "prsnt_tutorial_show_mouse_movement"),
						(try_end),
					(else_try),
						(eq, "$g_tutorial_training_ground_melee_trainer_action_state", 1),
						(agent_get_defend_action, ":defend_action_player_agent_no", ":player_agent_no"),
						(gt, ":defend_action_player_agent_no", 0),
						(agent_get_action_dir, ":action_dir_player_agent_no", ":player_agent_no"),
						(agent_get_action_dir, ":action_dir_var_4", ":var_4"),
						(assign, ":value_2", 0),
						(try_begin),
							(eq, ":action_dir_var_4", 0),
							(eq, ":action_dir_player_agent_no", 0),
							(assign, ":value_2", 1),
						(else_try),
							(eq, ":action_dir_var_4", 3),
							(eq, ":action_dir_player_agent_no", 3),
							(assign, ":value_2", 1),
						(else_try),
							(eq, ":action_dir_var_4", 1),
							(eq, ":action_dir_player_agent_no", 2),
							(assign, ":value_2", 1),
						(else_try),
							(eq, ":action_dir_var_4", 2),
							(eq, ":action_dir_player_agent_no", 1),
							(assign, ":value_2", 1),
						(try_end),
						(eq, ":value_2", 1),
						(assign, "$g_tutorial_mouse_dir", -1),
						(assign, "$g_tutorial_mouse_click", -1),
						(agent_set_attack_action, ":var_4", 0, 0),
						(val_add, "$g_tutorial_training_ground_melee_trainer_action_state", 1),
						(store_mission_timer_a, "$g_tutorial_training_ground_melee_trainer_next_action_time"),
						(val_add, "$g_tutorial_training_ground_melee_trainer_next_action_time", 2),
					(else_try),
						(eq, "$g_tutorial_training_ground_melee_trainer_action_state", 2),
						(try_begin),
							(store_mission_timer_a, ":mission_timer_a"),
							(gt, ":mission_timer_a", "$g_tutorial_training_ground_melee_trainer_next_action_time"),
							(assign, "$g_tutorial_training_ground_melee_trainer_action_state", 0),
						(try_end),
					(try_end),
				(try_end),
			(try_end),
			(try_begin),
				(agent_is_in_parried_animation, ":var_4"),
				(agent_get_wielded_item, ":wielded_item_player_agent_no_1", ":player_agent_no", 1),
				(eq, ":wielded_item_player_agent_no_1", -1),
				(agent_get_wielded_item, ":wielded_item_player_agent_no_0", ":player_agent_no", 0),
				(neq, ":wielded_item_player_agent_no_0", "itm_practice_dagger"),
				(call_script, "script_cf_is_melee_weapon_for_tutorial", ":wielded_item_player_agent_no_0"),
				(store_mission_timer_a, ":mission_timer_a"),
				(gt, ":mission_timer_a", "$g_tutorial_training_ground_next_score_time"),
				(val_add, "$g_tutorial_training_ground_current_score", 1),
				(try_begin),
					(lt, "$g_tutorial_training_ground_current_score", 5),
					(play_sound, "snd_tutorial_1"),
				(else_try),
					(play_sound, "snd_tutorial_2"),
				(try_end),
				(store_add, "$g_tutorial_training_ground_next_score_time", ":mission_timer_a", 1),
			(try_end),
			(assign, reg0, "$g_tutorial_training_ground_current_score"),
			(try_begin),
				(agent_get_wielded_item, ":wielded_item_player_agent_no_1", ":player_agent_no", 1),
				(eq, ":wielded_item_player_agent_no_1", -1),
				(agent_get_wielded_item, ":wielded_item_player_agent_no_0", ":player_agent_no", 0),
				(neq, ":wielded_item_player_agent_no_0", "itm_practice_dagger"),
				(call_script, "script_cf_is_melee_weapon_for_tutorial", ":wielded_item_player_agent_no_0"),
				(tutorial_message, "str_tutorial_training_ground_parry_training"),
			(else_try),
				(neq, ":wielded_item_player_agent_no_1", -1),
				(tutorial_message, "str_tutorial_training_ground_warning_shield"),
			(else_try),
				(tutorial_message, "str_tutorial_training_ground_warning_melee_with_parry"),
			(try_end)
		],

		[]),

		(0.0, 0.0, 0.0,
		[
			(get_player_agent_no, ":player_agent_no"),
			(neq, "$g_tutorial_training_ground_melee_trainer_chamber", -1),
			(mission_disable_talk),
			(try_for_agents, ":value"),
				(agent_get_troop_id, ":troop_id_value", ":value"),
				(eq, ":troop_id_value", "$g_tutorial_training_ground_melee_trainer_chamber"),
				(assign, ":var_4", ":value"),
			(try_end),
			(try_begin),
				(eq, "$g_tutorial_training_ground_melee_state", 0),
				(try_begin),
					(try_for_agents, ":value"),
						(agent_get_troop_id, ":troop_id_value", ":value"),
						(this_or_next|eq, ":troop_id_value", "trp_tutorial_fighter_1"),
						(this_or_next|eq, ":troop_id_value", "trp_tutorial_fighter_2"),
						(this_or_next|eq, ":troop_id_value", "trp_tutorial_fighter_3"),
						(eq, ":troop_id_value", "trp_tutorial_fighter_4"),
						(agent_set_team, ":value", 7),
						(agent_get_slot, ":value_spawn_entry_point", ":value", slot_agent_spawn_entry_point),
						(entry_point_get_position, 1, ":value_spawn_entry_point"),
						(agent_set_scripted_destination, ":value", 1),
						(agent_force_rethink, ":value"),
					(try_end),
					(agent_set_wielded_item, ":var_4", "itm_practice_sword"),
					(val_add, "$g_tutorial_training_ground_melee_state", 1),
					(store_mission_timer_a, "$g_tutorial_training_ground_melee_next_action_time"),
					(val_add, "$g_tutorial_training_ground_melee_next_action_time", 1),
				(try_end),
			(else_try),
				(eq, "$g_tutorial_training_ground_melee_state", 1),
				(try_begin),
					(store_mission_timer_a, ":mission_timer_a"),
					(gt, ":mission_timer_a", "$g_tutorial_training_ground_melee_next_action_time"),
					(agent_set_team, ":player_agent_no", 1),
					(agent_set_team, ":var_4", 2),
					(agent_get_position, 1, ":player_agent_no"),
					(agent_set_scripted_destination_no_attack, ":var_4", 1),
					(agent_get_position, 2, ":var_4"),
					(get_sq_distance_between_positions, ":sq_distance_between_positions_1_2", 1, 2),
					(lt, ":sq_distance_between_positions_1_2", 400),
					(try_begin),
						(eq, "$g_tutorial_training_ground_melee_trainer_action_state", 0),
						(try_begin),
							(ge, "$g_tutorial_training_ground_current_score", 5),
							(tutorial_message, -1),
							(assign, "$g_tutorial_training_ground_melee_state", 0),
							(agent_set_team, ":player_agent_no", 0),
							(agent_set_team, ":var_4", 7),
							(agent_set_hit_points, ":player_agent_no", 100, 0),
							(agent_set_hit_points, ":var_4", 100, 0),
							(assign, "$g_tutorial_training_ground_conversation_state", 6),
							(start_mission_conversation, "$g_tutorial_training_ground_melee_trainer_chamber"),
							(assign, "$g_tutorial_training_ground_melee_trainer_chamber", -1),
						(else_try),
							(store_random_in_range, "$g_tutorial_training_ground_melee_trainer_attack_dir", 0, 4),
							(agent_set_attack_action, ":var_4", "$g_tutorial_training_ground_melee_trainer_attack_dir", 1),
							(val_add, "$g_tutorial_training_ground_melee_trainer_action_state", 1),
							(store_mission_timer_a, "$g_tutorial_training_ground_melee_trainer_next_action_time"),
							(val_add, "$g_tutorial_training_ground_melee_trainer_next_action_time", 1),
						(try_end),
					(else_try),
						(eq, "$g_tutorial_training_ground_melee_trainer_action_state", 1),
						(try_begin),
							(store_mission_timer_a, ":mission_timer_a"),
							(gt, ":mission_timer_a", "$g_tutorial_training_ground_melee_trainer_next_action_time"),
							(agent_set_attack_action, ":var_4", -1, 0),
							(agent_set_defend_action, ":var_4", 0, 1),
							(val_add, "$g_tutorial_training_ground_melee_trainer_action_state", 1),
							(store_mission_timer_a, "$g_tutorial_training_ground_melee_trainer_next_action_time"),
							(val_add, "$g_tutorial_training_ground_melee_trainer_next_action_time", 1),
						(try_end),
					(else_try),
						(eq, "$g_tutorial_training_ground_melee_trainer_action_state", 2),
						(try_begin),
							(store_mission_timer_a, ":mission_timer_a"),
							(gt, ":mission_timer_a", "$g_tutorial_training_ground_melee_trainer_next_action_time"),
							(agent_set_attack_action, ":var_4", "$g_tutorial_training_ground_melee_trainer_attack_dir", 0),
							(val_add, "$g_tutorial_training_ground_melee_trainer_action_state", 1),
							(store_mission_timer_a, "$g_tutorial_training_ground_melee_trainer_next_action_time"),
							(val_add, "$g_tutorial_training_ground_melee_trainer_next_action_time", 2),
						(try_end),
					(else_try),
						(eq, "$g_tutorial_training_ground_melee_trainer_action_state", 3),
						(try_begin),
							(store_mission_timer_a, ":mission_timer_a"),
							(gt, ":mission_timer_a", "$g_tutorial_training_ground_melee_trainer_next_action_time"),
							(assign, "$g_tutorial_training_ground_melee_trainer_action_state", 0),
						(try_end),
					(try_end),
				(try_end),
			(try_end),
			(try_begin),
				(agent_is_in_parried_animation, ":var_4"),
				(agent_get_attack_action, ":attack_action_player_agent_no", ":player_agent_no"),
				(store_mission_timer_a, ":mission_timer_a"),
				(gt, ":mission_timer_a", "$g_tutorial_training_ground_next_score_time"),
				(store_add, "$g_tutorial_training_ground_next_score_time", ":mission_timer_a", 1),
				(eq, ":attack_action_player_agent_no", 1),
				(val_add, "$g_tutorial_training_ground_current_score", 1),
				(try_begin),
					(lt, "$g_tutorial_training_ground_current_score", 5),
					(play_sound, "snd_tutorial_1"),
				(else_try),
					(play_sound, "snd_tutorial_2"),
				(try_end),
			(try_end),
			(assign, reg0, "$g_tutorial_training_ground_current_score"),
			(tutorial_message, "str_tutorial_training_ground_chamber_training")
		],

		[]),

		(0.0, 0.0, 0.0,
		[
			(get_player_agent_no, ":player_agent_no"),
			(neq, "$g_tutorial_training_ground_melee_trainer_combat", -1),
			(mission_disable_talk),
			(try_for_agents, ":value"),
				(agent_get_troop_id, ":troop_id_value", ":value"),
				(eq, ":troop_id_value", "$g_tutorial_training_ground_melee_trainer_combat"),
				(assign, ":var_4", ":value"),
			(try_end),
			(try_begin),
				(eq, "$g_tutorial_training_ground_melee_state", 0),
				(try_begin),
					(try_for_agents, ":value"),
						(agent_get_troop_id, ":troop_id_value", ":value"),
						(this_or_next|eq, ":troop_id_value", "trp_tutorial_fighter_1"),
						(this_or_next|eq, ":troop_id_value", "trp_tutorial_fighter_2"),
						(this_or_next|eq, ":troop_id_value", "trp_tutorial_fighter_3"),
						(eq, ":troop_id_value", "trp_tutorial_fighter_4"),
						(agent_set_team, ":value", 7),
						(agent_get_slot, ":value_spawn_entry_point", ":value", slot_agent_spawn_entry_point),
						(entry_point_get_position, 1, ":value_spawn_entry_point"),
						(agent_set_scripted_destination, ":value", 1),
						(agent_force_rethink, ":value"),
					(try_end),
					(agent_set_wielded_item, ":var_4", "itm_practice_sword"),
					(val_add, "$g_tutorial_training_ground_melee_state", 1),
					(store_mission_timer_a, "$g_tutorial_training_ground_melee_next_action_time"),
					(val_add, "$g_tutorial_training_ground_melee_next_action_time", 1),
				(try_end),
			(else_try),
				(eq, "$g_tutorial_training_ground_melee_state", 1),
				(try_begin),
					(store_mission_timer_a, ":mission_timer_a"),
					(gt, ":mission_timer_a", "$g_tutorial_training_ground_melee_next_action_time"),
					(agent_set_team, ":player_agent_no", 1),
					(agent_set_team, ":var_4", 2),
					(agent_clear_scripted_mode, ":var_4"),
					(agent_force_rethink, ":var_4"),
				(try_end),
			(try_end)
		],

		[]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$g_tutorial_training_ground_melee_trainer_attack", -1),
			(eq, "$g_tutorial_training_ground_melee_trainer_parry", -1),
			(eq, "$g_tutorial_training_ground_melee_trainer_combat", -1),
			(eq, "$g_tutorial_training_ground_melee_trainer_chamber", -1),
			(eq, "$g_tutorial_training_ground_archer_trainer_state", 0),
			(eq, "$g_tutorial_training_ground_horseman_trainer_state", 0),
			(mission_enable_talk)
		],

		[]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$g_tutorial_training_ground_melee_trainer_attack", -1),
			(eq, "$g_tutorial_training_ground_melee_trainer_parry", -1),
			(eq, "$g_tutorial_training_ground_melee_trainer_combat", -1),
			(eq, "$g_tutorial_training_ground_melee_trainer_chamber", -1),
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_position, 1, ":player_agent_no"),
			(assign, ":value", 10000000),
			(try_for_agents, ":value_2"),
				(agent_get_troop_id, ":troop_id_value_2", ":value_2"),
				(this_or_next|eq, ":troop_id_value_2", "trp_tutorial_fighter_1"),
				(this_or_next|eq, ":troop_id_value_2", "trp_tutorial_fighter_2"),
				(this_or_next|eq, ":troop_id_value_2", "trp_tutorial_fighter_3"),
				(eq, ":troop_id_value_2", "trp_tutorial_fighter_4"),
				(agent_get_position, 2, ":value_2"),
				(get_sq_distance_between_positions, ":sq_distance_between_positions_1_2", 1, 2),
				(lt, ":sq_distance_between_positions_1_2", ":value"),
				(assign, ":value", ":sq_distance_between_positions_1_2"),
			(try_end),
			(try_begin),
				(le, ":value", 1600),
				(assign, "$g_tutorial_training_ground_melee_paused", 1),
				(try_for_agents, ":value_2"),
					(agent_get_troop_id, ":troop_id_value_2", ":value_2"),
					(this_or_next|eq, ":troop_id_value_2", "trp_tutorial_fighter_1"),
					(this_or_next|eq, ":troop_id_value_2", "trp_tutorial_fighter_2"),
					(this_or_next|eq, ":troop_id_value_2", "trp_tutorial_fighter_3"),
					(eq, ":troop_id_value_2", "trp_tutorial_fighter_4"),
					(agent_set_team, ":value_2", 7),
					(agent_get_position, 2, ":value_2"),
					(agent_set_scripted_destination, ":value_2", 2),
					(try_begin),
						(neq, ":value_2", "$g_tutorial_training_ground_melee_cur_fighter_1"),
						(neq, ":value_2", "$g_tutorial_training_ground_melee_cur_fighter_2"),
						(agent_set_wielded_item, ":value_2", -1),
					(try_end),
					(agent_force_rethink, ":value_2"),
					(agent_set_look_target_agent, ":value_2", ":player_agent_no"),
				(try_end),
			(else_try),
				(gt, "$g_tutorial_training_ground_melee_paused", 0),
				(assign, "$g_tutorial_training_ground_melee_paused", 0),
				(assign, "$g_tutorial_training_ground_melee_state", 0),
			(try_end),
			(try_begin),
				(eq, "$g_tutorial_training_ground_melee_paused", 0),
				(eq, "$g_tutorial_training_ground_melee_state", 0),
				(try_begin),
					(assign, "$g_tutorial_training_ground_melee_cur_fighter_1", -1),
					(assign, "$g_tutorial_training_ground_melee_cur_fighter_2", -1),
					(try_for_range, ":unused", 0, 2),
						(try_begin),
							(ge, "$g_tutorial_training_ground_melee_last_winner", 0),
							(assign, "$g_tutorial_training_ground_melee_cur_fighter_1", "$g_tutorial_training_ground_melee_last_winner"),
							(assign, "$g_tutorial_training_ground_melee_last_winner", -1),
						(try_end),
						(this_or_next|eq, "$g_tutorial_training_ground_melee_cur_fighter_1", -1),
						(eq, "$g_tutorial_training_ground_melee_cur_fighter_2", -1),
						(assign, ":var_7", 0),
						(try_for_agents, ":value_2"),
							(agent_get_troop_id, ":troop_id_value_2", ":value_2"),
							(this_or_next|eq, ":troop_id_value_2", "trp_tutorial_fighter_1"),
							(this_or_next|eq, ":troop_id_value_2", "trp_tutorial_fighter_2"),
							(this_or_next|eq, ":troop_id_value_2", "trp_tutorial_fighter_3"),
							(eq, ":troop_id_value_2", "trp_tutorial_fighter_4"),
							(neq, ":value_2", "$g_tutorial_training_ground_melee_cur_fighter_1"),
							(neq, ":value_2", "$g_tutorial_training_ground_melee_cur_fighter_2"),
							(neq, ":value_2", "$g_tutorial_training_ground_melee_last_loser"),
							(val_add, ":var_7", 1),
						(try_end),
						(store_random_in_range, ":random_in_range_0_var_7", 0, ":var_7"),
						(try_for_agents, ":value_2"),
							(agent_get_troop_id, ":troop_id_value_2", ":value_2"),
							(this_or_next|eq, ":troop_id_value_2", "trp_tutorial_fighter_1"),
							(this_or_next|eq, ":troop_id_value_2", "trp_tutorial_fighter_2"),
							(this_or_next|eq, ":troop_id_value_2", "trp_tutorial_fighter_3"),
							(eq, ":troop_id_value_2", "trp_tutorial_fighter_4"),
							(neq, ":value_2", "$g_tutorial_training_ground_melee_cur_fighter_1"),
							(neq, ":value_2", "$g_tutorial_training_ground_melee_cur_fighter_2"),
							(neq, ":value_2", "$g_tutorial_training_ground_melee_last_loser"),
							(val_sub, ":random_in_range_0_var_7", 1),
							(lt, ":random_in_range_0_var_7", 0),
							(try_begin),
								(eq, "$g_tutorial_training_ground_melee_cur_fighter_1", -1),
								(assign, "$g_tutorial_training_ground_melee_cur_fighter_1", ":value_2"),
							(else_try),
								(assign, "$g_tutorial_training_ground_melee_cur_fighter_2", ":value_2"),
							(try_end),
						(try_end),
					(try_end),
					(try_for_agents, ":value_2"),
						(agent_get_troop_id, ":troop_id_value_2", ":value_2"),
						(this_or_next|eq, ":troop_id_value_2", "trp_tutorial_fighter_1"),
						(this_or_next|eq, ":troop_id_value_2", "trp_tutorial_fighter_2"),
						(this_or_next|eq, ":troop_id_value_2", "trp_tutorial_fighter_3"),
						(eq, ":troop_id_value_2", "trp_tutorial_fighter_4"),
						(neq, ":value_2", "$g_tutorial_training_ground_melee_cur_fighter_1"),
						(neq, ":value_2", "$g_tutorial_training_ground_melee_cur_fighter_2"),
						(agent_set_wielded_item, ":value_2", -1),
					(try_end),
					(val_add, "$g_tutorial_training_ground_melee_state", 1),
					(store_mission_timer_a, "$g_tutorial_training_ground_melee_next_action_time"),
					(val_add, "$g_tutorial_training_ground_melee_next_action_time", 3),
				(try_end),
			(else_try),
				(eq, "$g_tutorial_training_ground_melee_state", 1),
				(try_begin),
					(store_mission_timer_a, ":mission_timer_a"),
					(gt, ":mission_timer_a", "$g_tutorial_training_ground_melee_next_action_time"),
					(try_for_agents, ":value_2"),
						(agent_is_human, ":value_2"),
						(agent_get_troop_id, ":troop_id_value_2", ":value_2"),
						(this_or_next|eq, ":troop_id_value_2", "trp_tutorial_fighter_1"),
						(this_or_next|eq, ":troop_id_value_2", "trp_tutorial_fighter_2"),
						(this_or_next|eq, ":troop_id_value_2", "trp_tutorial_fighter_3"),
						(eq, ":troop_id_value_2", "trp_tutorial_fighter_4"),
						(try_begin),
							(eq, ":value_2", "$g_tutorial_training_ground_melee_cur_fighter_1"),
							(entry_point_get_position, 1, 30),
							(agent_set_scripted_destination, ":value_2", 1),
						(else_try),
							(eq, ":value_2", "$g_tutorial_training_ground_melee_cur_fighter_2"),
							(entry_point_get_position, 1, 31),
							(agent_set_scripted_destination, ":value_2", 1),
						(else_try),
							(agent_get_slot, ":value_2_spawn_entry_point", ":value_2", slot_agent_spawn_entry_point),
							(entry_point_get_position, 1, ":value_2_spawn_entry_point"),
							(agent_set_scripted_destination, ":value_2", 1),
						(try_end),
					(try_end),
					(val_add, "$g_tutorial_training_ground_melee_state", 1),
				(try_end),
			(else_try),
				(eq, "$g_tutorial_training_ground_melee_state", 2),
				(try_begin),
					(agent_set_look_target_agent, "$g_tutorial_training_ground_melee_cur_fighter_1", "$g_tutorial_training_ground_melee_cur_fighter_2"),
					(agent_set_look_target_agent, "$g_tutorial_training_ground_melee_cur_fighter_2", "$g_tutorial_training_ground_melee_cur_fighter_1"),
					(agent_get_position, 1, "$g_tutorial_training_ground_melee_cur_fighter_1"),
					(entry_point_get_position, 2, 30),
					(get_sq_distance_between_positions, ":sq_distance_between_positions_1_2_2", 1, 2),
					(lt, ":sq_distance_between_positions_1_2_2", 400),
					(agent_get_position, 1, "$g_tutorial_training_ground_melee_cur_fighter_2"),
					(entry_point_get_position, 2, 31),
					(get_sq_distance_between_positions, ":sq_distance_between_positions_1_2_3", 1, 2),
					(lt, ":sq_distance_between_positions_1_2_3", 400),
					(val_add, "$g_tutorial_training_ground_melee_state", 1),
					(store_mission_timer_a, "$g_tutorial_training_ground_melee_next_action_time"),
					(val_add, "$g_tutorial_training_ground_melee_next_action_time", 1),
				(try_end),
			(else_try),
				(eq, "$g_tutorial_training_ground_melee_state", 3),
				(try_begin),
					(agent_set_look_target_agent, "$g_tutorial_training_ground_melee_cur_fighter_1", "$g_tutorial_training_ground_melee_cur_fighter_2"),
					(agent_set_look_target_agent, "$g_tutorial_training_ground_melee_cur_fighter_2", "$g_tutorial_training_ground_melee_cur_fighter_1"),
					(store_mission_timer_a, ":mission_timer_a"),
					(gt, ":mission_timer_a", "$g_tutorial_training_ground_melee_next_action_time"),
					(agent_clear_scripted_mode, "$g_tutorial_training_ground_melee_cur_fighter_1"),
					(agent_clear_scripted_mode, "$g_tutorial_training_ground_melee_cur_fighter_2"),
					(agent_set_team, "$g_tutorial_training_ground_melee_cur_fighter_1", 1),
					(agent_set_team, "$g_tutorial_training_ground_melee_cur_fighter_2", 2),
					(agent_force_rethink, "$g_tutorial_training_ground_melee_cur_fighter_1"),
					(agent_force_rethink, "$g_tutorial_training_ground_melee_cur_fighter_2"),
					(val_add, "$g_tutorial_training_ground_melee_state", 1),
				(try_end),
			(try_end)
		],

		[])
	] + crouching_triggers ),

	("tutorial_1", 0, -1,
	"You enter the training ground.",
	[(0, mtef_leader_only, af_override_everything, 0, 1, [itm_tutorial_shield, itm_tutorial_sword, itm_tutorial_short_bow, itm_tutorial_arrows, itm_leather_jerkin, itm_leather_boots])],
	[
		(-21.0, 0.0, 0.0,
		[],

		[
			(try_begin),
				(lt, "$tutorial_1_state", 5),
				(question_box, "str_do_you_wish_to_leave_tutorial"),
			(else_try),
				(finish_mission, 0),
			(try_end)
		]),

		(-8.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(eq, ":trigger_param_1", 0),
			(finish_mission, 0)
		]),

		(-22.0, 0.0, 0.0,
		[
			(display_message, "str_cant_use_inventory_tutorial")
		],

		[]),

		(0.0, 0.0, ti_once,
		[
			(tutorial_message_set_size, 17, 17),
			(tutorial_message_set_position, 500, 650),
			(tutorial_message_set_center_justify, 0),
			(assign, "$tutorial_1_state", 0),
			(assign, "$tutorial_1_msg_1_displayed", 0),
			(assign, "$tutorial_1_msg_2_displayed", 0),
			(assign, "$tutorial_1_msg_3_displayed", 0),
			(assign, "$tutorial_1_msg_4_displayed", 0),
			(assign, "$tutorial_1_msg_5_displayed", 0),
			(assign, "$tutorial_1_msg_6_displayed", 0)
		],

		[]),

		(0.0, 0.0, 0.0,
		[
			(try_begin),
				(eq, "$tutorial_1_state", 0),
				(try_begin),
					(eq, "$tutorial_1_msg_1_displayed", 0),
					(store_mission_timer_a, ":mission_timer_a"),
					(gt, ":mission_timer_a", 0),
					(assign, "$tutorial_1_msg_1_displayed", 1),
					(tutorial_message, "str_tutorial_1_msg_1"),
					(scene_prop_get_instance, ":scene_prop_instance_tutorial_flag_yellow_0", "spr_tutorial_flag_yellow", 0),
					(entry_point_get_position, 1, 1),
					(prop_instance_animate_to_position, ":scene_prop_instance_tutorial_flag_yellow_0", 1, 1),
				(try_end),
				(tutorial_message, "str_tutorial_1_msg_1"),
				(get_player_agent_no, ":player_agent_no"),
				(agent_get_position, 1, ":player_agent_no"),
				(entry_point_get_position, 2, 1),
				(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
				(le, ":distance_between_positions_1_2", 100),
				(val_add, "$tutorial_1_state", 1),
				(scene_prop_get_instance, ":scene_prop_instance_tutorial_door_a_0", "spr_tutorial_door_a", 0),
				(prop_instance_get_position, 1, ":scene_prop_instance_tutorial_door_a_0"),
				(position_rotate_z, 1, -90),
				(prop_instance_animate_to_position, ":scene_prop_instance_tutorial_door_a_0", 1, 150),
				(scene_prop_get_instance, ":scene_prop_instance_tutorial_flag_yellow_0", "spr_tutorial_flag_yellow", 0),
				(entry_point_get_position, 1, 2),
				(prop_instance_animate_to_position, ":scene_prop_instance_tutorial_flag_yellow_0", 1, 1),
			(else_try),
				(eq, "$tutorial_1_state", 1),
				(try_begin),
					(eq, "$tutorial_1_msg_2_displayed", 0),
					(assign, "$tutorial_1_msg_2_displayed", 1),
					(tutorial_message, "str_tutorial_1_msg_2"),
					(play_sound, "snd_tutorial_1"),
				(try_end),
				(get_player_agent_no, ":player_agent_no"),
				(agent_get_position, 1, ":player_agent_no"),
				(entry_point_get_position, 2, 2),
				(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
				(le, ":distance_between_positions_1_2", 100),
				(val_add, "$tutorial_1_state", 1),
				(scene_prop_get_instance, ":scene_prop_instance_tutorial_door_a_0", "spr_tutorial_door_a", 1),
				(prop_instance_get_position, 1, ":scene_prop_instance_tutorial_door_a_0"),
				(position_rotate_z, 1, 90),
				(prop_instance_animate_to_position, ":scene_prop_instance_tutorial_door_a_0", 1, 150),
				(scene_prop_get_instance, ":scene_prop_instance_tutorial_flag_yellow_0", "spr_tutorial_flag_yellow", 0),
				(entry_point_get_position, 1, 3),
				(prop_instance_animate_to_position, ":scene_prop_instance_tutorial_flag_yellow_0", 1, 1),
			(else_try),
				(eq, "$tutorial_1_state", 2),
				(try_begin),
					(eq, "$tutorial_1_msg_3_displayed", 0),
					(assign, "$tutorial_1_msg_3_displayed", 1),
					(tutorial_message, "str_tutorial_1_msg_3"),
					(assign, "$tutorial_num_total_dummies_destroyed", 0),
					(play_sound, "snd_tutorial_1"),
				(try_end),
				(ge, "$tutorial_num_total_dummies_destroyed", 4),
				(val_add, "$tutorial_1_state", 1),
				(scene_prop_get_instance, ":scene_prop_instance_tutorial_door_a_0", "spr_tutorial_door_a", 2),
				(prop_instance_get_position, 1, ":scene_prop_instance_tutorial_door_a_0"),
				(position_rotate_z, 1, 90),
				(prop_instance_animate_to_position, ":scene_prop_instance_tutorial_door_a_0", 1, 150),
			(else_try),
				(eq, "$tutorial_1_state", 3),
				(try_begin),
					(eq, "$tutorial_1_msg_4_displayed", 0),
					(assign, "$tutorial_1_msg_4_displayed", 1),
					(tutorial_message, "str_tutorial_1_msg_4"),
					(store_mission_timer_a, "$tutorial_time"),
					(play_sound, "snd_tutorial_1"),
				(try_end),
				(store_mission_timer_a, ":mission_timer_a"),
				(val_sub, ":mission_timer_a", "$tutorial_time"),
				(gt, ":mission_timer_a", 10),
				(val_add, "$tutorial_1_state", 1),
			(else_try),
				(eq, "$tutorial_1_state", 4),
				(try_begin),
					(eq, "$tutorial_1_msg_5_displayed", 0),
					(assign, "$tutorial_1_msg_5_displayed", 1),
					(tutorial_message, "str_tutorial_1_msg_5"),
					(assign, "$g_last_archery_point_earned", 0),
					(assign, "$tutorial_num_arrows_hit", 0),
					(play_sound, "snd_tutorial_1"),
				(try_end),
				(try_begin),
					(get_player_agent_no, ":player_agent_no"),
					(agent_get_ammo, ":ammo_player_agent_no", ":player_agent_no"),
					(le, ":ammo_player_agent_no", 0),
					(agent_refill_ammo, ":player_agent_no"),
					(tutorial_message, "str_tutorial_ammo_refilled"),
				(try_end),
				(gt, "$g_last_archery_point_earned", 0),
				(assign, "$g_last_archery_point_earned", 0),
				(val_add, "$tutorial_num_arrows_hit", 1),
				(gt, "$tutorial_num_arrows_hit", 2),
				(val_add, "$tutorial_1_state", 1),
			(else_try),
				(eq, "$tutorial_1_state", 5),
				(eq, "$tutorial_1_msg_6_displayed", 0),
				(assign, "$tutorial_1_msg_6_displayed", 1),
				(tutorial_message, "str_tutorial_1_msg_6"),
				(play_sound, "snd_tutorial_2"),
				(assign, "$tutorial_1_finished", 1),
			(try_end)
		],

		[])
	] + crouching_triggers ),

	("tutorial_2", mtf_arena_fight|mtf_team_fight, -1,
	"You enter the training ground.",
	[(0, mtef_team_0|mtef_leader_only, af_override_everything, 0, 1, [itm_tutorial_shield, itm_leather_jerkin, itm_leather_boots]),
	(2, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(4, mtef_visitor_source|mtef_team_1, 0, 0, 1, [])],
	[
		(-21.0, 0.0, 0.0,
		[],

		[
			(try_begin),
				(lt, "$tutorial_2_state", 9),
				(question_box, "str_do_you_wish_to_leave_tutorial"),
			(else_try),
				(finish_mission, 0),
			(try_end)
		]),

		(-8.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(eq, ":trigger_param_1", 0),
			(finish_mission, 0)
		]),

		(-22.0, 0.0, 0.0,
		[
			(display_message, "str_cant_use_inventory_tutorial")
		],

		[]),

		(0.0, 0.0, ti_once,
		[
			(store_mission_timer_a, ":mission_timer_a"),
			(gt, ":mission_timer_a", 2),
			(main_hero_fallen),
			(assign, "$tutorial_2_state", 100)
		],

		[]),

		(0.0, 0.0, ti_once,
		[
			(tutorial_message_set_size, 17, 17),
			(tutorial_message_set_position, 500, 650),
			(tutorial_message_set_center_justify, 0),
			(assign, "$tutorial_2_state", 0),
			(assign, "$tutorial_2_msg_1_displayed", 0),
			(assign, "$tutorial_2_msg_2_displayed", 0),
			(assign, "$tutorial_2_msg_3_displayed", 0),
			(assign, "$tutorial_2_msg_4_displayed", 0),
			(assign, "$tutorial_2_msg_5_displayed", 0),
			(assign, "$tutorial_2_msg_6_displayed", 0),
			(assign, "$tutorial_2_msg_7_displayed", 0),
			(assign, "$tutorial_2_msg_8_displayed", 0),
			(assign, "$tutorial_2_msg_9_displayed", 0),
			(assign, "$tutorial_2_melee_agent_state", 0)
		],

		[]),

		(10.0, 0.0, 0.0,
		[
			(call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_archer"),
			(agent_refill_ammo, reg0)
		],

		[]),

		(0.0, 0.0, 0.0,
		[
			(try_begin),
				(eq, "$tutorial_2_state", 0),
				(try_begin),
					(eq, "$tutorial_2_msg_1_displayed", 0),
					(store_mission_timer_a, ":mission_timer_a"),
					(gt, ":mission_timer_a", 0),
					(assign, "$tutorial_2_msg_1_displayed", 1),
					(tutorial_message, "str_tutorial_2_msg_1"),
					(team_give_order, 1, 9, 11),
					(team_give_order, 1, 0, 2),
					(call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
					(assign, ":value", reg0),
					(agent_get_position, 1, ":value"),
					(agent_set_scripted_destination, ":value", 1, 0),
				(try_end),
				(get_player_agent_no, ":player_agent_no"),
				(ge, ":player_agent_no", 0),
				(agent_get_position, 1, ":player_agent_no"),
				(entry_point_get_position, 2, 1),
				(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
				(le, ":distance_between_positions_1_2", 200),
				(scene_prop_get_instance, ":scene_prop_instance_tutorial_door_a_0", "spr_tutorial_door_a", 0),
				(prop_instance_get_position, 1, ":scene_prop_instance_tutorial_door_a_0"),
				(position_rotate_z, 1, 90),
				(prop_instance_animate_to_position, ":scene_prop_instance_tutorial_door_a_0", 1, 150),
				(val_add, "$tutorial_2_state", 1),
			(else_try),
				(eq, "$tutorial_2_state", 1),
				(scene_prop_get_instance, ":scene_prop_instance_barrier_4m_0", "spr_barrier_4m", 0),
				(prop_instance_get_position, 1, ":scene_prop_instance_barrier_4m_0"),
				(get_player_agent_no, ":player_agent_no"),
				(agent_get_position, 2, ":player_agent_no"),
				(position_is_behind_position, 2, 1),
				(scene_prop_get_instance, ":scene_prop_instance_tutorial_door_a_0", "spr_tutorial_door_a", 0),
				(prop_instance_get_position, 1, ":scene_prop_instance_tutorial_door_a_0"),
				(position_rotate_z, 1, -90),
				(prop_instance_animate_to_position, ":scene_prop_instance_tutorial_door_a_0", 1, 150),
				(val_add, "$tutorial_2_state", 1),
			(else_try),
				(eq, "$tutorial_2_state", 2),
				(get_player_agent_no, ":player_agent_no"),
				(agent_set_kick_allowed, ":player_agent_no", 0),
				(try_begin),
					(eq, "$tutorial_2_melee_agent_state", 0),
					(val_add, "$tutorial_2_melee_agent_state", 1),
					(call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
					(assign, ":value", reg0),
					(entry_point_get_position, 1, 3),
					(agent_set_scripted_destination, ":value", 1, 0),
				(else_try),
					(eq, "$tutorial_2_melee_agent_state", 1),
					(call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
					(assign, ":value", reg0),
					(entry_point_get_position, 1, 3),
					(agent_get_position, 2, ":value"),
					(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
					(le, ":distance_between_positions_1_2", 250),
					(agent_clear_scripted_mode, ":value"),
					(val_add, "$tutorial_2_melee_agent_state", 1),
					(store_mission_timer_a, "$tutorial_time"),
				(else_try),
					(eq, "$tutorial_2_melee_agent_state", 2),
					(try_begin),
						(eq, "$tutorial_2_msg_2_displayed", 0),
						(assign, "$tutorial_2_msg_2_displayed", 1),
						(play_sound, "snd_tutorial_1"),
					(try_end),
					(call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
					(assign, ":value", reg0),
					(store_mission_timer_a, ":mission_timer_a"),
					(val_sub, ":mission_timer_a", "$tutorial_time"),
					(store_sub, reg3, 20, ":mission_timer_a"),
					(tutorial_message, "str_tutorial_2_msg_2"),
					(gt, ":mission_timer_a", 20),
					(entry_point_get_position, 1, 3),
					(agent_set_scripted_destination, ":value", 1, 0),
					(val_add, "$tutorial_2_melee_agent_state", 1),
				(else_try),
					(eq, "$tutorial_2_melee_agent_state", 3),
					(try_begin),
						(eq, "$tutorial_2_msg_3_displayed", 0),
						(assign, "$tutorial_2_msg_3_displayed", 1),
						(tutorial_message, "str_tutorial_2_msg_3"),
						(play_sound, "snd_tutorial_1"),
					(try_end),
					(call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
					(assign, ":value", reg0),
					(entry_point_get_position, 1, 3),
					(agent_get_position, 2, ":value"),
					(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
					(le, ":distance_between_positions_1_2", 250),
					(entry_point_get_position, 1, 2),
					(agent_set_scripted_destination, ":value", 1, 0),
					(val_add, "$tutorial_2_melee_agent_state", 1),
				(else_try),
					(eq, "$tutorial_2_melee_agent_state", 4),
					(call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
					(assign, ":value", reg0),
					(entry_point_get_position, 1, 2),
					(agent_get_position, 2, ":value"),
					(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
					(le, ":distance_between_positions_1_2", 250),
					(entry_point_get_position, 1, 30),
					(agent_set_position, ":value", 1),
					(agent_set_scripted_destination, ":value", 1, 0),
					(scene_prop_get_instance, ":scene_prop_instance_tutorial_door_a_0", "spr_tutorial_door_a", 1),
					(prop_instance_get_position, 1, ":scene_prop_instance_tutorial_door_a_0"),
					(position_rotate_z, 1, 90),
					(prop_instance_animate_to_position, ":scene_prop_instance_tutorial_door_a_0", 1, 150),
					(val_add, "$tutorial_2_melee_agent_state", 1),
					(val_add, "$tutorial_2_state", 1),
				(try_end),
			(else_try),
				(eq, "$tutorial_2_state", 3),
				(scene_prop_get_instance, ":scene_prop_instance_barrier_4m_0", "spr_barrier_4m", 1),
				(prop_instance_get_position, 1, ":scene_prop_instance_barrier_4m_0"),
				(get_player_agent_no, ":player_agent_no"),
				(agent_set_kick_allowed, ":player_agent_no", 1),
				(agent_get_position, 2, ":player_agent_no"),
				(position_is_behind_position, 2, 1),
				(scene_prop_get_instance, ":scene_prop_instance_tutorial_door_a_0", "spr_tutorial_door_a", 1),
				(prop_instance_get_position, 1, ":scene_prop_instance_tutorial_door_a_0"),
				(position_rotate_z, 1, -90),
				(prop_instance_animate_to_position, ":scene_prop_instance_tutorial_door_a_0", 1, 150),
				(store_mission_timer_a, "$tutorial_time"),
				(val_add, "$tutorial_2_state", 1),
			(else_try),
				(eq, "$tutorial_2_state", 4),
				(try_begin),
					(eq, "$tutorial_2_msg_4_displayed", 0),
					(assign, "$tutorial_2_msg_4_displayed", 1),
					(play_sound, "snd_tutorial_1"),
				(try_end),
				(store_mission_timer_a, ":mission_timer_a"),
				(val_sub, ":mission_timer_a", "$tutorial_time"),
				(store_sub, reg3, 20, ":mission_timer_a"),
				(tutorial_message, "str_tutorial_2_msg_4"),
				(gt, ":mission_timer_a", 20),
				(entry_point_get_position, 1, 5),
				(set_spawn_position, 1),
				(spawn_item, "itm_tutorial_sword"),
				(call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
				(assign, ":value", reg0),
				(entry_point_get_position, 1, 3),
				(agent_set_position, ":value", 1),
				(agent_set_scripted_destination, ":value", 1, 0),
				(scene_prop_get_instance, ":scene_prop_instance_tutorial_door_a_0", "spr_tutorial_door_a", 2),
				(prop_instance_get_position, 1, ":scene_prop_instance_tutorial_door_a_0"),
				(position_rotate_z, 1, 90),
				(prop_instance_animate_to_position, ":scene_prop_instance_tutorial_door_a_0", 1, 150),
				(val_add, "$tutorial_2_state", 1),
			(else_try),
				(eq, "$tutorial_2_state", 5),
				(try_begin),
					(eq, "$tutorial_2_msg_5_displayed", 0),
					(assign, "$tutorial_2_msg_5_displayed", 1),
					(tutorial_message, "str_tutorial_2_msg_5"),
					(play_sound, "snd_tutorial_1"),
				(try_end),
				(scene_prop_get_instance, ":scene_prop_instance_barrier_4m_0", "spr_barrier_4m", 2),
				(prop_instance_get_position, 1, ":scene_prop_instance_barrier_4m_0"),
				(get_player_agent_no, ":player_agent_no"),
				(agent_get_position, 2, ":player_agent_no"),
				(position_is_behind_position, 2, 1),
				(scene_prop_get_instance, ":scene_prop_instance_tutorial_door_a_0", "spr_tutorial_door_a", 2),
				(prop_instance_get_position, 1, ":scene_prop_instance_tutorial_door_a_0"),
				(position_rotate_z, 1, -90),
				(prop_instance_animate_to_position, ":scene_prop_instance_tutorial_door_a_0", 1, 150),
				(val_add, "$tutorial_2_state", 1),
			(else_try),
				(eq, "$tutorial_2_state", 6),
				(try_begin),
					(eq, "$tutorial_2_msg_6_displayed", 0),
					(assign, "$tutorial_2_msg_6_displayed", 1),
					(tutorial_message, "str_tutorial_2_msg_6"),
					(play_sound, "snd_tutorial_1"),
				(try_end),
				(get_player_agent_no, ":player_agent_no"),
				(agent_has_item_equipped, ":player_agent_no", "itm_tutorial_sword"),
				(scene_prop_get_instance, ":scene_prop_instance_tutorial_door_a_0", "spr_tutorial_door_a", 3),
				(prop_instance_get_position, 1, ":scene_prop_instance_tutorial_door_a_0"),
				(position_rotate_z, 1, -90),
				(prop_instance_animate_to_position, ":scene_prop_instance_tutorial_door_a_0", 1, 150),
				(val_add, "$tutorial_2_state", 1),
			(else_try),
				(eq, "$tutorial_2_state", 7),
				(try_begin),
					(eq, "$tutorial_2_msg_7_displayed", 0),
					(assign, "$tutorial_2_msg_7_displayed", 1),
					(tutorial_message, "str_tutorial_2_msg_7"),
					(play_sound, "snd_tutorial_1"),
					(get_player_agent_no, ":player_agent_no"),
					(agent_set_hit_points, ":player_agent_no", 100),
				(try_end),
				(call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_archer"),
				(assign, ":value", reg0),
				(neg|agent_is_alive, ":value"),
				(call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
				(assign, ":value", reg0),
				(agent_clear_scripted_mode, ":value"),
				(scene_prop_get_instance, ":scene_prop_instance_tutorial_door_a_0", "spr_tutorial_door_a", 4),
				(prop_instance_get_position, 1, ":scene_prop_instance_tutorial_door_a_0"),
				(position_rotate_z, 1, -90),
				(prop_instance_animate_to_position, ":scene_prop_instance_tutorial_door_a_0", 1, 150),
				(val_add, "$tutorial_2_state", 1),
			(else_try),
				(eq, "$tutorial_2_state", 8),
				(try_begin),
					(eq, "$tutorial_2_msg_8_displayed", 0),
					(assign, "$tutorial_2_msg_8_displayed", 1),
					(tutorial_message, "str_tutorial_2_msg_8"),
					(play_sound, "snd_tutorial_1"),
					(get_player_agent_no, ":player_agent_no"),
					(agent_set_hit_points, ":player_agent_no", 100),
				(try_end),
				(call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
				(assign, ":value", reg0),
				(neg|agent_is_alive, ":value"),
				(val_add, "$tutorial_2_state", 1),
			(else_try),
				(eq, "$tutorial_2_state", 9),
				(eq, "$tutorial_2_msg_9_displayed", 0),
				(assign, "$tutorial_2_msg_9_displayed", 1),
				(tutorial_message, "str_tutorial_2_msg_9"),
				(play_sound, "snd_tutorial_2"),
				(assign, "$tutorial_2_finished", 1),
			(else_try),
				(gt, "$tutorial_2_state", 30),
				(tutorial_message, "str_tutorial_failed"),
			(try_end)
		],

		[])
	] + crouching_triggers ),

	("tutorial_3", mtf_arena_fight|mtf_team_fight, -1,
	"You enter the training ground.",
	[(0, mtef_team_0|mtef_leader_only, af_override_everything, 0, 1, [itm_leather_jerkin, itm_leather_boots]),
	(3, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(5, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, [])],
	[
		(-21.0, 0.0, 0.0,
		[],

		[
			(try_begin),
				(lt, "$tutorial_3_state", 12),
				(question_box, "str_do_you_wish_to_leave_tutorial"),
			(else_try),
				(finish_mission, 0),
			(try_end)
		]),

		(-8.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(eq, ":trigger_param_1", 0),
			(finish_mission, 0)
		]),

		(-22.0, 0.0, 0.0,
		[
			(display_message, "str_cant_use_inventory_tutorial")
		],

		[]),

		(0.0, 0.0, ti_once,
		[
			(store_mission_timer_a, ":mission_timer_a"),
			(gt, ":mission_timer_a", 2),
			(main_hero_fallen),
			(assign, "$tutorial_3_state", 100)
		],

		[]),

		(0.0, 0.0, ti_once,
		[
			(tutorial_message_set_size, 17, 17),
			(tutorial_message_set_position, 500, 650),
			(tutorial_message_set_center_justify, 0),
			(assign, "$tutorial_3_state", 0),
			(assign, "$tutorial_3_msg_1_displayed", 0),
			(assign, "$tutorial_3_msg_2_displayed", 0),
			(assign, "$tutorial_3_msg_3_displayed", 0),
			(assign, "$tutorial_3_msg_4_displayed", 0),
			(assign, "$tutorial_3_msg_5_displayed", 0),
			(assign, "$tutorial_3_msg_6_displayed", 0)
		],

		[]),

		(0.0, 0.0, 0.0,
		[
			(try_begin),
				(eq, "$tutorial_3_state", 0),
				(try_begin),
					(eq, "$tutorial_3_msg_1_displayed", 0),
					(store_mission_timer_a, ":mission_timer_a"),
					(gt, ":mission_timer_a", 0),
					(assign, "$tutorial_3_msg_1_displayed", 1),
					(tutorial_message, "str_tutorial_3_msg_1"),
					(call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
					(assign, ":value", reg0),
					(agent_get_position, 1, ":value"),
					(agent_set_scripted_destination, ":value", 1, 0),
					(call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_swordsman"),
					(assign, ":value", reg0),
					(agent_get_position, 1, ":value"),
					(agent_set_scripted_destination, ":value", 1, 0),
					(entry_point_get_position, 1, 1),
					(set_spawn_position, 1),
					(spawn_item, "itm_tutorial_staff_no_attack"),
				(try_end),
				(get_player_agent_no, ":player_agent_no"),
				(ge, ":player_agent_no", 0),
				(agent_has_item_equipped, ":player_agent_no", "itm_tutorial_staff_no_attack"),
				(val_add, "$tutorial_3_state", 1),
			(else_try),
				(eq, "$tutorial_3_state", 1),
				(try_begin),
					(eq, "$tutorial_3_msg_2_displayed", 0),
					(assign, "$tutorial_3_msg_2_displayed", 1),
					(tutorial_message, "str_tutorial_3_msg_2"),
					(play_sound, "snd_tutorial_1"),
				(try_end),
				(get_player_agent_no, ":player_agent_no"),
				(agent_get_position, 1, ":player_agent_no"),
				(entry_point_get_position, 2, 2),
				(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
				(le, ":distance_between_positions_1_2", 200),
				(scene_prop_get_instance, ":scene_prop_instance_tutorial_door_b_0", "spr_tutorial_door_b", 0),
				(prop_instance_get_position, 1, ":scene_prop_instance_tutorial_door_b_0"),
				(position_rotate_z, 1, -90),
				(prop_instance_animate_to_position, ":scene_prop_instance_tutorial_door_b_0", 1, 150),
				(val_add, "$tutorial_3_state", 1),
			(else_try),
				(eq, "$tutorial_3_state", 2),
				(scene_prop_get_instance, ":scene_prop_instance_barrier_4m_0", "spr_barrier_4m", 0),
				(prop_instance_get_position, 1, ":scene_prop_instance_barrier_4m_0"),
				(get_player_agent_no, ":player_agent_no"),
				(agent_get_position, 2, ":player_agent_no"),
				(position_is_behind_position, 2, 1),
				(scene_prop_get_instance, ":scene_prop_instance_tutorial_door_b_0", "spr_tutorial_door_b", 0),
				(prop_instance_get_position, 1, ":scene_prop_instance_tutorial_door_b_0"),
				(position_rotate_z, 1, 90),
				(prop_instance_animate_to_position, ":scene_prop_instance_tutorial_door_b_0", 1, 150),
				(val_add, "$tutorial_3_state", 1),
			(else_try),
				(eq, "$tutorial_3_state", 3),
				(get_player_agent_no, ":player_agent_no"),
				(agent_set_kick_allowed, ":player_agent_no", 0),
				(call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
				(assign, ":value", reg0),
				(entry_point_get_position, 1, 4),
				(agent_set_scripted_destination, ":value", 1, 0),
				(val_add, "$tutorial_3_state", 1),
			(else_try),
				(eq, "$tutorial_3_state", 4),
				(call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
				(assign, ":value", reg0),
				(entry_point_get_position, 1, 4),
				(agent_get_position, 2, ":value"),
				(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
				(le, ":distance_between_positions_1_2", 250),
				(agent_clear_scripted_mode, ":value"),
				(val_add, "$tutorial_3_state", 1),
				(store_mission_timer_a, "$tutorial_time"),
			(else_try),
				(eq, "$tutorial_3_state", 5),
				(try_begin),
					(eq, "$tutorial_3_msg_3_displayed", 0),
					(assign, "$tutorial_3_msg_3_displayed", 1),
					(play_sound, "snd_tutorial_1"),
				(try_end),
				(call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
				(assign, ":value", reg0),
				(store_mission_timer_a, ":mission_timer_a"),
				(val_sub, ":mission_timer_a", "$tutorial_time"),
				(store_sub, reg3, 20, ":mission_timer_a"),
				(tutorial_message, "str_tutorial_3_msg_3"),
				(gt, ":mission_timer_a", 20),
				(entry_point_get_position, 1, 4),
				(agent_set_scripted_destination, ":value", 1, 0),
				(val_add, "$tutorial_3_state", 1),
			(else_try),
				(eq, "$tutorial_3_state", 6),
				(try_begin),
					(eq, "$tutorial_3_msg_4_displayed", 0),
					(assign, "$tutorial_3_msg_4_displayed", 1),
					(tutorial_message, "str_tutorial_3_msg_4"),
					(play_sound, "snd_tutorial_1"),
				(try_end),
				(call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
				(assign, ":value", reg0),
				(entry_point_get_position, 1, 4),
				(agent_get_position, 2, ":value"),
				(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
				(le, ":distance_between_positions_1_2", 250),
				(entry_point_get_position, 1, 3),
				(agent_set_scripted_destination, ":value", 1, 0),
				(val_add, "$tutorial_3_state", 1),
			(else_try),
				(eq, "$tutorial_3_state", 7),
				(call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
				(assign, ":value", reg0),
				(entry_point_get_position, 1, 3),
				(agent_get_position, 2, ":value"),
				(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
				(le, ":distance_between_positions_1_2", 250),
				(entry_point_get_position, 1, 7),
				(agent_set_scripted_destination, ":value", 1, 0),
				(agent_set_position, ":value", 1),
				(scene_prop_get_instance, ":scene_prop_instance_tutorial_door_b_0", "spr_tutorial_door_b", 1),
				(prop_instance_get_position, 1, ":scene_prop_instance_tutorial_door_b_0"),
				(position_rotate_z, 1, -90),
				(prop_instance_animate_to_position, ":scene_prop_instance_tutorial_door_b_0", 1, 150),
				(scene_prop_get_instance, ":scene_prop_instance_tutorial_door_b_0", "spr_tutorial_door_b", 3),
				(prop_instance_get_position, 1, ":scene_prop_instance_tutorial_door_b_0"),
				(position_rotate_z, 1, -90),
				(prop_instance_animate_to_position, ":scene_prop_instance_tutorial_door_b_0", 1, 150),
				(val_add, "$tutorial_3_state", 1),
			(else_try),
				(eq, "$tutorial_3_state", 8),
				(scene_prop_get_instance, ":scene_prop_instance_barrier_4m_0", "spr_barrier_4m", 1),
				(prop_instance_get_position, 1, ":scene_prop_instance_barrier_4m_0"),
				(get_player_agent_no, ":player_agent_no"),
				(agent_get_position, 2, ":player_agent_no"),
				(position_is_behind_position, 2, 1),
				(scene_prop_get_instance, ":scene_prop_instance_tutorial_door_b_0", "spr_tutorial_door_b", 1),
				(prop_instance_get_position, 1, ":scene_prop_instance_tutorial_door_b_0"),
				(position_rotate_z, 1, 90),
				(prop_instance_animate_to_position, ":scene_prop_instance_tutorial_door_b_0", 1, 150),
				(val_add, "$tutorial_3_state", 1),
			(else_try),
				(eq, "$tutorial_3_state", 9),
				(call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_swordsman"),
				(assign, ":value", reg0),
				(entry_point_get_position, 1, 6),
				(agent_set_scripted_destination, ":value", 1, 0),
				(val_add, "$tutorial_3_state", 1),
			(else_try),
				(eq, "$tutorial_3_state", 10),
				(call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_swordsman"),
				(assign, ":value", reg0),
				(entry_point_get_position, 1, 6),
				(agent_get_position, 2, ":value"),
				(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
				(le, ":distance_between_positions_1_2", 250),
				(agent_clear_scripted_mode, ":value"),
				(val_add, "$tutorial_3_state", 1),
				(store_mission_timer_a, "$tutorial_time"),
			(else_try),
				(eq, "$tutorial_3_state", 11),
				(try_begin),
					(eq, "$tutorial_3_msg_5_displayed", 0),
					(assign, "$tutorial_3_msg_5_displayed", 1),
					(play_sound, "snd_tutorial_1"),
				(try_end),
				(call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_swordsman"),
				(assign, ":value", reg0),
				(store_mission_timer_a, ":mission_timer_a"),
				(val_sub, ":mission_timer_a", "$tutorial_time"),
				(store_sub, reg3, 20, ":mission_timer_a"),
				(tutorial_message, "str_tutorial_3_msg_5"),
				(gt, ":mission_timer_a", 20),
				(entry_point_get_position, 1, 6),
				(agent_set_scripted_destination, ":value", 1, 0),
				(val_add, "$tutorial_3_state", 1),
			(else_try),
				(eq, "$tutorial_3_state", 12),
				(try_begin),
					(eq, "$tutorial_3_msg_6_displayed", 0),
					(assign, "$tutorial_3_msg_6_displayed", 1),
					(tutorial_message, "str_tutorial_3_msg_6"),
					(play_sound, "snd_tutorial_1"),
				(try_end),
				(call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_swordsman"),
				(assign, ":value", reg0),
				(entry_point_get_position, 1, 6),
				(agent_get_position, 2, ":value"),
				(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
				(le, ":distance_between_positions_1_2", 250),
				(entry_point_get_position, 1, 5),
				(agent_set_scripted_destination, ":value", 1, 0),
				(val_add, "$tutorial_3_state", 1),
			(else_try),
				(eq, "$tutorial_3_state", 13),
				(call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_swordsman"),
				(assign, ":value", reg0),
				(entry_point_get_position, 1, 5),
				(agent_get_position, 2, ":value"),
				(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
				(le, ":distance_between_positions_1_2", 250),
				(entry_point_get_position, 1, 7),
				(agent_set_scripted_destination, ":value", 1, 0),
				(agent_set_position, ":value", 1),
				(val_add, "$tutorial_3_state", 1),
			(else_try),
				(gt, "$tutorial_3_state", 30),
				(tutorial_message, "str_tutorial_failed"),
			(try_end)
		],

		[])
	] + crouching_triggers ),

	("tutorial_3_2", mtf_arena_fight|mtf_team_fight, -1,
	"You enter the training ground.",
	[(0, mtef_team_0|mtef_leader_only, af_override_everything, 0, 1, [itm_tutorial_staff, itm_leather_jerkin, itm_leather_boots]),
	(4, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(6, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, [])],
	[
		(-21.0, 0.0, 0.0,
		[],

		[
			(try_begin),
				(lt, "$tutorial_3_state", 5),
				(question_box, "str_do_you_wish_to_leave_tutorial"),
			(else_try),
				(finish_mission, 0),
			(try_end)
		]),

		(-8.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(eq, ":trigger_param_1", 0),
			(finish_mission, 0)
		]),

		(-22.0, 0.0, 0.0,
		[
			(display_message, "str_cant_use_inventory_tutorial")
		],

		[]),

		(0.0, 0.0, ti_once,
		[
			(store_mission_timer_a, ":mission_timer_a"),
			(gt, ":mission_timer_a", 2),
			(main_hero_fallen),
			(assign, "$tutorial_3_state", 100)
		],

		[]),

		(0.0, 0.0, ti_once,
		[
			(tutorial_message_set_size, 17, 17),
			(tutorial_message_set_position, 500, 650),
			(tutorial_message_set_center_justify, 0),
			(assign, "$tutorial_3_state", 0),
			(assign, "$tutorial_3_msg_1_displayed", 0),
			(assign, "$tutorial_3_msg_2_displayed", 0),
			(assign, "$tutorial_3_msg_3_displayed", 0),
			(assign, "$tutorial_3_msg_4_displayed", 0),
			(assign, "$tutorial_3_msg_5_displayed", 0)
		],

		[]),

		(0.0, 0.0, 0.0,
		[
			(try_begin),
				(eq, "$tutorial_3_state", 0),
				(try_begin),
					(eq, "$tutorial_3_msg_1_displayed", 0),
					(store_mission_timer_a, ":mission_timer_a"),
					(gt, ":mission_timer_a", 0),
					(assign, "$tutorial_3_msg_1_displayed", 1),
					(tutorial_message, "str_tutorial_3_2_msg_1"),
					(play_sound, "snd_tutorial_1"),
					(call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
					(assign, ":value", reg0),
					(agent_get_position, 1, ":value"),
					(agent_set_scripted_destination, ":value", 1, 0),
					(call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_swordsman"),
					(assign, ":value", reg0),
					(agent_get_position, 1, ":value"),
					(agent_set_scripted_destination, ":value", 1, 0),
				(try_end),
				(get_player_agent_no, ":player_agent_no"),
				(agent_get_position, 1, ":player_agent_no"),
				(entry_point_get_position, 2, 2),
				(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
				(le, ":distance_between_positions_1_2", 200),
				(scene_prop_get_instance, ":scene_prop_instance_tutorial_door_b_0", "spr_tutorial_door_b", 0),
				(prop_instance_get_position, 1, ":scene_prop_instance_tutorial_door_b_0"),
				(position_rotate_z, 1, -90),
				(prop_instance_animate_to_position, ":scene_prop_instance_tutorial_door_b_0", 1, 150),
				(val_add, "$tutorial_3_state", 1),
			(else_try),
				(eq, "$tutorial_3_state", 1),
				(try_begin),
					(eq, "$tutorial_3_msg_2_displayed", 0),
					(assign, "$tutorial_3_msg_2_displayed", 1),
					(tutorial_message, "str_tutorial_3_2_msg_2"),
					(play_sound, "snd_tutorial_1"),
				(try_end),
				(scene_prop_get_instance, ":scene_prop_instance_barrier_4m_0", "spr_barrier_4m", 0),
				(prop_instance_get_position, 1, ":scene_prop_instance_barrier_4m_0"),
				(get_player_agent_no, ":player_agent_no"),
				(agent_get_position, 2, ":player_agent_no"),
				(position_is_behind_position, 2, 1),
				(scene_prop_get_instance, ":scene_prop_instance_tutorial_door_b_0", "spr_tutorial_door_b", 0),
				(prop_instance_get_position, 1, ":scene_prop_instance_tutorial_door_b_0"),
				(position_rotate_z, 1, 90),
				(prop_instance_animate_to_position, ":scene_prop_instance_tutorial_door_b_0", 1, 150),
				(call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
				(agent_clear_scripted_mode, reg0),
				(val_add, "$tutorial_3_state", 1),
			(else_try),
				(eq, "$tutorial_3_state", 2),
				(call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
				(neg|agent_is_alive, reg0),
				(scene_prop_get_instance, ":scene_prop_instance_tutorial_door_b_0", "spr_tutorial_door_b", 1),
				(prop_instance_get_position, 1, ":scene_prop_instance_tutorial_door_b_0"),
				(position_rotate_z, 1, -90),
				(prop_instance_animate_to_position, ":scene_prop_instance_tutorial_door_b_0", 1, 150),
				(scene_prop_get_instance, ":scene_prop_instance_tutorial_door_b_0", "spr_tutorial_door_b", 3),
				(prop_instance_get_position, 1, ":scene_prop_instance_tutorial_door_b_0"),
				(position_rotate_z, 1, -90),
				(prop_instance_animate_to_position, ":scene_prop_instance_tutorial_door_b_0", 1, 150),
				(val_add, "$tutorial_3_state", 1),
			(else_try),
				(eq, "$tutorial_3_state", 3),
				(try_begin),
					(eq, "$tutorial_3_msg_3_displayed", 0),
					(assign, "$tutorial_3_msg_3_displayed", 1),
					(tutorial_message, "str_tutorial_3_2_msg_3"),
					(play_sound, "snd_tutorial_1"),
				(try_end),
				(scene_prop_get_instance, ":scene_prop_instance_barrier_4m_0", "spr_barrier_4m", 1),
				(prop_instance_get_position, 1, ":scene_prop_instance_barrier_4m_0"),
				(get_player_agent_no, ":player_agent_no"),
				(agent_get_position, 2, ":player_agent_no"),
				(position_is_behind_position, 2, 1),
				(scene_prop_get_instance, ":scene_prop_instance_tutorial_door_b_0", "spr_tutorial_door_b", 1),
				(prop_instance_get_position, 1, ":scene_prop_instance_tutorial_door_b_0"),
				(position_rotate_z, 1, 90),
				(prop_instance_animate_to_position, ":scene_prop_instance_tutorial_door_b_0", 1, 150),
				(call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_swordsman"),
				(agent_clear_scripted_mode, reg0),
				(val_add, "$tutorial_3_state", 1),
			(else_try),
				(eq, "$tutorial_3_state", 4),
				(try_begin),
					(eq, "$tutorial_3_msg_4_displayed", 0),
					(assign, "$tutorial_3_msg_4_displayed", 1),
					(tutorial_message, "str_tutorial_3_2_msg_4"),
					(play_sound, "snd_tutorial_1"),
				(try_end),
				(call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_swordsman"),
				(neg|agent_is_alive, reg0),
				(val_add, "$tutorial_3_state", 1),
			(else_try),
				(eq, "$tutorial_3_state", 5),
				(eq, "$tutorial_3_msg_5_displayed", 0),
				(assign, "$tutorial_3_msg_5_displayed", 1),
				(tutorial_message, "str_tutorial_3_2_msg_5"),
				(play_sound, "snd_tutorial_2"),
				(assign, "$tutorial_3_finished", 1),
			(else_try),
				(gt, "$tutorial_3_state", 30),
				(tutorial_message, "str_tutorial_failed"),
			(try_end)
		],

		[])
	] + crouching_triggers ),

	("tutorial_4", mtf_arena_fight|mtf_team_fight, -1,
	"You enter the training ground.",
	[(0, mtef_team_0|mtef_leader_only, af_override_everything, 0, 1, [itm_tutorial_sword, itm_tutorial_short_bow, itm_tutorial_arrows, itm_leather_jerkin, itm_leather_boots])],
	[
		(-21.0, 0.0, 0.0,
		[],

		[
			(try_begin),
				(lt, "$tutorial_4_state", 11),
				(question_box, "str_do_you_wish_to_leave_tutorial"),
			(else_try),
				(finish_mission, 0),
			(try_end)
		]),

		(-8.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(eq, ":trigger_param_1", 0),
			(finish_mission, 0)
		]),

		(-22.0, 0.0, 0.0,
		[
			(display_message, "str_cant_use_inventory_tutorial")
		],

		[]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(scene_set_day_time, 13)
		]),

		(0.0, 0.0, ti_once,
		[
			(tutorial_message_set_size, 17, 17),
			(tutorial_message_set_position, 500, 650),
			(tutorial_message_set_center_justify, 0),
			(assign, "$tutorial_4_state", 0),
			(assign, "$tutorial_4_msg_1_displayed", 0),
			(assign, "$tutorial_4_msg_2_displayed", 0),
			(assign, "$tutorial_4_msg_3_displayed", 0),
			(assign, "$tutorial_4_msg_4_displayed", 0),
			(assign, "$tutorial_4_msg_5_displayed", 0),
			(assign, "$tutorial_4_msg_6_displayed", 0),
			(assign, "$tutorial_4_msg_7_displayed", 0)
		],

		[]),

		(0.0, 0.0, 0.0,
		[
			(try_begin),
				(eq, "$tutorial_4_state", 0),
				(try_begin),
					(eq, "$tutorial_4_msg_1_displayed", 0),
					(store_mission_timer_a, ":mission_timer_a"),
					(gt, ":mission_timer_a", 0),
					(assign, "$tutorial_4_msg_1_displayed", 1),
					(tutorial_message, "str_tutorial_4_msg_1"),
					(entry_point_get_position, 1, 1),
					(set_spawn_position, 1),
					(spawn_horse, "itm_tutorial_saddle_horse"),
					(assign, "$tutorial_num_total_dummies_destroyed", 0),
				(try_end),
				(get_player_agent_no, ":player_agent_no"),
				(agent_get_horse, ":horse_player_agent_no", ":player_agent_no"),
				(ge, ":horse_player_agent_no", 0),
				(val_add, "$tutorial_4_state", 1),
				(entry_point_get_position, 1, 2),
				(scene_prop_get_instance, ":scene_prop_instance_tutorial_flag_yellow_0", "spr_tutorial_flag_yellow", 0),
				(prop_instance_animate_to_position, ":scene_prop_instance_tutorial_flag_yellow_0", 1, 1),
			(else_try),
				(eq, "$tutorial_4_state", 1),
				(try_begin),
					(eq, "$tutorial_4_msg_2_displayed", 0),
					(assign, "$tutorial_4_msg_2_displayed", 1),
					(tutorial_message, "str_tutorial_4_msg_2"),
					(play_sound, "snd_tutorial_1"),
				(try_end),
				(get_player_agent_no, ":player_agent_no"),
				(agent_get_position, 1, ":player_agent_no"),
				(entry_point_get_position, 2, 2),
				(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
				(le, ":distance_between_positions_1_2", 200),
				(val_add, "$tutorial_4_state", 1),
				(entry_point_get_position, 1, 3),
				(scene_prop_get_instance, ":scene_prop_instance_tutorial_flag_yellow_0", "spr_tutorial_flag_yellow", 0),
				(prop_instance_animate_to_position, ":scene_prop_instance_tutorial_flag_yellow_0", 1, 1),
			(else_try),
				(eq, "$tutorial_4_state", 2),
				(get_player_agent_no, ":player_agent_no"),
				(agent_get_position, 1, ":player_agent_no"),
				(entry_point_get_position, 2, 3),
				(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
				(le, ":distance_between_positions_1_2", 200),
				(val_add, "$tutorial_4_state", 1),
				(entry_point_get_position, 1, 4),
				(scene_prop_get_instance, ":scene_prop_instance_tutorial_flag_yellow_0", "spr_tutorial_flag_yellow", 0),
				(prop_instance_animate_to_position, ":scene_prop_instance_tutorial_flag_yellow_0", 1, 1),
			(else_try),
				(eq, "$tutorial_4_state", 3),
				(get_player_agent_no, ":player_agent_no"),
				(agent_get_position, 1, ":player_agent_no"),
				(entry_point_get_position, 2, 4),
				(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
				(le, ":distance_between_positions_1_2", 200),
				(val_add, "$tutorial_4_state", 1),
				(entry_point_get_position, 1, 5),
				(scene_prop_get_instance, ":scene_prop_instance_tutorial_flag_yellow_0", "spr_tutorial_flag_yellow", 0),
				(prop_instance_animate_to_position, ":scene_prop_instance_tutorial_flag_yellow_0", 1, 1),
			(else_try),
				(eq, "$tutorial_4_state", 4),
				(get_player_agent_no, ":player_agent_no"),
				(agent_get_position, 1, ":player_agent_no"),
				(entry_point_get_position, 2, 5),
				(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
				(le, ":distance_between_positions_1_2", 200),
				(val_add, "$tutorial_4_state", 1),
				(entry_point_get_position, 1, 6),
				(scene_prop_get_instance, ":scene_prop_instance_tutorial_flag_yellow_0", "spr_tutorial_flag_yellow", 0),
				(prop_instance_animate_to_position, ":scene_prop_instance_tutorial_flag_yellow_0", 1, 1),
			(else_try),
				(eq, "$tutorial_4_state", 5),
				(get_player_agent_no, ":player_agent_no"),
				(agent_get_position, 1, ":player_agent_no"),
				(entry_point_get_position, 2, 6),
				(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
				(le, ":distance_between_positions_1_2", 200),
				(val_add, "$tutorial_4_state", 1),
				(entry_point_get_position, 1, 1),
				(scene_prop_get_instance, ":scene_prop_instance_tutorial_flag_yellow_0", "spr_tutorial_flag_yellow", 0),
				(prop_instance_animate_to_position, ":scene_prop_instance_tutorial_flag_yellow_0", 1, 1),
			(else_try),
				(eq, "$tutorial_4_state", 6),
				(get_player_agent_no, ":player_agent_no"),
				(agent_get_position, 1, ":player_agent_no"),
				(entry_point_get_position, 2, 1),
				(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
				(le, ":distance_between_positions_1_2", 200),
				(val_add, "$tutorial_4_state", 1),
				(entry_point_get_position, 1, 7),
				(scene_prop_get_instance, ":scene_prop_instance_tutorial_flag_yellow_0", "spr_tutorial_flag_yellow", 0),
				(prop_instance_animate_to_position, ":scene_prop_instance_tutorial_flag_yellow_0", 1, 1),
			(else_try),
				(eq, "$tutorial_4_state", 7),
				(try_begin),
					(eq, "$tutorial_4_msg_3_displayed", 0),
					(assign, "$tutorial_4_msg_3_displayed", 1),
					(tutorial_message, "str_tutorial_4_msg_3"),
					(play_sound, "snd_tutorial_1"),
				(try_end),
				(get_player_agent_no, ":player_agent_no"),
				(agent_get_position, 1, ":player_agent_no"),
				(entry_point_get_position, 2, 7),
				(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
				(le, ":distance_between_positions_1_2", 200),
				(val_add, "$tutorial_4_state", 1),
				(entry_point_get_position, 1, 20),
				(scene_prop_get_instance, ":scene_prop_instance_tutorial_flag_yellow_0", "spr_tutorial_flag_yellow", 0),
				(prop_instance_animate_to_position, ":scene_prop_instance_tutorial_flag_yellow_0", 1, 1),
			(else_try),
				(eq, "$tutorial_4_state", 8),
				(try_begin),
					(eq, "$tutorial_4_msg_4_displayed", 0),
					(assign, "$tutorial_4_msg_4_displayed", 1),
					(tutorial_message, "str_tutorial_4_msg_4"),
					(play_sound, "snd_tutorial_1"),
				(try_end),
				(ge, "$tutorial_num_total_dummies_destroyed", 2),
				(val_add, "$tutorial_4_state", 1),
				(entry_point_get_position, 1, 8),
				(scene_prop_get_instance, ":scene_prop_instance_tutorial_flag_yellow_0", "spr_tutorial_flag_yellow", 0),
				(prop_instance_animate_to_position, ":scene_prop_instance_tutorial_flag_yellow_0", 1, 1),
			(else_try),
				(eq, "$tutorial_4_state", 9),
				(try_begin),
					(eq, "$tutorial_4_msg_5_displayed", 0),
					(assign, "$tutorial_4_msg_5_displayed", 1),
					(tutorial_message, "str_tutorial_4_msg_5"),
					(play_sound, "snd_tutorial_1"),
				(try_end),
				(get_player_agent_no, ":player_agent_no"),
				(agent_get_position, 1, ":player_agent_no"),
				(entry_point_get_position, 2, 8),
				(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
				(le, ":distance_between_positions_1_2", 200),
				(val_add, "$tutorial_4_state", 1),
				(entry_point_get_position, 1, 20),
				(scene_prop_get_instance, ":scene_prop_instance_tutorial_flag_yellow_0", "spr_tutorial_flag_yellow", 0),
				(prop_instance_animate_to_position, ":scene_prop_instance_tutorial_flag_yellow_0", 1, 1),
			(else_try),
				(eq, "$tutorial_4_state", 10),
				(try_begin),
					(eq, "$tutorial_4_msg_6_displayed", 0),
					(assign, "$tutorial_4_msg_6_displayed", 1),
					(tutorial_message, "str_tutorial_4_msg_6"),
					(play_sound, "snd_tutorial_1"),
					(assign, "$g_last_archery_point_earned", 0),
					(assign, "$tutorial_num_arrows_hit", 0),
				(try_end),
				(try_begin),
					(get_player_agent_no, ":player_agent_no"),
					(agent_get_ammo, ":ammo_player_agent_no", ":player_agent_no"),
					(le, ":ammo_player_agent_no", 0),
					(agent_refill_ammo, ":player_agent_no"),
					(tutorial_message, "str_tutorial_ammo_refilled"),
				(try_end),
				(gt, "$g_last_archery_point_earned", 0),
				(assign, "$g_last_archery_point_earned", 0),
				(val_add, "$tutorial_num_arrows_hit", 1),
				(gt, "$tutorial_num_arrows_hit", 2),
				(val_add, "$tutorial_4_state", 1),
			(else_try),
				(eq, "$tutorial_4_state", 11),
				(eq, "$tutorial_4_msg_7_displayed", 0),
				(assign, "$tutorial_4_msg_7_displayed", 1),
				(tutorial_message, "str_tutorial_4_msg_7"),
				(play_sound, "snd_tutorial_2"),
				(assign, "$tutorial_4_finished", 1),
			(try_end)
		],

		[])
	] + crouching_triggers ),

	("tutorial_5", mtf_arena_fight|mtf_team_fight, -1,
	"You enter the training ground.",
	[(0, mtef_visitor_source|mtef_team_0, af_override_everything, 0, 1, [itm_tutorial_sword, itm_tutorial_shield, itm_tutorial_short_bow, itm_tutorial_arrows, itm_tutorial_saddle_horse, itm_leather_jerkin, itm_leather_boots]),
	(1, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(2, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(3, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(4, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(8, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(9, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(10, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(13, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(14, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(15, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(16, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, [])],
	[
		(-21.0, 0.0, 0.0,
		[],

		[
			(try_begin),
				(lt, "$tutorial_5_state", 5),
				(question_box, "str_do_you_wish_to_leave_tutorial"),
			(else_try),
				(finish_mission, 0),
			(try_end)
		]),

		(-8.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(eq, ":trigger_param_1", 0),
			(finish_mission, 0)
		]),

		(-22.0, 0.0, 0.0,
		[
			(display_message, "str_cant_use_inventory_tutorial")
		],

		[]),

		(0.0, 0.0, ti_once,
		[
			(store_mission_timer_a, ":mission_timer_a"),
			(gt, ":mission_timer_a", 2),
			(main_hero_fallen),
			(assign, "$tutorial_5_state", 100)
		],

		[]),

		(0.0, 0.0, ti_once,
		[
			(tutorial_message_set_size, 17, 17),
			(tutorial_message_set_position, 500, 650),
			(tutorial_message_set_center_justify, 0),
			(assign, "$tutorial_5_state", 0),
			(assign, "$tutorial_5_msg_1_displayed", 0),
			(assign, "$tutorial_5_msg_2_displayed", 0),
			(assign, "$tutorial_5_msg_3_displayed", 0),
			(assign, "$tutorial_5_msg_4_displayed", 0),
			(assign, "$tutorial_5_msg_5_displayed", 0),
			(assign, "$tutorial_5_msg_6_displayed", 0)
		],

		[]),

		(0.0, 0.0, ti_once,
		[
			(set_show_messages, 0),
			(team_give_order, 0, 9, 11),
			(set_show_messages, 1),
			(store_mission_timer_a, ":mission_timer_a"),
			(gt, ":mission_timer_a", 3)
		],

		[]),

		(0.0, 0.0, 0.0,
		[
			(call_script, "script_cf_turn_windmill_fans", 0)
		],

		[]),

		(0.0, 0.0, 0.0,
		[
			(try_begin),
				(eq, "$tutorial_5_state", 0),
				(try_begin),
					(eq, "$tutorial_5_msg_1_displayed", 0),
					(store_mission_timer_a, ":mission_timer_a"),
					(gt, ":mission_timer_a", 0),
					(assign, "$tutorial_5_msg_1_displayed", 1),
					(tutorial_message, "str_tutorial_5_msg_1"),
					(entry_point_get_position, 1, 5),
					(scene_prop_get_instance, ":scene_prop_instance_tutorial_flag_yellow_0", "spr_tutorial_flag_yellow", 0),
					(prop_instance_animate_to_position, ":scene_prop_instance_tutorial_flag_yellow_0", 1, 1),
				(try_end),
				(call_script, "script_cf_team_get_average_position_of_agents_with_type_to_pos1", 0, 0),
				(entry_point_get_position, 2, 5),
				(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
				(le, ":distance_between_positions_1_2", 1000),
				(val_add, "$tutorial_5_state", 1),
				(entry_point_get_position, 1, 6),
				(scene_prop_get_instance, ":scene_prop_instance_tutorial_flag_yellow_0", "spr_tutorial_flag_red", 0),
				(prop_instance_animate_to_position, ":scene_prop_instance_tutorial_flag_yellow_0", 1, 1),
			(else_try),
				(eq, "$tutorial_5_state", 1),
				(try_begin),
					(eq, "$tutorial_5_msg_2_displayed", 0),
					(assign, "$tutorial_5_msg_2_displayed", 1),
					(tutorial_message, "str_tutorial_5_msg_2"),
					(play_sound, "snd_tutorial_1"),
				(try_end),
				(call_script, "script_cf_team_get_average_position_of_agents_with_type_to_pos1", 0, 0),
				(entry_point_get_position, 2, 5),
				(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
				(le, ":distance_between_positions_1_2", 1000),
				(get_player_agent_no, ":player_agent_no"),
				(agent_get_position, 1, ":player_agent_no"),
				(entry_point_get_position, 2, 6),
				(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
				(le, ":distance_between_positions_1_2", 500),
				(val_add, "$tutorial_5_state", 1),
				(entry_point_get_position, 1, 7),
				(scene_prop_get_instance, ":scene_prop_instance_tutorial_flag_yellow_0", "spr_tutorial_flag_yellow", 0),
				(prop_instance_animate_to_position, ":scene_prop_instance_tutorial_flag_yellow_0", 1, 1),
				(entry_point_get_position, 1, 30),
				(scene_prop_get_instance, ":scene_prop_instance_tutorial_flag_yellow_0", "spr_tutorial_flag_red", 0),
				(prop_instance_animate_to_position, ":scene_prop_instance_tutorial_flag_yellow_0", 1, 1),
			(else_try),
				(eq, "$tutorial_5_state", 2),
				(try_begin),
					(eq, "$tutorial_5_msg_3_displayed", 0),
					(assign, "$tutorial_5_msg_3_displayed", 1),
					(tutorial_message, "str_tutorial_5_msg_3"),
					(play_sound, "snd_tutorial_1"),
				(try_end),
				(get_player_agent_no, ":player_agent_no"),
				(agent_get_position, 1, ":player_agent_no"),
				(entry_point_get_position, 2, 7),
				(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
				(le, ":distance_between_positions_1_2", 500),
				(val_add, "$tutorial_5_state", 1),
				(modify_visitors_at_site, "scn_tutorial_5"),
				(reset_visitors),
				(set_visitor, 5, "trp_euro_archer_1"),
				(set_visitor, 6, "trp_euro_archer_2"),
				(set_visitor, 7, "trp_euro_xbow_3"),
				(entry_point_get_position, 1, 11),
				(scene_prop_get_instance, ":scene_prop_instance_tutorial_flag_yellow_0", "spr_tutorial_flag_yellow", 0),
				(prop_instance_animate_to_position, ":scene_prop_instance_tutorial_flag_yellow_0", 1, 1),
				(entry_point_get_position, 1, 12),
				(scene_prop_get_instance, ":scene_prop_instance_tutorial_flag_yellow_0", "spr_tutorial_flag_red", 0),
				(prop_instance_animate_to_position, ":scene_prop_instance_tutorial_flag_yellow_0", 1, 1),
				(set_show_messages, 0),
				(team_give_order, 0, 1, 11),
				(set_show_messages, 1),
			(else_try),
				(eq, "$tutorial_5_state", 3),
				(try_begin),
					(eq, "$tutorial_5_msg_4_displayed", 0),
					(assign, "$tutorial_5_msg_4_displayed", 1),
					(tutorial_message, "str_tutorial_5_msg_4"),
					(play_sound, "snd_tutorial_1"),
				(try_end),
				(call_script, "script_cf_team_get_average_position_of_agents_with_type_to_pos1", 0, 1),
				(entry_point_get_position, 2, 11),
				(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
				(le, ":distance_between_positions_1_2", 1000),
				(call_script, "script_cf_team_get_average_position_of_agents_with_type_to_pos1", 0, 0),
				(entry_point_get_position, 2, 12),
				(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
				(le, ":distance_between_positions_1_2", 1000),
				(val_add, "$tutorial_5_state", 1),
				(entry_point_get_position, 1, 30),
				(scene_prop_get_instance, ":scene_prop_instance_tutorial_flag_yellow_0", "spr_tutorial_flag_yellow", 0),
				(prop_instance_animate_to_position, ":scene_prop_instance_tutorial_flag_yellow_0", 1, 1),
				(scene_prop_get_instance, ":scene_prop_instance_tutorial_flag_yellow_0", "spr_tutorial_flag_red", 0),
				(prop_instance_animate_to_position, ":scene_prop_instance_tutorial_flag_yellow_0", 1, 1),
				(modify_visitors_at_site, "scn_tutorial_5"),
				(reset_visitors),
				(set_visitor, 8, "trp_bandit"),
				(set_visitor, 9, "trp_bandit"),
				(set_visitor, 10, "trp_bandit"),
				(set_visitor, 11, "trp_bandit"),
				(team_give_order, 1, 9, 2),
			(else_try),
				(eq, "$tutorial_5_state", 4),
				(try_begin),
					(eq, "$tutorial_5_msg_5_displayed", 0),
					(assign, "$tutorial_5_msg_5_displayed", 1),
					(tutorial_message, "str_tutorial_5_msg_5"),
					(play_sound, "snd_tutorial_1"),
				(try_end),
				(assign, ":var_5", 0),
				(try_for_agents, ":var_6"),
					(agent_is_human, ":var_6"),
					(agent_is_alive, ":var_6"),
					(agent_get_team, ":team_var_6", ":var_6"),
					(eq, ":team_var_6", 1),
					(val_add, ":var_5", 1),
				(try_end),
				(eq, ":var_5", 0),
				(val_add, "$tutorial_5_state", 1),
			(else_try),
				(eq, "$tutorial_5_state", 5),
				(eq, "$tutorial_5_msg_6_displayed", 0),
				(assign, "$tutorial_5_msg_6_displayed", 1),
				(tutorial_message, "str_tutorial_5_msg_6"),
				(play_sound, "snd_tutorial_2"),
				(assign, "$tutorial_5_finished", 1),
			(else_try),
				(gt, "$tutorial_5_state", 30),
				(tutorial_message, "str_tutorial_failed"),
				(entry_point_get_position, 1, 30),
				(scene_prop_get_instance, ":scene_prop_instance_tutorial_flag_yellow_0", "spr_tutorial_flag_yellow", 0),
				(prop_instance_animate_to_position, ":scene_prop_instance_tutorial_flag_yellow_0", 1, 1),
				(scene_prop_get_instance, ":scene_prop_instance_tutorial_flag_yellow_0", "spr_tutorial_flag_red", 0),
				(prop_instance_animate_to_position, ":scene_prop_instance_tutorial_flag_yellow_0", 1, 1),
			(try_end)
		],

		[])
	] + crouching_triggers ),

	("quick_battle_battle", mtf_battle_mode, -1,
	"You lead your men to battle.",
	[(0, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(1, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(2, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(3, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(4, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(5, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(6, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(7, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(8, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(9, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(10, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(11, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(12, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(13, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(14, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(15, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(16, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(17, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(18, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(19, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(20, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(21, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(22, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(23, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(24, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(25, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(26, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(27, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(28, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(29, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(30, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(31, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, [])],
	[
	
	
	

		    (7, 0, ti_once,
    [],
    [
	(call_script, "script_assign_traits"),
    ]),


    (0, 0, 1, 
    [
    ],
    [
	(call_script, "script_stumbling"),
    ]),







#Decapitations next level right here.
(ti_on_agent_hit, 0, 0, [(eq, "$dynamic_decap", 1),],
[
   (store_trigger_param_1, ":victim_agent"),
   (store_trigger_param_2, ":attacker_agent"),
   (store_trigger_param_3, ":damage"),
   (assign, ":attacker_item", reg0), ### Transfer the item ID to make sure it dosn't change while the script is running
   (copy_position, pos5, pos0), ### Transfer the position of the hit to make sure it dosn't change while the script is running
   (neq, ":victim_agent", -1),
   (try_begin), #-- Decapitations --#
      (agent_is_human, ":victim_agent"),
	  (ge, ":attacker_item", 0),
	  (assign, ":run", 0), ### Reset the run test variable
#	  (try_begin), ### Special weapons that can decap, ovevrrides the below conditions
#		  (this_or_next|eq, ":attacker_item", "itm_supercrossbow"),
#		  (eq, ":attacker_item", "itm_supersledge"),
#		  (assign, ":run", 1),
	  (try_begin),
		  #(neq, ":attacker_item", "itm_mace_1"), ### List of weapons that cannot decapitate
		  #(neq, ":attacker_item", "itm_mace_2"), ### This would be easier to do with a preperty check (for damage type), but I don't know if that is possible or not
		  #(neq, ":attacker_item", "itm_mace_3"),
		  #(neq, ":attacker_item", "itm_staff"), #Keeping active incase of script errors
		  (agent_get_action_dir, ":attack_dir", ":attacker_agent"), ### Makes sure the attack is either a left or right swing
		  (this_or_next|eq, ":attack_dir", 1), ### Right swing
		  (eq, ":attack_dir", 2), ### Left swing
		  (assign, ":run", 1),
	  (try_end),
	  (eq, ":run", 1), ### One of the checks were true, continue to run script
	  #(assign, reg1, ":damage"), #Debug messages
	  #(display_message, "@Damage: {reg1}"),
	  
	  (assign, ":run", 0), ### Reset the run test variable
	  (try_begin),
		(ge, ":damage", "$decap_damage"), ### 30 Minimum damage required to decapitate an agent
		(assign, ":run", 1),
		
#	  (else_try),  ### If debugging mode is on, this bypasses the damage requirement check
#		  (eq,"$g_decapitations_debugging", 1),
#		  (assign, ":run", 1),
#		  (display_message, "@Decap minimum DMG req bypassed"),
	  (try_end),
	  (eq, ":run", 1),
	  
	  (store_agent_hit_points, ":hp", ":victim_agent", 1),
	  (val_add, ":hp", 10), ### 10 Victim must have the negative of this hp or below after hit for the script to move on (never put this value below 0 since the agent has to be absolutley positvely dead)!
	  (ge, ":damage", ":hp"),
	  
	  
	  ### Compare the hit position to the agent's position
      (agent_get_position, pos4, ":victim_agent"),
      (get_distance_between_positions, ":distance", pos4, pos5), 
	  (agent_get_horse, ":is_mounted", ":victim_agent"),
	  (try_begin), ### If the agent is on horseback, these values are used (note that these values will not be exactly correct if the horse is very large or very small)
		(ge, ":is_mounted", 0), ### Will be -1 if no horse is to be found, so anything above means that the agent is mounted
		(assign, ":min_distance", 240), ### Minimum distance from the agent's horse's hooves from which the hit is valid (240 is an approximate value)
		(assign, ":max_distance", 260), ### Maximum distance from the agent's horse's hooves to which the hit is valid (260 is an approximate value)
	  (else_try),  ### If the agent is on foot, these values are used
	    (assign, ":min_distance", 160), ### Minimum distance from the agent's feet from which the hit is valid (160 = slightly below the neck)
	    (assign, ":max_distance", 176), ### Maximum distance from the agent's feet to which the hit is valid (176 = near the nose)
	  (try_end),
      (is_between, ":distance", ":min_distance", ":max_distance"), ### Check to see if the hit is within the allowed area
	  
	  
	  (assign, ":run", 0), ### Default variable value before damage test
	  (try_begin),
		  (store_div, ":chance", ":damage", "$decap_damage_divider"), ### Chance of decap is damage / 4 right now. Lower this value for higher chances of decapitation (or press M+Right Ctrl for debug more if you just want to test easy decaps in-game).
		  
		  #(assign, reg1, ":chance"), #Debug messages
		  #(display_message, "@Decap chance is: {reg1}"),
		  (store_random_in_range, ":diceroll", 0, "$decap_randomizer"), ### Randomizer, 0-100
		  
		  #(assign, reg1, ":diceroll"), #Debug messages
		  #(display_message, "@Diceroll: {reg1}"),
		  (le, ":diceroll", ":chance"), ### ":diceroll" must be less than or equal to ":chance", if it is, decapitation occurs!
		  
		  (assign, ":run", 1), ### SUCCESS!
		  
#     (else_try),  ### If debugging mode is on, bypass chance calculation
#		  (eq,"$g_decapitations_debugging", 1),
#		  (assign, ":run", 1),
#		  (display_message, "@Decap chance calc bypassed"),
	  (try_end),  
	  (eq, ":run", 1), ### Time for the fun stuff!

	  ### Gender test for spawning the right head type
	  (assign, ":head_type", "itm_cut_off_head_male"),
	  (agent_get_troop_id, ":victim_troop", ":victim_agent"),
	  (try_begin),
	    (ge, ":victim_troop", 0),
		(troop_get_type,":victim_gender",":victim_troop"),
		(eq, ":victim_gender", 1),
		(assign, ":head_type", "itm_cut_off_head_female"),
	  (try_end),
	  
	  ### Randomize the spawned head's and/or helmet's position and orientation
	  (store_random_in_range, ":z_rotation", 0, 360),
	  (store_random_in_range, ":y_rotation", -60, 60),
	  (store_random_in_range, ":x_pos", -90, 90),
	  (store_random_in_range, ":y_pos", -90, 90),
	  (position_rotate_z, pos4,":z_rotation"),
	  (position_rotate_y, pos4,":y_rotation"),
	  (position_move_x, pos4, ":x_pos"),
	  (position_move_y, pos4, ":y_pos"),
	  (position_set_z_to_ground_level, pos4),
	  (position_move_z, pos4, 5),
	  (set_spawn_position, pos4),
	  (assign, ":prunetime", 360), ### This is the time in seconds before the spawned head or helmet gets pruned (removed). Recommended to keep it above 0 to make sure it gets removed eventually or when the scene resets, to prevent performance issues.
	  
	  #(spawn_item, ":head_type", 0, ":prunetime"), ### This is the old way of spawning the head on the ground with the helmet, disabled because of the new dynamic heads. You can comment away (disable) the dynamic heads spawning further down and uncomment this line for a less performance-needing approach (with no physics involved).
	  
	  ### Does the agent have a helmet or hat equipped?
      (agent_get_item_slot, ":item", ":victim_agent", 4), #head slot
      (try_begin),
         (ge, ":item", 1), ### Does it?
         (agent_unequip_item, ":victim_agent", ":item"), ### Yes it does. Unequip it to allow replacement by the invisible helmet further down
		 (try_begin),
			 ### Don't spawn items with "itp_attatch_armature" flag: rigging causes floating bugs
			 ### This would be much better to do with an item flag check, but I haven't found any way to do that
			 #(neq, ":item", "itm_with_itp_attatch_armature"),
			 #(neg|is_between,":item","start_of_itm_range_with_itp_attatch_armature","end_of_itm_range_with_itp_attatch_armature"),
			#(set_spawn_position, pos4),
			(spawn_item, ":item", 0, ":prunetime"), ### Spawns the agent's currently equipped headgear on the dropped head's position
		 (try_end),
      (try_end),
	  
	  (agent_equip_item, ":victim_agent", "itm_invisible_head"), ### Put an invisible helmet on the agent's head to "remove" it
	  
	  
	  (agent_get_position, pos4, ":victim_agent"), ### Refreshes the agent's position
	  (position_move_z, pos4, ":min_distance"), ### Move to the where the neck used to be attached
	  
	  
	  ### Blood effects! The last variable is the strength. Lower or increase it for more/less blood (or tweak the particle effects themselves in "module_particle_systems.py").
      (particle_system_burst, "psys_blood_decapitation", pos4, 40), 
	  (particle_system_burst, "psys_game_blood", pos4, 10),
	  (particle_system_burst, "psys_game_blood_2", pos4, 10),
	  
	  (play_sound_at_position, "snd_decapitation_battle", pos4), ### Play some nasty sounds
	  
	  
	  ### Dynamic head spawning! See the bottom of "module_scene_props.py" for physics-related options and more.
	  (position_move_z, pos4, 20),
	  (set_spawn_position, pos4),
	  (assign, ":head_type", "spr_head_dynamic_male"),
	  (try_begin), ### Gender check (for determening the type of head)
		(eq, ":victim_gender", 1),
		(assign, ":head_type", "spr_head_dynamic_female"),
	  (try_end),
	  (spawn_scene_prop, ":head_type"),
	  
		#Addition check if we should allow the message to appears
			(eq, "$allow_decap_mess", 1), #Possible script error

	  ### This below is for the text that shows up when somebody is decapitated.
	  
	  ### Who decapitated who?
		(agent_get_troop_id, ":attacker_troop", ":attacker_agent"),
		(str_store_troop_name, s0, ":attacker_troop"),

		(agent_get_troop_id, ":victim_troop", ":victim_agent"),
		(str_store_troop_name, s1, ":victim_troop"),

	  
	  ### Colour check (friend or foe?)
	  (get_player_agent_no, ":my_agent"),
	  (agent_get_team, ":my_team", ":my_agent"),
	  (agent_get_team, ":victim_team", ":victim_agent"),
	  (try_begin), ### Display it!
		  (neq, ":my_team", ":victim_team"),
		  (display_message, "@>>> {s0} decapitated {s1}!", 0xFF33DD11), ## Green
	  (else_try),
		  (display_message, "@>>> {s0} decapitated {s1}!", 0xFFFF4422), ## Red
	  (try_end),
   (try_end), #-- Decapitations END --#
   
   ]),



	#AI Sound horn!
			(0.0, 0.0, 2.0,
		[
			##(store_random_in_range, ":horn_chance", 0, 22),
			#(eq, ":horn_chance", 0),
		],
		[
			(call_script, "script_formation_ai_sound_horn"),
		]),
	#AI Sound horn end!










		
		
			#####Engage SP Music Tracks FIELD BATTLES
	#####MUSICBOX
	(ti_before_mission_start, 0, ti_once, [ #680 #(ti_after_mission_start, 0, 680, [ #680
	],
		
  [
    ##(play_track, "track_silence", 1), #Stop current module track
		   (music_set_situation, mtf_sit_fight), #Field
   #(music_set_situation, mtf_sit_siege), #Siege probably don't use
	(assign, "$music_timer", 0), #Patch
  #Randomize chance is 1 in a 5 (20%)
  
  #Field related extend to sieges
  (store_random_in_range, ":randomizer", 0, 2), #50% Chance of randomization
  (try_begin),
  (eq, ":randomizer", 0),
  (store_random_in_range, ":euro_randomizernext", 1, 12),
  (store_random_in_range, ":medi_randomizer", 1, 8),
  (store_random_in_range, ":arab_randomizer", 1, 9),
  (assign, "$track_count_field", ":euro_randomizernext"),
  (assign, "$track_count_field_medi", ":medi_randomizer"),
  (assign, "$track_count_field_arabs", ":arab_randomizer"),
  (try_end),
  #Field related extend to sieges
  ]),
	
	(0, 0, 3, [ #680 #(ti_after_mission_start, 0, 680, [ #680
	],
		
  [
		  #(display_message, "@Executing music code"),
		  (store_mission_timer_b, ":time_msec"),
		  #(assign, reg10, ":time_msec"),
          #(str_clear, s10),
          #(str_store_string, s10, "@Mission timer B for music: {reg10}"),
		  #(display_message, s10),
			#if next action time is lower than current time, play the sound
			(ge, ":time_msec", "$music_timer"),
			(reset_mission_timer_b), #Resetting mission timer, too.
			(assign, "$music_timer", 0),# Resetting value when track ends.
		
  #Euro only
     (try_begin),
      (ge, "$track_count_field", 11),
      (assign, "$track_count_field", 1),
    (else_try),
      (val_add, "$track_count_field", 1),
	  (ge, "$track_count_field", 11),
	  (assign, "$track_count_field", 1),
    (try_end),
  #Euro only
  
  #Mediterrain only
  
       (try_begin),
      (ge, "$track_count_field_medi", 8),
      (assign, "$track_count_field_medi", 1),
    (else_try),
      (val_add, "$track_count_field_medi", 1),
	  (ge, "$track_count_field_medi", 8),
	  (assign, "$track_count_field_medi", 1),
    (try_end),
  #Mediterrain only
  
  
  #Arabs only

       (try_begin),
      (ge, "$track_count_field_arabs", 8),
      (assign, "$track_count_field_arabs", 1),
    (else_try),
      (val_add, "$track_count_field_arabs", 1),
	  (ge, "$track_count_field_arabs", 8),
	  (assign, "$track_count_field_arabs", 1),
    (try_end),
	#Arabs only
  
  #Pause between music length in seconds
  #(val_add, "$music_timer", 2),# 5 seconds added
  #Pause between music length in seconds
  
	(party_get_current_terrain, ":current_terrain_main_party", "p_main_party"), #Co-Op variant of this trigger should use scenes in_between rather than terrain because player can't obtain terrain in co-op sessions.
	(try_begin),
	(this_or_next|eq, ":current_terrain_main_party", 1), #rt_mountain
	(this_or_next|eq, ":current_terrain_main_party", 2), #rt_steppe
	(eq, ":current_terrain_main_party", 10), #rt_steppe_forest
	#Begin mediterrain music 5 tracks total
	(try_begin),
	(eq, "$track_count_field_medi", 1), #
	(play_track, "track_medib1", 2),
	(val_add, "$music_timer", 206),# 1 second added
	(else_try),
	
	(eq, "$track_count_field_medi", 2), #
	(play_track, "track_medib3", 2),
	(val_add, "$music_timer", 209),#
	(else_try),
	
	(eq, "$track_count_field_medi", 3), #
	(play_track, "track_medib4", 2),
	(val_add, "$music_timer", 237),#
	(else_try),

	(eq, "$track_count_field_medi", 4), #
	(play_track, "track_medib5", 2),
	(val_add, "$music_timer", 229),#
	(else_try),
	(eq, "$track_count_field_medi", 5), #
	(play_track, "track_medib6", 2),
	(val_add, "$music_timer", 127),#
	(else_try),
	(eq, "$track_count_field_medi", 6), #
	(play_track, "track_medib7", 2),
	(val_add, "$music_timer", 161),#
	
	(else_try),
	(eq, "$track_count_field_medi", 7), #
	(play_track, "track_medib8", 2),
	(val_add, "$music_timer", 250),#
	(try_end),
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 3), #rt_plain
	(this_or_next|eq, ":current_terrain_main_party", 11), #rt_forest
	(eq, ":current_terrain_main_party", 9), #rt_mountain_forest
	#Begin Euro Music
	(try_begin),
	(eq, "$track_count_field", 1), #
	(play_track, "track_eurob1", 2),
	(val_add, "$music_timer", 319),#
	(else_try),
	(eq, "$track_count_field", 2), #
	(play_track, "track_eurob2", 2),
	(val_add, "$music_timer", 279),#
	(else_try),
	
	(eq, "$track_count_field", 3), #
	(play_track, "track_eurob3", 2),
	(val_add, "$music_timer", 248),#
	(else_try),
	
	(eq, "$track_count_field", 4), #
	(play_track, "track_eurob4", 2),
	(val_add, "$music_timer", 332),#
	(else_try),
	
	(eq, "$track_count_field", 5), #
	(play_track, "track_eurob5", 2),
	(val_add, "$music_timer", 93),#
		(else_try),
	
	(eq, "$track_count_field", 6), #
	(play_track, "track_eurob6", 2),
	(val_add, "$music_timer", 76),#
		(else_try),
	
	(eq, "$track_count_field", 7), #
	(play_track, "track_eurob7", 2),
	(val_add, "$music_timer", 80),#
		(else_try),
	
	(eq, "$track_count_field", 8), #
	(play_track, "track_eurob8", 2),
	(val_add, "$music_timer", 58),#
		(else_try),
	
	(eq, "$track_count_field", 9), #
	(play_track, "track_eurob9", 2),
	(val_add, "$music_timer", 58),#
		(else_try),
	
#	(eq, "$track_count_field", 10), #
#	(play_track, "track_eurob10"),
#	(val_add, "$music_timer", 123),#
#		(else_try),
	
	(eq, "$track_count_field", 10), #
	(play_track, "track_eurob11", 2),
	(val_add, "$music_timer", 335),#
	(try_end),
	
	
	
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 4), #rt_snow
	(this_or_next|eq, ":current_terrain_main_party", 12), #rt_snow_forest
	(eq, ":current_terrain_main_party", 7), #rt_bridge
	#Begin Euro Music
	(try_begin),
	(eq, "$track_count_field", 1), #
	(play_track, "track_eurob1", 2),
	(val_add, "$music_timer", 319),#
	(else_try),
	(eq, "$track_count_field", 2), #
	(play_track, "track_eurob2", 2),
	(val_add, "$music_timer", 279),#
	(else_try),
	
	(eq, "$track_count_field", 3), #
	(play_track, "track_eurob3", 2),
	(val_add, "$music_timer", 248),#
	(else_try),
	
	(eq, "$track_count_field", 4), #
	(play_track, "track_eurob4", 2),
	(val_add, "$music_timer", 332),#
	(else_try),
	
	(eq, "$track_count_field", 5), #
	(play_track, "track_eurob5", 2),
	(val_add, "$music_timer", 93),#
		(else_try),
	
	(eq, "$track_count_field", 6), #
	(play_track, "track_eurob6", 2),
	(val_add, "$music_timer", 76),#
		(else_try),
	
	(eq, "$track_count_field", 7), #
	(play_track, "track_eurob7", 2),
	(val_add, "$music_timer", 80),#
		(else_try),
	
	(eq, "$track_count_field", 8), #
	(play_track, "track_eurob8", 2),
	(val_add, "$music_timer", 58),#
		(else_try),
	
	(eq, "$track_count_field", 9), #
	(play_track, "track_eurob9", 2),
	(val_add, "$music_timer", 58),#
		(else_try),
	
#	(eq, "$track_count_field", 10), #
#	(play_track, "track_eurob10"),
#	(val_add, "$music_timer", 123),#
#		(else_try),
	
	(eq, "$track_count_field", 10), #
	(play_track, "track_eurob11", 2),
	(val_add, "$music_timer", 335),#
	(try_end),
	
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 5), #rt_desert
	(eq, ":current_terrain_main_party", 13), #rt_desert_forest
	#Begin arab music
	(try_begin),
	(eq, "$track_count_field_arabs", 1), #
	(play_track, "track_arabb1", 2),
	(val_add, "$music_timer", 262),#
	(else_try),
	(eq, "$track_count_field_arabs", 2), #
	(play_track, "track_arabb2", 2),
	(val_add, "$music_timer", 291),#
	#(else_try),
	#(eq, "$track_count_field_arabs", 3), #
	#(play_track, "track_arabb3"),
	(else_try),
	(eq, "$track_count_field_arabs", 3), #
	(play_track, "track_arabb4", 2),
	(val_add, "$music_timer", 104),#
	(else_try),
	
	(eq, "$track_count_field_arabs", 4), #
	(play_track, "track_arabb5", 2),
	(val_add, "$music_timer", 76),#
		(else_try),
	
	(eq, "$track_count_field_arabs", 5), #
	(play_track, "track_arabb6", 2),
	(val_add, "$music_timer", 218),#
	
			(else_try),
	(eq, "$track_count_field_arabs", 6), #
	(play_track, "track_arabb8", 2),
	(val_add, "$music_timer", 209),#
			(else_try),
	(eq, "$track_count_field_arabs", 7), #
	(play_track, "track_arabb9", 2),
	(val_add, "$music_timer", 103),#
	#	(else_try),
	#
	#(eq, "$track_count_field_arabs", 7), #
	#(play_track, "track_arabb7"),
	(try_end),
	(try_end),
  ]),
	
		(-21.0, 0.0, 0.0,
		[],

		[
			(try_begin),
				(neq, "$g_battle_result", 0),
				(call_script, "script_custom_battle_end"),
				(finish_mission),
			(else_try),
				(question_box, "str_give_up_fight"),
			(try_end)
		]),

		(-8.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(eq, ":trigger_param_1", 0),
			(assign, "$g_battle_result", -1),
			(call_script, "script_custom_battle_end"),
			(finish_mission)
		]),

		(-22.0, 0.0, 0.0,
		[
			(display_message, "str_cant_use_inventory_now")
		],

		[]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(scene_set_day_time, 15)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(call_script, "script_troop_agent_set_banner", "tableau_game_troop_label_banner", ":trigger_param_1", ":troop_id_trigger_param_1")
		]),

		(0.0, 0.0, ti_once,
		[],

		[
			(assign, "$g_battle_result", 0),
			#			(try_begin),
			#(eq, "$additional_music", 0),
			#(call_script, "script_combat_music_set_situation_with_culture"),
			#(try_end),
		]),

		(30.0, 0.0, 0.0,
		[],

		[]),

		(1.0, 60.0, ti_once,
		[
			(store_mission_timer_a, reg1),
			(ge, reg1, 10),
			(all_enemies_defeated, 2),
			(set_mission_result, 1),
			(display_message, "str_msg_battle_won"),
			#(play_sound, "snd_won_battle"), #Moved to victorious main menu
			(assign, "$g_battle_won", 1),
			(assign, "$g_battle_result", 1)
		],

		[
			(call_script, "script_custom_battle_end"),
			(finish_mission, 1)
		]),

		(10.0, 0.0, 0.0, # Battle won/lost messages!
		[],

		[
			(eq, "$g_battle_won", 1),
			#(play_sound, "snd_won_battle"), #Moved to victorious main menu
			(display_message, "str_msg_battle_won")
		]),

		(1.0, 4.0, ti_once,
		[
			(main_hero_fallen),
			(assign, "$g_battle_result", -1)
		],

		[
			(call_script, "script_custom_battle_end"),
			(finish_mission)
		])
	] + crouching_triggers ),

	("quick_battle_siege", mtf_battle_mode, -1,
	"You lead your men to battle.",
	[(0, mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
	(1, mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
	(2, mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
	(3, mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
	(4, mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
	(5, mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
	(6, mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
	(7, mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
	(8, mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
	(9, mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
	(10, mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
	(11, mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
	(12, mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
	(13, mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
	(14, mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
	(15, mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
	(16, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(17, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(18, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(19, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(20, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(21, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(22, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(23, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(24, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(25, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(26, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(27, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(28, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(29, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(30, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(31, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(32, mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
	(33, mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
	(34, mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
	(35, mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
	(36, mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
	(37, mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
	(38, mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
	(39, mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
	(40, mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
	(41, mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
	(42, mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
	(43, mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
	(44, mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
	(45, mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
	(46, mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
	(47, mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, [])],
	[
		
	
    (7, 0, ti_once,
    [],
    [
	(call_script, "script_assign_traits"),
    ]),


    (0, 0, 1, 
    [
    ],
    [
	(call_script, "script_stumbling"),
    ]),
		
		







#Decapitations next level right here.
(ti_on_agent_hit, 0, 0, [(eq, "$dynamic_decap", 1),],
[
   (store_trigger_param_1, ":victim_agent"),
   (store_trigger_param_2, ":attacker_agent"),
   (store_trigger_param_3, ":damage"),
   (assign, ":attacker_item", reg0), ### Transfer the item ID to make sure it dosn't change while the script is running
   (copy_position, pos5, pos0), ### Transfer the position of the hit to make sure it dosn't change while the script is running
   (neq, ":victim_agent", -1),
   (try_begin), #-- Decapitations --#
      (agent_is_human, ":victim_agent"),
	  (ge, ":attacker_item", 0),
	  (assign, ":run", 0), ### Reset the run test variable
#	  (try_begin), ### Special weapons that can decap, ovevrrides the below conditions
#		  (this_or_next|eq, ":attacker_item", "itm_supercrossbow"),
#		  (eq, ":attacker_item", "itm_supersledge"),
#		  (assign, ":run", 1),
	  (try_begin),
		  #(neq, ":attacker_item", "itm_mace_1"), ### List of weapons that cannot decapitate
		  #(neq, ":attacker_item", "itm_mace_2"), ### This would be easier to do with a preperty check (for damage type), but I don't know if that is possible or not
		  #(neq, ":attacker_item", "itm_mace_3"),
		  #(neq, ":attacker_item", "itm_staff"), #Keeping active incase of script errors
		  (agent_get_action_dir, ":attack_dir", ":attacker_agent"), ### Makes sure the attack is either a left or right swing
		  (this_or_next|eq, ":attack_dir", 1), ### Right swing
		  (eq, ":attack_dir", 2), ### Left swing
		  (assign, ":run", 1),
	  (try_end),
	  (eq, ":run", 1), ### One of the checks were true, continue to run script
	  #(assign, reg1, ":damage"), #Debug messages
	  #(display_message, "@Damage: {reg1}"),
	  
	  (assign, ":run", 0), ### Reset the run test variable
	  (try_begin),
		(ge, ":damage", "$decap_damage"), ### 30 Minimum damage required to decapitate an agent
		(assign, ":run", 1),
		
#	  (else_try),  ### If debugging mode is on, this bypasses the damage requirement check
#		  (eq,"$g_decapitations_debugging", 1),
#		  (assign, ":run", 1),
#		  (display_message, "@Decap minimum DMG req bypassed"),
	  (try_end),
	  (eq, ":run", 1),
	  
	  (store_agent_hit_points, ":hp", ":victim_agent", 1),
	  (val_add, ":hp", 10), ### 10 Victim must have the negative of this hp or below after hit for the script to move on (never put this value below 0 since the agent has to be absolutley positvely dead)!
	  (ge, ":damage", ":hp"),
	  
	  
	  ### Compare the hit position to the agent's position
      (agent_get_position, pos4, ":victim_agent"),
      (get_distance_between_positions, ":distance", pos4, pos5), 
	  (agent_get_horse, ":is_mounted", ":victim_agent"),
	  (try_begin), ### If the agent is on horseback, these values are used (note that these values will not be exactly correct if the horse is very large or very small)
		(ge, ":is_mounted", 0), ### Will be -1 if no horse is to be found, so anything above means that the agent is mounted
		(assign, ":min_distance", 240), ### Minimum distance from the agent's horse's hooves from which the hit is valid (240 is an approximate value)
		(assign, ":max_distance", 260), ### Maximum distance from the agent's horse's hooves to which the hit is valid (260 is an approximate value)
	  (else_try),  ### If the agent is on foot, these values are used
	    (assign, ":min_distance", 160), ### Minimum distance from the agent's feet from which the hit is valid (160 = slightly below the neck)
	    (assign, ":max_distance", 176), ### Maximum distance from the agent's feet to which the hit is valid (176 = near the nose)
	  (try_end),
      (is_between, ":distance", ":min_distance", ":max_distance"), ### Check to see if the hit is within the allowed area
	  
	  
	  (assign, ":run", 0), ### Default variable value before damage test
	  (try_begin),
		  (store_div, ":chance", ":damage", "$decap_damage_divider"), ### Chance of decap is damage / 4 right now. Lower this value for higher chances of decapitation (or press M+Right Ctrl for debug more if you just want to test easy decaps in-game).
		  
		  #(assign, reg1, ":chance"), #Debug messages
		  #(display_message, "@Decap chance is: {reg1}"),
		  (store_random_in_range, ":diceroll", 0, "$decap_randomizer"), ### Randomizer, 0-100
		  
		  #(assign, reg1, ":diceroll"), #Debug messages
		  #(display_message, "@Diceroll: {reg1}"),
		  (le, ":diceroll", ":chance"), ### ":diceroll" must be less than or equal to ":chance", if it is, decapitation occurs!
		  
		  (assign, ":run", 1), ### SUCCESS!
		  
#     (else_try),  ### If debugging mode is on, bypass chance calculation
#		  (eq,"$g_decapitations_debugging", 1),
#		  (assign, ":run", 1),
#		  (display_message, "@Decap chance calc bypassed"),
	  (try_end),  
	  (eq, ":run", 1), ### Time for the fun stuff!

	  ### Gender test for spawning the right head type
	  (assign, ":head_type", "itm_cut_off_head_male"),
	  (agent_get_troop_id, ":victim_troop", ":victim_agent"),
	  (try_begin),
	    (ge, ":victim_troop", 0),
		(troop_get_type,":victim_gender",":victim_troop"),
		(eq, ":victim_gender", 1),
		(assign, ":head_type", "itm_cut_off_head_female"),
	  (try_end),
	  
	  ### Randomize the spawned head's and/or helmet's position and orientation
	  (store_random_in_range, ":z_rotation", 0, 360),
	  (store_random_in_range, ":y_rotation", -60, 60),
	  (store_random_in_range, ":x_pos", -90, 90),
	  (store_random_in_range, ":y_pos", -90, 90),
	  (position_rotate_z, pos4,":z_rotation"),
	  (position_rotate_y, pos4,":y_rotation"),
	  (position_move_x, pos4, ":x_pos"),
	  (position_move_y, pos4, ":y_pos"),
	  (position_set_z_to_ground_level, pos4),
	  (position_move_z, pos4, 5),
	  (set_spawn_position, pos4),
	  (assign, ":prunetime", 360), ### This is the time in seconds before the spawned head or helmet gets pruned (removed). Recommended to keep it above 0 to make sure it gets removed eventually or when the scene resets, to prevent performance issues.
	  
	  #(spawn_item, ":head_type", 0, ":prunetime"), ### This is the old way of spawning the head on the ground with the helmet, disabled because of the new dynamic heads. You can comment away (disable) the dynamic heads spawning further down and uncomment this line for a less performance-needing approach (with no physics involved).
	  
	  ### Does the agent have a helmet or hat equipped?
      (agent_get_item_slot, ":item", ":victim_agent", 4), #head slot
      (try_begin),
         (ge, ":item", 1), ### Does it?
         (agent_unequip_item, ":victim_agent", ":item"), ### Yes it does. Unequip it to allow replacement by the invisible helmet further down
		 (try_begin),
			 ### Don't spawn items with "itp_attatch_armature" flag: rigging causes floating bugs
			 ### This would be much better to do with an item flag check, but I haven't found any way to do that
			 #(neq, ":item", "itm_with_itp_attatch_armature"),
			 #(neg|is_between,":item","start_of_itm_range_with_itp_attatch_armature","end_of_itm_range_with_itp_attatch_armature"),
			#(set_spawn_position, pos4),
			(spawn_item, ":item", 0, ":prunetime"), ### Spawns the agent's currently equipped headgear on the dropped head's position
		 (try_end),
      (try_end),
	  
	  (agent_equip_item, ":victim_agent", "itm_invisible_head"), ### Put an invisible helmet on the agent's head to "remove" it
	  
	  
	  (agent_get_position, pos4, ":victim_agent"), ### Refreshes the agent's position
	  (position_move_z, pos4, ":min_distance"), ### Move to the where the neck used to be attached
	  
	  
	  ### Blood effects! The last variable is the strength. Lower or increase it for more/less blood (or tweak the particle effects themselves in "module_particle_systems.py").
      (particle_system_burst, "psys_blood_decapitation", pos4, 40), 
	  (particle_system_burst, "psys_game_blood", pos4, 10),
	  (particle_system_burst, "psys_game_blood_2", pos4, 10),
	  
	  (play_sound_at_position, "snd_decapitation_battle", pos4), ### Play some nasty sounds
	  
	  
	  ### Dynamic head spawning! See the bottom of "module_scene_props.py" for physics-related options and more.
	  (position_move_z, pos4, 20),
	  (set_spawn_position, pos4),
	  (assign, ":head_type", "spr_head_dynamic_male"),
	  (try_begin), ### Gender check (for determening the type of head)
		(eq, ":victim_gender", 1),
		(assign, ":head_type", "spr_head_dynamic_female"),
	  (try_end),
	  (spawn_scene_prop, ":head_type"),
	  
		#Addition check if we should allow the message to appears
			(eq, "$allow_decap_mess", 1), #Possible script error

	  ### This below is for the text that shows up when somebody is decapitated.
	  
	  ### Who decapitated who?
		(agent_get_troop_id, ":attacker_troop", ":attacker_agent"),
		(str_store_troop_name, s0, ":attacker_troop"),

		(agent_get_troop_id, ":victim_troop", ":victim_agent"),
		(str_store_troop_name, s1, ":victim_troop"),

	  
	  ### Colour check (friend or foe?)
	  (get_player_agent_no, ":my_agent"),
	  (agent_get_team, ":my_team", ":my_agent"),
	  (agent_get_team, ":victim_team", ":victim_agent"),
	  (try_begin), ### Display it!
		  (neq, ":my_team", ":victim_team"),
		  (display_message, "@>>> {s0} decapitated {s1}!", 0xFF33DD11), ## Green
	  (else_try),
		  (display_message, "@>>> {s0} decapitated {s1}!", 0xFFFF4422), ## Red
	  (try_end),
   (try_end), #-- Decapitations END --#
   
   ]),



	#AI Sound horn!
			(0.0, 0.0, 2.0,
		[
			##(store_random_in_range, ":horn_chance", 0, 22),
			#(eq, ":horn_chance", 0),
		],
		[
			(call_script, "script_formation_ai_sound_horn"),
		]),
	#AI Sound horn end!










		
						#####MUSICBOX SIEGE VARIANT
	(ti_after_mission_start, 0, ti_once, [ #680 #(ti_after_mission_start, 0, 680, [ #680
 #Obtained from Mod Options, affects mission templates, range: ALL SP Hostile music, co-op variant is additional_music_coop.
	],
		
  [
    #(play_track, "track_silence", 1), #Stop current module track
	   (music_set_situation, mtf_sit_fight), #Field
   #(music_set_situation, mtf_sit_siege), #Siege probably don't use
	(assign, "$music_timer", 0), #Patch
  #Randomize chance is 1 in a 5 (20%)
  
  #Field related extend to sieges
  (store_random_in_range, ":randomizer", 0, 2), #50% Chance of randomization
  (try_begin),
  (eq, ":randomizer", 0),
  (store_random_in_range, ":euro_randomizernext", 1, 11),
  (store_random_in_range, ":medi_randomizer", 1, 6),
  (store_random_in_range, ":arab_randomizer", 1, 8),
  (assign, "$track_count_field_siege", ":euro_randomizernext"),
  (assign, "$track_count_field_medi_siege", ":medi_randomizer"),
  (assign, "$track_count_field_arabs_siege", ":arab_randomizer"),
  (try_end),
  #Field related extend to sieges
  ]),
	
	(0, 0, 3, [ #680 #(ti_after_mission_start, 0, 680, [ #680
	 #Obtained from Mod Options, affects mission templates, range: ALL SP Hostile music, co-op variant is additional_music_coop.
	],
		
  [
		  #(display_message, "@Executing music code"),
		  (store_mission_timer_b, ":time_msec"),
		  #(assign, reg10, ":time_msec"),
          #(str_clear, s10),
          #(str_store_string, s10, "@Mission timer B for music: {reg10}"),
		  #(display_message, s10),
			#if next action time is lower than current time, play the sound
			(ge, ":time_msec", "$music_timer"),
			(reset_mission_timer_b), #Resetting mission timer, too.
			(assign, "$music_timer", 0),# Resetting value when track ends.
		
  #Euro only
     (try_begin),
      (ge, "$track_count_field_siege", 11),
      (assign, "$track_count_field_siege", 1),
    (else_try),
      (val_add, "$track_count_field_siege", 1),
	  (ge, "$track_count_field_siege", 11),
	  (assign, "$track_count_field_siege", 1),
    (try_end),
  #Euro only
  
  #Mediterrain only
  
       (try_begin),
      (ge, "$track_count_field_medi_siege", 6),
      (assign, "$track_count_field_medi_siege", 1),
    (else_try),
      (val_add, "$track_count_field_medi_siege", 1),
	  (ge, "$track_count_field_medi_siege", 6),
	  (assign, "$track_count_field_medi_siege", 1),
    (try_end),
  #Mediterrain only
  
  
  #Arabs only

       (try_begin),
      (ge, "$track_count_field_arabs_siege", 8),
      (assign, "$track_count_field_arabs_siege", 1),
    (else_try),
      (val_add, "$track_count_field_arabs_siege", 1),
	  (ge, "$track_count_field_arabs_siege", 8),
	  (assign, "$track_count_field_arabs_siege", 1),
    (try_end),
	#Arabs only
  
  #Pause between music length in seconds
  #(val_add, "$music_timer", 2),# 5 seconds added
  #Pause between music length in seconds
  
	(party_get_current_terrain, ":current_terrain_main_party", "p_main_party"), #Co-Op variant of this trigger should use scenes in_between rather than terrain because player can't obtain terrain in co-op sessions.
	(try_begin),
	(this_or_next|eq, ":current_terrain_main_party", 1), #rt_mountain
	(this_or_next|eq, ":current_terrain_main_party", 2), #rt_steppe
	(eq, ":current_terrain_main_party", 10), #rt_steppe_forest
	#Begin mediterrain music 5 tracks total
	(try_begin),
	(eq, "$track_count_field_medi_siege", 1), #
	(play_track, "track_medib3", 2),
	(val_add, "$music_timer", 209),# 1 second added
	(else_try),
	
	(eq, "$track_count_field_medi_siege", 2), #
	(play_track, "track_medib4", 2),
	(val_add, "$music_timer", 237),#
	(else_try),
	
	(eq, "$track_count_field_medi_siege", 3), #
	(play_track, "track_medib5", 2),
	(val_add, "$music_timer", 229),#
	(else_try),

	(eq, "$track_count_field_medi_siege", 4), #
	(play_track, "track_medis1", 2),
	(val_add, "$music_timer", 195),#
	(else_try),
	(eq, "$track_count_field_medi_siege", 5), #
	(play_track, "track_medis2", 2),
	(val_add, "$music_timer", 66),#
	(try_end),
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 3), #rt_plain
	(this_or_next|eq, ":current_terrain_main_party", 11), #rt_forest
	(eq, ":current_terrain_main_party", 9), #rt_mountain_forest
	#Begin Euro Music
	(try_begin),
	(eq, "$track_count_field_siege", 1), #
	(play_track, "track_euros1", 2),
	(val_add, "$music_timer", 162),#
	(else_try),
	(eq, "$track_count_field_siege", 2), #
	(play_track, "track_euros2", 2),
	(val_add, "$music_timer", 221),#
	(else_try),
	
	(eq, "$track_count_field_siege", 3), #
	(play_track, "track_euros3", 2),
	(val_add, "$music_timer", 190),#
	(else_try),
	
	(eq, "$track_count_field_siege", 4), #
	(play_track, "track_euros4", 2),
	(val_add, "$music_timer", 317),#
	(else_try),
	
	(eq, "$track_count_field_siege", 5), #
	(play_track, "track_euros5", 2),
	(val_add, "$music_timer", 59),#
		(else_try),
	
	(eq, "$track_count_field_siege", 6), #
	(play_track, "track_euros6", 2),
	(val_add, "$music_timer", 59),#
		(else_try),
	
	(eq, "$track_count_field_siege", 7), #
	(play_track, "track_euros7", 2),
	(val_add, "$music_timer", 85),#
		(else_try),
	
	(eq, "$track_count_field_siege", 8), #
	(play_track, "track_euros8", 2),
	(val_add, "$music_timer", 82),#
		(else_try),
	
	(eq, "$track_count_field_siege", 9), #
	(play_track, "track_euros9", 2),
	(val_add, "$music_timer", 199),#
		(else_try),
	
	(eq, "$track_count_field_siege", 10), #
	(play_track, "track_euros10", 2),
	(val_add, "$music_timer", 281),#
	(try_end),
	
	
	
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 4), #rt_snow
	(this_or_next|eq, ":current_terrain_main_party", 12), #rt_snow_forest
	(eq, ":current_terrain_main_party", 7), #rt_bridge
	#Begin Euro Music
	(try_begin),
	(eq, "$track_count_field_siege", 1), #
	(play_track, "track_euros1", 2),
	(val_add, "$music_timer", 162),#
	(else_try),
	(eq, "$track_count_field_siege", 2), #
	(play_track, "track_euros2", 2),
	(val_add, "$music_timer", 221),#
	(else_try),
	
	(eq, "$track_count_field_siege", 3), #
	(play_track, "track_euros3", 2),
	(val_add, "$music_timer", 190),#
	(else_try),
	
	(eq, "$track_count_field_siege", 4), #
	(play_track, "track_euros4", 2),
	(val_add, "$music_timer", 317),#
	(else_try),
	
	(eq, "$track_count_field_siege", 5), #
	(play_track, "track_euros5", 2),
	(val_add, "$music_timer", 59),#
		(else_try),
	
	(eq, "$track_count_field_siege", 6), #
	(play_track, "track_euros6", 2),
	(val_add, "$music_timer", 59),#
		(else_try),
	
	(eq, "$track_count_field_siege", 7), #
	(play_track, "track_euros7", 2),
	(val_add, "$music_timer", 85),#
		(else_try),
	
	(eq, "$track_count_field_siege", 8), #
	(play_track, "track_euros8", 2),
	(val_add, "$music_timer", 82),#
		(else_try),
	
	(eq, "$track_count_field_siege", 9), #
	(play_track, "track_euros9", 2),
	(val_add, "$music_timer", 199),#
		(else_try),
	
	(eq, "$track_count_field_siege", 10), #
	(play_track, "track_euros10", 2),
	(val_add, "$music_timer", 281),#
	(try_end),
	
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 5), #rt_desert
	(eq, ":current_terrain_main_party", 13), #rt_desert_forest
	#Begin arab music
	(try_begin),
	(eq, "$track_count_field_arabs_siege", 1), #
	(play_track, "track_arabs1",  2),
	(val_add, "$music_timer", 198),#
	(else_try),
	(eq, "$track_count_field_arabs_siege", 2), #
	(play_track, "track_arabs2", 2),
	(val_add, "$music_timer", 112),#
	
	(else_try),
	(eq, "$track_count_field_arabs_siege", 3), #
	(play_track, "track_medis1", 2),
	(val_add, "$music_timer", 195),#
	(else_try),
	
	(eq, "$track_count_field_arabs_siege", 4), #
	(play_track, "track_arabs4", 2),
	(val_add, "$music_timer", 79),#
		(else_try),
	
	(eq, "$track_count_field_arabs_siege", 5), #
	(play_track, "track_arabs5", 2),
	(val_add, "$music_timer", 394),#
	
			(else_try),
	(eq, "$track_count_field_arabs_siege", 6), #
	(play_track, "track_arabs3", 2),
	(val_add, "$music_timer", 80),#
			(else_try),
	(eq, "$track_count_field_arabs_siege", 7), #
	(play_track, "track_medis2", 2),
	(val_add, "$music_timer", 66),#
	(try_end),
	(try_end),
	
  ]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(team_set_relation, 0, 2, 1),
			(team_set_relation, 1, 3, 1),
			(call_script, "script_change_banners_and_chest")
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(call_script, "script_troop_agent_set_banner", "tableau_game_troop_label_banner", ":trigger_param_1", ":troop_id_trigger_param_1")
		]),

		(0.0, 0.0, ti_once,
		[
			(assign, "$defender_team", 0),
			(assign, "$attacker_team", 1),
			(assign, "$defender_team_2", 2),
			(assign, "$attacker_team_2", 3)
		],

		[]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(scene_set_day_time, 15)
		]),

		(-21.0, 0.0, 0.0,
		[],

		[
			(try_begin),
				(neq, "$g_battle_result", 0),
				(call_script, "script_custom_battle_end"),
				(finish_mission),
			(else_try),
				(question_box, "str_give_up_fight"),
			(try_end)
		]),

		(-8.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(eq, ":trigger_param_1", 0),
			(assign, "$g_battle_result", -1),
			(call_script, "script_custom_battle_end"),
			(finish_mission)
		]),

		(-22.0, 0.0, 0.0,
		[
			(display_message, "str_cant_use_inventory_now")
		],

		[]),

		(0.0, 0.0, ti_once,
		[],

		[
			(assign, "$g_battle_result", 0),
			#			(try_begin),
			#(eq, "$additional_music", 0),
			#(call_script, "script_music_set_situation_with_culture", 262144)
			#(try_end),
		]),

		(30.0, 0.0, 0.0,
		[],

		[]),

		(1.0, 60.0, ti_once,
		[
			(store_mission_timer_a, reg1),
			(ge, reg1, 10),
			(all_enemies_defeated, 2),
			(set_mission_result, 1),
			(display_message, "str_msg_battle_won"),
			#(play_sound, "snd_won_battle"), #Moved to victorious main menu
			(assign, "$g_battle_won", 1),
			(assign, "$g_battle_result", 1)
		],

		[
			(call_script, "script_custom_battle_end"),
			(finish_mission, 1)
		]),

		(10.0, 0.0, 0.0, # Battle won/lost messages!
		[],

		[
			(eq, "$g_battle_won", 1),
			#(play_sound, "snd_won_battle"), #Moved to victorious main menu
			(display_message, "str_msg_battle_won")
		]),

		(1.0, 4.0, ti_once,
		[
			(main_hero_fallen),
			(assign, "$g_battle_result", -1)
		],

		[
			(call_script, "script_custom_battle_end"),
			(finish_mission)
		]),

		(2.0, 0.0, ti_once,
		[],

		[
			(set_show_messages, 0),
			(try_for_range, ":number", 0, 9),
				(team_give_order, "$attacker_team", ":number", 12),
			(try_end),
			(try_for_range, ":number", 0, 9),
				(team_give_order, "$attacker_team_2", ":number", 12),
			(try_end),
			(set_show_messages, 1)
		]),

		(120.0, 0.0, 0.0,
		[],

		[
			(try_for_agents, ":var_1"),
				(agent_is_alive, ":var_1"),
				(agent_is_human, ":var_1"),
				(agent_get_team, ":team_var_1", ":var_1"),
				(this_or_next|eq, ":team_var_1", "$defender_team"),
				(eq, ":team_var_1", "$defender_team_2"),
				(agent_refill_ammo, ":var_1"),
			(try_end)
		]),

		(0.0, 0.0, ti_once,
		[
			(call_script, "script_siege_init_ai_and_belfry")
		],

		[]),

		(0.0, 0.0, ti_once,
		[
			(call_script, "script_cf_siege_move_belfry")
		],

		[]),

		(0.0, 2.0, ti_once,
		[
			(call_script, "script_cf_siege_rotate_belfry_platform")
		],

		[
			(assign, "$belfry_positioned", 3)
		]),

		(0.0, 0.0, ti_once,
		[
			(call_script, "script_cf_siege_assign_men_to_belfry")
		],

		[]),

		(0.0, 0.0, ti_once,
		[
			(set_show_messages, 0),
			(entry_point_get_position, 10, 10),
			(try_for_range, ":number", 0, 9),
				(neq, ":number", 1),
				(team_give_order, "$defender_team", ":number", 0),
				(team_give_order, "$defender_team", ":number", 7),
				(team_give_order, "$defender_team", ":number", 7),
				(team_give_order, "$defender_team", ":number", 7),
				(team_give_order, "$defender_team_2", ":number", 0),
				(team_give_order, "$defender_team_2", ":number", 7),
				(team_give_order, "$defender_team_2", ":number", 7),
				(team_give_order, "$defender_team_2", ":number", 7),
			(try_end),
			(team_give_order, "$defender_team", 1, 11),
			(team_set_order_position, "$defender_team", 9, 10),
			(team_give_order, "$defender_team_2", 1, 11),
			(team_set_order_position, "$defender_team_2", 9, 10),
			(team_give_order, "$attacker_team", 9, 2),
			(team_give_order, "$attacker_team_2", 9, 2),
			(set_show_messages, 1)
		],

		[])
	] + crouching_triggers ),

	("multiplayer_dm", mtf_battle_mode, -1,
	"You lead your men to battle.",
	[(0, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(1, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(2, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(3, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(4, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(5, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(6, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(7, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(8, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(9, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(10, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(11, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(12, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(13, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(14, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(15, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(16, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(17, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(18, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(19, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(20, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(21, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(22, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(23, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(24, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(25, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(26, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(27, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(28, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(29, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(30, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(31, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(32, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(33, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(34, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(35, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(36, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(37, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(38, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(39, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(40, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(41, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(42, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(43, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(44, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(45, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(46, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(47, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(48, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(49, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(50, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(51, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(52, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(53, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(54, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(55, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(56, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(57, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(58, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(59, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(60, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(61, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(62, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(63, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, [])],
	[
		
	
	

		
		
		
	
		(1.0, 5.0, 0.0,
		[
			(multiplayer_is_server),
			(eq, "$g_multiplayer_poll_running", 1),
			(eq, "$g_multiplayer_poll_ended", 0),
			(store_mission_timer_a, ":mission_timer_a"),
			(store_add, ":value", "$g_multiplayer_poll_no_count", "$g_multiplayer_poll_yes_count"),
			(this_or_next|eq, ":value", "$g_multiplayer_poll_num_sent"),
			(gt, ":mission_timer_a", "$g_multiplayer_poll_end_time"),
			(call_script, "script_cf_multiplayer_evaluate_poll")
		],

		[
			(assign, "$g_multiplayer_poll_running", 0),
			(try_begin),
				(this_or_next|eq, "$g_multiplayer_poll_to_show", 0),
				(eq, "$g_multiplayer_poll_to_show", 3),
				(call_script, "script_game_multiplayer_get_game_type_mission_template", "$g_multiplayer_game_type"),
				(start_multiplayer_mission, reg0, "$g_multiplayer_poll_value_to_show", 1),
				(call_script, "script_game_set_multiplayer_mission_end"),
			(try_end)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_multiplayer_server_on_agent_spawn_common", ":trigger_param_1")
		]),

		(-15.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_multiplayer_server_player_joined_common", ":trigger_param_1")
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(assign, "$g_multiplayer_game_type", 0),
			(call_script, "script_multiplayer_server_before_mission_start_common"),
			(multiplayer_make_everyone_enemy),
			(call_script, "script_multiplayer_init_mission_variables"),
			(call_script, "script_multiplayer_remove_destroy_mod_targets"),
			(call_script, "script_multiplayer_remove_headquarters_flags")
		]),

		(-20.0, 0.0, 0.0,
		[],

		[
			(set_spawn_effector_scene_prop_kind, 0, -1),
			(set_spawn_effector_scene_prop_kind, 1, -1),
			(call_script, "script_initialize_all_scene_prop_slots"),
			(call_script, "script_multiplayer_move_moveable_objects_initial_positions"),
			(assign, "$g_multiplayer_ready_for_spawning_agent", 1)
		]),

		(-16.0, 0.0, 0.0,
		[],

		[
			(try_begin),
				(multiplayer_get_my_player, ":multiplayer_my_player"),
				(is_between, ":multiplayer_my_player", 0, 1000),
				(player_get_team_no, ":team_no_multiplayer_my_player", ":multiplayer_my_player"),
				(lt, ":team_no_multiplayer_my_player", 2),
				(player_get_kill_count, ":kill_count_multiplayer_my_player", ":multiplayer_my_player"),
				(player_get_death_count, ":death_count_multiplayer_my_player", ":multiplayer_my_player"),
				(store_mul, ":value", ":kill_count_multiplayer_my_player", 1000),
				(val_sub, ":value", ":death_count_multiplayer_my_player"),
				(assign, ":value_2", 1),
				(get_max_players, ":max_players"),
				(assign, ":value_3", ":max_players"),
				(try_for_range, ":localvariable", 0, ":value_3"),
					(player_is_active, ":localvariable"),
					(player_get_team_no, ":team_no_localvariable", ":localvariable"),
					(this_or_next|eq, ":team_no_localvariable", 0),
					(eq, ":team_no_localvariable", 1),
					(player_get_kill_count, ":kill_count_multiplayer_my_player", ":localvariable"),
					(player_get_death_count, ":death_count_multiplayer_my_player", ":localvariable"),
					(store_mul, ":value_4", ":kill_count_multiplayer_my_player", 1000),
					(val_sub, ":value_4", ":death_count_multiplayer_my_player"),
					(gt, ":value_4", ":value"),
					(assign, ":value_2", 0),
					(assign, ":value_3", 0),
				(try_end),
				(eq, ":value_2", 1),
				(unlock_achievement, 68),
			(try_end),
			(call_script, "script_multiplayer_event_mission_end"),
			(assign, "$g_multiplayer_stats_chart_opened_manually", 0),
			(start_presentation, "prsnt_multiplayer_stats_chart_deathmatch")
		]),

		(-26.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(store_trigger_param_2, ":trigger_param_2"),
			(call_script, "script_multiplayer_server_on_agent_killed_or_wounded_common", ":trigger_param_1", ":trigger_param_2")
		]),

		(1.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(get_max_players, ":max_players"),
			(try_for_range, ":localvariable", 0, ":max_players"),
				(player_is_active, ":localvariable"),
				(neg|player_is_busy_with_menus, ":localvariable"),
				(player_get_team_no, ":team_no_localvariable", ":localvariable"),
				(lt, ":team_no_localvariable", 2),
				(player_get_troop_id, ":troop_id_localvariable", ":localvariable"),
				(ge, ":troop_id_localvariable", 0),
				(player_get_agent_id, ":agent_id_localvariable", ":localvariable"),
				(assign, ":value", 0),
				(try_begin),
					(player_get_slot, ":localvariable_first_spawn", ":localvariable", slot_player_first_spawn),
					(eq, ":localvariable_first_spawn", 1),
					(assign, ":value", 1),
					(player_set_slot, ":localvariable", slot_player_first_spawn, 0),
				(else_try),
					(try_begin),
						(lt, ":agent_id_localvariable", 0),
						(assign, ":value", 1),
					(else_try),
						(neg|agent_is_alive, ":agent_id_localvariable"),
						(agent_get_time_elapsed_since_removed, ":time_elapsed_since_removed_agent_id_localvariable", ":agent_id_localvariable"),
						(gt, ":time_elapsed_since_removed_agent_id_localvariable", "$g_multiplayer_respawn_period"),
						(assign, ":value", 1),
					(try_end),
				(try_end),
				(eq, ":value", 1),
				(call_script, "script_multiplayer_buy_agent_equipment", ":localvariable"),
				(troop_get_inventory_slot, ":inventory_slot_troop_id_localvariable_8", ":troop_id_localvariable", 8),
				(try_begin),
					(ge, ":inventory_slot_troop_id_localvariable_8", 0),
					(assign, ":value_2", 1),
				(else_try),
					(assign, ":value_2", 0),
				(try_end),
				(call_script, "script_multiplayer_find_spawn_point", ":team_no_localvariable", 0, ":value_2"),
				(player_spawn_new_agent, ":localvariable", reg0),
			(try_end)
		]),

		(1.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(store_mission_timer_a, ":mission_timer_a"),
			(ge, ":mission_timer_a", 2),
			(assign, ":var_2", 0),
			(assign, ":var_3", 0),
			(try_for_agents, ":var_4"),
				(agent_is_non_player, ":var_4"),
				(agent_is_human, ":var_4"),
				(assign, ":value", 0),
				(try_begin),
					(agent_is_alive, ":var_4"),
					(assign, ":value", 1),
				(else_try),
					(agent_get_time_elapsed_since_removed, ":time_elapsed_since_removed_var_4", ":var_4"),
					(le, ":time_elapsed_since_removed_var_4", "$g_multiplayer_respawn_period"),
					(assign, ":value", 1),
				(try_end),
				(eq, ":value", 1),
				(agent_get_team, ":team_var_4", ":var_4"),
				(try_begin),
					(eq, ":team_var_4", 0),
					(val_add, ":var_2", 1),
				(else_try),
					(eq, ":team_var_4", 1),
					(val_add, ":var_3", 1),
				(try_end),
			(try_end),
			(store_sub, "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_team_1", ":var_2"),
			(store_sub, "$g_multiplayer_num_bots_required_team_2", "$g_multiplayer_num_bots_team_2", ":var_3"),
			(val_max, "$g_multiplayer_num_bots_required_team_1", 0),
			(val_max, "$g_multiplayer_num_bots_required_team_2", 0)
		]),

		(0.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(eq, "$g_multiplayer_ready_for_spawning_agent", 1),
			(store_add, ":value", "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_required_team_2"),
			(try_begin),
				(gt, ":value", 0),
				(store_random_in_range, ":random_in_range_0_value", 0, ":value"),
				(val_sub, ":random_in_range_0_value", "$g_multiplayer_num_bots_required_team_1"),
				(try_begin),
					(lt, ":random_in_range_0_value", 0),
					(assign, ":value_2", 0),
					(val_sub, "$g_multiplayer_num_bots_required_team_1", 1),
				(else_try),
					(assign, ":value_2", 1),
					(val_sub, "$g_multiplayer_num_bots_required_team_2", 1),
				(try_end),
				(team_get_faction, ":faction_value_2", ":value_2"),
				(assign, ":var_5", 0),
				(try_for_range, ":troop", "trp_swadian_crossbowman_multiplayer_ai", "trp_swadian_crossbowman_multiplayer"),
					(store_faction_of_troop, ":faction_of_troop_troop", ":troop"),
					(eq, ":faction_of_troop_troop", ":faction_value_2"),
					(val_add, ":var_5", 1),
				(try_end),
				(store_random_in_range, ":random_in_range_0_var_5", 0, ":var_5"),
				(assign, ":value_3", "trp_swadian_crossbowman_multiplayer"),
				(try_for_range, ":troop", "trp_swadian_crossbowman_multiplayer_ai", ":value_3"),
					(store_faction_of_troop, ":faction_of_troop_troop", ":troop"),
					(eq, ":faction_of_troop_troop", ":faction_value_2"),
					(val_sub, ":random_in_range_0_var_5", 1),
					(lt, ":random_in_range_0_var_5", 0),
					(assign, ":value_3", 0),
					(assign, ":var_10", ":troop"),
				(try_end),
				(troop_get_inventory_slot, ":inventory_slot_var_10_8", ":var_10", 8),
				(try_begin),
					(ge, ":inventory_slot_var_10_8", 0),
					(assign, ":value_4", 1),
				(else_try),
					(assign, ":value_4", 0),
				(try_end),
				(call_script, "script_multiplayer_find_spawn_point", ":value_2", 0, ":value_4"),
				(store_current_scene, ":current_scene"),
				(modify_visitors_at_site, ":current_scene"),
				(add_visitors_to_current_scene, reg0, ":var_10", 1, ":value_2", -1),
				(assign, "$g_multiplayer_ready_for_spawning_agent", 0),
			(try_end)
		]),

		(1.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(assign, ":value", 0),
			(try_begin),
				(store_mission_timer_a, ":mission_timer_a"),
				(store_mul, ":value_2", "$g_multiplayer_game_max_minutes", 60),
				(gt, ":mission_timer_a", ":value_2"),
				(assign, ":value", 1),
			(try_end),
			(try_begin),
				(eq, ":value", 1),
				(call_script, "script_game_multiplayer_get_game_type_mission_template", "$g_multiplayer_game_type"),
				(start_multiplayer_mission, reg0, "$g_multiplayer_selected_map", 0),
				(call_script, "script_game_set_multiplayer_mission_end"),
			(try_end)
		]),

		(-21.0, 0.0, 0.0,
		[],

		[
			(try_begin),
				(eq, "$g_multiplayer_mission_end_screen", 0),
				(assign, "$g_multiplayer_stats_chart_opened_manually", 1),
				(start_presentation, "prsnt_multiplayer_stats_chart_deathmatch"),
			(try_end)
		]),

		(0.0, 0.0, ti_once,
		[],

		[
			(start_presentation, "prsnt_multiplayer_welcome_message")
		]),

		(-23.0, 0.0, 0.0,
		[],

		[
			(neg|is_presentation_active, "prsnt_multiplayer_escape_menu"),
			(neg|is_presentation_active, "prsnt_multiplayer_stats_chart_deathmatch"),
			(eq, "$g_waiting_for_confirmation_to_terminate", 0),
			(start_presentation, "prsnt_multiplayer_escape_menu")
		])
	] + crouching_triggers),

	("multiplayer_tdm", mtf_battle_mode, -1,
	"You lead your men to battle.",
	[(0, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(1, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(2, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(3, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(4, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(5, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(6, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(7, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(8, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(9, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(10, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(11, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(12, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(13, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(14, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(15, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(16, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(17, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(18, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(19, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(20, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(21, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(22, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(23, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(24, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(25, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(26, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(27, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(28, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(29, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(30, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(31, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(32, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(33, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(34, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(35, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(36, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(37, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(38, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(39, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(40, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(41, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(42, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(43, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(44, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(45, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(46, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(47, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(48, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(49, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(50, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(51, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(52, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(53, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(54, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(55, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(56, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(57, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(58, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(59, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(60, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(61, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(62, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(63, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, [])],
	[
		
	

		
		
		
		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(call_script, "script_troop_agent_set_banner", "tableau_game_troop_label_banner", ":trigger_param_1", ":troop_id_trigger_param_1")
		]),

		(1.0, 5.0, 0.0,
		[
			(multiplayer_is_server),
			(eq, "$g_multiplayer_poll_running", 1),
			(eq, "$g_multiplayer_poll_ended", 0),
			(store_mission_timer_a, ":mission_timer_a"),
			(store_add, ":value", "$g_multiplayer_poll_no_count", "$g_multiplayer_poll_yes_count"),
			(this_or_next|eq, ":value", "$g_multiplayer_poll_num_sent"),
			(gt, ":mission_timer_a", "$g_multiplayer_poll_end_time"),
			(call_script, "script_cf_multiplayer_evaluate_poll")
		],

		[
			(assign, "$g_multiplayer_poll_running", 0),
			(try_begin),
				(this_or_next|eq, "$g_multiplayer_poll_to_show", 0),
				(eq, "$g_multiplayer_poll_to_show", 3),
				(call_script, "script_game_multiplayer_get_game_type_mission_template", "$g_multiplayer_game_type"),
				(start_multiplayer_mission, reg0, "$g_multiplayer_poll_value_to_show", 1),
				(call_script, "script_game_set_multiplayer_mission_end"),
			(try_end)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_multiplayer_server_on_agent_spawn_common", ":trigger_param_1")
		]),

		(-15.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_multiplayer_server_player_joined_common", ":trigger_param_1")
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(assign, "$g_multiplayer_game_type", 1),
			(call_script, "script_multiplayer_server_before_mission_start_common"),
			(call_script, "script_multiplayer_init_mission_variables"),
			(call_script, "script_multiplayer_remove_destroy_mod_targets"),
			(call_script, "script_multiplayer_remove_headquarters_flags")
		]),

		(-20.0, 0.0, 0.0,
		[],

		[
			(set_spawn_effector_scene_prop_kind, 0, -1),
			(set_spawn_effector_scene_prop_kind, 1, -1),
			(call_script, "script_initialize_all_scene_prop_slots"),
			(call_script, "script_multiplayer_move_moveable_objects_initial_positions"),
			(assign, "$g_multiplayer_ready_for_spawning_agent", 1)
		]),

		(-16.0, 0.0, 0.0,
		[],

		[
			(try_begin),
				(multiplayer_get_my_player, ":multiplayer_my_player"),
				(is_between, ":multiplayer_my_player", 0, 1000),
				(player_get_team_no, ":team_no_multiplayer_my_player", ":multiplayer_my_player"),
				(lt, ":team_no_multiplayer_my_player", 2),
				(team_get_score, ":score_0", 0),
				(team_get_score, ":score_1", 1),
				(assign, ":value", 0),
				(try_begin),
					(eq, ":team_no_multiplayer_my_player", 0),
					(gt, ":score_0", ":score_1"),
					(assign, ":value", 1),
				(else_try),
					(eq, ":team_no_multiplayer_my_player", 1),
					(gt, ":score_1", ":score_0"),
					(assign, ":value", 1),
				(try_end),
				(eq, ":value", 1),
				(unlock_achievement, 67),
			(try_end),
			(call_script, "script_multiplayer_event_mission_end"),
			(assign, "$g_multiplayer_stats_chart_opened_manually", 0),
			(start_presentation, "prsnt_multiplayer_stats_chart")
		]),

		(-26.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(store_trigger_param_2, ":trigger_param_2"),
			(call_script, "script_multiplayer_server_on_agent_killed_or_wounded_common", ":trigger_param_1", ":trigger_param_2"),
			(try_begin),
				(ge, ":trigger_param_2", 0),
				(agent_is_human, ":trigger_param_1"),
				(agent_is_human, ":trigger_param_2"),
				(agent_get_team, ":team_trigger_param_2", ":trigger_param_2"),
				(le, ":team_trigger_param_2", 1),
				(agent_get_team, ":team_trigger_param_1", ":trigger_param_1"),
				(neq, ":team_trigger_param_2", ":team_trigger_param_1"),
				(team_get_score, ":score_team_trigger_param_2", ":team_trigger_param_2"),
				(val_add, ":score_team_trigger_param_2", 1),
				(team_set_score, ":team_trigger_param_2", ":score_team_trigger_param_2"),
			(try_end)
		]),

		(1.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(get_max_players, ":max_players"),
			(try_for_range, ":localvariable", 0, ":max_players"),
				(player_is_active, ":localvariable"),
				(neg|player_is_busy_with_menus, ":localvariable"),
				(player_get_team_no, ":team_no_localvariable", ":localvariable"),
				(lt, ":team_no_localvariable", 2),
				(player_get_troop_id, ":troop_id_localvariable", ":localvariable"),
				(ge, ":troop_id_localvariable", 0),
				(player_get_agent_id, ":agent_id_localvariable", ":localvariable"),
				(assign, ":value", 0),
				(try_begin),
					(player_get_slot, ":localvariable_first_spawn", ":localvariable", slot_player_first_spawn),
					(eq, ":localvariable_first_spawn", 1),
					(assign, ":value", 1),
					(player_set_slot, ":localvariable", slot_player_first_spawn, 0),
				(else_try),
					(try_begin),
						(lt, ":agent_id_localvariable", 0),
						(assign, ":value", 1),
					(else_try),
						(neg|agent_is_alive, ":agent_id_localvariable"),
						(agent_get_time_elapsed_since_removed, ":time_elapsed_since_removed_agent_id_localvariable", ":agent_id_localvariable"),
						(gt, ":time_elapsed_since_removed_agent_id_localvariable", "$g_multiplayer_respawn_period"),
						(assign, ":value", 1),
					(try_end),
				(try_end),
				(eq, ":value", 1),
				(call_script, "script_multiplayer_buy_agent_equipment", ":localvariable"),
				(troop_get_inventory_slot, ":inventory_slot_troop_id_localvariable_8", ":troop_id_localvariable", 8),
				(try_begin),
					(ge, ":inventory_slot_troop_id_localvariable_8", 0),
					(assign, ":value_2", 1),
				(else_try),
					(assign, ":value_2", 0),
				(try_end),
				(call_script, "script_multiplayer_find_spawn_point", ":team_no_localvariable", 1, ":value_2"),
				(player_spawn_new_agent, ":localvariable", reg0),
			(try_end)
		]),

		(1.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(store_mission_timer_a, ":mission_timer_a"),
			(ge, ":mission_timer_a", 2),
			(assign, ":var_2", 0),
			(assign, ":var_3", 0),
			(try_for_agents, ":var_4"),
				(agent_is_non_player, ":var_4"),
				(agent_is_human, ":var_4"),
				(assign, ":value", 0),
				(try_begin),
					(agent_is_alive, ":var_4"),
					(assign, ":value", 1),
				(else_try),
					(agent_get_time_elapsed_since_removed, ":time_elapsed_since_removed_var_4", ":var_4"),
					(le, ":time_elapsed_since_removed_var_4", "$g_multiplayer_respawn_period"),
					(assign, ":value", 1),
				(try_end),
				(eq, ":value", 1),
				(agent_get_team, ":team_var_4", ":var_4"),
				(try_begin),
					(eq, ":team_var_4", 0),
					(val_add, ":var_2", 1),
				(else_try),
					(eq, ":team_var_4", 1),
					(val_add, ":var_3", 1),
				(try_end),
			(try_end),
			(store_sub, "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_team_1", ":var_2"),
			(store_sub, "$g_multiplayer_num_bots_required_team_2", "$g_multiplayer_num_bots_team_2", ":var_3"),
			(val_max, "$g_multiplayer_num_bots_required_team_1", 0),
			(val_max, "$g_multiplayer_num_bots_required_team_2", 0)
		]),

		(0.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(eq, "$g_multiplayer_ready_for_spawning_agent", 1),
			(store_add, ":value", "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_required_team_2"),
			(try_begin),
				(gt, ":value", 0),
				(try_begin),
					(this_or_next|eq, "$g_multiplayer_game_type", 2),
					(this_or_next|eq, "$g_multiplayer_game_type", 3),
					(eq, "$g_multiplayer_game_type", 6),
					(team_get_score, ":score_0", 0),
					(team_get_score, ":score_1", 1),
					(store_add, ":value_2", ":score_0", ":score_1"),
					(eq, ":value_2", 0),
					(store_mission_timer_a, ":mission_timer_a"),
					(val_sub, ":mission_timer_a", "$g_round_start_time"),
					(lt, ":mission_timer_a", 20),
					(assign, ":value_3", 0),
				(else_try),
					(assign, ":value_3", 1),
				(try_end),
				(eq, ":value_3", 1),
				(store_random_in_range, ":random_in_range_0_value", 0, ":value"),
				(val_sub, ":random_in_range_0_value", "$g_multiplayer_num_bots_required_team_1"),
				(try_begin),
					(lt, ":random_in_range_0_value", 0),
					(assign, ":value_4", 0),
				(else_try),
					(assign, ":value_4", 1),
				(try_end),
				(try_begin),
					(this_or_next|eq, "$g_multiplayer_game_type", 2),
					(eq, "$g_multiplayer_game_type", 3),
					(store_mission_timer_a, ":mission_timer_a"),
					(val_sub, ":mission_timer_a", "$g_round_start_time"),
					(try_begin),
						(le, ":mission_timer_a", 20),
						(assign, ":value_5", 0),
					(else_try),
						(assign, ":value_5", 1),
					(try_end),
				(else_try),
					(assign, ":value_5", 1),
				(try_end),
				(call_script, "script_multiplayer_find_bot_troop_and_group_for_spawn", ":value_4", ":value_5"),
				(assign, ":var_10", reg0),
				(assign, ":var_11", reg1),
				(team_get_faction, ":faction_value_4", ":value_4"),
				(assign, ":var_13", 0),
				(try_for_range, ":troop", "trp_swadian_crossbowman_multiplayer_ai", "trp_swadian_crossbowman_multiplayer"),
					(store_faction_of_troop, ":faction_of_troop_troop", ":troop"),
					(eq, ":faction_of_troop_troop", ":faction_value_4"),
					(val_add, ":var_13", 1),
				(try_end),
				(assign, ":var_16", 0),
				(get_max_players, ":max_players"),
				(try_for_range, ":localvariable", 0, ":max_players"),
					(player_is_active, ":localvariable"),
					(player_get_team_no, ":team_no_localvariable", ":localvariable"),
					(eq, ":value_4", ":team_no_localvariable"),
					(assign, ":value_6", 0),
					(store_add, ":value_7", 35, ":var_13"),
					(try_for_range, ":localvariable_2", 35, ":value_7"),
						(player_slot_ge, ":localvariable", ":localvariable_2", 1),
						(assign, ":value_6", 1),
						(assign, ":value_7", 0),
					(try_end),
					(ge, ":value_6", 1),
					(val_add, ":var_16", 1),
				(try_end),
				(try_begin),
					(this_or_next|ge, ":var_11", 0),
					(eq, ":var_16", 0),
					(troop_get_inventory_slot, ":inventory_slot_var_10_8", ":var_10", 8),
					(try_begin),
						(ge, ":inventory_slot_var_10_8", 0),
						(assign, ":value_8", 1),
					(else_try),
						(assign, ":value_8", 0),
					(try_end),
					(try_begin),
						(eq, "$g_multiplayer_game_type", 6),
						(store_mission_timer_a, ":mission_timer_a"),
						(val_sub, ":mission_timer_a", "$g_round_start_time"),
						(try_begin),
							(lt, ":mission_timer_a", 20),
							(try_begin),
								(eq, ":value_4", 0),
								(call_script, "script_multiplayer_find_spawn_point", ":value_4", 1, ":value_8"),
							(else_try),
								(assign, reg0, 32),
							(try_end),
						(else_try),
							(call_script, "script_multiplayer_find_spawn_point", ":value_4", 0, ":value_8"),
						(try_end),
					(else_try),
						(this_or_next|eq, "$g_multiplayer_game_type", 2),
						(eq, "$g_multiplayer_game_type", 3),
						(try_begin),
							(eq, ":value_4", 0),
							(assign, reg0, 0),
						(else_try),
							(assign, reg0, 32),
						(try_end),
					(else_try),
						(call_script, "script_multiplayer_find_spawn_point", ":value_4", 0, ":value_8"),
					(try_end),
					(store_current_scene, ":current_scene"),
					(modify_visitors_at_site, ":current_scene"),
					(add_visitors_to_current_scene, reg0, ":var_10", 1, ":value_4", ":var_11"),
					(assign, "$g_multiplayer_ready_for_spawning_agent", 0),
					(try_begin),
						(eq, ":value_4", 0),
						(val_sub, "$g_multiplayer_num_bots_required_team_1", 1),
					(else_try),
						(eq, ":value_4", 1),
						(val_sub, "$g_multiplayer_num_bots_required_team_2", 1),
					(try_end),
				(try_end),
			(try_end)
		]),

		(3.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(try_for_agents, ":var_1"),
				(agent_is_non_player, ":var_1"),
				(agent_is_human, ":var_1"),
				(agent_is_alive, ":var_1"),
				(agent_get_group, ":group_var_1", ":var_1"),
				(try_begin),
					(neg|player_is_active, ":group_var_1"),
					(call_script, "script_multiplayer_change_leader_of_bot", ":var_1"),
				(else_try),
					(player_get_team_no, ":team_no_group_var_1", ":group_var_1"),
					(agent_get_team, ":team_var_1", ":var_1"),
					(neq, ":team_no_group_var_1", ":team_var_1"),
					(call_script, "script_multiplayer_change_leader_of_bot", ":var_1"),
				(try_end),
			(try_end)
		]),

		(20.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(call_script, "script_check_team_balance")
		]),

		(1.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(assign, ":value", 0),
			(try_begin),
				(this_or_next|eq, "$g_multiplayer_game_type", 2),
				(this_or_next|eq, "$g_multiplayer_game_type", 3),
				(eq, "$g_multiplayer_game_type", 6),
				(try_begin),
					(eq, "$g_round_ended", 1),
					(store_mission_timer_a, ":mission_timer_a"),
					(val_sub, ":mission_timer_a", "$g_round_finish_time"),
					(store_sub, ":value_2", "$g_multiplayer_respawn_period", 1),
					(ge, ":mission_timer_a", ":value_2"),
					(store_mission_timer_a, ":mission_timer_a_2"),
					(try_begin),
						(this_or_next|eq, "$g_multiplayer_game_type", 2),
						(eq, "$g_multiplayer_game_type", 3),
						(assign, ":value_3", 90),
					(else_try),
						(assign, ":value_3", 120),
					(try_end),
					(store_mul, ":value_4", "$g_multiplayer_game_max_minutes", 60),
					(store_sub, ":value_5", ":value_4", ":value_3"),
					(gt, ":mission_timer_a_2", ":value_5"),
					(assign, ":value", 1),
				(try_end),
				(eq, ":value", 1),
			(else_try),
				(neq, "$g_multiplayer_game_type", 2),
				(neq, "$g_multiplayer_game_type", 3),
				(neq, "$g_multiplayer_game_type", 6),
				(neq, "$g_multiplayer_game_type", 5),
				(store_mission_timer_a, ":mission_timer_a_2"),
				(store_mul, ":value_4", "$g_multiplayer_game_max_minutes", 60),
				(gt, ":mission_timer_a_2", ":value_4"),
				(assign, ":value", 1),
			(else_try),
				(team_get_score, ":score_0", 0),
				(team_get_score, ":score_1", 1),
				(try_begin),
					(neq, "$g_multiplayer_game_type", 5),
					(try_begin),
						(this_or_next|ge, ":score_0", "$g_multiplayer_game_max_points"),
						(ge, ":score_1", "$g_multiplayer_game_max_points"),
						(assign, ":value", 1),
					(try_end),
				(else_try),
					(assign, ":value_6", 0),
					(get_max_players, ":max_players"),
					(try_for_range, ":localvariable", 0, ":max_players"),
						(player_is_active, ":localvariable"),
						(player_get_agent_id, ":agent_id_localvariable", ":localvariable"),
						(ge, ":agent_id_localvariable", 0),
						(neg|agent_is_non_player, ":agent_id_localvariable"),
						(assign, ":value_6", 1),
						(assign, ":max_players", 0),
					(try_end),
					(eq, ":value_6", 1),
					(this_or_next|le, ":score_0", 0),
					(le, ":score_1", 0),
					(assign, ":value", 1),
				(try_end),
			(try_end),
			(try_begin),
				(eq, ":value", 1),
				(call_script, "script_game_multiplayer_get_game_type_mission_template", "$g_multiplayer_game_type"),
				(start_multiplayer_mission, reg0, "$g_multiplayer_selected_map", 0),
				(call_script, "script_game_set_multiplayer_mission_end"),
			(try_end)
		]),

		(-21.0, 0.0, 0.0,
		[],

		[
			(try_begin),
				(eq, "$g_multiplayer_mission_end_screen", 0),
				(assign, "$g_multiplayer_stats_chart_opened_manually", 1),
				(start_presentation, "prsnt_multiplayer_stats_chart"),
			(try_end)
		]),

		(0.0, 0.0, ti_once,
		[],

		[
			(start_presentation, "prsnt_multiplayer_welcome_message")
		]),

		(-24.0, 0.0, 0.0,
		[],

		[
			(start_presentation, "prsnt_multiplayer_team_score_display")
		]),

		(-23.0, 0.0, 0.0,
		[],

		[
			(neg|is_presentation_active, "prsnt_multiplayer_escape_menu"),
			(neg|is_presentation_active, "prsnt_multiplayer_stats_chart"),
			(eq, "$g_waiting_for_confirmation_to_terminate", 0),
			(start_presentation, "prsnt_multiplayer_escape_menu")
		])
	] + crouching_triggers),

	("multiplayer_hq", mtf_battle_mode, -1,
	"You lead your men to battle.",
	[(0, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(1, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(2, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(3, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(4, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(5, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(6, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(7, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(8, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(9, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(10, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(11, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(12, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(13, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(14, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(15, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(16, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(17, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(18, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(19, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(20, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(21, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(22, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(23, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(24, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(25, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(26, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(27, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(28, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(29, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(30, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(31, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(32, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(33, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(34, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(35, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(36, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(37, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(38, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(39, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(40, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(41, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(42, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(43, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(44, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(45, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(46, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(47, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(48, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(49, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(50, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(51, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(52, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(53, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(54, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(55, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(56, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(57, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(58, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(59, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(60, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(61, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(62, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(63, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, [])],
	[
		
	
	

		
		
		
		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(call_script, "script_troop_agent_set_banner", "tableau_game_troop_label_banner", ":trigger_param_1", ":troop_id_trigger_param_1")
		]),

		(1.0, 5.0, 0.0,
		[
			(multiplayer_is_server),
			(eq, "$g_multiplayer_poll_running", 1),
			(eq, "$g_multiplayer_poll_ended", 0),
			(store_mission_timer_a, ":mission_timer_a"),
			(store_add, ":value", "$g_multiplayer_poll_no_count", "$g_multiplayer_poll_yes_count"),
			(this_or_next|eq, ":value", "$g_multiplayer_poll_num_sent"),
			(gt, ":mission_timer_a", "$g_multiplayer_poll_end_time"),
			(call_script, "script_cf_multiplayer_evaluate_poll")
		],

		[
			(assign, "$g_multiplayer_poll_running", 0),
			(try_begin),
				(this_or_next|eq, "$g_multiplayer_poll_to_show", 0),
				(eq, "$g_multiplayer_poll_to_show", 3),
				(call_script, "script_game_multiplayer_get_game_type_mission_template", "$g_multiplayer_game_type"),
				(start_multiplayer_mission, reg0, "$g_multiplayer_poll_value_to_show", 1),
				(call_script, "script_game_set_multiplayer_mission_end"),
			(try_end)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_multiplayer_server_on_agent_spawn_common", ":trigger_param_1")
		]),

		(-15.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_multiplayer_server_player_joined_common", ":trigger_param_1")
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(assign, "$g_multiplayer_game_type", 5),
			(call_script, "script_multiplayer_server_before_mission_start_common"),
			(store_mul, ":value", "$g_multiplayer_game_max_points", 10000),
			(assign, "$g_score_team_1", ":value"),
			(assign, "$g_score_team_2", ":value"),
			(try_for_range, ":number", 146, 156),
				(troop_set_slot, "trp_multiplayer_data", ":number", -1),
			(try_end),
			(try_begin),
				(multiplayer_is_server),
				(try_for_range, ":number", 176, 186),
					(troop_set_slot, "trp_multiplayer_data", ":number", -1),
				(try_end),
			(try_end),
			(call_script, "script_multiplayer_init_mission_variables"),
			(call_script, "script_multiplayer_remove_destroy_mod_targets"),
			(try_begin),
				(multiplayer_is_server),
				(team_set_score, 0, "$g_multiplayer_game_max_points"),
				(team_set_score, 1, "$g_multiplayer_game_max_points"),
			(try_end)
		]),

		(-20.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_determine_team_flags", 0),
			(call_script, "script_determine_team_flags", 1),
			(set_spawn_effector_scene_prop_kind, 0, "$team_1_flag_scene_prop"),
			(set_spawn_effector_scene_prop_kind, 1, "$team_2_flag_scene_prop"),
			(try_begin),
				(multiplayer_is_server),
				(assign, "$g_multiplayer_ready_for_spawning_agent", 1),
				(assign, "$g_number_of_flags", 0),
				(entry_point_get_position, 1, 64),
				(entry_point_get_position, 3, 64),
				(set_spawn_position, 3),
				(spawn_scene_prop, "spr_headquarters_pole_code_only", 0),
				(set_spawn_position, 3),
				(spawn_scene_prop, "$team_1_flag_scene_prop", 0),
				(set_spawn_position, 3),
				(spawn_scene_prop, "$team_2_flag_scene_prop", 0),
				(set_spawn_position, 3),
				(spawn_scene_prop, "spr_headquarters_flag_gray_code_only", 0),
				(store_add, ":value", 146, "$g_number_of_flags"),
				(troop_set_slot, "trp_multiplayer_data", ":value", 1),
				(val_add, "$g_number_of_flags", 1),
				(entry_point_get_position, 2, 65),
				(entry_point_get_position, 3, 65),
				(set_spawn_position, 3),
				(spawn_scene_prop, "spr_headquarters_pole_code_only", 0),
				(set_spawn_position, 3),
				(spawn_scene_prop, "$team_1_flag_scene_prop", 0),
				(set_spawn_position, 3),
				(spawn_scene_prop, "$team_2_flag_scene_prop", 0),
				(set_spawn_position, 3),
				(spawn_scene_prop, "spr_headquarters_flag_gray_code_only", 0),
				(store_add, ":value", 146, "$g_number_of_flags"),
				(troop_set_slot, "trp_multiplayer_data", ":value", 2),
				(val_add, "$g_number_of_flags", 1),
				(scene_prop_get_num_instances, ":scene_prop_num_instances_headquarters_flag_red", "spr_headquarters_flag_red"),
				(scene_prop_get_num_instances, ":scene_prop_num_instances_headquarters_flag_blue", "spr_headquarters_flag_blue"),
				(scene_prop_get_num_instances, ":scene_prop_num_instances_headquarters_flag_gray", "spr_headquarters_flag_gray"),
				(store_add, ":value_2", "spr_headquarters_flag_gray", 1),
				(try_for_range, ":sceneprop", "spr_headquarters_flag_red", ":value_2"),
					(try_begin),
						(eq, ":sceneprop", "spr_headquarters_flag_red"),
						(assign, ":value_3", ":scene_prop_num_instances_headquarters_flag_red"),
					(else_try),
						(eq, ":sceneprop", "spr_headquarters_flag_blue"),
						(assign, ":value_3", ":scene_prop_num_instances_headquarters_flag_blue"),
					(else_try),
						(eq, ":sceneprop", "spr_headquarters_flag_gray"),
						(assign, ":value_3", ":scene_prop_num_instances_headquarters_flag_gray"),
					(try_end),
					(gt, ":value_3", 0),
					(try_for_range, ":localvariable", 0, ":value_3"),
						(scene_prop_get_instance, ":scene_prop_instance_sceneprop_localvariable", ":sceneprop", ":localvariable"),
						(prop_instance_get_position, 0, ":scene_prop_instance_sceneprop_localvariable"),
						(set_spawn_position, 0),
						(spawn_scene_prop, "spr_headquarters_pole_code_only", 0),
						(try_for_range, ":sceneprop_2", "spr_headquarters_flag_red", ":value_2"),
							(set_spawn_position, 0),
							(try_begin),
								(eq, ":sceneprop_2", "spr_headquarters_flag_red"),
								(spawn_scene_prop, "$team_1_flag_scene_prop"),
							(else_try),
								(eq, ":sceneprop_2", "spr_headquarters_flag_blue"),
								(spawn_scene_prop, "$team_2_flag_scene_prop"),
							(else_try),
								(eq, ":sceneprop_2", "spr_headquarters_flag_gray"),
								(spawn_scene_prop, "spr_headquarters_flag_gray_code_only"),
							(try_end),
						(try_end),
						(store_add, ":value", 146, "$g_number_of_flags"),
						(try_begin),
							(eq, ":sceneprop", "spr_headquarters_flag_red"),
							(troop_set_slot, "trp_multiplayer_data", ":value", 1),
						(else_try),
							(eq, ":sceneprop", "spr_headquarters_flag_blue"),
							(troop_set_slot, "trp_multiplayer_data", ":value", 2),
						(else_try),
							(eq, ":sceneprop", "spr_headquarters_flag_gray"),
							(troop_set_slot, "trp_multiplayer_data", ":value", 0),
						(try_end),
						(val_add, "$g_number_of_flags", 1),
					(try_end),
				(try_end),
				(assign, "$g_number_of_initial_team_1_flags", 0),
				(assign, "$g_number_of_initial_team_2_flags", 0),
				(try_for_range, ":globalvariable", 0, "$g_number_of_flags"),
					(store_add, ":value", 146, ":globalvariable"),
					(troop_get_slot, ":multiplayer_data_value", "trp_multiplayer_data", ":value"),
					(try_begin),
						(eq, ":globalvariable", 0),
						(entry_point_get_position, 0, 64),
						(scene_prop_get_instance, ":scene_prop_instance_sceneprop_localvariable", "$team_1_flag_scene_prop", ":globalvariable"),
						(assign, "$g_base_flag_team_1", ":scene_prop_instance_sceneprop_localvariable"),
					(else_try),
						(eq, ":globalvariable", 1),
						(entry_point_get_position, 0, 65),
						(scene_prop_get_instance, ":scene_prop_instance_sceneprop_localvariable", "$team_2_flag_scene_prop", ":globalvariable"),
						(assign, "$g_base_flag_team_2", ":scene_prop_instance_sceneprop_localvariable"),
					(else_try),
						(assign, ":var_13", 2),
						(scene_prop_get_num_instances, ":scene_prop_num_instances_headquarters_flag_red_2", "spr_headquarters_flag_red"),
						(store_add, ":value_4", ":var_13", ":scene_prop_num_instances_headquarters_flag_red_2"),
						(scene_prop_get_num_instances, ":scene_prop_num_instances_headquarters_flag_blue_2", "spr_headquarters_flag_blue"),
						(store_add, ":value_5", ":value_4", ":scene_prop_num_instances_headquarters_flag_blue_2"),
						(scene_prop_get_num_instances, ":scene_prop_num_instances_headquarters_flag_gray_2", "spr_headquarters_flag_gray"),
						(try_begin),
							(ge, ":globalvariable", ":var_13"),
							(gt, ":scene_prop_num_instances_headquarters_flag_red_2", 0),
							(store_sub, ":value_6", ":globalvariable", ":var_13"),
							(scene_prop_get_instance, ":scene_prop_instance_sceneprop_localvariable", "spr_headquarters_flag_red", ":value_6"),
						(else_try),
							(ge, ":globalvariable", ":value_4"),
							(gt, ":scene_prop_num_instances_headquarters_flag_blue_2", 0),
							(store_sub, ":value_6", ":globalvariable", ":value_4"),
							(scene_prop_get_instance, ":scene_prop_instance_sceneprop_localvariable", "spr_headquarters_flag_blue", ":value_6"),
						(else_try),
							(ge, ":globalvariable", ":value_5"),
							(gt, ":scene_prop_num_instances_headquarters_flag_gray_2", 0),
							(store_sub, ":value_6", ":globalvariable", ":value_5"),
							(scene_prop_get_instance, ":scene_prop_instance_sceneprop_localvariable", "spr_headquarters_flag_gray", ":value_6"),
						(try_end),
						(prop_instance_get_position, 0, ":scene_prop_instance_sceneprop_localvariable"),
					(try_end),
					(scene_prop_get_instance, ":scene_prop_instance_headquarters_pole_code_only_globalvariable", "spr_headquarters_pole_code_only", ":globalvariable"),
					(prop_instance_set_position, ":scene_prop_instance_headquarters_pole_code_only_globalvariable", 0),
					(position_move_z, 0, 900),
					(try_begin),
						(eq, ":multiplayer_data_value", 0),
						(scene_prop_get_instance, ":scene_prop_instance_sceneprop_localvariable", "$team_1_flag_scene_prop", ":globalvariable"),
						(prop_instance_set_position, ":scene_prop_instance_sceneprop_localvariable", 0),
						(scene_prop_set_visibility, ":scene_prop_instance_sceneprop_localvariable", 0),
						(scene_prop_get_instance, ":scene_prop_instance_sceneprop_localvariable", "$team_2_flag_scene_prop", ":globalvariable"),
						(prop_instance_set_position, ":scene_prop_instance_sceneprop_localvariable", 0),
						(scene_prop_set_visibility, ":scene_prop_instance_sceneprop_localvariable", 0),
						(scene_prop_get_instance, ":scene_prop_instance_sceneprop_localvariable", "spr_headquarters_flag_gray_code_only", ":globalvariable"),
						(prop_instance_set_position, ":scene_prop_instance_sceneprop_localvariable", 0),
						(scene_prop_set_visibility, ":scene_prop_instance_sceneprop_localvariable", 1),
					(else_try),
						(eq, ":multiplayer_data_value", 1),
						(scene_prop_get_instance, ":scene_prop_instance_sceneprop_localvariable", "$team_1_flag_scene_prop", ":globalvariable"),
						(prop_instance_set_position, ":scene_prop_instance_sceneprop_localvariable", 0),
						(scene_prop_set_visibility, ":scene_prop_instance_sceneprop_localvariable", 1),
						(scene_prop_get_instance, ":scene_prop_instance_sceneprop_localvariable", "$team_2_flag_scene_prop", ":globalvariable"),
						(prop_instance_set_position, ":scene_prop_instance_sceneprop_localvariable", 0),
						(scene_prop_set_visibility, ":scene_prop_instance_sceneprop_localvariable", 0),
						(scene_prop_get_instance, ":scene_prop_instance_sceneprop_localvariable", "spr_headquarters_flag_gray_code_only", ":globalvariable"),
						(prop_instance_set_position, ":scene_prop_instance_sceneprop_localvariable", 0),
						(scene_prop_set_visibility, ":scene_prop_instance_sceneprop_localvariable", 0),
						(val_add, "$g_number_of_initial_team_1_flags", 1),
					(else_try),
						(scene_prop_get_instance, ":scene_prop_instance_sceneprop_localvariable", "$team_1_flag_scene_prop", ":globalvariable"),
						(prop_instance_set_position, ":scene_prop_instance_sceneprop_localvariable", 0),
						(scene_prop_set_visibility, ":scene_prop_instance_sceneprop_localvariable", 0),
						(scene_prop_get_instance, ":scene_prop_instance_sceneprop_localvariable", "$team_2_flag_scene_prop", ":globalvariable"),
						(prop_instance_set_position, ":scene_prop_instance_sceneprop_localvariable", 0),
						(scene_prop_set_visibility, ":scene_prop_instance_sceneprop_localvariable", 1),
						(scene_prop_get_instance, ":scene_prop_instance_sceneprop_localvariable", "spr_headquarters_flag_gray_code_only", ":globalvariable"),
						(prop_instance_set_position, ":scene_prop_instance_sceneprop_localvariable", 0),
						(scene_prop_set_visibility, ":scene_prop_instance_sceneprop_localvariable", 0),
						(val_add, "$g_number_of_initial_team_2_flags", 1),
					(try_end),
				(try_end),
			(else_try),
				(scene_prop_get_num_instances, ":scene_prop_num_instances_headquarters_flag_red", "spr_headquarters_flag_red"),
				(scene_prop_get_num_instances, ":scene_prop_num_instances_headquarters_flag_blue", "spr_headquarters_flag_blue"),
				(scene_prop_get_num_instances, ":scene_prop_num_instances_headquarters_flag_gray", "spr_headquarters_flag_gray"),
				(assign, "$g_number_of_flags", 2),
				(val_add, "$g_number_of_flags", ":scene_prop_num_instances_headquarters_flag_red"),
				(val_add, "$g_number_of_flags", ":scene_prop_num_instances_headquarters_flag_blue"),
				(val_add, "$g_number_of_flags", ":scene_prop_num_instances_headquarters_flag_gray"),
			(try_end),
			(try_for_range, ":value_6", 0, ":scene_prop_num_instances_headquarters_flag_red"),
				(scene_prop_get_instance, ":scene_prop_instance_sceneprop_localvariable", "spr_headquarters_flag_red", ":value_6"),
				(scene_prop_set_visibility, ":scene_prop_instance_sceneprop_localvariable", 0),
			(try_end),
			(try_for_range, ":value_6", 0, ":scene_prop_num_instances_headquarters_flag_blue"),
				(scene_prop_get_instance, ":scene_prop_instance_sceneprop_localvariable", "spr_headquarters_flag_blue", ":value_6"),
				(scene_prop_set_visibility, ":scene_prop_instance_sceneprop_localvariable", 0),
			(try_end),
			(try_for_range, ":value_6", 0, ":scene_prop_num_instances_headquarters_flag_gray"),
				(scene_prop_get_instance, ":scene_prop_instance_sceneprop_localvariable", "spr_headquarters_flag_gray", ":value_6"),
				(scene_prop_set_visibility, ":scene_prop_instance_sceneprop_localvariable", 0),
			(try_end),
			(try_for_range, ":value_6", 0, "$g_number_of_flags"),
				(store_add, ":value_7", 166, ":value_6"),
				(troop_set_slot, "trp_multiplayer_data", ":value_7", 0),
			(try_end),
			(call_script, "script_initialize_all_scene_prop_slots"),
			(call_script, "script_multiplayer_move_moveable_objects_initial_positions")
		]),

		(-16.0, 0.0, 0.0,
		[],

		[
			(try_begin),
				(multiplayer_get_my_player, ":multiplayer_my_player"),
				(is_between, ":multiplayer_my_player", 0, 1000),
				(player_get_team_no, ":team_no_multiplayer_my_player", ":multiplayer_my_player"),
				(lt, ":team_no_multiplayer_my_player", 2),
				(call_script, "script_get_headquarters_scores"),
				(assign, ":var_3", reg0),
				(assign, ":var_4", reg1),
				(assign, ":value", 0),
				(try_begin),
					(eq, ":team_no_multiplayer_my_player", 0),
					(gt, ":var_3", ":var_4"),
					(assign, ":value", 1),
				(else_try),
					(eq, ":team_no_multiplayer_my_player", 1),
					(gt, ":var_4", ":var_3"),
					(assign, ":value", 1),
				(try_end),
				(eq, ":value", 1),
				(unlock_achievement, 61),
			(try_end),
			(call_script, "script_multiplayer_event_mission_end"),
			(assign, "$g_multiplayer_stats_chart_opened_manually", 0),
			(start_presentation, "prsnt_multiplayer_stats_chart")
		]),

		(-26.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(store_trigger_param_2, ":trigger_param_2"),
			(call_script, "script_multiplayer_server_on_agent_killed_or_wounded_common", ":trigger_param_1", ":trigger_param_2"),
			(try_begin),
				(multiplayer_is_server),
				(ge, ":trigger_param_2", 0),
				(agent_is_human, ":trigger_param_1"),
				(agent_is_human, ":trigger_param_2"),
				(agent_get_team, ":team_trigger_param_2", ":trigger_param_2"),
				(le, ":team_trigger_param_2", 1),
				(agent_get_team, ":team_trigger_param_1", ":trigger_param_1"),
				(neq, ":team_trigger_param_2", ":team_trigger_param_1"),
				(team_get_score, ":score_team_trigger_param_1", ":team_trigger_param_1"),
				(try_begin),
					(eq, ":team_trigger_param_2", 0),
					(val_add, "$g_score_team_2", -10000),
				(else_try),
					(val_add, "$g_score_team_1", -10000),
				(try_end),
				(val_sub, ":score_team_trigger_param_1", 1),
				(get_max_players, ":max_players"),
				(call_script, "script_team_set_score", ":team_trigger_param_1", ":score_team_trigger_param_1"),
				(try_for_range, ":localvariable", 1, ":max_players"),
					(player_is_active, ":localvariable"),
					(multiplayer_send_2_int_to_player, ":localvariable", 72, ":team_trigger_param_1", ":score_team_trigger_param_1"),
				(try_end),
			(try_end)
		]),

		(1.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(try_for_range, ":globalvariable", 0, "$g_number_of_flags"),
				(store_add, ":value", 166, ":globalvariable"),
				(troop_get_slot, ":multiplayer_data_value", "trp_multiplayer_data", ":value"),
				(val_add, ":multiplayer_data_value", 1),
				(troop_set_slot, "trp_multiplayer_data", ":value", ":multiplayer_data_value"),
				(store_add, ":value_2", 176, ":globalvariable"),
				(troop_get_slot, ":multiplayer_data_value_2", "trp_multiplayer_data", ":value_2"),
				(store_mod, ":value_3", ":multiplayer_data_value_2", 100),
				(try_begin),
					(ge, ":multiplayer_data_value_2", 100),
					(lt, ":value_3", 25),
					(val_add, ":multiplayer_data_value_2", 1),
					(troop_set_slot, "trp_multiplayer_data", ":value_2", ":multiplayer_data_value_2"),
				(try_end),
			(try_end)
		]),

		(0.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(try_for_range, ":globalvariable", 0, "$g_number_of_flags"),
				(store_add, ":value", 156, ":globalvariable"),
				(troop_get_slot, ":multiplayer_data_value", "trp_multiplayer_data", ":value"),
				(store_div, ":value_2", ":multiplayer_data_value", 100),
				(store_mod, ":value_3", ":multiplayer_data_value", 100),
				(assign, ":value_4", 0),
				(assign, ":value_5", 0),
				(scene_prop_get_instance, ":scene_prop_instance_headquarters_pole_code_only_globalvariable", "spr_headquarters_pole_code_only", ":globalvariable"),
				(prop_instance_get_position, 0, ":scene_prop_instance_headquarters_pole_code_only_globalvariable"),
				(get_max_players, ":max_players"),
				(try_for_range, ":localvariable", 0, ":max_players"),
					(player_is_active, ":localvariable"),
					(player_get_agent_id, ":agent_id_localvariable", ":localvariable"),
					(ge, ":agent_id_localvariable", 0),
					(agent_is_alive, ":agent_id_localvariable"),
					(agent_get_team, ":team_agent_id_localvariable", ":agent_id_localvariable"),
					(agent_get_position, 1, ":agent_id_localvariable"),
					(get_sq_distance_between_positions, ":sq_distance_between_positions_0_1", 0, 1),
					(get_sq_distance_between_position_heights, ":sq_distance_between_position_heights_0_1", 0, 1),
					(val_add, ":sq_distance_between_positions_0_1", ":sq_distance_between_position_heights_0_1"),
					(lt, ":sq_distance_between_positions_0_1", 1600),
					(try_begin),
						(eq, ":team_agent_id_localvariable", 0),
						(val_add, ":value_4", 1),
					(else_try),
						(eq, ":team_agent_id_localvariable", 1),
						(val_add, ":value_5", 1),
					(try_end),
				(try_end),
				(try_begin),
					(this_or_next|neq, ":value_2", ":value_4"),
					(neq, ":value_3", ":value_5"),
					(store_add, ":value_6", 146, ":globalvariable"),
					(troop_get_slot, ":multiplayer_data_value_6", "trp_multiplayer_data", ":value_6"),
					(store_add, ":value_7", 176, ":globalvariable"),
					(troop_get_slot, ":multiplayer_data_value_7", "trp_multiplayer_data", ":value_7"),
					(store_mod, ":value_8", ":multiplayer_data_value_7", 100),
					(store_div, ":value_9", ":multiplayer_data_value_7", 100),
					(try_begin),
						(assign, ":value_10", 0),
						(try_begin),
							(neq, ":multiplayer_data_value_6", 1),
							(eq, ":value_2", 0),
							(gt, ":value_4", 0),
							(eq, ":value_5", 0),
							(assign, ":value_11", 1),
							(assign, ":value_10", 1),
						(else_try),
							(neq, ":multiplayer_data_value_6", 2),
							(eq, ":value_3", 0),
							(eq, ":value_4", 0),
							(gt, ":value_5", 0),
							(assign, ":value_11", 2),
							(assign, ":value_10", 1),
						(try_end),
						(eq, ":value_10", 1),
						(store_mul, ":value_12", ":value_11", 100),
						(troop_set_slot, "trp_multiplayer_data", ":value_7", ":value_12"),
						(this_or_next|neq, ":value_9", ":value_11"),
						(ge, ":value_8", 25),
						(store_mul, ":value_13", ":value_11", 100),
						(val_add, ":value_13", ":globalvariable"),
						(call_script, "script_show_multiplayer_message", 10, ":value_13"),
						(try_for_range, ":localvariable", 1, ":max_players"),
							(player_is_active, ":localvariable"),
							(multiplayer_send_2_int_to_player, ":localvariable", 68, 10, ":value_13"),
						(try_end),
					(try_end),
					(try_begin),
						(store_mul, ":multiplayer_data_value", ":value_4", 100),
						(val_add, ":multiplayer_data_value", ":value_5"),
						(troop_set_slot, "trp_multiplayer_data", ":value", ":multiplayer_data_value"),
						(call_script, "script_set_num_agents_around_flag", ":globalvariable", ":multiplayer_data_value"),
						(get_max_players, ":max_players"),
						(try_for_range, ":localvariable", 1, ":max_players"),
							(player_is_active, ":localvariable"),
							(multiplayer_send_2_int_to_player, ":localvariable", 73, ":globalvariable", ":multiplayer_data_value"),
						(try_end),
					(try_end),
				(try_end),
			(try_end),
			(try_for_range, ":globalvariable", 0, "$g_number_of_flags"),
				(assign, ":value_14", -1),
				(scene_prop_get_instance, ":scene_prop_instance_headquarters_pole_code_only_globalvariable", "spr_headquarters_pole_code_only", ":globalvariable"),
				(prop_instance_get_position, 0, ":scene_prop_instance_headquarters_pole_code_only_globalvariable"),
				(store_add, ":value_6", 146, ":globalvariable"),
				(troop_get_slot, ":multiplayer_data_value_6", "trp_multiplayer_data", ":value_6"),
				(try_begin),
					(try_begin),
						(scene_prop_get_instance, ":scene_prop_instance_team_1_flag_scene_prop_globalvariable", "$team_1_flag_scene_prop", ":globalvariable"),
						(scene_prop_get_visibility, ":scene_prop_visibility_scene_prop_instance_team_1_flag_scene_prop_globalvariable", ":scene_prop_instance_team_1_flag_scene_prop_globalvariable"),
						(assign, ":value_15", 1),
						(eq, ":scene_prop_visibility_scene_prop_instance_team_1_flag_scene_prop_globalvariable", 0),
						(scene_prop_get_instance, ":scene_prop_instance_team_1_flag_scene_prop_globalvariable", "$team_2_flag_scene_prop", ":globalvariable"),
						(scene_prop_get_visibility, ":scene_prop_visibility_scene_prop_instance_team_1_flag_scene_prop_globalvariable", ":scene_prop_instance_team_1_flag_scene_prop_globalvariable"),
						(assign, ":value_15", 2),
						(eq, ":scene_prop_visibility_scene_prop_instance_team_1_flag_scene_prop_globalvariable", 0),
						(scene_prop_get_instance, ":scene_prop_instance_team_1_flag_scene_prop_globalvariable", "spr_headquarters_flag_gray_code_only", ":globalvariable"),
						(scene_prop_get_visibility, ":scene_prop_visibility_scene_prop_instance_team_1_flag_scene_prop_globalvariable", ":scene_prop_instance_team_1_flag_scene_prop_globalvariable"),
						(assign, ":value_15", 0),
					(try_end),
					(prop_instance_get_position, 1, ":scene_prop_instance_team_1_flag_scene_prop_globalvariable"),
					(try_begin),
						(get_sq_distance_between_positions, ":sq_distance_between_positions_0_1", 0, 1),
						(lt, ":sq_distance_between_positions_0_1", 400),
						(store_add, ":value_16", 156, ":globalvariable"),
						(troop_get_slot, ":multiplayer_data_value_16", "trp_multiplayer_data", ":value_16"),
						(store_div, ":value_4", ":multiplayer_data_value_16", 100),
						(store_mod, ":value_5", ":multiplayer_data_value_16", 100),
						(try_begin),
							(gt, ":value_4", 0),
							(eq, ":value_5", 0),
							(assign, ":value_14", 0),
							(assign, ":value_17", 1),
						(else_try),
							(eq, ":value_4", 0),
							(gt, ":value_5", 0),
							(assign, ":value_14", 0),
							(assign, ":value_17", 2),
						(else_try),
							(eq, ":value_4", 0),
							(eq, ":value_5", 0),
							(neq, ":value_15", 0),
							(assign, ":value_14", 0),
							(assign, ":value_17", 0),
						(try_end),
					(else_try),
						(neq, ":multiplayer_data_value_6", ":value_15"),
						(get_sq_distance_between_positions, ":sq_distance_between_positions_0_1", 0, 1),
						(ge, ":sq_distance_between_positions_0_1", 8100),
						(store_add, ":value_16", 156, ":globalvariable"),
						(troop_get_slot, ":multiplayer_data_value_16", "trp_multiplayer_data", ":value_16"),
						(store_div, ":value_4", ":multiplayer_data_value_16", 100),
						(store_mod, ":value_5", ":multiplayer_data_value_16", 100),
						(try_begin),
							(eq, ":value_15", 1),
							(assign, ":value_14", 1),
							(assign, ":value_17", 1),
						(else_try),
							(eq, ":value_15", 2),
							(assign, ":value_14", 2),
							(assign, ":value_17", 2),
						(try_end),
					(try_end),
				(try_end),
				(try_begin),
					(ge, ":value_14", 0),
					(this_or_next|neq, ":value_14", ":multiplayer_data_value_6"),
					(neq, ":value_15", ":value_17"),
					(try_begin),
						(neq, ":multiplayer_data_value_6", 0),
						(eq, ":value_14", 0),
						(try_begin),
							(eq, ":multiplayer_data_value_6", 1),
							(assign, ":value_18", 2),
						(else_try),
							(eq, ":multiplayer_data_value_6", 2),
							(assign, ":value_18", 1),
						(try_end),
						(store_mul, ":value_13", ":value_18", 100),
						(val_add, ":value_13", ":globalvariable"),
						(call_script, "script_show_multiplayer_message", 8, ":value_13"),
						(get_max_players, ":max_players"),
						(try_for_range, ":localvariable", 1, ":max_players"),
							(player_is_active, ":localvariable"),
							(multiplayer_send_2_int_to_player, ":localvariable", 68, 8, ":value_13"),
						(try_end),
					(try_end),
					(try_begin),
						(neq, ":multiplayer_data_value_6", ":value_14"),
						(neq, ":value_14", 0),
						(store_mul, ":value_13", ":value_14", 100),
						(val_add, ":value_13", ":globalvariable"),
						(call_script, "script_show_multiplayer_message", 9, ":value_13"),
						(get_max_players, ":max_players"),
						(try_for_range, ":localvariable", 1, ":max_players"),
							(player_is_active, ":localvariable"),
							(multiplayer_send_2_int_to_player, ":localvariable", 68, 9, ":value_13"),
						(try_end),
					(try_end),
					(call_script, "script_set_num_agents_around_flag", ":globalvariable", ":multiplayer_data_value_16"),
					(assign, ":var_33", 0),
					(get_max_players, ":max_players"),
					(try_for_range, ":localvariable", 1, ":max_players"),
						(player_is_active, ":localvariable"),
						(multiplayer_send_2_int_to_player, ":localvariable", 73, ":globalvariable", ":multiplayer_data_value_16"),
						(val_add, ":var_33", 1),
					(try_end),
					(store_mul, ":value_19", ":value_14", 100),
					(val_add, ":value_19", ":value_17"),
					(call_script, "script_change_flag_owner", ":globalvariable", ":value_19"),
					(try_for_range, ":localvariable", 1, ":max_players"),
						(player_is_active, ":localvariable"),
						(multiplayer_send_2_int_to_player, ":localvariable", 75, ":globalvariable", ":value_19"),
					(try_end),
					(try_begin),
						(neq, ":value_14", 0),
						(try_begin),
							(eq, ":value_14", 1),
							(assign, ":value_20", ":value_4"),
						(else_try),
							(assign, ":value_20", ":value_5"),
						(try_end),
						(store_add, ":value_21", 166, ":globalvariable"),
						(troop_get_slot, ":multiplayer_data_value_21", "trp_multiplayer_data", ":value_21"),
						(troop_set_slot, "trp_multiplayer_data", ":value_21", 0),
						(val_min, ":multiplayer_data_value_21", 360),
						(scene_prop_get_instance, ":scene_prop_instance_team_1_flag_scene_prop_globalvariable_2", "$team_1_flag_scene_prop", ":globalvariable"),
						(scene_prop_get_instance, ":scene_prop_instance_team_2_flag_scene_prop_globalvariable", "$team_2_flag_scene_prop", ":globalvariable"),
						(try_begin),
							(this_or_next|eq, "$g_base_flag_team_1", ":scene_prop_instance_team_1_flag_scene_prop_globalvariable_2"),
							(eq, "$g_base_flag_team_2", ":scene_prop_instance_team_2_flag_scene_prop_globalvariable"),
							(assign, ":value_22", 2),
						(else_try),
							(assign, ":value_22", 1),
						(try_end),
						(try_begin),
							(le, ":value_20", 1),
							(assign, ":value_23", 3),
						(else_try),
							(eq, ":value_20", 2),
							(assign, ":value_23", 2),
						(else_try),
							(le, ":value_20", 6),
							(assign, ":value_23", 1),
						(else_try),
							(assign, ":value_23", 0),
						(try_end),
						(store_mul, ":value_24", ":multiplayer_data_value_21", ":var_33"),
						(val_mul, ":value_24", ":value_22"),
						(val_div, ":value_24", 2),
						(try_begin),
							(gt, ":value_20", 0),
							(store_div, ":value_25", ":value_24", ":value_20"),
						(try_end),
						(get_max_players, ":max_players"),
						(try_for_range, ":localvariable", 0, ":max_players"),
							(player_is_active, ":localvariable"),
							(player_get_agent_id, ":agent_id_localvariable", ":localvariable"),
							(ge, ":agent_id_localvariable", 0),
							(agent_get_team, ":team_agent_id_localvariable", ":agent_id_localvariable"),
							(val_add, ":team_agent_id_localvariable", 1),
							(eq, ":team_agent_id_localvariable", ":value_14"),
							(agent_get_position, 1, ":agent_id_localvariable"),
							(prop_instance_get_position, 0, ":scene_prop_instance_headquarters_pole_code_only_globalvariable"),
							(get_sq_distance_between_positions, ":sq_distance_between_positions_0_1", 0, 1),
							(get_sq_distance_between_position_heights, ":sq_distance_between_position_heights_0_1", 0, 1),
							(val_add, ":sq_distance_between_positions_0_1", ":sq_distance_between_position_heights_0_1"),
							(lt, ":sq_distance_between_positions_0_1", 1600),
							(player_get_score, ":score_localvariable", ":localvariable"),
							(val_add, ":score_localvariable", ":value_23"),
							(player_set_score, ":localvariable", ":score_localvariable"),
							(player_get_gold, ":gold_localvariable", ":localvariable"),
							(val_add, ":gold_localvariable", ":value_25"),
							(player_set_gold, ":localvariable", ":gold_localvariable", 15000),
						(try_end),
					(try_end),
				(try_end),
			(try_end)
		]),

		(1.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(assign, ":var_1", 0),
			(assign, ":var_2", 0),
			(assign, ":var_3", 0),
			(assign, ":var_4", 0),
			(try_for_range, ":globalvariable", 0, "$g_number_of_flags"),
				(store_add, ":value", 146, ":globalvariable"),
				(troop_get_slot, ":multiplayer_data_value", "trp_multiplayer_data", ":value"),
				(scene_prop_get_instance, ":scene_prop_instance_team_1_flag_scene_prop_globalvariable", "$team_1_flag_scene_prop", ":globalvariable"),
				(scene_prop_get_instance, ":scene_prop_instance_team_2_flag_scene_prop_globalvariable", "$team_2_flag_scene_prop", ":globalvariable"),
				(try_begin),
					(this_or_next|eq, "$g_base_flag_team_1", ":scene_prop_instance_team_1_flag_scene_prop_globalvariable"),
					(eq, "$g_base_flag_team_2", ":scene_prop_instance_team_2_flag_scene_prop_globalvariable"),
					(assign, ":value_2", 2),
				(else_try),
					(assign, ":value_2", 1),
				(try_end),
				(try_begin),
					(eq, ":multiplayer_data_value", 1),
					(val_add, ":var_1", ":value_2"),
					(val_add, ":var_3", ":value_2"),
				(else_try),
					(eq, ":multiplayer_data_value", 2),
					(val_add, ":var_2", ":value_2"),
					(val_add, ":var_3", ":value_2"),
				(else_try),
					(val_add, ":var_4", ":value_2"),
				(try_end),
			(try_end),
			(store_add, ":value_3", ":var_3", ":var_4"),
			(store_sub, ":value_4", ":var_1", ":var_2"),
			(store_mul, ":value_5", ":value_4", 2),
			(store_sub, ":value_6", "$g_number_of_initial_team_1_flags", "$g_number_of_initial_team_2_flags"),
			(assign, ":var_15", 0),
			(get_max_players, ":max_players"),
			(try_for_range, ":localvariable", 0, ":max_players"),
				(player_is_active, ":localvariable"),
				(val_add, ":var_15", 1),
				(assign, ":max_players", 0),
			(try_end),
			(try_begin),
				(ge, ":value_5", ":value_6"),
				(store_sub, ":value_7", ":value_5", ":value_6"),
				(store_mul, ":value_8", ":value_7", 125),
				(val_add, ":value_8", 500),
				(store_div, ":value_9", 250000, ":value_8"),
				(try_begin),
					(lt, ":var_3", ":value_3"),
					(val_mul, ":value_9", ":var_3"),
					(val_div, ":value_9", ":value_3"),
					(val_mul, ":value_8", ":var_3"),
					(val_div, ":value_8", ":value_3"),
				(try_end),
				(call_script, "script_find_number_of_agents_constant"),
				(val_mul, ":value_8", reg0),
				(val_div, ":value_8", 100),
				(val_mul, ":value_9", reg0),
				(val_div, ":value_9", 100),
				(val_mul, ":value_8", "$g_multiplayer_point_gained_from_flags"),
				(val_div, ":value_8", 100),
				(val_mul, ":value_9", "$g_multiplayer_point_gained_from_flags"),
				(val_div, ":value_9", 100),
				(try_begin),
					(ge, ":var_15", 1),
					(val_sub, "$g_score_team_2", ":value_8"),
					(try_begin),
						(ge, ":var_2", 1),
						(val_sub, "$g_score_team_1", ":value_9"),
					(else_try),
						(val_sub, "$g_score_team_2", ":value_9"),
					(try_end),
				(try_end),
			(else_try),
				(store_sub, ":value_7", ":value_6", ":value_5"),
				(store_mul, ":value_8", ":value_7", 125),
				(val_add, ":value_8", 500),
				(store_div, ":value_9", 250000, ":value_8"),
				(try_begin),
					(lt, ":var_3", ":value_3"),
					(val_mul, ":value_9", ":var_3"),
					(val_div, ":value_9", ":value_3"),
					(val_mul, ":value_8", ":var_3"),
					(val_div, ":value_8", ":value_3"),
				(try_end),
				(call_script, "script_find_number_of_agents_constant"),
				(val_mul, ":value_8", reg0),
				(val_div, ":value_8", 100),
				(val_mul, ":value_9", reg0),
				(val_div, ":value_9", 100),
				(val_mul, ":value_8", "$g_multiplayer_point_gained_from_flags"),
				(val_div, ":value_8", 100),
				(val_mul, ":value_9", "$g_multiplayer_point_gained_from_flags"),
				(val_div, ":value_9", 100),
				(try_begin),
					(ge, ":var_15", 1),
					(try_begin),
						(ge, ":var_1", 1),
						(val_sub, "$g_score_team_2", ":value_9"),
					(else_try),
						(val_sub, "$g_score_team_1", ":value_9"),
					(try_end),
					(val_sub, "$g_score_team_1", ":value_8"),
				(try_end),
			(try_end),
			(team_get_score, ":score_0", 0),
			(try_begin),
				(store_div, ":value_10", "$g_score_team_1", 10000),
				(neq, ":value_10", ":score_0"),
				(get_max_players, ":max_players_2"),
				(call_script, "script_team_set_score", 0, ":value_10"),
				(try_for_range, ":localvariable", 1, ":max_players_2"),
					(player_is_active, ":localvariable"),
					(multiplayer_send_2_int_to_player, ":localvariable", 72, 0, ":value_10"),
				(try_end),
			(try_end),
			(team_get_score, ":score_1", 1),
			(try_begin),
				(store_div, ":value_11", "$g_score_team_2", 10000),
				(neq, ":value_11", ":score_1"),
				(get_max_players, ":max_players_2"),
				(call_script, "script_team_set_score", 1, ":value_11"),
				(try_for_range, ":localvariable", 1, ":max_players_2"),
					(player_is_active, ":localvariable"),
					(multiplayer_send_2_int_to_player, ":localvariable", 72, 1, ":value_11"),
				(try_end),
			(try_end)
		]),

		(1.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(get_max_players, ":max_players"),
			(try_for_range, ":localvariable", 0, ":max_players"),
				(player_is_active, ":localvariable"),
				(neg|player_is_busy_with_menus, ":localvariable"),
				(player_get_team_no, ":team_no_localvariable", ":localvariable"),
				(lt, ":team_no_localvariable", 2),
				(player_get_troop_id, ":troop_id_localvariable", ":localvariable"),
				(ge, ":troop_id_localvariable", 0),
				(player_get_agent_id, ":agent_id_localvariable", ":localvariable"),
				(assign, ":value", 0),
				(try_begin),
					(player_get_slot, ":localvariable_first_spawn", ":localvariable", slot_player_first_spawn),
					(eq, ":localvariable_first_spawn", 1),
					(assign, ":value", 1),
					(player_set_slot, ":localvariable", slot_player_first_spawn, 0),
				(else_try),
					(try_begin),
						(lt, ":agent_id_localvariable", 0),
						(assign, ":value", 1),
					(else_try),
						(neg|agent_is_alive, ":agent_id_localvariable"),
						(agent_get_time_elapsed_since_removed, ":time_elapsed_since_removed_agent_id_localvariable", ":agent_id_localvariable"),
						(gt, ":time_elapsed_since_removed_agent_id_localvariable", "$g_multiplayer_respawn_period"),
						(assign, ":value", 1),
					(try_end),
				(try_end),
				(eq, ":value", 1),
				(call_script, "script_multiplayer_buy_agent_equipment", ":localvariable"),
				(troop_get_inventory_slot, ":inventory_slot_troop_id_localvariable_8", ":troop_id_localvariable", 8),
				(try_begin),
					(ge, ":inventory_slot_troop_id_localvariable_8", 0),
					(assign, ":value_2", 1),
				(else_try),
					(assign, ":value_2", 0),
				(try_end),
				(call_script, "script_multiplayer_find_spawn_point", ":team_no_localvariable", 0, ":value_2"),
				(player_spawn_new_agent, ":localvariable", reg0),
			(try_end)
		]),

		(1.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(store_mission_timer_a, ":mission_timer_a"),
			(ge, ":mission_timer_a", 2),
			(assign, ":var_2", 0),
			(assign, ":var_3", 0),
			(try_for_agents, ":var_4"),
				(agent_is_non_player, ":var_4"),
				(agent_is_human, ":var_4"),
				(assign, ":value", 0),
				(try_begin),
					(agent_is_alive, ":var_4"),
					(assign, ":value", 1),
				(else_try),
					(agent_get_time_elapsed_since_removed, ":time_elapsed_since_removed_var_4", ":var_4"),
					(le, ":time_elapsed_since_removed_var_4", "$g_multiplayer_respawn_period"),
					(assign, ":value", 1),
				(try_end),
				(eq, ":value", 1),
				(agent_get_team, ":team_var_4", ":var_4"),
				(try_begin),
					(eq, ":team_var_4", 0),
					(val_add, ":var_2", 1),
				(else_try),
					(eq, ":team_var_4", 1),
					(val_add, ":var_3", 1),
				(try_end),
			(try_end),
			(store_sub, "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_team_1", ":var_2"),
			(store_sub, "$g_multiplayer_num_bots_required_team_2", "$g_multiplayer_num_bots_team_2", ":var_3"),
			(val_max, "$g_multiplayer_num_bots_required_team_1", 0),
			(val_max, "$g_multiplayer_num_bots_required_team_2", 0)
		]),

		(0.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(eq, "$g_multiplayer_ready_for_spawning_agent", 1),
			(store_add, ":value", "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_required_team_2"),
			(try_begin),
				(gt, ":value", 0),
				(try_begin),
					(this_or_next|eq, "$g_multiplayer_game_type", 2),
					(this_or_next|eq, "$g_multiplayer_game_type", 3),
					(eq, "$g_multiplayer_game_type", 6),
					(team_get_score, ":score_0", 0),
					(team_get_score, ":score_1", 1),
					(store_add, ":value_2", ":score_0", ":score_1"),
					(eq, ":value_2", 0),
					(store_mission_timer_a, ":mission_timer_a"),
					(val_sub, ":mission_timer_a", "$g_round_start_time"),
					(lt, ":mission_timer_a", 20),
					(assign, ":value_3", 0),
				(else_try),
					(assign, ":value_3", 1),
				(try_end),
				(eq, ":value_3", 1),
				(store_random_in_range, ":random_in_range_0_value", 0, ":value"),
				(val_sub, ":random_in_range_0_value", "$g_multiplayer_num_bots_required_team_1"),
				(try_begin),
					(lt, ":random_in_range_0_value", 0),
					(assign, ":value_4", 0),
				(else_try),
					(assign, ":value_4", 1),
				(try_end),
				(try_begin),
					(this_or_next|eq, "$g_multiplayer_game_type", 2),
					(eq, "$g_multiplayer_game_type", 3),
					(store_mission_timer_a, ":mission_timer_a"),
					(val_sub, ":mission_timer_a", "$g_round_start_time"),
					(try_begin),
						(le, ":mission_timer_a", 20),
						(assign, ":value_5", 0),
					(else_try),
						(assign, ":value_5", 1),
					(try_end),
				(else_try),
					(assign, ":value_5", 1),
				(try_end),
				(call_script, "script_multiplayer_find_bot_troop_and_group_for_spawn", ":value_4", ":value_5"),
				(assign, ":var_10", reg0),
				(assign, ":var_11", reg1),
				(team_get_faction, ":faction_value_4", ":value_4"),
				(assign, ":var_13", 0),
				(try_for_range, ":troop", "trp_swadian_crossbowman_multiplayer_ai", "trp_swadian_crossbowman_multiplayer"),
					(store_faction_of_troop, ":faction_of_troop_troop", ":troop"),
					(eq, ":faction_of_troop_troop", ":faction_value_4"),
					(val_add, ":var_13", 1),
				(try_end),
				(assign, ":var_16", 0),
				(get_max_players, ":max_players"),
				(try_for_range, ":localvariable", 0, ":max_players"),
					(player_is_active, ":localvariable"),
					(player_get_team_no, ":team_no_localvariable", ":localvariable"),
					(eq, ":value_4", ":team_no_localvariable"),
					(assign, ":value_6", 0),
					(store_add, ":value_7", 35, ":var_13"),
					(try_for_range, ":localvariable_2", 35, ":value_7"),
						(player_slot_ge, ":localvariable", ":localvariable_2", 1),
						(assign, ":value_6", 1),
						(assign, ":value_7", 0),
					(try_end),
					(ge, ":value_6", 1),
					(val_add, ":var_16", 1),
				(try_end),
				(try_begin),
					(this_or_next|ge, ":var_11", 0),
					(eq, ":var_16", 0),
					(troop_get_inventory_slot, ":inventory_slot_var_10_8", ":var_10", 8),
					(try_begin),
						(ge, ":inventory_slot_var_10_8", 0),
						(assign, ":value_8", 1),
					(else_try),
						(assign, ":value_8", 0),
					(try_end),
					(try_begin),
						(eq, "$g_multiplayer_game_type", 6),
						(store_mission_timer_a, ":mission_timer_a"),
						(val_sub, ":mission_timer_a", "$g_round_start_time"),
						(try_begin),
							(lt, ":mission_timer_a", 20),
							(try_begin),
								(eq, ":value_4", 0),
								(call_script, "script_multiplayer_find_spawn_point", ":value_4", 1, ":value_8"),
							(else_try),
								(assign, reg0, 32),
							(try_end),
						(else_try),
							(call_script, "script_multiplayer_find_spawn_point", ":value_4", 0, ":value_8"),
						(try_end),
					(else_try),
						(this_or_next|eq, "$g_multiplayer_game_type", 2),
						(eq, "$g_multiplayer_game_type", 3),
						(try_begin),
							(eq, ":value_4", 0),
							(assign, reg0, 0),
						(else_try),
							(assign, reg0, 32),
						(try_end),
					(else_try),
						(call_script, "script_multiplayer_find_spawn_point", ":value_4", 0, ":value_8"),
					(try_end),
					(store_current_scene, ":current_scene"),
					(modify_visitors_at_site, ":current_scene"),
					(add_visitors_to_current_scene, reg0, ":var_10", 1, ":value_4", ":var_11"),
					(assign, "$g_multiplayer_ready_for_spawning_agent", 0),
					(try_begin),
						(eq, ":value_4", 0),
						(val_sub, "$g_multiplayer_num_bots_required_team_1", 1),
					(else_try),
						(eq, ":value_4", 1),
						(val_sub, "$g_multiplayer_num_bots_required_team_2", 1),
					(try_end),
				(try_end),
			(try_end)
		]),

		(3.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(try_for_agents, ":var_1"),
				(agent_is_non_player, ":var_1"),
				(agent_is_human, ":var_1"),
				(agent_is_alive, ":var_1"),
				(agent_get_group, ":group_var_1", ":var_1"),
				(try_begin),
					(neg|player_is_active, ":group_var_1"),
					(call_script, "script_multiplayer_change_leader_of_bot", ":var_1"),
				(else_try),
					(player_get_team_no, ":team_no_group_var_1", ":group_var_1"),
					(agent_get_team, ":team_var_1", ":var_1"),
					(neq, ":team_no_group_var_1", ":team_var_1"),
					(call_script, "script_multiplayer_change_leader_of_bot", ":var_1"),
				(try_end),
			(try_end)
		]),

		(20.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(call_script, "script_check_team_balance")
		]),

		(1.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(assign, ":value", 0),
			(try_begin),
				(this_or_next|eq, "$g_multiplayer_game_type", 2),
				(this_or_next|eq, "$g_multiplayer_game_type", 3),
				(eq, "$g_multiplayer_game_type", 6),
				(try_begin),
					(eq, "$g_round_ended", 1),
					(store_mission_timer_a, ":mission_timer_a"),
					(val_sub, ":mission_timer_a", "$g_round_finish_time"),
					(store_sub, ":value_2", "$g_multiplayer_respawn_period", 1),
					(ge, ":mission_timer_a", ":value_2"),
					(store_mission_timer_a, ":mission_timer_a_2"),
					(try_begin),
						(this_or_next|eq, "$g_multiplayer_game_type", 2),
						(eq, "$g_multiplayer_game_type", 3),
						(assign, ":value_3", 90),
					(else_try),
						(assign, ":value_3", 120),
					(try_end),
					(store_mul, ":value_4", "$g_multiplayer_game_max_minutes", 60),
					(store_sub, ":value_5", ":value_4", ":value_3"),
					(gt, ":mission_timer_a_2", ":value_5"),
					(assign, ":value", 1),
				(try_end),
				(eq, ":value", 1),
			(else_try),
				(neq, "$g_multiplayer_game_type", 2),
				(neq, "$g_multiplayer_game_type", 3),
				(neq, "$g_multiplayer_game_type", 6),
				(neq, "$g_multiplayer_game_type", 5),
				(store_mission_timer_a, ":mission_timer_a_2"),
				(store_mul, ":value_4", "$g_multiplayer_game_max_minutes", 60),
				(gt, ":mission_timer_a_2", ":value_4"),
				(assign, ":value", 1),
			(else_try),
				(team_get_score, ":score_0", 0),
				(team_get_score, ":score_1", 1),
				(try_begin),
					(neq, "$g_multiplayer_game_type", 5),
					(try_begin),
						(this_or_next|ge, ":score_0", "$g_multiplayer_game_max_points"),
						(ge, ":score_1", "$g_multiplayer_game_max_points"),
						(assign, ":value", 1),
					(try_end),
				(else_try),
					(assign, ":value_6", 0),
					(get_max_players, ":max_players"),
					(try_for_range, ":localvariable", 0, ":max_players"),
						(player_is_active, ":localvariable"),
						(player_get_agent_id, ":agent_id_localvariable", ":localvariable"),
						(ge, ":agent_id_localvariable", 0),
						(neg|agent_is_non_player, ":agent_id_localvariable"),
						(assign, ":value_6", 1),
						(assign, ":max_players", 0),
					(try_end),
					(eq, ":value_6", 1),
					(this_or_next|le, ":score_0", 0),
					(le, ":score_1", 0),
					(assign, ":value", 1),
				(try_end),
			(try_end),
			(try_begin),
				(eq, ":value", 1),
				(call_script, "script_game_multiplayer_get_game_type_mission_template", "$g_multiplayer_game_type"),
				(start_multiplayer_mission, reg0, "$g_multiplayer_selected_map", 0),
				(call_script, "script_game_set_multiplayer_mission_end"),
			(try_end)
		]),

		(-21.0, 0.0, 0.0,
		[],

		[
			(try_begin),
				(eq, "$g_multiplayer_mission_end_screen", 0),
				(assign, "$g_multiplayer_stats_chart_opened_manually", 1),
				(start_presentation, "prsnt_multiplayer_stats_chart"),
			(try_end)
		]),

		(0.0, 0.0, ti_once,
		[],

		[
			(start_presentation, "prsnt_multiplayer_welcome_message")
		]),

		(-24.0, 0.0, 0.0,
		[],

		[
			(start_presentation, "prsnt_multiplayer_team_score_display")
		]),

		(-23.0, 0.0, 0.0,
		[],

		[
			(neg|is_presentation_active, "prsnt_multiplayer_escape_menu"),
			(neg|is_presentation_active, "prsnt_multiplayer_stats_chart"),
			(eq, "$g_waiting_for_confirmation_to_terminate", 0),
			(start_presentation, "prsnt_multiplayer_escape_menu")
		])
	] + crouching_triggers),

	("multiplayer_cf", mtf_battle_mode, -1,
	"You lead your men to battle.",
	[(0, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(1, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(2, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(3, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(4, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(5, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(6, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(7, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(8, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(9, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(10, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(11, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(12, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(13, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(14, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(15, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(16, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(17, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(18, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(19, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(20, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(21, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(22, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(23, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(24, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(25, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(26, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(27, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(28, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(29, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(30, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(31, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(32, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(33, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(34, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(35, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(36, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(37, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(38, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(39, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(40, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(41, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(42, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(43, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(44, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(45, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(46, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(47, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(48, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(49, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(50, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(51, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(52, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(53, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(54, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(55, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(56, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(57, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(58, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(59, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(60, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(61, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(62, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(63, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(64, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(65, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, [])],
	[
		
	
	

		
		
		
		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(call_script, "script_troop_agent_set_banner", "tableau_game_troop_label_banner", ":trigger_param_1", ":troop_id_trigger_param_1")
		]),

		(1.0, 5.0, 0.0,
		[
			(multiplayer_is_server),
			(eq, "$g_multiplayer_poll_running", 1),
			(eq, "$g_multiplayer_poll_ended", 0),
			(store_mission_timer_a, ":mission_timer_a"),
			(store_add, ":value", "$g_multiplayer_poll_no_count", "$g_multiplayer_poll_yes_count"),
			(this_or_next|eq, ":value", "$g_multiplayer_poll_num_sent"),
			(gt, ":mission_timer_a", "$g_multiplayer_poll_end_time"),
			(call_script, "script_cf_multiplayer_evaluate_poll")
		],

		[
			(assign, "$g_multiplayer_poll_running", 0),
			(try_begin),
				(this_or_next|eq, "$g_multiplayer_poll_to_show", 0),
				(eq, "$g_multiplayer_poll_to_show", 3),
				(call_script, "script_game_multiplayer_get_game_type_mission_template", "$g_multiplayer_game_type"),
				(start_multiplayer_mission, reg0, "$g_multiplayer_poll_value_to_show", 1),
				(call_script, "script_game_set_multiplayer_mission_end"),
			(try_end)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_multiplayer_server_on_agent_spawn_common", ":trigger_param_1")
		]),

		(-15.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_multiplayer_server_player_joined_common", ":trigger_param_1")
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(try_begin),
				(multiplayer_is_server),
				(store_current_scene, ":current_scene"),
				(this_or_next|eq, ":current_scene", "scn_random_multi_plain_medium"),
				(this_or_next|eq, ":current_scene", "scn_random_multi_plain_large"),
				(this_or_next|eq, ":current_scene", "scn_random_multi_steppe_medium"),
				(eq, ":current_scene", "scn_random_multi_steppe_large"),
				(entry_point_get_position, 0, 0),
				(entry_point_set_position, 64, 0),
				(entry_point_get_position, 1, 32),
				(entry_point_set_position, 65, 1),
			(try_end),
			(assign, "$g_multiplayer_game_type", 4),
			(call_script, "script_multiplayer_server_before_mission_start_common"),
			(assign, "$flag_1_at_ground_timer", 0),
			(assign, "$flag_2_at_ground_timer", 0),
			(call_script, "script_multiplayer_init_mission_variables"),
			(call_script, "script_multiplayer_remove_destroy_mod_targets"),
			(call_script, "script_multiplayer_remove_headquarters_flags")
		]),

		(-20.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_determine_team_flags", 0),
			(call_script, "script_determine_team_flags", 1),
			(set_spawn_effector_scene_prop_kind, 0, -1),
			(set_spawn_effector_scene_prop_kind, 1, -1),
			(try_begin),
				(multiplayer_is_server),
				(assign, "$g_multiplayer_ready_for_spawning_agent", 1),
				(entry_point_get_position, 0, 64),
				(set_spawn_position, 0),
				(spawn_scene_prop, "$team_1_flag_scene_prop", 0),
				(entry_point_get_position, 0, 65),
				(set_spawn_position, 0),
				(spawn_scene_prop, "$team_2_flag_scene_prop", 0),
			(try_end),
			(call_script, "script_initialize_all_scene_prop_slots"),
			(call_script, "script_multiplayer_move_moveable_objects_initial_positions")
		]),

		(-16.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_multiplayer_event_mission_end"),
			(assign, "$g_multiplayer_stats_chart_opened_manually", 0),
			(start_presentation, "prsnt_multiplayer_stats_chart")
		]),

		(-26.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(store_trigger_param_2, ":trigger_param_2"),
			(call_script, "script_multiplayer_server_on_agent_killed_or_wounded_common", ":trigger_param_1", ":trigger_param_2"),
			(try_begin),
				(agent_is_human, ":trigger_param_1"),
				(agent_get_attached_scene_prop, ":attached_scene_prop_trigger_param_1", ":trigger_param_1"),
				(try_begin),
					(try_begin),
						(multiplayer_is_server),
						(ge, ":attached_scene_prop_trigger_param_1", 0),
						(multiplayer_get_my_player, ":multiplayer_my_player"),
						(get_max_players, ":max_players"),
						(call_script, "script_set_attached_scene_prop", ":trigger_param_1", -1),
						(agent_set_horse_speed_factor, ":trigger_param_1", 100),
						(try_for_range, ":localvariable", 1, ":max_players"),
							(player_is_active, ":localvariable"),
							(neq, ":multiplayer_my_player", ":localvariable"),
							(multiplayer_send_2_int_to_player, ":localvariable", 70, ":trigger_param_1", -1),
						(try_end),
						(prop_instance_get_position, 0, ":attached_scene_prop_trigger_param_1"),
						(position_set_z_to_ground_level, 0),
						(prop_instance_set_position, ":attached_scene_prop_trigger_param_1", 0),
						(agent_get_team, ":team_trigger_param_1", ":trigger_param_1"),
						(try_begin),
							(eq, ":team_trigger_param_1", 0),
							(assign, ":value", 1),
						(else_try),
							(assign, ":value", 0),
						(try_end),
						(team_set_slot, ":value", slot_team_flag_situation, 2),
						(multiplayer_get_my_player, ":multiplayer_my_player"),
						(get_max_players, ":max_players"),
						(call_script, "script_set_team_flag_situation", ":value", 2),
						(try_for_range, ":localvariable", 1, ":max_players"),
							(player_is_active, ":localvariable"),
							(neq, ":multiplayer_my_player", ":localvariable"),
							(multiplayer_send_2_int_to_player, ":localvariable", 71, ":value", 2),
						(try_end),
					(try_end),
				(try_end),
			(try_end)
		]),

		(1.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(try_for_range, ":number", 0, 2),
				(try_begin),
					(team_slot_eq, ":number", slot_team_flag_situation, 2),
					(assign, ":value", -1),
					(try_begin),
						(eq, ":number", 0),
						(val_add, "$flag_1_at_ground_timer", 1),
						(ge, "$flag_1_at_ground_timer", 60),
						(assign, ":value", 0),
					(else_try),
						(val_add, "$flag_2_at_ground_timer", 1),
						(ge, "$flag_2_at_ground_timer", 60),
						(assign, ":value", 1),
					(try_end),
					(try_begin),
						(ge, ":value", 0),
						(try_begin),
							(eq, ":value", 0),
							(assign, "$flag_1_at_ground_timer", 0),
						(else_try),
							(eq, ":value", 1),
							(assign, "$flag_2_at_ground_timer", 0),
						(try_end),
						(team_set_slot, ":value", slot_team_flag_situation, 0),
						(call_script, "script_set_team_flag_situation", ":value", 0),
						(multiplayer_get_my_player, ":multiplayer_my_player"),
						(get_max_players, ":max_players"),
						(try_for_range, ":localvariable", 1, ":max_players"),
							(player_is_active, ":localvariable"),
							(neq, ":multiplayer_my_player", ":localvariable"),
							(multiplayer_send_2_int_to_player, ":localvariable", 71, ":value", 0),
						(try_end),
						(scene_prop_get_instance, ":scene_prop_instance_team_1_flag_scene_prop_0", "$team_1_flag_scene_prop", 0),
						(scene_prop_get_instance, ":scene_prop_instance_team_2_flag_scene_prop_0", "$team_2_flag_scene_prop", 0),
						(assign, ":var_8", ":scene_prop_instance_team_1_flag_scene_prop_0"),
						(assign, ":var_18", 64),
						(assign, ":var_10", ":scene_prop_instance_team_2_flag_scene_prop_0"),
						(assign, ":var_11", 65),
						(try_begin),
							(eq, ":value", 0),
							(entry_point_get_position, 5, ":var_18"),
							(prop_instance_set_position, ":var_8", 5),
						(else_try),
							(entry_point_get_position, 5, ":var_11"),
							(prop_instance_set_position, ":var_10", 5),
						(try_end),
						(store_mul, ":value_2", ":value", -1),
						(val_sub, ":value_2", 1),
						(call_script, "script_show_multiplayer_message", 5, ":value_2"),
						(try_for_range, ":localvariable", 0, ":max_players"),
							(player_is_active, ":localvariable"),
							(neq, ":multiplayer_my_player", ":localvariable"),
							(multiplayer_send_2_int_to_player, ":localvariable", 68, 5, ":value_2"),
						(try_end),
					(try_end),
				(else_try),
					(try_begin),
						(eq, ":number", 0),
						(assign, "$flag_1_at_ground_timer", 0),
					(else_try),
						(assign, "$flag_2_at_ground_timer", 0),
					(try_end),
				(try_end),
			(try_end)
		]),

		(1.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(get_max_players, ":max_players"),
			(try_for_range, ":localvariable", 0, ":max_players"),
				(player_is_active, ":localvariable"),
				(neg|player_is_busy_with_menus, ":localvariable"),
				(player_get_team_no, ":team_no_localvariable", ":localvariable"),
				(lt, ":team_no_localvariable", 2),
				(player_get_troop_id, ":troop_id_localvariable", ":localvariable"),
				(ge, ":troop_id_localvariable", 0),
				(player_get_agent_id, ":agent_id_localvariable", ":localvariable"),
				(assign, ":value", 0),
				(try_begin),
					(player_get_slot, ":localvariable_first_spawn", ":localvariable", slot_player_first_spawn),
					(eq, ":localvariable_first_spawn", 1),
					(assign, ":value", 1),
					(player_set_slot, ":localvariable", slot_player_first_spawn, 0),
				(else_try),
					(try_begin),
						(lt, ":agent_id_localvariable", 0),
						(assign, ":value", 1),
					(else_try),
						(neg|agent_is_alive, ":agent_id_localvariable"),
						(agent_get_time_elapsed_since_removed, ":time_elapsed_since_removed_agent_id_localvariable", ":agent_id_localvariable"),
						(gt, ":time_elapsed_since_removed_agent_id_localvariable", "$g_multiplayer_respawn_period"),
						(assign, ":value", 1),
					(try_end),
				(try_end),
				(eq, ":value", 1),
				(call_script, "script_multiplayer_buy_agent_equipment", ":localvariable"),
				(troop_get_inventory_slot, ":inventory_slot_troop_id_localvariable_8", ":troop_id_localvariable", 8),
				(try_begin),
					(ge, ":inventory_slot_troop_id_localvariable_8", 0),
					(assign, ":value_2", 1),
				(else_try),
					(assign, ":value_2", 0),
				(try_end),
				(call_script, "script_multiplayer_find_spawn_point", ":team_no_localvariable", 0, ":value_2"),
				(player_spawn_new_agent, ":localvariable", reg0),
			(try_end)
		]),

		(1.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(store_mission_timer_a, ":mission_timer_a"),
			(ge, ":mission_timer_a", 2),
			(assign, ":var_2", 0),
			(assign, ":var_3", 0),
			(try_for_agents, ":var_4"),
				(agent_is_non_player, ":var_4"),
				(agent_is_human, ":var_4"),
				(assign, ":value", 0),
				(try_begin),
					(agent_is_alive, ":var_4"),
					(assign, ":value", 1),
				(else_try),
					(agent_get_time_elapsed_since_removed, ":time_elapsed_since_removed_var_4", ":var_4"),
					(le, ":time_elapsed_since_removed_var_4", "$g_multiplayer_respawn_period"),
					(assign, ":value", 1),
				(try_end),
				(eq, ":value", 1),
				(agent_get_team, ":team_var_4", ":var_4"),
				(try_begin),
					(eq, ":team_var_4", 0),
					(val_add, ":var_2", 1),
				(else_try),
					(eq, ":team_var_4", 1),
					(val_add, ":var_3", 1),
				(try_end),
			(try_end),
			(store_sub, "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_team_1", ":var_2"),
			(store_sub, "$g_multiplayer_num_bots_required_team_2", "$g_multiplayer_num_bots_team_2", ":var_3"),
			(val_max, "$g_multiplayer_num_bots_required_team_1", 0),
			(val_max, "$g_multiplayer_num_bots_required_team_2", 0)
		]),

		(0.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(eq, "$g_multiplayer_ready_for_spawning_agent", 1),
			(store_add, ":value", "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_required_team_2"),
			(try_begin),
				(gt, ":value", 0),
				(try_begin),
					(this_or_next|eq, "$g_multiplayer_game_type", 2),
					(this_or_next|eq, "$g_multiplayer_game_type", 3),
					(eq, "$g_multiplayer_game_type", 6),
					(team_get_score, ":score_0", 0),
					(team_get_score, ":score_1", 1),
					(store_add, ":value_2", ":score_0", ":score_1"),
					(eq, ":value_2", 0),
					(store_mission_timer_a, ":mission_timer_a"),
					(val_sub, ":mission_timer_a", "$g_round_start_time"),
					(lt, ":mission_timer_a", 20),
					(assign, ":value_3", 0),
				(else_try),
					(assign, ":value_3", 1),
				(try_end),
				(eq, ":value_3", 1),
				(store_random_in_range, ":random_in_range_0_value", 0, ":value"),
				(val_sub, ":random_in_range_0_value", "$g_multiplayer_num_bots_required_team_1"),
				(try_begin),
					(lt, ":random_in_range_0_value", 0),
					(assign, ":value_4", 0),
				(else_try),
					(assign, ":value_4", 1),
				(try_end),
				(try_begin),
					(this_or_next|eq, "$g_multiplayer_game_type", 2),
					(eq, "$g_multiplayer_game_type", 3),
					(store_mission_timer_a, ":mission_timer_a"),
					(val_sub, ":mission_timer_a", "$g_round_start_time"),
					(try_begin),
						(le, ":mission_timer_a", 20),
						(assign, ":value_5", 0),
					(else_try),
						(assign, ":value_5", 1),
					(try_end),
				(else_try),
					(assign, ":value_5", 1),
				(try_end),
				(call_script, "script_multiplayer_find_bot_troop_and_group_for_spawn", ":value_4", ":value_5"),
				(assign, ":var_10", reg0),
				(assign, ":var_11", reg1),
				(team_get_faction, ":faction_value_4", ":value_4"),
				(assign, ":var_13", 0),
				(try_for_range, ":troop", "trp_swadian_crossbowman_multiplayer_ai", "trp_swadian_crossbowman_multiplayer"),
					(store_faction_of_troop, ":faction_of_troop_troop", ":troop"),
					(eq, ":faction_of_troop_troop", ":faction_value_4"),
					(val_add, ":var_13", 1),
				(try_end),
				(assign, ":var_16", 0),
				(get_max_players, ":max_players"),
				(try_for_range, ":localvariable", 0, ":max_players"),
					(player_is_active, ":localvariable"),
					(player_get_team_no, ":team_no_localvariable", ":localvariable"),
					(eq, ":value_4", ":team_no_localvariable"),
					(assign, ":value_6", 0),
					(store_add, ":value_7", 35, ":var_13"),
					(try_for_range, ":localvariable_2", 35, ":value_7"),
						(player_slot_ge, ":localvariable", ":localvariable_2", 1),
						(assign, ":value_6", 1),
						(assign, ":value_7", 0),
					(try_end),
					(ge, ":value_6", 1),
					(val_add, ":var_16", 1),
				(try_end),
				(try_begin),
					(this_or_next|ge, ":var_11", 0),
					(eq, ":var_16", 0),
					(troop_get_inventory_slot, ":inventory_slot_var_10_8", ":var_10", 8),
					(try_begin),
						(ge, ":inventory_slot_var_10_8", 0),
						(assign, ":value_8", 1),
					(else_try),
						(assign, ":value_8", 0),
					(try_end),
					(try_begin),
						(eq, "$g_multiplayer_game_type", 6),
						(store_mission_timer_a, ":mission_timer_a"),
						(val_sub, ":mission_timer_a", "$g_round_start_time"),
						(try_begin),
							(lt, ":mission_timer_a", 20),
							(try_begin),
								(eq, ":value_4", 0),
								(call_script, "script_multiplayer_find_spawn_point", ":value_4", 1, ":value_8"),
							(else_try),
								(assign, reg0, 32),
							(try_end),
						(else_try),
							(call_script, "script_multiplayer_find_spawn_point", ":value_4", 0, ":value_8"),
						(try_end),
					(else_try),
						(this_or_next|eq, "$g_multiplayer_game_type", 2),
						(eq, "$g_multiplayer_game_type", 3),
						(try_begin),
							(eq, ":value_4", 0),
							(assign, reg0, 0),
						(else_try),
							(assign, reg0, 32),
						(try_end),
					(else_try),
						(call_script, "script_multiplayer_find_spawn_point", ":value_4", 0, ":value_8"),
					(try_end),
					(store_current_scene, ":current_scene"),
					(modify_visitors_at_site, ":current_scene"),
					(add_visitors_to_current_scene, reg0, ":var_10", 1, ":value_4", ":var_11"),
					(assign, "$g_multiplayer_ready_for_spawning_agent", 0),
					(try_begin),
						(eq, ":value_4", 0),
						(val_sub, "$g_multiplayer_num_bots_required_team_1", 1),
					(else_try),
						(eq, ":value_4", 1),
						(val_sub, "$g_multiplayer_num_bots_required_team_2", 1),
					(try_end),
				(try_end),
			(try_end)
		]),

		(3.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(try_for_agents, ":var_1"),
				(agent_is_non_player, ":var_1"),
				(agent_is_human, ":var_1"),
				(agent_is_alive, ":var_1"),
				(agent_get_group, ":group_var_1", ":var_1"),
				(try_begin),
					(neg|player_is_active, ":group_var_1"),
					(call_script, "script_multiplayer_change_leader_of_bot", ":var_1"),
				(else_try),
					(player_get_team_no, ":team_no_group_var_1", ":group_var_1"),
					(agent_get_team, ":team_var_1", ":var_1"),
					(neq, ":team_no_group_var_1", ":team_var_1"),
					(call_script, "script_multiplayer_change_leader_of_bot", ":var_1"),
				(try_end),
			(try_end)
		]),

		(0.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(scene_prop_get_instance, ":scene_prop_instance_team_1_flag_scene_prop_0", "$team_1_flag_scene_prop", 0),
			(prop_instance_get_position, 1, ":scene_prop_instance_team_1_flag_scene_prop_0"),
			(scene_prop_get_instance, ":scene_prop_instance_team_2_flag_scene_prop_0", "$team_2_flag_scene_prop", 0),
			(prop_instance_get_position, 2, ":scene_prop_instance_team_2_flag_scene_prop_0"),
			(multiplayer_get_my_player, ":multiplayer_my_player"),
			(get_max_players, ":max_players"),
			(try_for_agents, ":var_5"),
				(agent_is_human, ":var_5"),
				(agent_is_alive, ":var_5"),
				(neg|agent_is_non_player, ":var_5"),
				(agent_get_horse, ":horse_var_5", ":var_5"),
				(eq, ":horse_var_5", -1),
				(agent_get_attached_scene_prop, ":attached_scene_prop_var_5", ":var_5"),
				(agent_get_team, ":team_var_5", ":var_5"),
				(try_begin),
					(eq, ":team_var_5", 0),
					(assign, ":value", 1),
				(else_try),
					(assign, ":value", 0),
				(try_end),
				(try_begin),
					(eq, ":team_var_5", 0),
					(assign, ":value_2", ":scene_prop_instance_team_1_flag_scene_prop_0"),
					(assign, ":value_3", 64),
				(else_try),
					(assign, ":value_2", ":scene_prop_instance_team_2_flag_scene_prop_0"),
					(assign, ":value_3", 65),
				(try_end),
				(agent_get_position, 3, ":var_5"),
				(prop_instance_get_position, 4, ":value_2"),
				(get_distance_between_positions, ":distance_between_positions_3_4", 3, 4),
				(team_get_slot, ":team_var_5_flag_situation", ":team_var_5", slot_team_flag_situation),
				(try_begin),
					(eq, ":team_var_5_flag_situation", 2),
					(lt, ":distance_between_positions_3_4", 100),
					(team_set_slot, ":team_var_5", slot_team_flag_situation, 0),
					(call_script, "script_set_team_flag_situation", ":team_var_5", 0),
					(try_for_range, ":localvariable", 1, ":max_players"),
						(player_is_active, ":localvariable"),
						(neq, ":multiplayer_my_player", ":localvariable"),
						(multiplayer_send_2_int_to_player, ":localvariable", 71, ":team_var_5", 0),
					(try_end),
					(entry_point_get_position, 5, ":value_3"),
					(prop_instance_set_position, ":value_2", 5),
					(try_begin),
						(multiplayer_is_server),
						(neg|agent_is_non_player, ":var_5"),
						(agent_get_player_id, ":player_id_var_5", ":var_5"),
						(player_get_score, ":score_player_id_var_5", ":player_id_var_5"),
						(val_add, ":score_player_id_var_5", 1),
						(player_set_score, ":player_id_var_5", ":score_player_id_var_5"),
					(try_end),
					(call_script, "script_show_multiplayer_message", 5, ":var_5"),
					(try_for_range, ":localvariable", 0, ":max_players"),
						(player_is_active, ":localvariable"),
						(neq, ":multiplayer_my_player", ":localvariable"),
						(multiplayer_send_2_int_to_player, ":localvariable", 68, 5, ":var_5"),
					(try_end),
				(try_end),
				(try_begin),
					(neq, ":attached_scene_prop_var_5", -1),
					(try_begin),
						(eq, ":team_var_5", 0),
						(assign, ":value_4", ":scene_prop_instance_team_2_flag_scene_prop_0"),
						(assign, ":value_5", 65),
					(else_try),
						(assign, ":value_4", ":scene_prop_instance_team_1_flag_scene_prop_0"),
						(assign, ":value_5", 64),
					(try_end),
					(eq, ":attached_scene_prop_var_5", ":value_4"),
					(eq, ":team_var_5_flag_situation", 0),
					(lt, ":distance_between_positions_3_4", 100),
					(team_get_score, ":score_team_var_5", ":team_var_5"),
					(val_add, ":score_team_var_5", 1),
					(team_set_score, ":team_var_5", ":score_team_var_5"),
					(try_begin),
						(multiplayer_is_server),
						(neg|agent_is_non_player, ":var_5"),
						(agent_get_player_id, ":player_id_var_5", ":var_5"),
						(player_get_score, ":score_player_id_var_5", ":player_id_var_5"),
						(val_add, ":score_player_id_var_5", "$g_multiplayer_point_gained_from_capturing_flag"),
						(player_set_score, ":player_id_var_5", ":score_player_id_var_5"),
					(try_end),
					(call_script, "script_team_set_score", ":team_var_5", ":score_team_var_5"),
					(try_for_range, ":localvariable", 1, ":max_players"),
						(player_is_active, ":localvariable"),
						(neq, ":multiplayer_my_player", ":localvariable"),
						(multiplayer_send_2_int_to_player, ":localvariable", 72, ":team_var_5", ":score_team_var_5"),
					(try_end),
					(agent_set_attached_scene_prop, ":var_5", -1),
					(team_set_slot, ":value", slot_team_flag_situation, 0),
					(call_script, "script_set_attached_scene_prop", ":var_5", -1),
					(agent_set_horse_speed_factor, ":var_5", 100),
					(try_for_range, ":localvariable", 1, ":max_players"),
						(player_is_active, ":localvariable"),
						(neq, ":multiplayer_my_player", ":localvariable"),
						(multiplayer_send_2_int_to_player, ":localvariable", 70, ":var_5", -1),
					(try_end),
					(call_script, "script_set_team_flag_situation", ":value", 0),
					(try_for_range, ":localvariable", 1, ":max_players"),
						(player_is_active, ":localvariable"),
						(neq, ":multiplayer_my_player", ":localvariable"),
						(multiplayer_send_2_int_to_player, ":localvariable", 71, ":value", 0),
					(try_end),
					(entry_point_get_position, 5, ":value_5"),
					(prop_instance_set_position, ":value_4", 5),
					(call_script, "script_show_multiplayer_message", 4, ":var_5"),
					(try_for_range, ":localvariable", 0, ":max_players"),
						(player_is_active, ":localvariable"),
						(neq, ":multiplayer_my_player", ":localvariable"),
						(multiplayer_send_2_int_to_player, ":localvariable", 68, 4, ":var_5"),
					(try_end),
				(try_end),
				(eq, ":attached_scene_prop_var_5", -1),
				(agent_get_position, 3, ":var_5"),
				(agent_get_team, ":team_var_5", ":var_5"),
				(try_begin),
					(eq, ":team_var_5", 0),
					(get_distance_between_positions, ":distance_between_positions_3_4", 2, 3),
					(assign, ":value_4", ":scene_prop_instance_team_2_flag_scene_prop_0"),
				(else_try),
					(get_distance_between_positions, ":distance_between_positions_3_4", 1, 3),
					(assign, ":value_4", ":scene_prop_instance_team_1_flag_scene_prop_0"),
				(try_end),
				(try_begin),
					(le, ":distance_between_positions_3_4", 100),
					(neg|team_slot_eq, ":value", slot_team_flag_situation, 1),
					(agent_set_attached_scene_prop, ":var_5", ":value_4"),
					(agent_set_attached_scene_prop_x, ":var_5", 20),
					(agent_set_attached_scene_prop_z, ":var_5", 50),
					(try_begin),
						(eq, ":team_var_5", 0),
						(assign, "$flag_1_at_ground_timer", 0),
					(else_try),
						(eq, ":team_var_5", 1),
						(assign, "$flag_2_at_ground_timer", 0),
					(try_end),
					(team_set_slot, ":value", slot_team_flag_situation, 1),
					(call_script, "script_set_attached_scene_prop", ":var_5", ":value_4"),
					(agent_set_horse_speed_factor, ":var_5", 75),
					(try_for_range, ":localvariable", 1, ":max_players"),
						(player_is_active, ":localvariable"),
						(neq, ":multiplayer_my_player", ":localvariable"),
						(multiplayer_send_2_int_to_player, ":localvariable", 70, ":var_5", ":value_4"),
					(try_end),
					(call_script, "script_set_team_flag_situation", ":value", 1),
					(try_for_range, ":localvariable", 1, ":max_players"),
						(player_is_active, ":localvariable"),
						(neq, ":multiplayer_my_player", ":localvariable"),
						(multiplayer_send_2_int_to_player, ":localvariable", 71, ":value", 1),
					(try_end),
					(call_script, "script_show_multiplayer_message", 6, ":var_5"),
					(try_for_range, ":localvariable", 0, ":max_players"),
						(player_is_active, ":localvariable"),
						(neq, ":multiplayer_my_player", ":localvariable"),
						(multiplayer_send_2_int_to_player, ":localvariable", 68, 6, ":var_5"),
					(try_end),
				(try_end),
			(try_end)
		]),

		(20.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(call_script, "script_check_team_balance")
		]),

		(1.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(assign, ":value", 0),
			(try_begin),
				(this_or_next|eq, "$g_multiplayer_game_type", 2),
				(this_or_next|eq, "$g_multiplayer_game_type", 3),
				(eq, "$g_multiplayer_game_type", 6),
				(try_begin),
					(eq, "$g_round_ended", 1),
					(store_mission_timer_a, ":mission_timer_a"),
					(val_sub, ":mission_timer_a", "$g_round_finish_time"),
					(store_sub, ":value_2", "$g_multiplayer_respawn_period", 1),
					(ge, ":mission_timer_a", ":value_2"),
					(store_mission_timer_a, ":mission_timer_a_2"),
					(try_begin),
						(this_or_next|eq, "$g_multiplayer_game_type", 2),
						(eq, "$g_multiplayer_game_type", 3),
						(assign, ":value_3", 90),
					(else_try),
						(assign, ":value_3", 120),
					(try_end),
					(store_mul, ":value_4", "$g_multiplayer_game_max_minutes", 60),
					(store_sub, ":value_5", ":value_4", ":value_3"),
					(gt, ":mission_timer_a_2", ":value_5"),
					(assign, ":value", 1),
				(try_end),
				(eq, ":value", 1),
			(else_try),
				(neq, "$g_multiplayer_game_type", 2),
				(neq, "$g_multiplayer_game_type", 3),
				(neq, "$g_multiplayer_game_type", 6),
				(neq, "$g_multiplayer_game_type", 5),
				(store_mission_timer_a, ":mission_timer_a_2"),
				(store_mul, ":value_4", "$g_multiplayer_game_max_minutes", 60),
				(gt, ":mission_timer_a_2", ":value_4"),
				(assign, ":value", 1),
			(else_try),
				(team_get_score, ":score_0", 0),
				(team_get_score, ":score_1", 1),
				(try_begin),
					(neq, "$g_multiplayer_game_type", 5),
					(try_begin),
						(this_or_next|ge, ":score_0", "$g_multiplayer_game_max_points"),
						(ge, ":score_1", "$g_multiplayer_game_max_points"),
						(assign, ":value", 1),
					(try_end),
				(else_try),
					(assign, ":value_6", 0),
					(get_max_players, ":max_players"),
					(try_for_range, ":localvariable", 0, ":max_players"),
						(player_is_active, ":localvariable"),
						(player_get_agent_id, ":agent_id_localvariable", ":localvariable"),
						(ge, ":agent_id_localvariable", 0),
						(neg|agent_is_non_player, ":agent_id_localvariable"),
						(assign, ":value_6", 1),
						(assign, ":max_players", 0),
					(try_end),
					(eq, ":value_6", 1),
					(this_or_next|le, ":score_0", 0),
					(le, ":score_1", 0),
					(assign, ":value", 1),
				(try_end),
			(try_end),
			(try_begin),
				(eq, ":value", 1),
				(call_script, "script_game_multiplayer_get_game_type_mission_template", "$g_multiplayer_game_type"),
				(start_multiplayer_mission, reg0, "$g_multiplayer_selected_map", 0),
				(call_script, "script_game_set_multiplayer_mission_end"),
			(try_end)
		]),

		(-21.0, 0.0, 0.0,
		[],

		[
			(try_begin),
				(eq, "$g_multiplayer_mission_end_screen", 0),
				(assign, "$g_multiplayer_stats_chart_opened_manually", 1),
				(start_presentation, "prsnt_multiplayer_stats_chart"),
			(try_end)
		]),

		(0.0, 0.0, ti_once,
		[],

		[
			(start_presentation, "prsnt_multiplayer_welcome_message")
		]),

		(-24.0, 0.0, 0.0,
		[],

		[
			(start_presentation, "prsnt_multiplayer_team_score_display"),
			(start_presentation, "prsnt_multiplayer_flag_projection_display")
		]),

		(-23.0, 0.0, 0.0,
		[],

		[
			(neg|is_presentation_active, "prsnt_multiplayer_escape_menu"),
			(neg|is_presentation_active, "prsnt_multiplayer_stats_chart"),
			(eq, "$g_waiting_for_confirmation_to_terminate", 0),
			(start_presentation, "prsnt_multiplayer_escape_menu")
		])
	] + crouching_triggers),

	("multiplayer_sg", mtf_battle_mode, -1,
	"You lead your men to battle.",
	[(0, mtef_visitor_source|mtef_team_0|mtef_no_auto_reset, 0, aif_start_alarmed, 1, []),
	(1, mtef_visitor_source|mtef_team_0|mtef_no_auto_reset, 0, aif_start_alarmed, 1, []),
	(2, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(3, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(4, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(5, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(6, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(7, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(8, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(9, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(10, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(11, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(12, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(13, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(14, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(15, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(16, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(17, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(18, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(19, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(20, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(21, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(22, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(23, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(24, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(25, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(26, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(27, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(28, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(29, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(30, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(31, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(32, mtef_visitor_source|mtef_team_1|mtef_no_auto_reset, 0, aif_start_alarmed, 1, []),
	(33, mtef_visitor_source|mtef_team_1|mtef_no_auto_reset, 0, aif_start_alarmed, 1, []),
	(34, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(35, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(36, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(37, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(38, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(39, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(40, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(41, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(42, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(43, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(44, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(45, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(46, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(47, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(48, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(49, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(50, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(51, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(52, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(53, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(54, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(55, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(56, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(57, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(58, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(59, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(60, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(61, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(62, mtef_visitor_source, 0, aif_start_alarmed, 1, []),
	(63, mtef_visitor_source, 0, aif_start_alarmed, 1, [])],
	[
		
	

		
		
		
		(0.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(set_fixed_point_multiplier, 100),
			(try_for_range, ":number", 0, 2),
				(try_begin),
					(eq, ":number", 0),
					(assign, ":value", "spr_belfry_a"),
				(else_try),
					(assign, ":value", "spr_belfry_b"),
				(try_end),
				(scene_prop_get_num_instances, ":scene_prop_num_instances_value", ":value"),
				(try_for_range, ":localvariable", 0, ":scene_prop_num_instances_value"),
					(scene_prop_get_instance, ":scene_prop_instance_value_localvariable", ":value", ":localvariable"),
					(prop_instance_get_position, 1, ":scene_prop_instance_value_localvariable"),
					(prop_instance_get_starting_position, 11, ":scene_prop_instance_value_localvariable"),
					(store_add, ":value_2", 11, ":localvariable"),
					(try_begin),
						(eq, ":number", 1),
						(scene_prop_get_num_instances, ":scene_prop_num_instances_belfry_a", "spr_belfry_a"),
						(val_add, ":value_2", ":scene_prop_num_instances_belfry_a"),
					(try_end),
					(val_mul, ":value_2", 10),
					(store_add, ":value_3", ":value_2", 10),
					(try_for_range, ":value_4", ":value_2", ":value_3"),
						(entry_point_is_auto_generated, ":value_4"),
						(assign, ":value_3", ":value_4"),
					(try_end),
					(assign, ":var_10", ":value_3"),
					(val_sub, ":value_3", 1),
					(assign, reg0, ":value_3"),
					(neg|entry_point_is_auto_generated, ":value_3"),
					(try_begin),
						(get_sq_distance_between_positions, ":sq_distance_between_positions_1_11", 1, 11),
						(ge, ":sq_distance_between_positions_1_11", 4),
						(assign, ":value_5", -1),
						(assign, ":value_6", -1),
						(try_for_range, ":value_4", ":value_2", ":var_10"),
							(entry_point_get_position, 4, ":value_4"),
							(get_sq_distance_between_positions, ":sq_distance_between_positions_11_4", 11, 4),
							(lt, ":sq_distance_between_positions_11_4", ":sq_distance_between_positions_1_11"),
							(gt, ":sq_distance_between_positions_11_4", ":value_5"),
							(assign, ":value_5", ":sq_distance_between_positions_11_4"),
							(assign, ":value_6", ":value_4"),
						(try_end),
						(try_begin),
							(ge, ":value_6", 0),
							(entry_point_get_position, 5, ":value_6"),
						(else_try),
							(copy_position, 5, 11),
						(try_end),
						(get_distance_between_positions, ":distance_between_positions_1_5", 1, 5),
						(try_begin),
							(eq, ":number", 0),
							(scene_prop_get_instance, ":scene_prop_instance_belfry_platform_a_localvariable", "spr_belfry_platform_a", ":localvariable"),
							(scene_prop_get_instance, ":scene_prop_instance_belfry_platform_b_localvariable", "spr_belfry_platform_b", ":localvariable"),
						(else_try),
							(scene_prop_get_instance, ":scene_prop_instance_belfry_platform_a_localvariable", "spr_belfry_b_platform_a", ":localvariable"),
						(try_end),
						(store_mul, ":value_7", ":localvariable", 3),
						(try_begin),
							(eq, ":value", "spr_belfry_b"),
							(scene_prop_get_num_instances, ":scene_prop_num_instances_belfry_a", "spr_belfry_a"),
							(store_mul, ":value_8", ":scene_prop_num_instances_belfry_a", 3),
							(val_add, ":value_7", ":value_8"),
						(try_end),
						(scene_prop_get_instance, ":scene_prop_instance_belfry_wheel_value_7", "spr_belfry_wheel", ":value_7"),
						(val_add, ":value_7", 1),
						(scene_prop_get_instance, ":scene_prop_instance_belfry_wheel_value_7_2", "spr_belfry_wheel", ":value_7"),
						(val_add, ":value_7", 1),
						(scene_prop_get_instance, ":scene_prop_instance_belfry_wheel_value_7_3", "spr_belfry_wheel", ":value_7"),
						(init_position, 17),
						(position_move_y, 17, -225),
						(position_transform_position_to_parent, 18, 1, 17),
						(position_move_y, 17, -225),
						(position_transform_position_to_parent, 19, 1, 17),
						(assign, ":var_23", 0),
						(get_max_players, ":max_players"),
						(try_for_range, ":localvariable_2", 0, ":max_players"),
							(player_is_active, ":localvariable_2"),
							(player_get_agent_id, ":agent_id_localvariable_2", ":localvariable_2"),
							(ge, ":agent_id_localvariable_2", 0),
							(agent_get_team, ":team_agent_id_localvariable_2", ":agent_id_localvariable_2"),
							(eq, ":team_agent_id_localvariable_2", 1),
							(agent_get_horse, ":horse_agent_id_localvariable_2", ":agent_id_localvariable_2"),
							(eq, ":horse_agent_id_localvariable_2", -1),
							(agent_get_position, 2, ":agent_id_localvariable_2"),
							(get_sq_distance_between_positions_in_meters, ":sq_distance_between_positions_in_meters_18_2", 18, 2),
							(lt, ":sq_distance_between_positions_in_meters_18_2", 36),
							(neg|scene_prop_has_agent_on_it, ":scene_prop_instance_value_localvariable", ":agent_id_localvariable_2"),
							(neg|scene_prop_has_agent_on_it, ":scene_prop_instance_belfry_platform_a_localvariable", ":agent_id_localvariable_2"),
							(this_or_next|eq, ":number", 1),
							(neg|scene_prop_has_agent_on_it, ":scene_prop_instance_belfry_platform_b_localvariable", ":agent_id_localvariable_2"),
							(neg|scene_prop_has_agent_on_it, ":scene_prop_instance_belfry_wheel_value_7", ":agent_id_localvariable_2"),
							(neg|scene_prop_has_agent_on_it, ":scene_prop_instance_belfry_wheel_value_7_2", ":agent_id_localvariable_2"),
							(neg|scene_prop_has_agent_on_it, ":scene_prop_instance_belfry_wheel_value_7_3", ":agent_id_localvariable_2"),
							(neg|position_is_behind_position, 2, 19),
							(position_is_behind_position, 2, 1),
							(val_add, ":var_23", 1),
						(try_end),
						(val_min, ":var_23", 16),
						(try_begin),
							(scene_prop_get_slot, ":scene_prop_slot_scene_prop_instance_value_localvariable_scene_prop_number_of_agents_pushing", ":scene_prop_instance_value_localvariable", slot_scene_prop_number_of_agents_pushing),
							(scene_prop_get_slot, ":scene_prop_slot_scene_prop_instance_value_localvariable_scene_prop_next_entry_point_id", ":scene_prop_instance_value_localvariable", slot_scene_prop_next_entry_point_id),
							(this_or_next|neq, ":scene_prop_slot_scene_prop_instance_value_localvariable_scene_prop_number_of_agents_pushing", ":var_23"),
							(neq, ":scene_prop_slot_scene_prop_instance_value_localvariable_scene_prop_next_entry_point_id", ":value_6"),
							(try_begin),
								(eq, ":scene_prop_slot_scene_prop_instance_value_localvariable_scene_prop_next_entry_point_id", ":value_6"),
								(prop_instance_is_animating, ":value_9", ":scene_prop_instance_value_localvariable"),
								(eq, ":value_9", 1),
								(store_mul, ":value_10", "$g_last_number_of_agents_around_belfry", 100),
								(store_sqrt, ":value_10", ":value_10"),
								(val_min, ":value_10", 300),
								(assign, ":var_34", ":distance_between_positions_1_5"),
								(val_mul, ":var_34", ":value_10"),
								(val_div, ":var_34", 100),
								(val_mul, ":var_34", 4),
							(try_end),
							(try_begin),
								(ge, ":value_6", 0),
								(init_position, 9),
								(position_set_y, 9, -500),
								(position_set_x, 9, -300),
								(position_transform_position_to_parent, 10, 5, 9),
								(position_get_distance_to_terrain, ":position_distance_to_terrain_10", 10),
								(init_position, 9),
								(position_set_y, 9, -500),
								(position_set_x, 9, 300),
								(position_transform_position_to_parent, 10, 5, 9),
								(position_get_distance_to_terrain, ":position_distance_to_terrain_10_2", 10),
								(store_add, ":value_11", ":position_distance_to_terrain_10", ":position_distance_to_terrain_10_2"),
								(val_mul, ":value_11", 100),
								(store_div, ":value_12", ":value_11", 24),
								(init_position, 20),
								(position_rotate_x_floating, 20, ":value_12"),
								(position_transform_position_to_parent, 23, 5, 20),
								(init_position, 9),
								(position_set_x, 9, -300),
								(position_transform_position_to_parent, 10, 5, 9),
								(position_get_distance_to_terrain, ":position_distance_to_terrain_10_3", 10),
								(init_position, 9),
								(position_set_x, 9, 300),
								(position_transform_position_to_parent, 10, 5, 9),
								(position_get_distance_to_terrain, ":position_distance_to_terrain_10_4", 10),
								(store_sub, ":position_distance_to_terrain_10", ":position_distance_to_terrain_10_3", ":position_distance_to_terrain_10_4"),
								(init_position, 9),
								(position_set_x, 9, -300),
								(position_set_y, 9, -500),
								(position_transform_position_to_parent, 10, 5, 9),
								(position_get_distance_to_terrain, ":position_distance_to_terrain_10_3", 10),
								(init_position, 9),
								(position_set_x, 9, 300),
								(position_set_y, 9, -500),
								(position_transform_position_to_parent, 10, 5, 9),
								(position_get_distance_to_terrain, ":position_distance_to_terrain_10_4", 10),
								(store_sub, ":position_distance_to_terrain_10_2", ":position_distance_to_terrain_10_3", ":position_distance_to_terrain_10_4"),
								(store_add, ":value_11", ":position_distance_to_terrain_10", ":position_distance_to_terrain_10_2"),
								(val_mul, ":value_11", 100),
								(store_div, ":value_12", ":value_11", 24),
								(val_mul, ":value_12", -1),
								(init_position, 20),
								(position_rotate_y_floating, 20, ":value_12"),
								(position_transform_position_to_parent, 22, 23, 20),
							(else_try),
								(copy_position, 22, 5),
							(try_end),
							(try_begin),
								(ge, ":var_23", 1),
								(store_mul, ":value_10", ":var_23", 100),
								(store_sqrt, ":value_10", ":value_10"),
								(val_min, ":value_10", 300),
								(val_mul, ":distance_between_positions_1_5", 100),
								(val_mul, ":distance_between_positions_1_5", 3),
								(val_div, ":distance_between_positions_1_5", ":value_10"),
								(prop_instance_get_position, 6, ":scene_prop_instance_belfry_platform_a_localvariable"),
								(position_transform_position_to_local, 7, 1, 6),
								(position_transform_position_to_parent, 8, 22, 7),
								(prop_instance_animate_to_position, ":scene_prop_instance_belfry_platform_a_localvariable", 8, ":distance_between_positions_1_5"),
								(try_begin),
									(eq, ":number", 0),
									(prop_instance_get_position, 6, ":scene_prop_instance_belfry_platform_b_localvariable"),
									(position_transform_position_to_local, 7, 1, 6),
									(position_transform_position_to_parent, 8, 22, 7),
									(prop_instance_animate_to_position, ":scene_prop_instance_belfry_platform_b_localvariable", 8, ":distance_between_positions_1_5"),
								(try_end),
								(store_mul, ":value_13", ":distance_between_positions_1_5", -25),
								(assign, "$g_last_number_of_agents_around_belfry", ":var_23"),
								(prop_instance_get_position, 13, ":scene_prop_instance_belfry_wheel_value_7"),
								(prop_instance_get_position, 20, ":scene_prop_instance_value_localvariable"),
								(position_transform_position_to_local, 7, 20, 13),
								(position_transform_position_to_parent, 21, 22, 7),
								(prop_instance_rotate_to_position, ":scene_prop_instance_belfry_wheel_value_7", 21, ":distance_between_positions_1_5", ":value_13"),
								(prop_instance_get_position, 13, ":scene_prop_instance_belfry_wheel_value_7_2"),
								(prop_instance_get_position, 20, ":scene_prop_instance_value_localvariable"),
								(position_transform_position_to_local, 7, 20, 13),
								(position_transform_position_to_parent, 21, 22, 7),
								(prop_instance_rotate_to_position, ":scene_prop_instance_belfry_wheel_value_7_2", 21, ":distance_between_positions_1_5", ":value_13"),
								(prop_instance_get_position, 13, ":scene_prop_instance_belfry_wheel_value_7_3"),
								(prop_instance_get_position, 20, ":scene_prop_instance_value_localvariable"),
								(position_transform_position_to_local, 7, 20, 13),
								(position_transform_position_to_parent, 21, 22, 7),
								(prop_instance_rotate_to_position, ":scene_prop_instance_belfry_wheel_value_7_3", 21, ":distance_between_positions_1_5", ":value_13"),
								(prop_instance_animate_to_position, ":scene_prop_instance_value_localvariable", 22, ":distance_between_positions_1_5"),
							(else_try),
								(prop_instance_is_animating, ":value_9", ":scene_prop_instance_value_localvariable"),
								(eq, ":value_9", 1),
								(prop_instance_stop_animating, ":scene_prop_instance_belfry_platform_a_localvariable"),
								(try_begin),
									(eq, ":number", 0),
									(prop_instance_stop_animating, ":scene_prop_instance_belfry_platform_b_localvariable"),
								(try_end),
								(prop_instance_stop_animating, ":scene_prop_instance_belfry_wheel_value_7"),
								(prop_instance_stop_animating, ":scene_prop_instance_belfry_wheel_value_7_2"),
								(prop_instance_stop_animating, ":scene_prop_instance_belfry_wheel_value_7_3"),
								(prop_instance_stop_animating, ":scene_prop_instance_value_localvariable"),
							(try_end),
							(scene_prop_set_slot, ":scene_prop_instance_value_localvariable", slot_scene_prop_number_of_agents_pushing, ":var_23"),
							(scene_prop_set_slot, ":scene_prop_instance_value_localvariable", slot_scene_prop_next_entry_point_id, ":value_6"),
						(try_end),
					(else_try),
						(le, ":sq_distance_between_positions_1_11", 4),
						(scene_prop_slot_eq, ":scene_prop_instance_value_localvariable", slot_scene_prop_belfry_platform_moved, 0),
						(scene_prop_set_slot, ":scene_prop_instance_value_localvariable", slot_scene_prop_belfry_platform_moved, 1),
						(try_begin),
							(eq, ":number", 0),
							(scene_prop_get_instance, ":scene_prop_instance_belfry_platform_a_localvariable", "spr_belfry_platform_a", ":localvariable"),
						(else_try),
							(scene_prop_get_instance, ":scene_prop_instance_belfry_platform_a_localvariable", "spr_belfry_b_platform_a", ":localvariable"),
						(try_end),
						(prop_instance_get_starting_position, 0, ":scene_prop_instance_belfry_platform_a_localvariable"),
						(prop_instance_animate_to_position, ":scene_prop_instance_belfry_platform_a_localvariable", 0, 400),
					(try_end),
				(try_end),
			(try_end)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(call_script, "script_troop_agent_set_banner", "tableau_game_troop_label_banner", ":trigger_param_1", ":troop_id_trigger_param_1")
		]),

		(1.0, 5.0, 0.0,
		[
			(multiplayer_is_server),
			(eq, "$g_multiplayer_poll_running", 1),
			(eq, "$g_multiplayer_poll_ended", 0),
			(store_mission_timer_a, ":mission_timer_a"),
			(store_add, ":value", "$g_multiplayer_poll_no_count", "$g_multiplayer_poll_yes_count"),
			(this_or_next|eq, ":value", "$g_multiplayer_poll_num_sent"),
			(gt, ":mission_timer_a", "$g_multiplayer_poll_end_time"),
			(call_script, "script_cf_multiplayer_evaluate_poll")
		],

		[
			(assign, "$g_multiplayer_poll_running", 0),
			(try_begin),
				(this_or_next|eq, "$g_multiplayer_poll_to_show", 0),
				(eq, "$g_multiplayer_poll_to_show", 3),
				(call_script, "script_game_multiplayer_get_game_type_mission_template", "$g_multiplayer_game_type"),
				(start_multiplayer_mission, reg0, "$g_multiplayer_poll_value_to_show", 1),
				(call_script, "script_game_set_multiplayer_mission_end"),
			(try_end)
		]),

		(-15.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_multiplayer_server_player_joined_common", ":trigger_param_1"),
			(try_begin),
				(multiplayer_is_server),
				(this_or_next|player_is_active, ":trigger_param_1"),
				(eq, ":trigger_param_1", 0),
				(store_mission_timer_a, ":mission_timer_a"),
				(val_sub, ":mission_timer_a", "$g_round_start_time"),
				(try_begin),
					(lt, ":mission_timer_a", 25),
					(assign, ":value", 0),
				(else_try),
					(lt, ":mission_timer_a", 60),
					(assign, ":value", 1),
				(else_try),
					(lt, ":mission_timer_a", 105),
					(assign, ":value", 2),
				(else_try),
					(lt, ":mission_timer_a", 160),
					(assign, ":value", 3),
				(else_try),
					(assign, ":value", "$g_multiplayer_number_of_respawn_count"),
				(try_end),
				(player_set_slot, ":trigger_param_1", slot_player_spawn_count, ":value"),
				(multiplayer_send_int_to_player, ":trigger_param_1", 89, ":value"),
			(try_end)
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(assign, "$g_multiplayer_game_type", 6),
			(call_script, "script_multiplayer_server_before_mission_start_common"),
			(try_begin),
				(multiplayer_is_server),
				(try_for_range, ":number", 176, 186),
					(troop_set_slot, "trp_multiplayer_data", ":number", -1),
				(try_end),
				(assign, "$g_my_spawn_count", 0),
			(else_try),
				(assign, "$g_my_spawn_count", 0),
			(try_end),
			(assign, "$g_waiting_for_confirmation_to_terminate", 0),
			(assign, "$g_round_ended", 0),
			(try_begin),
				(multiplayer_is_server),
				(assign, "$g_round_start_time", 0),
			(try_end),
			(assign, "$my_team_at_start_of_round", -1),
			(assign, "$g_flag_is_not_ready", 0),
			(call_script, "script_multiplayer_initialize_belfry_wheel_rotations"),
			(call_script, "script_multiplayer_init_mission_variables"),
			(call_script, "script_multiplayer_remove_destroy_mod_targets"),
			(call_script, "script_multiplayer_remove_headquarters_flags")
		]),

		(-20.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_determine_team_flags", 0),
			(set_spawn_effector_scene_prop_kind, 0, -1),
			(set_spawn_effector_scene_prop_kind, 1, -1),
			(call_script, "script_initialize_all_scene_prop_slots"),
			(call_script, "script_multiplayer_move_moveable_objects_initial_positions"),
			(assign, "$g_number_of_flags", 0),
			(try_begin),
				(multiplayer_is_server),
				(assign, "$g_multiplayer_ready_for_spawning_agent", 1),
				(entry_point_get_position, 1, 66),
				(set_spawn_position, 1),
				(spawn_scene_prop, "spr_headquarters_pole_code_only", 0),
				(position_move_z, 1, 900),
				(set_spawn_position, 1),
				(spawn_scene_prop, "$team_1_flag_scene_prop", 0),
				(store_add, ":value", 146, "$g_number_of_flags"),
				(troop_set_slot, "trp_multiplayer_data", ":value", 1),
			(try_end),
			(val_add, "$g_number_of_flags", 1),
			(try_begin),
				(multiplayer_is_server),
				(scene_prop_get_num_instances, ":scene_prop_num_instances_belfry_a", "spr_belfry_a"),
				(try_for_range, ":localvariable", 0, ":scene_prop_num_instances_belfry_a"),
					(scene_prop_get_instance, ":scene_prop_instance_belfry_a_localvariable", "spr_belfry_a", ":localvariable"),
					(scene_prop_set_slot, ":scene_prop_instance_belfry_a_localvariable", slot_scene_prop_belfry_platform_moved, 1),
				(try_end),
				(scene_prop_get_num_instances, ":scene_prop_num_instances_belfry_a", "spr_belfry_b"),
				(try_for_range, ":localvariable", 0, ":scene_prop_num_instances_belfry_a"),
					(scene_prop_get_instance, ":scene_prop_instance_belfry_a_localvariable", "spr_belfry_b", ":localvariable"),
					(scene_prop_set_slot, ":scene_prop_instance_belfry_a_localvariable", slot_scene_prop_belfry_platform_moved, 1),
				(try_end),
				(call_script, "script_move_belfries_to_their_first_entry_point", "spr_belfry_a"),
				(call_script, "script_move_belfries_to_their_first_entry_point", "spr_belfry_b"),
				(scene_prop_get_num_instances, ":scene_prop_num_instances_belfry_a", "spr_belfry_a"),
				(try_for_range, ":localvariable", 0, ":scene_prop_num_instances_belfry_a"),
					(scene_prop_get_instance, ":scene_prop_instance_belfry_a_localvariable", "spr_belfry_a", ":localvariable"),
					(scene_prop_set_slot, ":scene_prop_instance_belfry_a_localvariable", slot_scene_prop_number_of_agents_pushing, 0),
					(scene_prop_set_slot, ":scene_prop_instance_belfry_a_localvariable", slot_scene_prop_next_entry_point_id, 0),
				(try_end),
				(scene_prop_get_num_instances, ":scene_prop_num_instances_belfry_a", "spr_belfry_b"),
				(try_for_range, ":localvariable", 0, ":scene_prop_num_instances_belfry_a"),
					(scene_prop_get_instance, ":scene_prop_instance_belfry_a_localvariable", "spr_belfry_b", ":localvariable"),
					(scene_prop_set_slot, ":scene_prop_instance_belfry_a_localvariable", slot_scene_prop_number_of_agents_pushing, 0),
					(scene_prop_set_slot, ":scene_prop_instance_belfry_a_localvariable", slot_scene_prop_next_entry_point_id, 0),
				(try_end),
				(scene_prop_get_num_instances, ":scene_prop_num_instances_belfry_a", "spr_belfry_a"),
				(try_for_range, ":localvariable", 0, ":scene_prop_num_instances_belfry_a"),
					(scene_prop_get_instance, ":scene_prop_instance_belfry_a_localvariable", "spr_belfry_a", ":localvariable"),
					(scene_prop_set_slot, ":scene_prop_instance_belfry_a_localvariable", slot_scene_prop_belfry_platform_moved, 0),
				(try_end),
				(scene_prop_get_num_instances, ":scene_prop_num_instances_belfry_a", "spr_belfry_b"),
				(try_for_range, ":localvariable", 0, ":scene_prop_num_instances_belfry_a"),
					(scene_prop_get_instance, ":scene_prop_instance_belfry_a_localvariable", "spr_belfry_b", ":localvariable"),
					(scene_prop_set_slot, ":scene_prop_instance_belfry_a_localvariable", slot_scene_prop_belfry_platform_moved, 0),
				(try_end),
			(try_end)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_multiplayer_server_on_agent_spawn_common", ":trigger_param_1"),
			(try_begin),
				(lt, "$my_team_at_start_of_round", 0),
				(multiplayer_get_my_player, ":multiplayer_my_player"),
				(ge, ":multiplayer_my_player", 0),
				(player_get_agent_id, ":agent_id_multiplayer_my_player", ":multiplayer_my_player"),
				(eq, ":agent_id_multiplayer_my_player", ":trigger_param_1"),
				(ge, ":agent_id_multiplayer_my_player", 0),
				(agent_get_team, "$my_team_at_start_of_round", ":agent_id_multiplayer_my_player"),
			(try_end),
			(try_begin),
				(neg|multiplayer_is_server),
				(try_begin),
					(eq, "$g_round_ended", 1),
					(assign, "$g_round_ended", 0),
					(assign, "$g_my_spawn_count", 0),
					(call_script, "script_initialize_all_scene_prop_slots"),
					(call_script, "script_multiplayer_initialize_belfry_wheel_rotations"),
					(call_script, "script_initialize_objects_clients"),
				(try_end),
			(try_end),
			(try_begin),
				(multiplayer_get_my_player, ":multiplayer_my_player"),
				(ge, ":multiplayer_my_player", 0),
				(player_get_agent_id, ":agent_id_multiplayer_my_player", ":multiplayer_my_player"),
				(eq, ":agent_id_multiplayer_my_player", ":trigger_param_1"),
				(val_add, "$g_my_spawn_count", 1),
				(try_begin),
					(ge, "$g_my_spawn_count", "$g_multiplayer_number_of_respawn_count"),
					(gt, "$g_multiplayer_number_of_respawn_count", 0),
					(multiplayer_get_my_player, ":multiplayer_my_player"),
					(player_get_team_no, ":team_no_multiplayer_my_player", ":multiplayer_my_player"),
					(eq, ":team_no_multiplayer_my_player", 0),
					(assign, "$g_my_spawn_count", 999),
				(try_end),
			(try_end)
		]),

		(-26.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(store_trigger_param_2, ":trigger_param_2"),
			(call_script, "script_multiplayer_server_on_agent_killed_or_wounded_common", ":trigger_param_1", ":trigger_param_2"),
			(try_begin),
				(lt, "$my_team_at_start_of_round", 0),
				(multiplayer_get_my_player, ":multiplayer_my_player"),
				(ge, ":multiplayer_my_player", 0),
				(player_get_agent_id, ":agent_id_multiplayer_my_player", ":multiplayer_my_player"),
				(ge, ":agent_id_multiplayer_my_player", 0),
				(agent_get_team, "$my_team_at_start_of_round", ":agent_id_multiplayer_my_player"),
			(try_end),
			(try_begin),
				(multiplayer_is_server),
				(agent_is_human, ":trigger_param_1"),
				(neg|agent_is_non_player, ":trigger_param_1"),
				(agent_get_player_id, ":player_id_trigger_param_1", ":trigger_param_1"),
				(player_set_slot, ":player_id_trigger_param_1", slot_player_spawned_this_round, 0),
			(try_end)
		]),

		(-16.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_multiplayer_event_mission_end"),
			(assign, "$g_multiplayer_stats_chart_opened_manually", 0),
			(start_presentation, "prsnt_multiplayer_stats_chart")
		]),

		(0.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(eq, "$g_round_ended", 0),
			(try_for_range, ":globalvariable", 0, "$g_number_of_flags"),
				(store_add, ":value", 156, ":globalvariable"),
				(troop_get_slot, ":multiplayer_data_value", "trp_multiplayer_data", ":value"),
				(store_div, ":value_2", ":multiplayer_data_value", 100),
				(store_mod, ":value_3", ":multiplayer_data_value", 100),
				(assign, ":var_6", 0),
				(assign, ":var_7", 0),
				(scene_prop_get_instance, ":scene_prop_instance_headquarters_pole_code_only_globalvariable", "spr_headquarters_pole_code_only", ":globalvariable"),
				(prop_instance_get_position, 0, ":scene_prop_instance_headquarters_pole_code_only_globalvariable"),
				(get_max_players, ":max_players"),
				(try_for_range, ":localvariable", 0, ":max_players"),
					(player_is_active, ":localvariable"),
					(player_get_agent_id, ":agent_id_localvariable", ":localvariable"),
					(ge, ":agent_id_localvariable", 0),
					(agent_is_alive, ":agent_id_localvariable"),
					(agent_get_team, ":team_agent_id_localvariable", ":agent_id_localvariable"),
					(agent_get_position, 1, ":agent_id_localvariable"),
					(get_sq_distance_between_positions, ":sq_distance_between_positions_0_1", 0, 1),
					(get_sq_distance_between_position_heights, ":sq_distance_between_position_heights_0_1", 0, 1),
					(val_add, ":sq_distance_between_positions_0_1", ":sq_distance_between_position_heights_0_1"),
					(lt, ":sq_distance_between_positions_0_1", 1600),
					(try_begin),
						(eq, ":team_agent_id_localvariable", 0),
						(val_add, ":var_6", 1),
					(else_try),
						(eq, ":team_agent_id_localvariable", 1),
						(val_add, ":var_7", 1),
					(try_end),
				(try_end),
				(try_begin),
					(this_or_next|neq, ":value_2", ":var_6"),
					(neq, ":value_3", ":var_7"),
					(store_add, ":value_4", 176, ":globalvariable"),
					(troop_get_slot, ":multiplayer_data_value_4", "trp_multiplayer_data", ":value_4"),
					(store_mod, ":value_5", ":multiplayer_data_value_4", 100),
					(store_div, ":value_6", ":multiplayer_data_value_4", 100),
					(try_begin),
						(eq, ":value_3", 0),
						(gt, ":var_7", 0),
						(eq, ":var_6", 0),
						(assign, ":var_19", 2),
						(store_mul, ":value_7", ":var_19", 100),
						(troop_set_slot, "trp_multiplayer_data", ":value_4", ":value_7"),
						(this_or_next|neq, ":value_6", ":var_19"),
						(ge, ":value_5", 25),
						(store_mul, ":value_8", ":var_19", 100),
						(val_add, ":value_8", ":globalvariable"),
					(try_end),
					(try_begin),
						(store_mul, ":multiplayer_data_value", ":var_6", 100),
						(val_add, ":multiplayer_data_value", ":var_7"),
						(troop_set_slot, "trp_multiplayer_data", ":value", ":multiplayer_data_value"),
						(get_max_players, ":max_players"),
						(call_script, "script_set_num_agents_around_flag", ":globalvariable", ":multiplayer_data_value"),
						(try_for_range, ":localvariable", 1, ":max_players"),
							(player_is_active, ":localvariable"),
							(multiplayer_send_2_int_to_player, ":localvariable", 73, ":globalvariable", ":multiplayer_data_value"),
						(try_end),
					(try_end),
				(try_end),
			(try_end),
			(try_for_range, ":globalvariable", 0, "$g_number_of_flags"),
				(eq, "$g_round_ended", 0),
				(eq, "$g_flag_is_not_ready", 0),
				(scene_prop_get_instance, ":scene_prop_instance_headquarters_pole_code_only_globalvariable", "spr_headquarters_pole_code_only", ":globalvariable"),
				(prop_instance_get_position, 0, ":scene_prop_instance_headquarters_pole_code_only_globalvariable"),
				(try_begin),
					(scene_prop_get_instance, ":scene_prop_instance_team_1_flag_scene_prop_globalvariable", "$team_1_flag_scene_prop", ":globalvariable"),
					(prop_instance_get_position, 1, ":scene_prop_instance_team_1_flag_scene_prop_globalvariable"),
					(try_begin),
						(get_sq_distance_between_positions, ":sq_distance_between_positions_0_1", 0, 1),
						(lt, ":sq_distance_between_positions_0_1", 400),
						(prop_instance_is_animating, ":var_23", ":scene_prop_instance_team_1_flag_scene_prop_globalvariable"),
						(eq, ":var_23", 1),
						(assign, "$g_winner_team", 1),
						(prop_instance_stop_animating, ":scene_prop_instance_team_1_flag_scene_prop_globalvariable"),
						(get_max_players, ":max_players"),
						(call_script, "script_draw_this_round", "$g_winner_team"),
						(try_for_range, ":localvariable", 1, ":max_players"),
							(player_is_active, ":localvariable"),
							(multiplayer_send_int_to_player, ":localvariable", 69, "$g_winner_team"),
						(try_end),
						(assign, "$g_flag_is_not_ready", 1),
					(try_end),
				(try_end),
			(try_end)
		]),

		(0.0, 0.0, 0.0,
		[],

		[
			(assign, ":var_1", "$g_multiplayer_num_bots_team_1"),
			(assign, ":var_2", "$g_multiplayer_num_bots_team_2"),
			(get_max_players, ":max_players"),
			(try_for_range, ":localvariable", 0, ":max_players"),
				(player_is_active, ":localvariable"),
				(player_get_team_no, ":team_no_localvariable", ":localvariable"),
				(try_begin),
					(eq, ":team_no_localvariable", 0),
					(val_add, ":var_1", 1),
				(else_try),
					(eq, ":team_no_localvariable", 1),
					(val_add, ":var_2", 1),
				(try_end),
			(try_end),
			(try_begin),
				(this_or_next|eq, ":var_1", 0),
				(eq, ":var_2", 0),
				(store_mission_timer_a, ":mission_timer_a"),
				(val_sub, ":mission_timer_a", "$g_round_start_time"),
				(le, ":mission_timer_a", 2),
				(store_mission_timer_a, "$g_round_start_time"),
			(try_end)
		]),

		(1.0, 0.0, 0.0,
		[
			(multiplayer_is_server),
			(eq, "$g_round_ended", 0),
			(eq, "$g_flag_is_not_ready", 0),
			(store_mission_timer_a, ":mission_timer_a"),
			(store_sub, ":value", ":mission_timer_a", "$g_round_start_time"),
			(ge, ":value", "$g_multiplayer_round_max_seconds")
		],

		[
			(assign, ":var_1", 0),
			(store_add, ":value", 156, ":var_1"),
			(troop_get_slot, ":multiplayer_data_value", "trp_multiplayer_data", ":value"),
			(store_mod, ":value_2", ":multiplayer_data_value", 100),
			(try_begin),
				(eq, ":value_2", 0),
				(store_mission_timer_a, "$g_round_finish_time"),
				(assign, "$g_round_ended", 1),
				(assign, "$g_flag_is_not_ready", 1),
				(assign, "$g_winner_team", 0),
				(get_max_players, ":max_players"),
				(call_script, "script_draw_this_round", "$g_winner_team"),
				(try_for_range, ":localvariable", 1, ":max_players"),
					(player_is_active, ":localvariable"),
					(multiplayer_send_int_to_player, ":localvariable", 69, "$g_winner_team"),
				(try_end),
			(try_end)
		]),

		(1.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(try_for_range, ":globalvariable", 0, "$g_number_of_flags"),
				(store_add, ":value", 176, ":globalvariable"),
				(troop_get_slot, ":multiplayer_data_value", "trp_multiplayer_data", ":value"),
				(store_mod, ":value_2", ":multiplayer_data_value", 100),
				(try_begin),
					(ge, ":multiplayer_data_value", 100),
					(lt, ":value_2", 25),
					(val_add, ":multiplayer_data_value", 1),
					(troop_set_slot, "trp_multiplayer_data", ":value", ":multiplayer_data_value"),
				(try_end),
			(try_end)
		]),

		(10.0, 0.0, 0.0,
		[
			(multiplayer_is_server)
		],

		[
			(assign, ":var_1", 0),
			(assign, ":var_2", 0),
			(get_max_players, ":max_players"),
			(try_for_range, ":localvariable", 0, ":max_players"),
				(player_is_active, ":localvariable"),
				(player_get_team_no, ":team_no_localvariable", ":localvariable"),
				(try_begin),
					(eq, ":team_no_localvariable", 0),
					(val_add, ":var_1", 1),
				(else_try),
					(eq, ":team_no_localvariable", 1),
					(val_add, ":var_2", 1),
				(try_end),
			(try_end),
			(store_sub, ":value", ":var_1", ":var_2"),
			(assign, ":value_2", 0),
			(try_begin),
				(try_begin),
					(store_mul, ":value_3", "$g_multiplayer_auto_team_balance_limit", -1),
					(le, ":value", ":value_3"),
					(store_div, ":value_2", ":value", -2),
				(else_try),
					(ge, ":value", "$g_multiplayer_auto_team_balance_limit"),
					(store_div, ":value_2", ":value", 2),
				(try_end),
			(try_end),
			(try_begin),
				(gt, ":value_2", 0),
				(try_begin),
					(eq, "$g_team_balance_next_round", 0),
					(assign, "$g_team_balance_next_round", 1),
					(call_script, "script_show_multiplayer_message", 3, 0),
					(get_max_players, ":max_players"),
					(try_for_range, ":localvariable_2", 1, ":max_players"),
						(player_is_active, ":localvariable_2"),
						(multiplayer_send_int_to_player, ":localvariable_2", 68, 3),
					(try_end),
					(call_script, "script_warn_player_about_auto_team_balance"),
				(try_end),
			(try_end)
		]),

		(1.0, 0.0, 3.0,
		[
			(multiplayer_is_server),
			(eq, "$g_round_ended", 1),
			(store_mission_timer_a, ":mission_timer_a"),
			(val_sub, ":mission_timer_a", "$g_round_finish_time"),
			(ge, ":mission_timer_a", "$g_multiplayer_respawn_period")
		],

		[
			(assign, ":var_1", 0),
			(assign, ":var_2", 0),
			(get_max_players, ":max_players"),
			(try_for_range, ":localvariable", 0, ":max_players"),
				(player_is_active, ":localvariable"),
				(player_get_team_no, ":team_no_localvariable", ":localvariable"),
				(try_begin),
					(eq, ":team_no_localvariable", 0),
					(val_add, ":var_1", 1),
				(else_try),
					(eq, ":team_no_localvariable", 1),
					(val_add, ":var_2", 1),
				(try_end),
			(try_end),
			(store_sub, ":value", ":var_1", ":var_2"),
			(assign, ":value_2", 0),
			(try_begin),
				(try_begin),
					(store_mul, ":value_3", "$g_multiplayer_auto_team_balance_limit", -1),
					(le, ":value", ":value_3"),
					(store_div, ":value_2", ":value", -2),
					(assign, ":value_4", 1),
					(assign, ":value_5", 0),
				(else_try),
					(ge, ":value", "$g_multiplayer_auto_team_balance_limit"),
					(store_div, ":value_2", ":value", 2),
					(assign, ":value_4", 0),
					(assign, ":value_5", 1),
				(try_end),
			(try_end),
			(try_begin),
				(gt, ":value_2", 0),
				(try_begin),
					(try_for_range, ":unused", 0, ":value_2"),
						(assign, ":value_6", 0),
						(assign, ":value_7", -1),
						(get_max_players, ":max_players"),
						(try_for_range, ":localvariable_2", 0, ":max_players"),
							(player_is_active, ":localvariable_2"),
							(player_get_team_no, ":team_no_localvariable", ":localvariable_2"),
							(eq, ":team_no_localvariable", ":value_4"),
							(player_get_slot, ":localvariable_2_join_time", ":localvariable_2", slot_player_join_time),
							(try_begin),
								(gt, ":localvariable_2_join_time", ":value_6"),
								(assign, ":value_6", ":localvariable_2_join_time"),
								(assign, ":value_7", ":localvariable_2"),
							(try_end),
						(try_end),
						(try_begin),
							(ge, ":value_7", 0),
							(try_begin),
								(player_get_agent_id, ":agent_id_value_7", ":value_7"),
								(ge, ":agent_id_value_7", 0),
								(agent_is_alive, ":agent_id_value_7"),
								(player_get_kill_count, ":kill_count_value_7", ":value_7"),
								(val_add, ":kill_count_value_7", 1),
								(player_set_kill_count, ":value_7", ":kill_count_value_7"),
								(player_get_death_count, ":death_count_value_7", ":value_7"),
								(val_sub, ":death_count_value_7", 1),
								(player_set_death_count, ":value_7", ":death_count_value_7"),
								(player_get_score, ":score_value_7", ":value_7"),
								(val_add, ":score_value_7", 1),
								(player_set_score, ":value_7", ":score_value_7"),
								(try_for_range, ":localvariable_2", 1, ":max_players"),
									(player_is_active, ":localvariable_2"),
									(multiplayer_send_4_int_to_player, ":localvariable_2", 86, ":value_7", ":score_value_7", ":kill_count_value_7", ":death_count_value_7"),
								(try_end),
								(player_get_value_of_original_items, ":value_of_original_items_value_7", ":value_7"),
								(player_get_gold, ":gold_value_7", ":value_7"),
								(val_add, ":gold_value_7", ":value_of_original_items_value_7"),
								(player_set_gold, ":value_7", ":gold_value_7", 15000),
							(try_end),
							(player_set_troop_id, ":value_7", -1),
							(player_set_team_no, ":value_7", ":value_5"),
							(multiplayer_send_message_to_player, ":value_7", 79),
						(try_end),
					(try_end),
					(call_script, "script_show_multiplayer_message", 2, 0),
					(multiplayer_get_my_player, ":multiplayer_my_player"),
					(get_max_players, ":max_players"),
					(try_for_range, ":localvariable_2", 0, ":max_players"),
						(player_is_active, ":localvariable_2"),
						(neq, ":multiplayer_my_player", ":localvariable_2"),
						(multiplayer_send_int_to_player, ":localvariable_2", 68, 2),
					(try_end),
					(assign, "$g_team_balance_next_round", 0),
				(try_end),
			(try_end),
			(assign, "$g_team_balance_next_round", 0),
			(get_max_players, ":max_players"),
			(try_for_range, ":localvariable_2", 0, ":max_players"),
				(player_is_active, ":localvariable_2"),
				(player_set_slot, ":localvariable_2", slot_player_spawned_this_round, 0),
				(player_set_slot, ":localvariable_2", slot_player_spawned_at_siege_round, 0),
				(player_get_agent_id, ":agent_id_localvariable_2", ":localvariable_2"),
				(ge, ":agent_id_localvariable_2", 0),
				(agent_is_alive, ":agent_id_localvariable_2"),
				(player_save_picked_up_items_for_next_spawn, ":localvariable_2"),
				(player_get_value_of_original_items, ":value_of_original_items_value_7", ":localvariable_2"),
				(player_set_slot, ":localvariable_2", slot_player_last_rounds_used_item_earnings, ":value_of_original_items_value_7"),
			(try_end),
			(assign, ":var_24", 500),
			(val_mul, ":var_24", "$g_multiplayer_round_earnings_multiplier"),
			(val_div, ":var_24", 100),
			(get_max_players, ":max_players"),
			(try_for_range, ":localvariable_2", 0, ":max_players"),
				(player_is_active, ":localvariable_2"),
				(player_get_gold, ":gold_value_7", ":localvariable_2"),
				(player_get_team_no, ":team_no_localvariable", ":localvariable_2"),
				(try_begin),
					(this_or_next|eq, ":team_no_localvariable", 0),
					(eq, ":team_no_localvariable", 1),
					(val_add, ":gold_value_7", ":var_24"),
				(try_end),
				(try_begin),
					(player_get_slot, ":value_of_original_items_value_7", ":localvariable_2", slot_player_last_rounds_used_item_earnings),
					(store_add, ":value_8", ":gold_value_7", ":value_of_original_items_value_7"),
					(store_mul, ":value_9", "$g_multiplayer_initial_gold_multiplier", 10),
					(lt, ":value_8", ":value_9"),
					(store_sub, ":value_10", ":value_9", ":value_8"),
					(val_add, ":gold_value_7", ":value_10"),
				(try_end),
				(player_set_gold, ":localvariable_2", ":gold_value_7", 15000),
			(try_end),
			(assign, "$my_team_at_start_of_round", -1),
			(multiplayer_clear_scene),
			(assign, "$g_my_spawn_count", 0),
			(get_max_players, ":max_players"),
			(try_for_range, ":localvariable_2", 0, ":max_players"),
				(player_is_active, ":localvariable_2"),
				(player_set_slot, ":localvariable_2", slot_player_spawn_count, 0),
			(try_end),
			(call_script, "script_initialize_objects"),
			(call_script, "script_multiplayer_initialize_belfry_wheel_rotations"),
			(call_script, "script_multiplayer_close_gate_if_it_is_open"),
			(call_script, "script_multiplayer_move_moveable_objects_initial_positions"),
			(call_script, "script_move_belfries_to_their_first_entry_point", "spr_belfry_a"),
			(call_script, "script_move_belfries_to_their_first_entry_point", "spr_belfry_b"),
			(scene_prop_get_num_instances, ":scene_prop_num_instances_belfry_a", "spr_belfry_a"),
			(try_for_range, ":localvariable_3", 0, ":scene_prop_num_instances_belfry_a"),
				(scene_prop_get_instance, ":scene_prop_instance_belfry_a_localvariable_3", "spr_belfry_a", ":localvariable_3"),
				(scene_prop_set_slot, ":scene_prop_instance_belfry_a_localvariable_3", slot_scene_prop_number_of_agents_pushing, 0),
				(scene_prop_set_slot, ":scene_prop_instance_belfry_a_localvariable_3", slot_scene_prop_next_entry_point_id, 0),
			(try_end),
			(scene_prop_get_num_instances, ":scene_prop_num_instances_belfry_a", "spr_belfry_a"),
			(try_for_range, ":localvariable_3", 0, ":scene_prop_num_instances_belfry_a"),
				(scene_prop_get_instance, ":scene_prop_instance_belfry_a_localvariable_3", "spr_belfry_a", ":localvariable_3"),
				(scene_prop_set_slot, ":scene_prop_instance_belfry_a_localvariable_3", slot_scene_prop_belfry_platform_moved, 0),
			(try_end),
			(scene_prop_get_num_instances, ":scene_prop_num_instances_belfry_a", "spr_belfry_b"),
			(try_for_range, ":localvariable_3", 0, ":scene_prop_num_instances_belfry_a"),
				(scene_prop_get_instance, ":scene_prop_instance_belfry_a_localvariable_3", "spr_belfry_b", ":localvariable_3"),
				(scene_prop_set_slot, ":scene_prop_instance_belfry_a_localvariable_3", slot_scene_prop_number_of_agents_pushing, 0),
				(scene_prop_set_slot, ":scene_prop_instance_belfry_a_localvariable_3", slot_scene_prop_next_entry_point_id, 0),
			(try_end),
			(scene_prop_get_num_instances, ":scene_prop_num_instances_belfry_a", "spr_belfry_b"),
			(try_for_range, ":localvariable_3", 0, ":scene_prop_num_instances_belfry_a"),
				(scene_prop_get_instance, ":scene_prop_instance_belfry_a_localvariable_3", "spr_belfry_b", ":localvariable_3"),
				(scene_prop_set_slot, ":scene_prop_instance_belfry_a_localvariable_3", slot_scene_prop_belfry_platform_moved, 0),
			(try_end),
			(try_for_range, ":globalvariable", 0, "$g_number_of_flags"),
				(scene_prop_get_instance, ":scene_prop_instance_headquarters_pole_code_only_globalvariable", "spr_headquarters_pole_code_only", ":globalvariable"),
				(prop_instance_get_position, 1, ":scene_prop_instance_headquarters_pole_code_only_globalvariable"),
				(position_move_z, 1, 900),
				(scene_prop_get_instance, ":scene_prop_instance_team_1_flag_scene_prop_globalvariable", "$team_1_flag_scene_prop", ":globalvariable"),
				(prop_instance_stop_animating, ":scene_prop_instance_team_1_flag_scene_prop_globalvariable"),
				(prop_instance_set_position, ":scene_prop_instance_team_1_flag_scene_prop_globalvariable", 1),
			(try_end),
			(assign, "$g_round_ended", 0),
			(store_mission_timer_a, "$g_round_start_time"),
			(call_script, "script_initialize_all_scene_prop_slots"),
			(get_max_players, ":max_players"),
			(try_for_range, ":localvariable_2", 0, ":max_players"),
				(player_is_active, ":localvariable_2"),
				(multiplayer_send_int_to_player, ":localvariable_2", 78, -9999),
			(try_end),
			(assign, "$g_flag_is_not_ready", 0)
		]),

		(1.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(get_max_players, ":max_players"),
			(try_for_range, ":localvariable", 0, ":max_players"),
				(player_is_active, ":localvariable"),
				(neg|player_is_busy_with_menus, ":localvariable"),
				(player_slot_eq, ":localvariable", slot_player_spawned_this_round, 0),
				(player_get_team_no, ":team_no_localvariable", ":localvariable"),
				(lt, ":team_no_localvariable", 2),
				(player_get_troop_id, ":troop_id_localvariable", ":localvariable"),
				(ge, ":troop_id_localvariable", 0),
				(player_get_agent_id, ":agent_id_localvariable", ":localvariable"),
				(assign, ":value", 0),
				(assign, ":var_7", 0),
				(assign, ":var_8", 0),
				(try_begin),
					(assign, ":var_18", 0),
					(get_max_players, ":max_players"),
					(try_for_range, ":localvariable_2", 0, ":max_players"),
						(player_is_active, ":localvariable_2"),
						(player_get_team_no, ":team_no_localvariable_2", ":localvariable_2"),
						(try_begin),
							(eq, ":team_no_localvariable_2", 0),
							(val_add, ":var_7", 1),
						(else_try),
							(eq, ":team_no_localvariable_2", 1),
							(val_add, ":var_8", 1),
						(try_end),
						(val_add, ":var_18", 1),
					(try_end),
					(store_mission_timer_a, ":mission_timer_a"),
					(val_sub, ":mission_timer_a", "$g_round_start_time"),
					(eq, "$g_round_ended", 0),
					(try_begin),
						(lt, ":agent_id_localvariable", 0),
						(try_begin),
							(eq, ":team_no_localvariable", 0),
							(player_get_slot, ":localvariable_last_team_select_time", ":localvariable", slot_player_last_team_select_time),
							(store_mission_timer_a, ":mission_timer_a_2"),
							(store_sub, ":value_2", ":mission_timer_a_2", ":localvariable_last_team_select_time"),
							(assign, ":value_3", "$g_multiplayer_respawn_period"),
							(val_add, ":value_3", 27),
							(lt, ":value_2", ":value_3"),
							(store_sub, ":mission_timer_a", ":mission_timer_a_2", "$g_round_start_time"),
							(ge, ":mission_timer_a", 30),
							(gt, ":var_18", 2),
							(store_mul, ":value_4", ":var_7", ":var_8"),
							(neq, ":value_4", 0),
							(assign, ":value", 0),
						(else_try),
							(assign, ":value", 1),
						(try_end),
					(else_try),
						(agent_get_time_elapsed_since_removed, ":value_2", ":agent_id_localvariable"),
						(assign, ":value_3", "$g_multiplayer_respawn_period"),
						(try_begin),
							(eq, ":team_no_localvariable", 0),
							(val_add, ":value_3", 27),
						(try_end),
						(this_or_next|gt, ":value_2", ":value_3"),
						(player_slot_eq, ":localvariable", slot_player_spawned_at_siege_round, 0),
						(assign, ":value", 1),
					(try_end),
				(try_end),
				(player_get_slot, ":localvariable_spawn_count", ":localvariable", slot_player_spawn_count),
				(try_begin),
					(gt, "$g_multiplayer_number_of_respawn_count", 0),
					(try_begin),
						(eq, ":value", 1),
						(eq, ":team_no_localvariable", 0),
						(ge, ":localvariable_spawn_count", "$g_multiplayer_number_of_respawn_count"),
						(assign, ":value", 0),
					(else_try),
						(eq, ":value", 1),
						(eq, ":team_no_localvariable", 1),
						(ge, ":localvariable_spawn_count", 999),
						(assign, ":value", 0),
					(try_end),
				(try_end),
				(eq, ":value", 1),
				(call_script, "script_multiplayer_buy_agent_equipment", ":localvariable"),
				(player_get_slot, ":localvariable_spawn_count", ":localvariable", slot_player_spawn_count),
				(val_add, ":localvariable_spawn_count", 1),
				(player_set_slot, ":localvariable", slot_player_spawn_count, ":localvariable_spawn_count"),
				(try_begin),
					(ge, ":localvariable_spawn_count", "$g_multiplayer_number_of_respawn_count"),
					(gt, "$g_multiplayer_number_of_respawn_count", 0),
					(eq, ":team_no_localvariable", 0),
					(assign, ":localvariable_spawn_count", 999),
					(player_set_slot, ":localvariable", slot_player_spawn_count, ":localvariable_spawn_count"),
				(try_end),
				(assign, ":value_5", 0),
				(player_get_item_id, ":item_id_localvariable_8", ":localvariable", 8),
				(try_begin),
					(this_or_next|is_between, ":item_id_localvariable_8", "itm_sumpter_horse", "itm_arrows"),
					(this_or_next|eq, ":item_id_localvariable_8", "itm_warhorse_sarranid"),
					(eq, ":item_id_localvariable_8", "itm_warhorse_steppe"),
					(assign, ":value_5", 1),
				(try_end),
				(try_begin),
					(lt, ":mission_timer_a", 20),
					(try_begin),
						(eq, ":team_no_localvariable", 0),
						(call_script, "script_multiplayer_find_spawn_point", ":team_no_localvariable", 1, ":value_5"),
						(assign, ":value_6", reg0),
					(else_try),
						(eq, ":team_no_localvariable", 1),
						(assign, ":value_6", 32),
					(try_end),
				(else_try),
					(call_script, "script_multiplayer_find_spawn_point", ":team_no_localvariable", 0, ":value_5"),
					(assign, ":value_6", reg0),
				(try_end),
				(player_spawn_new_agent, ":localvariable", ":value_6"),
				(player_set_slot, ":localvariable", slot_player_spawned_this_round, 1),
				(player_set_slot, ":localvariable", slot_player_spawned_at_siege_round, 1),
			(try_end)
		]),

		(1.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(store_mission_timer_a, ":mission_timer_a"),
			(ge, ":mission_timer_a", 2),
			(assign, ":var_2", 0),
			(assign, ":var_3", 0),
			(try_for_agents, ":var_4"),
				(agent_is_non_player, ":var_4"),
				(agent_is_human, ":var_4"),
				(assign, ":value", 0),
				(try_begin),
					(agent_is_alive, ":var_4"),
					(assign, ":value", 1),
				(else_try),
					(agent_get_time_elapsed_since_removed, ":time_elapsed_since_removed_var_4", ":var_4"),
					(le, ":time_elapsed_since_removed_var_4", "$g_multiplayer_respawn_period"),
					(assign, ":value", 1),
				(try_end),
				(eq, ":value", 1),
				(agent_get_team, ":team_var_4", ":var_4"),
				(try_begin),
					(eq, ":team_var_4", 0),
					(val_add, ":var_2", 1),
				(else_try),
					(eq, ":team_var_4", 1),
					(val_add, ":var_3", 1),
				(try_end),
			(try_end),
			(store_sub, "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_team_1", ":var_2"),
			(store_sub, "$g_multiplayer_num_bots_required_team_2", "$g_multiplayer_num_bots_team_2", ":var_3"),
			(val_max, "$g_multiplayer_num_bots_required_team_1", 0),
			(val_max, "$g_multiplayer_num_bots_required_team_2", 0)
		]),

		(0.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(eq, "$g_multiplayer_ready_for_spawning_agent", 1),
			(store_add, ":value", "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_required_team_2"),
			(try_begin),
				(gt, ":value", 0),
				(try_begin),
					(this_or_next|eq, "$g_multiplayer_game_type", 2),
					(this_or_next|eq, "$g_multiplayer_game_type", 3),
					(eq, "$g_multiplayer_game_type", 6),
					(team_get_score, ":score_0", 0),
					(team_get_score, ":score_1", 1),
					(store_add, ":value_2", ":score_0", ":score_1"),
					(eq, ":value_2", 0),
					(store_mission_timer_a, ":mission_timer_a"),
					(val_sub, ":mission_timer_a", "$g_round_start_time"),
					(lt, ":mission_timer_a", 20),
					(assign, ":value_3", 0),
				(else_try),
					(assign, ":value_3", 1),
				(try_end),
				(eq, ":value_3", 1),
				(store_random_in_range, ":random_in_range_0_value", 0, ":value"),
				(val_sub, ":random_in_range_0_value", "$g_multiplayer_num_bots_required_team_1"),
				(try_begin),
					(lt, ":random_in_range_0_value", 0),
					(assign, ":value_4", 0),
				(else_try),
					(assign, ":value_4", 1),
				(try_end),
				(try_begin),
					(this_or_next|eq, "$g_multiplayer_game_type", 2),
					(eq, "$g_multiplayer_game_type", 3),
					(store_mission_timer_a, ":mission_timer_a"),
					(val_sub, ":mission_timer_a", "$g_round_start_time"),
					(try_begin),
						(le, ":mission_timer_a", 20),
						(assign, ":value_5", 0),
					(else_try),
						(assign, ":value_5", 1),
					(try_end),
				(else_try),
					(assign, ":value_5", 1),
				(try_end),
				(call_script, "script_multiplayer_find_bot_troop_and_group_for_spawn", ":value_4", ":value_5"),
				(assign, ":var_10", reg0),
				(assign, ":var_11", reg1),
				(team_get_faction, ":faction_value_4", ":value_4"),
				(assign, ":var_13", 0),
				(try_for_range, ":troop", "trp_swadian_crossbowman_multiplayer_ai", "trp_swadian_crossbowman_multiplayer"),
					(store_faction_of_troop, ":faction_of_troop_troop", ":troop"),
					(eq, ":faction_of_troop_troop", ":faction_value_4"),
					(val_add, ":var_13", 1),
				(try_end),
				(assign, ":var_16", 0),
				(get_max_players, ":max_players"),
				(try_for_range, ":localvariable", 0, ":max_players"),
					(player_is_active, ":localvariable"),
					(player_get_team_no, ":team_no_localvariable", ":localvariable"),
					(eq, ":value_4", ":team_no_localvariable"),
					(assign, ":value_6", 0),
					(store_add, ":value_7", 35, ":var_13"),
					(try_for_range, ":localvariable_2", 35, ":value_7"),
						(player_slot_ge, ":localvariable", ":localvariable_2", 1),
						(assign, ":value_6", 1),
						(assign, ":value_7", 0),
					(try_end),
					(ge, ":value_6", 1),
					(val_add, ":var_16", 1),
				(try_end),
				(try_begin),
					(this_or_next|ge, ":var_11", 0),
					(eq, ":var_16", 0),
					(troop_get_inventory_slot, ":inventory_slot_var_10_8", ":var_10", 8),
					(try_begin),
						(ge, ":inventory_slot_var_10_8", 0),
						(assign, ":value_8", 1),
					(else_try),
						(assign, ":value_8", 0),
					(try_end),
					(try_begin),
						(eq, "$g_multiplayer_game_type", 6),
						(store_mission_timer_a, ":mission_timer_a"),
						(val_sub, ":mission_timer_a", "$g_round_start_time"),
						(try_begin),
							(lt, ":mission_timer_a", 20),
							(try_begin),
								(eq, ":value_4", 0),
								(call_script, "script_multiplayer_find_spawn_point", ":value_4", 1, ":value_8"),
							(else_try),
								(assign, reg0, 32),
							(try_end),
						(else_try),
							(call_script, "script_multiplayer_find_spawn_point", ":value_4", 0, ":value_8"),
						(try_end),
					(else_try),
						(this_or_next|eq, "$g_multiplayer_game_type", 2),
						(eq, "$g_multiplayer_game_type", 3),
						(try_begin),
							(eq, ":value_4", 0),
							(assign, reg0, 0),
						(else_try),
							(assign, reg0, 32),
						(try_end),
					(else_try),
						(call_script, "script_multiplayer_find_spawn_point", ":value_4", 0, ":value_8"),
					(try_end),
					(store_current_scene, ":current_scene"),
					(modify_visitors_at_site, ":current_scene"),
					(add_visitors_to_current_scene, reg0, ":var_10", 1, ":value_4", ":var_11"),
					(assign, "$g_multiplayer_ready_for_spawning_agent", 0),
					(try_begin),
						(eq, ":value_4", 0),
						(val_sub, "$g_multiplayer_num_bots_required_team_1", 1),
					(else_try),
						(eq, ":value_4", 1),
						(val_sub, "$g_multiplayer_num_bots_required_team_2", 1),
					(try_end),
				(try_end),
			(try_end)
		]),

		(3.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(try_for_agents, ":var_1"),
				(agent_is_non_player, ":var_1"),
				(agent_is_human, ":var_1"),
				(agent_is_alive, ":var_1"),
				(agent_get_group, ":group_var_1", ":var_1"),
				(try_begin),
					(neg|player_is_active, ":group_var_1"),
					(call_script, "script_multiplayer_change_leader_of_bot", ":var_1"),
				(else_try),
					(player_get_team_no, ":team_no_group_var_1", ":group_var_1"),
					(agent_get_team, ":team_var_1", ":var_1"),
					(neq, ":team_no_group_var_1", ":team_var_1"),
					(call_script, "script_multiplayer_change_leader_of_bot", ":var_1"),
				(try_end),
			(try_end)
		]),

		(1.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(assign, ":value", 0),
			(try_begin),
				(this_or_next|eq, "$g_multiplayer_game_type", 2),
				(this_or_next|eq, "$g_multiplayer_game_type", 3),
				(eq, "$g_multiplayer_game_type", 6),
				(try_begin),
					(eq, "$g_round_ended", 1),
					(store_mission_timer_a, ":mission_timer_a"),
					(val_sub, ":mission_timer_a", "$g_round_finish_time"),
					(store_sub, ":value_2", "$g_multiplayer_respawn_period", 1),
					(ge, ":mission_timer_a", ":value_2"),
					(store_mission_timer_a, ":mission_timer_a_2"),
					(try_begin),
						(this_or_next|eq, "$g_multiplayer_game_type", 2),
						(eq, "$g_multiplayer_game_type", 3),
						(assign, ":value_3", 90),
					(else_try),
						(assign, ":value_3", 120),
					(try_end),
					(store_mul, ":value_4", "$g_multiplayer_game_max_minutes", 60),
					(store_sub, ":value_5", ":value_4", ":value_3"),
					(gt, ":mission_timer_a_2", ":value_5"),
					(assign, ":value", 1),
				(try_end),
				(eq, ":value", 1),
			(else_try),
				(neq, "$g_multiplayer_game_type", 2),
				(neq, "$g_multiplayer_game_type", 3),
				(neq, "$g_multiplayer_game_type", 6),
				(neq, "$g_multiplayer_game_type", 5),
				(store_mission_timer_a, ":mission_timer_a_2"),
				(store_mul, ":value_4", "$g_multiplayer_game_max_minutes", 60),
				(gt, ":mission_timer_a_2", ":value_4"),
				(assign, ":value", 1),
			(else_try),
				(team_get_score, ":score_0", 0),
				(team_get_score, ":score_1", 1),
				(try_begin),
					(neq, "$g_multiplayer_game_type", 5),
					(try_begin),
						(this_or_next|ge, ":score_0", "$g_multiplayer_game_max_points"),
						(ge, ":score_1", "$g_multiplayer_game_max_points"),
						(assign, ":value", 1),
					(try_end),
				(else_try),
					(assign, ":value_6", 0),
					(get_max_players, ":max_players"),
					(try_for_range, ":localvariable", 0, ":max_players"),
						(player_is_active, ":localvariable"),
						(player_get_agent_id, ":agent_id_localvariable", ":localvariable"),
						(ge, ":agent_id_localvariable", 0),
						(neg|agent_is_non_player, ":agent_id_localvariable"),
						(assign, ":value_6", 1),
						(assign, ":max_players", 0),
					(try_end),
					(eq, ":value_6", 1),
					(this_or_next|le, ":score_0", 0),
					(le, ":score_1", 0),
					(assign, ":value", 1),
				(try_end),
			(try_end),
			(try_begin),
				(eq, ":value", 1),
				(call_script, "script_game_multiplayer_get_game_type_mission_template", "$g_multiplayer_game_type"),
				(start_multiplayer_mission, reg0, "$g_multiplayer_selected_map", 0),
				(call_script, "script_game_set_multiplayer_mission_end"),
			(try_end)
		]),

		(-21.0, 0.0, 0.0,
		[],

		[
			(try_begin),
				(eq, "$g_multiplayer_mission_end_screen", 0),
				(assign, "$g_multiplayer_stats_chart_opened_manually", 1),
				(start_presentation, "prsnt_multiplayer_stats_chart"),
			(try_end)
		]),

		(0.0, 0.0, ti_once,
		[],

		[
			(start_presentation, "prsnt_multiplayer_welcome_message")
		]),

		(-24.0, 0.0, 0.0,
		[],

		[
			(start_presentation, "prsnt_multiplayer_round_time_counter"),
			(start_presentation, "prsnt_multiplayer_team_score_display")
		]),

		(-23.0, 0.0, 0.0,
		[],

		[
			(neg|is_presentation_active, "prsnt_multiplayer_escape_menu"),
			(neg|is_presentation_active, "prsnt_multiplayer_stats_chart"),
			(eq, "$g_waiting_for_confirmation_to_terminate", 0),
			(start_presentation, "prsnt_multiplayer_escape_menu")
		])
	] + crouching_triggers),

	("multiplayer_bt", mtf_battle_mode, -1,
	"You lead your men to battle.",
	[(0, mtef_visitor_source|mtef_team_0|mtef_no_auto_reset, 0, aif_start_alarmed, 1, []),
	(1, mtef_visitor_source|mtef_team_0|mtef_no_auto_reset, 0, aif_start_alarmed, 1, []),
	(2, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(3, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(4, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(5, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(6, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(7, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(8, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(9, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(10, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(11, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(12, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(13, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(14, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(15, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(16, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(17, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(18, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(19, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(20, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(21, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(22, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(23, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(24, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(25, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(26, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(27, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(28, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(29, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(30, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(31, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(32, mtef_visitor_source|mtef_team_0|mtef_no_auto_reset, 0, aif_start_alarmed, 1, []),
	(33, mtef_visitor_source|mtef_team_0|mtef_no_auto_reset, 0, aif_start_alarmed, 1, []),
	(34, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(35, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(36, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(37, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(38, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(39, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(40, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(41, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(42, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(43, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(44, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(45, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(46, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(47, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(48, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(49, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(50, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(51, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(52, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(53, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(54, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(55, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(56, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(57, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(58, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(59, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(60, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(61, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(62, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(63, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, [])],
	[
		
	

		
		
		
		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(call_script, "script_troop_agent_set_banner", "tableau_game_troop_label_banner", ":trigger_param_1", ":troop_id_trigger_param_1")
		]),

		(1.0, 5.0, 0.0,
		[
			(multiplayer_is_server),
			(eq, "$g_multiplayer_poll_running", 1),
			(eq, "$g_multiplayer_poll_ended", 0),
			(store_mission_timer_a, ":mission_timer_a"),
			(store_add, ":value", "$g_multiplayer_poll_no_count", "$g_multiplayer_poll_yes_count"),
			(this_or_next|eq, ":value", "$g_multiplayer_poll_num_sent"),
			(gt, ":mission_timer_a", "$g_multiplayer_poll_end_time"),
			(call_script, "script_cf_multiplayer_evaluate_poll")
		],

		[
			(assign, "$g_multiplayer_poll_running", 0),
			(try_begin),
				(this_or_next|eq, "$g_multiplayer_poll_to_show", 0),
				(eq, "$g_multiplayer_poll_to_show", 3),
				(call_script, "script_game_multiplayer_get_game_type_mission_template", "$g_multiplayer_game_type"),
				(start_multiplayer_mission, reg0, "$g_multiplayer_poll_value_to_show", 1),
				(call_script, "script_game_set_multiplayer_mission_end"),
			(try_end)
		]),

		(-15.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_multiplayer_server_player_joined_common", ":trigger_param_1")
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(assign, "$g_multiplayer_game_type", 2),
			(call_script, "script_multiplayer_server_before_mission_start_common"),
			(assign, "$g_waiting_for_confirmation_to_terminate", 0),
			(assign, "$g_round_ended", 0),
			(assign, "$g_battle_death_mode_started", 0),
			(assign, "$g_reduced_waiting_seconds", 0),
			(try_begin),
				(multiplayer_is_server),
				(assign, "$server_mission_timer_while_player_joined", 0),
				(assign, "$g_round_start_time", 0),
			(try_end),
			(assign, "$my_team_at_start_of_round", -1),
			(call_script, "script_multiplayer_init_mission_variables"),
			(call_script, "script_multiplayer_remove_destroy_mod_targets"),
			(call_script, "script_multiplayer_remove_headquarters_flags")
		]),

		(-20.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_determine_team_flags", 0),
			(call_script, "script_determine_team_flags", 1),
			(set_spawn_effector_scene_prop_kind, 0, -1),
			(set_spawn_effector_scene_prop_kind, 1, -1),
			(try_begin),
				(multiplayer_is_server),
				(assign, "$g_multiplayer_ready_for_spawning_agent", 1),
				(entry_point_get_position, 0, 67),
				(position_set_z_to_ground_level, 0),
				(position_move_z, 0, -2000),
				(position_move_x, 0, 100),
				(set_spawn_position, 0),
				(spawn_scene_prop, "spr_headquarters_pole_code_only", 0),
				(position_move_x, 0, -200),
				(set_spawn_position, 0),
				(spawn_scene_prop, "spr_headquarters_pole_code_only", 0),
				(scene_prop_get_instance, ":scene_prop_instance_headquarters_pole_code_only_0", "spr_headquarters_pole_code_only", 0),
				(prop_instance_get_position, 0, ":scene_prop_instance_headquarters_pole_code_only_0"),
				(spawn_scene_prop, "$team_1_flag_scene_prop", 0),
				(position_move_z, 0, 100),
				(prop_instance_set_position, reg0, 0),
				(scene_prop_get_instance, ":scene_prop_instance_headquarters_pole_code_only_1", "spr_headquarters_pole_code_only", 1),
				(prop_instance_get_position, 0, ":scene_prop_instance_headquarters_pole_code_only_1"),
				(spawn_scene_prop, "$team_2_flag_scene_prop", 0),
				(position_move_z, 0, 100),
				(prop_instance_set_position, reg0, 0),
				(assign, "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_team_1"),
				(assign, "$g_multiplayer_num_bots_required_team_2", "$g_multiplayer_num_bots_team_2"),
			(try_end),
			(call_script, "script_initialize_all_scene_prop_slots"),
			(call_script, "script_multiplayer_initialize_belfry_wheel_rotations"),
			(call_script, "script_multiplayer_move_moveable_objects_initial_positions")
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_multiplayer_server_on_agent_spawn_common", ":trigger_param_1"),
			(try_begin),
				(lt, "$my_team_at_start_of_round", 0),
				(multiplayer_get_my_player, ":multiplayer_my_player"),
				(ge, ":multiplayer_my_player", 0),
				(player_get_agent_id, ":agent_id_multiplayer_my_player", ":multiplayer_my_player"),
				(eq, ":agent_id_multiplayer_my_player", ":trigger_param_1"),
				(ge, ":agent_id_multiplayer_my_player", 0),
				(agent_get_team, "$my_team_at_start_of_round", ":agent_id_multiplayer_my_player"),
			(try_end),
			(call_script, "script_calculate_new_death_waiting_time_at_death_mod"),
			(try_begin),
				(neg|multiplayer_is_server),
				(try_begin),
					(eq, "$g_round_ended", 1),
					(assign, "$g_round_ended", 0),
					(call_script, "script_initialize_all_scene_prop_slots"),
					(call_script, "script_multiplayer_initialize_belfry_wheel_rotations"),
					(call_script, "script_initialize_objects_clients"),
					(try_begin),
						(eq, "$g_team_balance_next_round", 1),
						(assign, "$g_team_balance_next_round", 0),
					(try_end),
				(try_end),
			(try_end)
		]),

		(-26.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(store_trigger_param_2, ":trigger_param_2"),
			(call_script, "script_multiplayer_server_on_agent_killed_or_wounded_common", ":trigger_param_1", ":trigger_param_2"),
			(try_begin),
				(lt, "$my_team_at_start_of_round", 0),
				(multiplayer_get_my_player, ":multiplayer_my_player"),
				(ge, ":multiplayer_my_player", 0),
				(player_get_agent_id, ":agent_id_multiplayer_my_player", ":multiplayer_my_player"),
				(ge, ":agent_id_multiplayer_my_player", 0),
				(agent_get_team, "$my_team_at_start_of_round", ":agent_id_multiplayer_my_player"),
			(try_end),
			(try_begin),
				(agent_is_human, ":trigger_param_1"),
				(assign, ":var_5", 0),
				(assign, ":var_6", 0),
				(try_for_agents, ":var_7"),
					(agent_is_human, ":var_7"),
					(try_begin),
						(agent_is_alive, ":var_7"),
						(agent_get_team, ":team_var_7", ":var_7"),
						(try_begin),
							(eq, ":team_var_7", 0),
							(val_add, ":var_5", 1),
						(else_try),
							(eq, ":team_var_7", 1),
							(val_add, ":var_6", 1),
						(try_end),
					(try_end),
				(try_end),
				(try_begin),
					(eq, "$g_round_ended", 0),
					(try_begin),
						(this_or_next|eq, ":var_5", 0),
						(eq, ":var_6", 0),
						(assign, "$g_winner_team", -1),
						(assign, reg0, "$g_multiplayer_respawn_period"),
						(try_begin),
							(eq, ":var_5", 0),
							(try_begin),
								(neq, ":var_6", 0),
								(team_get_score, ":score_1", 1),
								(val_add, ":score_1", 1),
								(team_set_score, 1, ":score_1"),
								(assign, "$g_winner_team", 1),
							(try_end),
							(call_script, "script_show_multiplayer_message", 12, "$g_winner_team"),
							(call_script, "script_check_achievement_last_man_standing", "$g_winner_team"),
						(else_try),
							(try_begin),
								(neq, ":var_5", 0),
								(team_get_score, ":score_0", 0),
								(val_add, ":score_0", 1),
								(team_set_score, 0, ":score_0"),
								(assign, "$g_winner_team", 0),
							(try_end),
							(call_script, "script_show_multiplayer_message", 12, "$g_winner_team"),
							(call_script, "script_check_achievement_last_man_standing", "$g_winner_team"),
						(try_end),
						(store_mission_timer_a, "$g_round_finish_time"),
						(assign, "$g_round_ended", 1),
					(try_end),
				(try_end),
			(try_end),
			(try_begin),
				(multiplayer_is_server),
				(agent_is_human, ":trigger_param_1"),
				(neg|agent_is_non_player, ":trigger_param_1"),
				(ge, ":trigger_param_1", 0),
				(agent_get_player_id, ":player_id_trigger_param_1", ":trigger_param_1"),
				(ge, ":player_id_trigger_param_1", 0),
				(set_fixed_point_multiplier, 100),
				(agent_get_player_id, ":player_id_trigger_param_1", ":trigger_param_1"),
				(agent_get_position, 0, ":trigger_param_1"),
				(position_get_x, ":position_x_0", 0),
				(position_get_y, ":position_y_0", 0),
				(position_get_z, ":position_z_0", 0),
				(player_set_slot, ":player_id_trigger_param_1", slot_player_death_pos_x, ":position_x_0"),
				(player_set_slot, ":player_id_trigger_param_1", slot_player_death_pos_y, ":position_y_0"),
				(player_set_slot, ":player_id_trigger_param_1", slot_player_death_pos_z, ":position_z_0"),
			(try_end)
		]),

		(-16.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_multiplayer_event_mission_end"),
			(assign, "$g_multiplayer_stats_chart_opened_manually", 0),
			(start_presentation, "prsnt_multiplayer_stats_chart")
		]),

		(1.0, 0.0, 0.0,
		[
			(multiplayer_is_server),
			(eq, "$g_round_ended", 0),
			(store_mission_timer_a, ":mission_timer_a"),
			(store_sub, ":value", ":mission_timer_a", "$g_round_start_time"),
			(ge, ":value", "$g_multiplayer_round_max_seconds"),
			(assign, ":value_2", 0),
			(try_begin),
				(eq, "$g_battle_death_mode_started", 2),
				(scene_prop_get_instance, ":scene_prop_instance_headquarters_pole_code_only_0", "spr_headquarters_pole_code_only", 0),
				(scene_prop_get_instance, ":scene_prop_instance_headquarters_pole_code_only_1", "spr_headquarters_pole_code_only", 1),
				(scene_prop_get_instance, ":scene_prop_instance_team_1_flag_scene_prop_0", "$team_1_flag_scene_prop", 0),
				(scene_prop_get_instance, ":scene_prop_instance_team_2_flag_scene_prop_0", "$team_2_flag_scene_prop", 0),
				(prop_instance_get_position, 1, ":scene_prop_instance_headquarters_pole_code_only_0"),
				(prop_instance_get_position, 2, ":scene_prop_instance_headquarters_pole_code_only_1"),
				(prop_instance_get_position, 3, ":scene_prop_instance_team_1_flag_scene_prop_0"),
				(prop_instance_get_position, 4, ":scene_prop_instance_team_2_flag_scene_prop_0"),
				(get_distance_between_positions, ":distance_between_positions_1_3", 1, 3),
				(get_distance_between_positions, ":distance_between_positions_2_4", 2, 4),
				(store_add, ":value_3", ":distance_between_positions_1_3", 50),
				(store_add, ":value_4", ":distance_between_positions_2_4", 50),
				(try_begin),
					(le, ":distance_between_positions_1_3", ":value_4"),
					(prop_instance_is_animating, ":value_5", ":scene_prop_instance_team_1_flag_scene_prop_0"),
					(eq, ":value_5", 1),
					(prop_instance_get_animation_target_position, 5, ":scene_prop_instance_team_1_flag_scene_prop_0"),
					(position_get_z, ":position_z_5", 5),
					(position_get_z, ":position_z_3", 3),
					(ge, ":position_z_5", ":position_z_3"),
					(assign, ":value_2", 1),
				(try_end),
				(try_begin),
					(le, ":distance_between_positions_2_4", ":value_3"),
					(prop_instance_is_animating, ":value_5", ":scene_prop_instance_team_2_flag_scene_prop_0"),
					(eq, ":value_5", 1),
					(prop_instance_get_animation_target_position, 5, ":scene_prop_instance_team_2_flag_scene_prop_0"),
					(position_get_z, ":position_z_5", 5),
					(position_get_z, ":position_z_4", 4),
					(ge, ":position_z_5", ":position_z_4"),
					(assign, ":value_2", 1),
				(try_end),
			(try_end),
			(eq, ":value_2", 0)
		],

		[
			(store_mission_timer_a, "$g_round_finish_time"),
			(assign, "$g_round_ended", 1),
			(assign, "$g_winner_team", -1),
			(try_begin),
				(eq, "$g_battle_death_mode_started", 2),
				(scene_prop_get_instance, ":scene_prop_instance_headquarters_pole_code_only_0", "spr_headquarters_pole_code_only", 0),
				(scene_prop_get_instance, ":scene_prop_instance_headquarters_pole_code_only_1", "spr_headquarters_pole_code_only", 1),
				(scene_prop_get_instance, ":scene_prop_instance_team_1_flag_scene_prop_0", "$team_1_flag_scene_prop", 0),
				(scene_prop_get_instance, ":scene_prop_instance_team_2_flag_scene_prop_0", "$team_2_flag_scene_prop", 0),
				(prop_instance_get_position, 1, ":scene_prop_instance_headquarters_pole_code_only_0"),
				(prop_instance_get_position, 2, ":scene_prop_instance_headquarters_pole_code_only_1"),
				(prop_instance_get_position, 3, ":scene_prop_instance_team_1_flag_scene_prop_0"),
				(prop_instance_get_position, 4, ":scene_prop_instance_team_2_flag_scene_prop_0"),
				(get_distance_between_positions, ":distance_between_positions_1_3", 1, 3),
				(get_distance_between_positions, ":distance_between_positions_2_4", 2, 4),
				(try_begin),
					(ge, ":distance_between_positions_1_3", ":distance_between_positions_2_4"),
					(store_sub, ":value", ":distance_between_positions_1_3", ":distance_between_positions_2_4"),
					(ge, ":value", 50),
					(assign, "$g_winner_team", 0),
				(else_try),
					(store_sub, ":value", ":distance_between_positions_2_4", ":distance_between_positions_1_3"),
					(ge, ":value", 50),
					(assign, "$g_winner_team", 1),
				(try_end),
			(try_end),
			(multiplayer_get_my_player, ":multiplayer_my_player"),
			(call_script, "script_draw_this_round", "$g_winner_team"),
			(get_max_players, ":max_players"),
			(try_for_range, ":localvariable", 1, ":max_players"),
				(player_is_active, ":localvariable"),
				(neq, ":localvariable", ":multiplayer_my_player"),
				(multiplayer_send_int_to_player, ":localvariable", 69, "$g_winner_team"),
			(try_end)
		]),

		(10.0, 0.0, 0.0,
		[
			(multiplayer_is_server)
		],

		[
			(assign, ":var_1", 0),
			(assign, ":var_2", 0),
			(get_max_players, ":max_players"),
			(try_for_range, ":localvariable", 0, ":max_players"),
				(player_is_active, ":localvariable"),
				(player_get_team_no, ":team_no_localvariable", ":localvariable"),
				(try_begin),
					(eq, ":team_no_localvariable", 0),
					(val_add, ":var_1", 1),
				(else_try),
					(eq, ":team_no_localvariable", 1),
					(val_add, ":var_2", 1),
				(try_end),
			(try_end),
			(store_sub, ":value", ":var_1", ":var_2"),
			(assign, ":value_2", 0),
			(try_begin),
				(try_begin),
					(store_mul, ":value_3", "$g_multiplayer_auto_team_balance_limit", -1),
					(le, ":value", ":value_3"),
					(store_div, ":value_2", ":value", -2),
				(else_try),
					(ge, ":value", "$g_multiplayer_auto_team_balance_limit"),
					(store_div, ":value_2", ":value", 2),
				(try_end),
			(try_end),
			(try_begin),
				(gt, ":value_2", 0),
				(try_begin),
					(eq, "$g_team_balance_next_round", 0),
					(assign, "$g_team_balance_next_round", 1),
					(call_script, "script_show_multiplayer_message", 3, 0),
					(get_max_players, ":max_players"),
					(try_for_range, ":localvariable_2", 1, ":max_players"),
						(player_is_active, ":localvariable_2"),
						(multiplayer_send_int_to_player, ":localvariable_2", 68, 3),
					(try_end),
					(call_script, "script_warn_player_about_auto_team_balance"),
				(try_end),
			(try_end)
		]),

		(1.0, 0.0, 0.0,
		[
			(multiplayer_is_server),
			(eq, "$g_round_ended", 0),
			(eq, "$g_battle_death_mode_started", 0),
			(store_mission_timer_a, ":mission_timer_a"),
			(val_sub, ":mission_timer_a", "$g_round_start_time"),
			(store_div, "$g_multiplayer_round_max_seconds_div_2", "$g_multiplayer_round_max_seconds", 2),
			(ge, ":mission_timer_a", "$g_multiplayer_round_max_seconds_div_2")
		],

		[
			(call_script, "script_calculate_new_death_waiting_time_at_death_mod"),
			(assign, "$g_battle_death_mode_started", 1)
		]),

		(1.0, 0.0, 0.0,
		[
			(multiplayer_is_server),
			(eq, "$g_round_ended", 0),
			(eq, "$g_battle_death_mode_started", 1),
			(store_mission_timer_a, ":mission_timer_a"),
			(val_sub, ":mission_timer_a", "$g_death_mode_part_1_start_time"),
			(store_add, ":value", "$g_battle_waiting_seconds", "$g_reduced_waiting_seconds"),
			(ge, ":mission_timer_a", ":value"),
			(store_mission_timer_a, ":mission_timer_a_2"),
			(store_sub, ":value_2", ":mission_timer_a_2", "$g_round_start_time"),
			(store_sub, ":value_3", "$g_multiplayer_round_max_seconds", 15),
			(lt, ":value_2", ":value_3")
		],

		[
			(assign, "$g_battle_death_mode_started", 2),
			(call_script, "script_start_death_mode"),
			(get_max_players, ":max_players"),
			(try_for_range, ":localvariable", 1, ":max_players"),
				(player_is_active, ":localvariable"),
				(multiplayer_send_int_to_player, ":localvariable", 80),
			(try_end),
			(scene_prop_get_instance, ":scene_prop_instance_headquarters_pole_code_only_0", "spr_headquarters_pole_code_only", 0),
			(scene_prop_get_instance, ":scene_prop_instance_headquarters_pole_code_only_1", "spr_headquarters_pole_code_only", 1),
			(scene_prop_get_instance, ":scene_prop_instance_team_1_flag_scene_prop_0", "$team_1_flag_scene_prop", 0),
			(scene_prop_get_instance, ":scene_prop_instance_team_2_flag_scene_prop_0", "$team_2_flag_scene_prop", 0),
			(store_random_in_range, "$g_random_entry_point", 0, 3),
			(val_add, "$g_random_entry_point", 67),
			(entry_point_get_position, 0, "$g_random_entry_point"),
			(position_set_z_to_ground_level, 0),
			(position_move_x, 0, 100),
			(prop_instance_set_position, ":scene_prop_instance_headquarters_pole_code_only_0", 0),
			(position_move_x, 0, -200),
			(prop_instance_set_position, ":scene_prop_instance_headquarters_pole_code_only_1", 0),
			(prop_instance_get_position, 0, ":scene_prop_instance_headquarters_pole_code_only_0"),
			(position_move_z, 0, 100),
			(prop_instance_set_position, ":scene_prop_instance_team_1_flag_scene_prop_0", 0),
			(prop_instance_get_position, 0, ":scene_prop_instance_headquarters_pole_code_only_1"),
			(position_move_z, 0, 100),
			(prop_instance_set_position, ":scene_prop_instance_team_2_flag_scene_prop_0", 0),
			(start_presentation, "prsnt_multiplayer_flag_projection_display_bt")
		]),

		(3.0, 0.0, 0.0,
		[
			(multiplayer_is_server),
			(eq, "$g_round_ended", 0),
			(eq, "$g_battle_death_mode_started", 1),
			(store_mission_timer_a, ":mission_timer_a"),
			(val_sub, ":mission_timer_a", "$g_death_mode_part_1_start_time"),
			(store_add, ":value", "$g_battle_waiting_seconds", "$g_reduced_waiting_seconds"),
			(val_sub, ":value", 20),
			(ge, ":mission_timer_a", ":value")
		],

		[
			(assign, ":value", 0),
			(try_for_agents, ":var_2"),
				(eq, ":value", 0),
				(agent_is_human, ":var_2"),
				(try_for_agents, ":var_3"),
					(agent_is_human, ":var_3"),
					(neq, ":var_2", ":var_3"),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_team, ":team_var_3", ":var_3"),
					(neq, ":team_var_2", ":team_var_3"),
					(agent_get_position, 1, ":var_2"),
					(agent_get_position, 2, ":var_3"),
					(get_sq_distance_between_positions_in_meters, ":sq_distance_between_positions_in_meters_1_2", 1, 2),
					(le, ":sq_distance_between_positions_in_meters_1_2", 49),
					(assign, ":value", 1),
				(try_end),
			(try_end),
			(try_begin),
				(eq, ":value", 1),
				(val_add, "$g_reduced_waiting_seconds", 3),
			(try_end)
		]),

		(3.0, 0.0, 0.0,
		[
			(multiplayer_is_server),
			(eq, "$g_round_ended", 0),
			(eq, "$g_battle_death_mode_started", 1),
			(store_mission_timer_a, ":mission_timer_a"),
			(store_sub, ":value", ":mission_timer_a", "$g_round_start_time"),
			(store_sub, ":value_2", "$g_multiplayer_round_max_seconds", 66),
			(ge, ":value", ":value_2"),
			(store_mission_timer_a, ":mission_timer_a"),
			(store_sub, ":value", ":mission_timer_a", "$g_round_start_time"),
			(store_sub, ":value_3", "$g_multiplayer_round_max_seconds", 24),
			(le, ":value", ":value_3")
		],

		[
			(val_add, "$g_reduced_waiting_seconds", 1)
		]),

		(0.0, 0.0, 0.0,
		[
			(multiplayer_is_server),
			(eq, "$g_round_ended", 0),
			(eq, "$g_battle_death_mode_started", 2)
		],

		[
			(set_fixed_point_multiplier, 100),
			(scene_prop_get_instance, ":scene_prop_instance_headquarters_pole_code_only_0", "spr_headquarters_pole_code_only", 0),
			(scene_prop_get_instance, ":scene_prop_instance_headquarters_pole_code_only_1", "spr_headquarters_pole_code_only", 1),
			(scene_prop_get_instance, ":scene_prop_instance_team_1_flag_scene_prop_0", "$team_1_flag_scene_prop", 0),
			(scene_prop_get_instance, ":scene_prop_instance_team_2_flag_scene_prop_0", "$team_2_flag_scene_prop", 0),
			(prop_instance_get_position, 1, ":scene_prop_instance_headquarters_pole_code_only_0"),
			(prop_instance_get_position, 2, ":scene_prop_instance_headquarters_pole_code_only_1"),
			(prop_instance_get_position, 3, ":scene_prop_instance_team_1_flag_scene_prop_0"),
			(prop_instance_get_position, 4, ":scene_prop_instance_team_2_flag_scene_prop_0"),
			(copy_position, 7, 1),
			(position_move_z, 7, 100),
			(copy_position, 8, 2),
			(position_move_z, 8, 100),
			(get_distance_between_positions, ":distance_between_positions_1_3", 1, 3),
			(get_distance_between_positions, ":distance_between_positions_2_4", 2, 4),
			(assign, ":value", 0),
			(assign, ":value_2", 0),
			(get_max_players, ":max_players"),
			(try_for_range, ":localvariable", 0, ":max_players"),
				(player_is_active, ":localvariable"),
				(player_get_agent_id, ":agent_id_localvariable", ":localvariable"),
				(ge, ":agent_id_localvariable", 0),
				(agent_is_human, ":agent_id_localvariable"),
				(agent_is_alive, ":agent_id_localvariable"),
				(agent_get_team, ":team_agent_id_localvariable", ":agent_id_localvariable"),
				(agent_get_position, 0, ":agent_id_localvariable"),
				(agent_get_horse, ":horse_agent_id_localvariable", ":agent_id_localvariable"),
				(eq, ":horse_agent_id_localvariable", -1),
				(try_begin),
					(eq, ":team_agent_id_localvariable", 0),
					(try_begin),
						(get_sq_distance_between_positions, ":sq_distance_between_positions_0_1", 0, 1),
						(lt, ":sq_distance_between_positions_0_1", 1600),
						(try_begin),
							(this_or_next|eq, ":value", 0),
							(eq, ":value", 1),
							(assign, ":value", 1),
						(else_try),
							(assign, ":value", -2),
						(try_end),
					(try_end),
					(try_begin),
						(get_sq_distance_between_positions, ":sq_distance_between_positions_0_1", 0, 2),
						(lt, ":sq_distance_between_positions_0_1", 1600),
						(try_begin),
							(eq, ":value_2", 0),
							(assign, ":value_2", -1),
						(else_try),
							(eq, ":value_2", 1),
							(assign, ":value_2", -2),
						(try_end),
					(try_end),
				(else_try),
					(eq, ":team_agent_id_localvariable", 1),
					(try_begin),
						(get_sq_distance_between_positions, ":sq_distance_between_positions_0_1", 0, 2),
						(lt, ":sq_distance_between_positions_0_1", 1600),
						(try_begin),
							(this_or_next|eq, ":value_2", 0),
							(eq, ":value_2", 1),
							(assign, ":value_2", 1),
						(else_try),
							(assign, ":value_2", -2),
						(try_end),
					(try_end),
					(try_begin),
						(get_sq_distance_between_positions, ":sq_distance_between_positions_0_1", 0, 1),
						(lt, ":sq_distance_between_positions_0_1", 1600),
						(try_begin),
							(eq, ":value", 0),
							(assign, ":value", -1),
						(else_try),
							(eq, ":value", 1),
							(assign, ":value", -2),
						(try_end),
					(try_end),
				(try_end),
			(try_end),
			(try_begin),
				(ge, ":distance_between_positions_1_3", 800),
				(assign, "$g_winner_team", 0),
				(get_max_players, ":max_players"),
				(call_script, "script_draw_this_round", "$g_winner_team"),
				(try_for_range, ":localvariable", 1, ":max_players"),
					(player_is_active, ":localvariable"),
					(multiplayer_send_int_to_player, ":localvariable", 69, "$g_winner_team"),
				(try_end),
				(team_get_score, ":score_0", 0),
				(call_script, "script_team_set_score", 0, ":score_0"),
				(try_for_range, ":localvariable", 1, ":max_players"),
					(player_is_active, ":localvariable"),
					(multiplayer_send_2_int_to_player, ":localvariable", 72, 0, ":score_0"),
				(try_end),
				(store_mission_timer_a, "$g_round_finish_time"),
				(assign, "$g_round_ended", 1),
			(else_try),
				(ge, ":distance_between_positions_2_4", 800),
				(assign, "$g_winner_team", 1),
				(get_max_players, ":max_players"),
				(call_script, "script_draw_this_round", "$g_winner_team"),
				(try_for_range, ":localvariable", 1, ":max_players"),
					(player_is_active, ":localvariable"),
					(multiplayer_send_int_to_player, ":localvariable", 69, "$g_winner_team"),
				(try_end),
				(team_get_score, ":score_1", 1),
				(call_script, "script_team_set_score", 1, ":score_1"),
				(try_for_range, ":localvariable", 1, ":max_players"),
					(player_is_active, ":localvariable"),
					(multiplayer_send_2_int_to_player, ":localvariable", 72, 1, ":score_1"),
				(try_end),
				(call_script, "script_show_multiplayer_message", 12, 0),
				(call_script, "script_check_achievement_last_man_standing", "$g_winner_team"),
				(store_mission_timer_a, "$g_round_finish_time"),
				(assign, "$g_round_ended", 1),
			(try_end),
			(try_begin),
				(eq, "$g_round_ended", 0),
				(position_get_z, ":position_z_3", 3),
				(prop_instance_is_animating, ":value_3", ":scene_prop_instance_team_1_flag_scene_prop_0"),
				(try_begin),
					(eq, ":value", -2),
					(eq, ":value_3", 1),
					(prop_instance_stop_animating, ":scene_prop_instance_team_1_flag_scene_prop_0"),
				(else_try),
					(this_or_next|eq, ":value", 0),
					(eq, ":value", -1),
					(prop_instance_get_animation_target_position, 9, ":scene_prop_instance_team_1_flag_scene_prop_0"),
					(position_get_z, ":position_z_9", 9),
					(this_or_next|eq, ":value_3", 0),
					(gt, ":position_z_9", ":position_z_3"),
					(get_distance_between_positions, ":distance_between_positions_3_7", 3, 7),
					(gt, ":distance_between_positions_3_7", 0),
					(val_mul, ":distance_between_positions_3_7", 16),
					(prop_instance_animate_to_position, ":scene_prop_instance_team_1_flag_scene_prop_0", 7, ":distance_between_positions_3_7"),
				(else_try),
					(eq, ":value", 1),
					(prop_instance_get_animation_target_position, 9, ":scene_prop_instance_team_1_flag_scene_prop_0"),
					(position_get_z, ":position_z_9", 9),
					(this_or_next|eq, ":value_3", 0),
					(lt, ":position_z_9", ":position_z_3"),
					(copy_position, 5, 1),
					(position_move_z, 5, 800),
					(get_distance_between_positions, ":distance_between_positions_3_7", 3, 5),
					(gt, ":distance_between_positions_3_7", 0),
					(val_mul, ":distance_between_positions_3_7", 8),
					(prop_instance_animate_to_position, ":scene_prop_instance_team_1_flag_scene_prop_0", 5, ":distance_between_positions_3_7"),
				(try_end),
				(position_get_z, ":position_z_4", 4),
				(prop_instance_is_animating, ":value_3", ":scene_prop_instance_team_2_flag_scene_prop_0"),
				(try_begin),
					(eq, ":value_2", -2),
					(eq, ":value_3", 1),
					(prop_instance_stop_animating, ":scene_prop_instance_team_2_flag_scene_prop_0"),
				(else_try),
					(this_or_next|eq, ":value_2", 0),
					(eq, ":value_2", -1),
					(prop_instance_get_animation_target_position, 9, ":scene_prop_instance_team_2_flag_scene_prop_0"),
					(position_get_z, ":position_z_9_2", 9),
					(this_or_next|eq, ":value_3", 0),
					(gt, ":position_z_9_2", ":position_z_4"),
					(get_distance_between_positions, ":distance_between_positions_4_8", 4, 8),
					(gt, ":distance_between_positions_4_8", 0),
					(val_mul, ":distance_between_positions_4_8", 16),
					(prop_instance_animate_to_position, ":scene_prop_instance_team_2_flag_scene_prop_0", 8, ":distance_between_positions_4_8"),
				(else_try),
					(eq, ":value_2", 1),
					(prop_instance_get_animation_target_position, 9, ":scene_prop_instance_team_2_flag_scene_prop_0"),
					(position_get_z, ":position_z_9_2", 9),
					(this_or_next|eq, ":value_3", 0),
					(lt, ":position_z_9_2", ":position_z_4"),
					(copy_position, 6, 2),
					(position_move_z, 6, 800),
					(get_distance_between_positions, ":distance_between_positions_4_8", 4, 6),
					(gt, ":distance_between_positions_4_8", 0),
					(val_mul, ":distance_between_positions_4_8", 8),
					(prop_instance_animate_to_position, ":scene_prop_instance_team_2_flag_scene_prop_0", 6, ":distance_between_positions_4_8"),
				(try_end),
			(try_end)
		]),

		(1.0, 0.0, 3.0,
		[
			(multiplayer_is_server),
			(eq, "$g_round_ended", 1),
			(store_mission_timer_a, ":mission_timer_a"),
			(val_sub, ":mission_timer_a", "$g_round_finish_time"),
			(ge, ":mission_timer_a", "$g_multiplayer_respawn_period")
		],

		[
			(assign, ":var_1", 0),
			(assign, ":var_2", 0),
			(get_max_players, ":max_players"),
			(try_for_range, ":localvariable", 0, ":max_players"),
				(player_is_active, ":localvariable"),
				(player_get_team_no, ":team_no_localvariable", ":localvariable"),
				(try_begin),
					(eq, ":team_no_localvariable", 0),
					(val_add, ":var_1", 1),
				(else_try),
					(eq, ":team_no_localvariable", 1),
					(val_add, ":var_2", 1),
				(try_end),
			(try_end),
			(store_sub, ":value", ":var_1", ":var_2"),
			(assign, ":value_2", 0),
			(try_begin),
				(try_begin),
					(store_mul, ":value_3", "$g_multiplayer_auto_team_balance_limit", -1),
					(le, ":value", ":value_3"),
					(store_div, ":value_2", ":value", -2),
					(assign, ":value_4", 1),
					(assign, ":value_5", 0),
				(else_try),
					(ge, ":value", "$g_multiplayer_auto_team_balance_limit"),
					(store_div, ":value_2", ":value", 2),
					(assign, ":value_4", 0),
					(assign, ":value_5", 1),
				(try_end),
			(try_end),
			(try_begin),
				(gt, ":value_2", 0),
				(try_begin),
					(try_for_range, ":unused", 0, ":value_2"),
						(assign, ":value_6", 0),
						(assign, ":value_7", -1),
						(get_max_players, ":max_players"),
						(try_for_range, ":localvariable_2", 0, ":max_players"),
							(player_is_active, ":localvariable_2"),
							(player_get_team_no, ":team_no_localvariable", ":localvariable_2"),
							(eq, ":team_no_localvariable", ":value_4"),
							(player_get_slot, ":localvariable_2_join_time", ":localvariable_2", slot_player_join_time),
							(try_begin),
								(gt, ":localvariable_2_join_time", ":value_6"),
								(assign, ":value_6", ":localvariable_2_join_time"),
								(assign, ":value_7", ":localvariable_2"),
							(try_end),
						(try_end),
						(try_begin),
							(ge, ":value_7", 0),
							(try_begin),
								(player_get_agent_id, ":agent_id_value_7", ":value_7"),
								(ge, ":agent_id_value_7", 0),
								(agent_is_alive, ":agent_id_value_7"),
								(player_get_kill_count, ":kill_count_value_7", ":value_7"),
								(val_add, ":kill_count_value_7", 1),
								(player_set_kill_count, ":value_7", ":kill_count_value_7"),
								(player_get_death_count, ":death_count_value_7", ":value_7"),
								(val_sub, ":death_count_value_7", 1),
								(player_set_death_count, ":value_7", ":death_count_value_7"),
								(player_get_score, ":score_value_7", ":value_7"),
								(val_add, ":score_value_7", 1),
								(player_set_score, ":value_7", ":score_value_7"),
								(try_for_range, ":localvariable_2", 1, ":max_players"),
									(player_is_active, ":localvariable_2"),
									(multiplayer_send_4_int_to_player, ":localvariable_2", 86, ":value_7", ":score_value_7", ":kill_count_value_7", ":death_count_value_7"),
								(try_end),
								(player_get_value_of_original_items, ":value_of_original_items_value_7", ":value_7"),
								(player_get_gold, ":gold_value_7", ":value_7"),
								(val_add, ":gold_value_7", ":value_of_original_items_value_7"),
								(player_set_gold, ":value_7", ":gold_value_7", 15000),
							(try_end),
							(player_set_troop_id, ":value_7", -1),
							(player_set_team_no, ":value_7", ":value_5"),
							(multiplayer_send_message_to_player, ":value_7", 79),
						(try_end),
					(try_end),
					(call_script, "script_show_multiplayer_message", 2, 0),
					(multiplayer_get_my_player, ":multiplayer_my_player"),
					(get_max_players, ":max_players"),
					(try_for_range, ":localvariable_2", 0, ":max_players"),
						(player_is_active, ":localvariable_2"),
						(neq, ":multiplayer_my_player", ":localvariable_2"),
						(multiplayer_send_int_to_player, ":localvariable_2", 68, 2),
					(try_end),
					(assign, "$g_team_balance_next_round", 0),
				(try_end),
			(try_end),
			(assign, "$g_team_balance_next_round", 0),
			(get_max_players, ":max_players"),
			(try_for_range, ":localvariable_2", 0, ":max_players"),
				(player_is_active, ":localvariable_2"),
				(player_set_slot, ":localvariable_2", slot_player_spawned_this_round, 0),
				(player_get_agent_id, ":agent_id_localvariable_2", ":localvariable_2"),
				(ge, ":agent_id_localvariable_2", 0),
				(agent_is_alive, ":agent_id_localvariable_2"),
				(player_save_picked_up_items_for_next_spawn, ":localvariable_2"),
				(player_get_value_of_original_items, ":value_of_original_items_value_7", ":localvariable_2"),
				(player_set_slot, ":localvariable_2", slot_player_last_rounds_used_item_earnings, ":value_of_original_items_value_7"),
			(try_end),
			(assign, ":var_24", 500),
			(val_mul, ":var_24", "$g_multiplayer_round_earnings_multiplier"),
			(val_div, ":var_24", 100),
			(get_max_players, ":max_players"),
			(try_for_range, ":localvariable_2", 0, ":max_players"),
				(player_is_active, ":localvariable_2"),
				(player_get_gold, ":gold_value_7", ":localvariable_2"),
				(player_get_team_no, ":team_no_localvariable", ":localvariable_2"),
				(try_begin),
					(this_or_next|eq, ":team_no_localvariable", 0),
					(eq, ":team_no_localvariable", 1),
					(val_add, ":gold_value_7", ":var_24"),
				(try_end),
				(try_begin),
					(player_get_slot, ":value_of_original_items_value_7", ":localvariable_2", slot_player_last_rounds_used_item_earnings),
					(store_add, ":value_8", ":gold_value_7", ":value_of_original_items_value_7"),
					(store_mul, ":value_9", "$g_multiplayer_initial_gold_multiplier", 10),
					(lt, ":value_8", ":value_9"),
					(store_sub, ":value_10", ":value_9", ":value_8"),
					(val_add, ":gold_value_7", ":value_10"),
				(try_end),
				(player_set_gold, ":localvariable_2", ":gold_value_7", 15000),
			(try_end),
			(assign, "$my_team_at_start_of_round", -1),
			(multiplayer_clear_scene),
			(call_script, "script_multiplayer_initialize_belfry_wheel_rotations"),
			(try_begin),
				(eq, "$g_battle_death_mode_started", 2),
				(call_script, "script_move_death_mode_flags_down"),
			(try_end),
			(assign, "$g_battle_death_mode_started", 0),
			(assign, "$g_reduced_waiting_seconds", 0),
			(call_script, "script_multiplayer_close_gate_if_it_is_open"),
			(call_script, "script_multiplayer_move_moveable_objects_initial_positions"),
			(assign, "$g_round_ended", 0),
			(assign, "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_team_1"),
			(assign, "$g_multiplayer_num_bots_required_team_2", "$g_multiplayer_num_bots_team_2"),
			(store_mission_timer_a, "$g_round_start_time"),
			(call_script, "script_initialize_all_scene_prop_slots"),
			(get_max_players, ":max_players"),
			(try_for_range, ":localvariable_2", 0, ":max_players"),
				(player_is_active, ":localvariable_2"),
				(multiplayer_send_int_to_player, ":localvariable_2", 78, -9999),
			(try_end)
		]),

		(0.0, 0.0, 0.0,
		[],

		[
			(assign, ":var_1", "$g_multiplayer_num_bots_team_1"),
			(assign, ":var_2", "$g_multiplayer_num_bots_team_2"),
			(get_max_players, ":max_players"),
			(try_for_range, ":localvariable", 0, ":max_players"),
				(player_is_active, ":localvariable"),
				(player_get_team_no, ":team_no_localvariable", ":localvariable"),
				(try_begin),
					(eq, ":team_no_localvariable", 0),
					(val_add, ":var_1", 1),
				(else_try),
					(eq, ":team_no_localvariable", 1),
					(val_add, ":var_2", 1),
				(try_end),
			(try_end),
			(try_begin),
				(this_or_next|eq, ":var_1", 0),
				(eq, ":var_2", 0),
				(store_mission_timer_a, ":mission_timer_a"),
				(val_sub, ":mission_timer_a", "$g_round_start_time"),
				(le, ":mission_timer_a", 2),
				(store_mission_timer_a, "$g_round_start_time"),
			(try_end)
		]),

		(1.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(get_max_players, ":max_players"),
			(try_for_range, ":localvariable", 0, ":max_players"),
				(player_is_active, ":localvariable"),
				(neg|player_is_busy_with_menus, ":localvariable"),
				(try_begin),
					(player_slot_eq, ":localvariable", slot_player_spawned_this_round, 0),
					(player_get_team_no, ":team_no_localvariable", ":localvariable"),
					(lt, ":team_no_localvariable", 2),
					(player_get_troop_id, ":troop_id_localvariable", ":localvariable"),
					(ge, ":troop_id_localvariable", 0),
					(assign, ":value", 0),
					(assign, ":var_6", 0),
					(assign, ":var_7", 0),
					(try_begin),
						(assign, ":var_8", 0),
						(get_max_players, ":max_players"),
						(try_for_range, ":localvariable_2", 0, ":max_players"),
							(player_is_active, ":localvariable_2"),
							(val_add, ":var_8", 1),
							(player_get_team_no, ":team_no_localvariable_2", ":localvariable_2"),
							(try_begin),
								(eq, ":team_no_localvariable_2", 0),
								(val_add, ":var_6", 1),
							(else_try),
								(eq, ":team_no_localvariable_2", 1),
								(val_add, ":var_7", 1),
							(try_end),
						(try_end),
						(store_mul, ":value_2", ":var_6", ":var_7"),
						(store_mission_timer_a, ":mission_timer_a"),
						(val_sub, ":mission_timer_a", "$g_round_start_time"),
						(this_or_next|lt, ":mission_timer_a", 30),
						(this_or_next|le, ":var_8", 2),
						(eq, ":value_2", 0),
						(eq, "$g_round_ended", 0),
						(assign, ":value", 1),
					(try_end),
					(eq, ":value", 1),
					(try_begin),
						(eq, ":team_no_localvariable", 0),
						(assign, ":value_3", 0),
					(else_try),
						(eq, ":team_no_localvariable", 1),
						(assign, ":value_3", 32),
					(try_end),
					(call_script, "script_multiplayer_buy_agent_equipment", ":localvariable"),
					(player_spawn_new_agent, ":localvariable", ":value_3"),
					(player_set_slot, ":localvariable", slot_player_spawned_this_round, 1),
				(else_try),
					(eq, "$g_multiplayer_player_respawn_as_bot", 1),
					(player_get_agent_id, ":agent_id_localvariable", ":localvariable"),
					(ge, ":agent_id_localvariable", 0),
					(neg|agent_is_alive, ":agent_id_localvariable"),
					(agent_get_time_elapsed_since_removed, ":time_elapsed_since_removed_agent_id_localvariable", ":agent_id_localvariable"),
					(gt, ":time_elapsed_since_removed_agent_id_localvariable", "$g_multiplayer_respawn_period"),
					(player_get_team_no, ":team_no_localvariable", ":localvariable"),
					(assign, ":value_4", 0),
					(try_for_agents, ":var_17"),
						(eq, ":value_4", 0),
						(agent_is_alive, ":var_17"),
						(agent_is_human, ":var_17"),
						(agent_is_non_player, ":var_17"),
						(agent_get_team, ":team_var_17", ":var_17"),
						(eq, ":team_var_17", ":team_no_localvariable"),
						(assign, ":value_4", 1),
					(try_end),
					(try_begin),
						(eq, ":value_4", 1),
						(call_script, "script_find_most_suitable_bot_to_control", ":localvariable"),
						(player_control_agent, ":localvariable", reg0),
						(player_get_slot, ":localvariable_spawned_this_round", ":localvariable", slot_player_spawned_this_round),
						(val_add, ":localvariable_spawned_this_round", 1),
						(player_set_slot, ":localvariable", slot_player_spawned_this_round, ":localvariable_spawned_this_round"),
					(try_end),
				(try_end),
			(try_end)
		]),

		(0.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(eq, "$g_multiplayer_ready_for_spawning_agent", 1),
			(store_add, ":value", "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_required_team_2"),
			(try_begin),
				(gt, ":value", 0),
				(try_begin),
					(this_or_next|eq, "$g_multiplayer_game_type", 2),
					(this_or_next|eq, "$g_multiplayer_game_type", 3),
					(eq, "$g_multiplayer_game_type", 6),
					(team_get_score, ":score_0", 0),
					(team_get_score, ":score_1", 1),
					(store_add, ":value_2", ":score_0", ":score_1"),
					(eq, ":value_2", 0),
					(store_mission_timer_a, ":mission_timer_a"),
					(val_sub, ":mission_timer_a", "$g_round_start_time"),
					(lt, ":mission_timer_a", 20),
					(assign, ":value_3", 0),
				(else_try),
					(assign, ":value_3", 1),
				(try_end),
				(eq, ":value_3", 1),
				(store_random_in_range, ":random_in_range_0_value", 0, ":value"),
				(val_sub, ":random_in_range_0_value", "$g_multiplayer_num_bots_required_team_1"),
				(try_begin),
					(lt, ":random_in_range_0_value", 0),
					(assign, ":value_4", 0),
				(else_try),
					(assign, ":value_4", 1),
				(try_end),
				(try_begin),
					(this_or_next|eq, "$g_multiplayer_game_type", 2),
					(eq, "$g_multiplayer_game_type", 3),
					(store_mission_timer_a, ":mission_timer_a"),
					(val_sub, ":mission_timer_a", "$g_round_start_time"),
					(try_begin),
						(le, ":mission_timer_a", 20),
						(assign, ":value_5", 0),
					(else_try),
						(assign, ":value_5", 1),
					(try_end),
				(else_try),
					(assign, ":value_5", 1),
				(try_end),
				(call_script, "script_multiplayer_find_bot_troop_and_group_for_spawn", ":value_4", ":value_5"),
				(assign, ":var_10", reg0),
				(assign, ":var_11", reg1),
				(team_get_faction, ":faction_value_4", ":value_4"),
				(assign, ":var_13", 0),
				(try_for_range, ":troop", "trp_swadian_crossbowman_multiplayer_ai", "trp_swadian_crossbowman_multiplayer"),
					(store_faction_of_troop, ":faction_of_troop_troop", ":troop"),
					(eq, ":faction_of_troop_troop", ":faction_value_4"),
					(val_add, ":var_13", 1),
				(try_end),
				(assign, ":var_16", 0),
				(get_max_players, ":max_players"),
				(try_for_range, ":localvariable", 0, ":max_players"),
					(player_is_active, ":localvariable"),
					(player_get_team_no, ":team_no_localvariable", ":localvariable"),
					(eq, ":value_4", ":team_no_localvariable"),
					(assign, ":value_6", 0),
					(store_add, ":value_7", 35, ":var_13"),
					(try_for_range, ":localvariable_2", 35, ":value_7"),
						(player_slot_ge, ":localvariable", ":localvariable_2", 1),
						(assign, ":value_6", 1),
						(assign, ":value_7", 0),
					(try_end),
					(ge, ":value_6", 1),
					(val_add, ":var_16", 1),
				(try_end),
				(try_begin),
					(this_or_next|ge, ":var_11", 0),
					(eq, ":var_16", 0),
					(troop_get_inventory_slot, ":inventory_slot_var_10_8", ":var_10", 8),
					(try_begin),
						(ge, ":inventory_slot_var_10_8", 0),
						(assign, ":value_8", 1),
					(else_try),
						(assign, ":value_8", 0),
					(try_end),
					(try_begin),
						(eq, "$g_multiplayer_game_type", 6),
						(store_mission_timer_a, ":mission_timer_a"),
						(val_sub, ":mission_timer_a", "$g_round_start_time"),
						(try_begin),
							(lt, ":mission_timer_a", 20),
							(try_begin),
								(eq, ":value_4", 0),
								(call_script, "script_multiplayer_find_spawn_point", ":value_4", 1, ":value_8"),
							(else_try),
								(assign, reg0, 32),
							(try_end),
						(else_try),
							(call_script, "script_multiplayer_find_spawn_point", ":value_4", 0, ":value_8"),
						(try_end),
					(else_try),
						(this_or_next|eq, "$g_multiplayer_game_type", 2),
						(eq, "$g_multiplayer_game_type", 3),
						(try_begin),
							(eq, ":value_4", 0),
							(assign, reg0, 0),
						(else_try),
							(assign, reg0, 32),
						(try_end),
					(else_try),
						(call_script, "script_multiplayer_find_spawn_point", ":value_4", 0, ":value_8"),
					(try_end),
					(store_current_scene, ":current_scene"),
					(modify_visitors_at_site, ":current_scene"),
					(add_visitors_to_current_scene, reg0, ":var_10", 1, ":value_4", ":var_11"),
					(assign, "$g_multiplayer_ready_for_spawning_agent", 0),
					(try_begin),
						(eq, ":value_4", 0),
						(val_sub, "$g_multiplayer_num_bots_required_team_1", 1),
					(else_try),
						(eq, ":value_4", 1),
						(val_sub, "$g_multiplayer_num_bots_required_team_2", 1),
					(try_end),
				(try_end),
			(try_end)
		]),

		(3.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(try_for_agents, ":var_1"),
				(agent_is_non_player, ":var_1"),
				(agent_is_human, ":var_1"),
				(agent_is_alive, ":var_1"),
				(agent_get_group, ":group_var_1", ":var_1"),
				(try_begin),
					(neg|player_is_active, ":group_var_1"),
					(call_script, "script_multiplayer_change_leader_of_bot", ":var_1"),
				(else_try),
					(player_get_team_no, ":team_no_group_var_1", ":group_var_1"),
					(agent_get_team, ":team_var_1", ":var_1"),
					(neq, ":team_no_group_var_1", ":team_var_1"),
					(call_script, "script_multiplayer_change_leader_of_bot", ":var_1"),
				(try_end),
			(try_end)
		]),

		(1.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(assign, ":value", 0),
			(try_begin),
				(this_or_next|eq, "$g_multiplayer_game_type", 2),
				(this_or_next|eq, "$g_multiplayer_game_type", 3),
				(eq, "$g_multiplayer_game_type", 6),
				(try_begin),
					(eq, "$g_round_ended", 1),
					(store_mission_timer_a, ":mission_timer_a"),
					(val_sub, ":mission_timer_a", "$g_round_finish_time"),
					(store_sub, ":value_2", "$g_multiplayer_respawn_period", 1),
					(ge, ":mission_timer_a", ":value_2"),
					(store_mission_timer_a, ":mission_timer_a_2"),
					(try_begin),
						(this_or_next|eq, "$g_multiplayer_game_type", 2),
						(eq, "$g_multiplayer_game_type", 3),
						(assign, ":value_3", 90),
					(else_try),
						(assign, ":value_3", 120),
					(try_end),
					(store_mul, ":value_4", "$g_multiplayer_game_max_minutes", 60),
					(store_sub, ":value_5", ":value_4", ":value_3"),
					(gt, ":mission_timer_a_2", ":value_5"),
					(assign, ":value", 1),
				(try_end),
				(eq, ":value", 1),
			(else_try),
				(neq, "$g_multiplayer_game_type", 2),
				(neq, "$g_multiplayer_game_type", 3),
				(neq, "$g_multiplayer_game_type", 6),
				(neq, "$g_multiplayer_game_type", 5),
				(store_mission_timer_a, ":mission_timer_a_2"),
				(store_mul, ":value_4", "$g_multiplayer_game_max_minutes", 60),
				(gt, ":mission_timer_a_2", ":value_4"),
				(assign, ":value", 1),
			(else_try),
				(team_get_score, ":score_0", 0),
				(team_get_score, ":score_1", 1),
				(try_begin),
					(neq, "$g_multiplayer_game_type", 5),
					(try_begin),
						(this_or_next|ge, ":score_0", "$g_multiplayer_game_max_points"),
						(ge, ":score_1", "$g_multiplayer_game_max_points"),
						(assign, ":value", 1),
					(try_end),
				(else_try),
					(assign, ":value_6", 0),
					(get_max_players, ":max_players"),
					(try_for_range, ":localvariable", 0, ":max_players"),
						(player_is_active, ":localvariable"),
						(player_get_agent_id, ":agent_id_localvariable", ":localvariable"),
						(ge, ":agent_id_localvariable", 0),
						(neg|agent_is_non_player, ":agent_id_localvariable"),
						(assign, ":value_6", 1),
						(assign, ":max_players", 0),
					(try_end),
					(eq, ":value_6", 1),
					(this_or_next|le, ":score_0", 0),
					(le, ":score_1", 0),
					(assign, ":value", 1),
				(try_end),
			(try_end),
			(try_begin),
				(eq, ":value", 1),
				(call_script, "script_game_multiplayer_get_game_type_mission_template", "$g_multiplayer_game_type"),
				(start_multiplayer_mission, reg0, "$g_multiplayer_selected_map", 0),
				(call_script, "script_game_set_multiplayer_mission_end"),
			(try_end)
		]),

		(-21.0, 0.0, 0.0,
		[],

		[
			(try_begin),
				(eq, "$g_multiplayer_mission_end_screen", 0),
				(assign, "$g_multiplayer_stats_chart_opened_manually", 1),
				(start_presentation, "prsnt_multiplayer_stats_chart"),
			(try_end)
		]),

		(0.0, 0.0, ti_once,
		[],

		[
			(start_presentation, "prsnt_multiplayer_welcome_message")
		]),

		(-24.0, 0.0, 0.0,
		[],

		[
			(start_presentation, "prsnt_multiplayer_round_time_counter"),
			(start_presentation, "prsnt_multiplayer_team_score_display"),
			(try_begin),
				(eq, "$g_battle_death_mode_started", 2),
				(start_presentation, "prsnt_multiplayer_flag_projection_display_bt"),
			(try_end)
		]),

		(-23.0, 0.0, 0.0,
		[],

		[
			(neg|is_presentation_active, "prsnt_multiplayer_escape_menu"),
			(neg|is_presentation_active, "prsnt_multiplayer_stats_chart"),
			(eq, "$g_waiting_for_confirmation_to_terminate", 0),
			(start_presentation, "prsnt_multiplayer_escape_menu")
		])
	] + crouching_triggers),

	("multiplayer_fd", mtf_battle_mode, -1,
	"You lead your men to battle.",
	[(0, mtef_visitor_source|mtef_team_0|mtef_no_auto_reset, 0, aif_start_alarmed, 1, []),
	(1, mtef_visitor_source|mtef_team_0|mtef_no_auto_reset, 0, aif_start_alarmed, 1, []),
	(2, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(3, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(4, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(5, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(6, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(7, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(8, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(9, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(10, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(11, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(12, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(13, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(14, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(15, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(16, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(17, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(18, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(19, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(20, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(21, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(22, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(23, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(24, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(25, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(26, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(27, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(28, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(29, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(30, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(31, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(32, mtef_visitor_source|mtef_team_0|mtef_no_auto_reset, 0, aif_start_alarmed, 1, []),
	(33, mtef_visitor_source|mtef_team_0|mtef_no_auto_reset, 0, aif_start_alarmed, 1, []),
	(34, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(35, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(36, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(37, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(38, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(39, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(40, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(41, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(42, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(43, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(44, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(45, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(46, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(47, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(48, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(49, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(50, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(51, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(52, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(53, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(54, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(55, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(56, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(57, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(58, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(59, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(60, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(61, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(62, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(63, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, [])],
	[
		

		
		
		
		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(call_script, "script_troop_agent_set_banner", "tableau_game_troop_label_banner", ":trigger_param_1", ":troop_id_trigger_param_1")
		]),

		(1.0, 5.0, 0.0,
		[
			(multiplayer_is_server),
			(eq, "$g_multiplayer_poll_running", 1),
			(eq, "$g_multiplayer_poll_ended", 0),
			(store_mission_timer_a, ":mission_timer_a"),
			(store_add, ":value", "$g_multiplayer_poll_no_count", "$g_multiplayer_poll_yes_count"),
			(this_or_next|eq, ":value", "$g_multiplayer_poll_num_sent"),
			(gt, ":mission_timer_a", "$g_multiplayer_poll_end_time"),
			(call_script, "script_cf_multiplayer_evaluate_poll")
		],

		[
			(assign, "$g_multiplayer_poll_running", 0),
			(try_begin),
				(this_or_next|eq, "$g_multiplayer_poll_to_show", 0),
				(eq, "$g_multiplayer_poll_to_show", 3),
				(call_script, "script_game_multiplayer_get_game_type_mission_template", "$g_multiplayer_game_type"),
				(start_multiplayer_mission, reg0, "$g_multiplayer_poll_value_to_show", 1),
				(call_script, "script_game_set_multiplayer_mission_end"),
			(try_end)
		]),

		(-15.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_multiplayer_server_player_joined_common", ":trigger_param_1")
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(assign, "$g_multiplayer_game_type", 3),
			(call_script, "script_multiplayer_server_before_mission_start_common"),
			(assign, "$g_waiting_for_confirmation_to_terminate", 0),
			(assign, "$g_round_ended", 0),
			(assign, "$g_reduced_waiting_seconds", 0),
			(try_begin),
				(multiplayer_is_server),
				(assign, "$g_round_start_time", 0),
			(try_end),
			(assign, "$my_team_at_start_of_round", -1),
			(call_script, "script_multiplayer_init_mission_variables"),
			(call_script, "script_multiplayer_remove_headquarters_flags")
		]),

		(-20.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_determine_team_flags", 0),
			(call_script, "script_determine_team_flags", 1),
			(set_spawn_effector_scene_prop_kind, 0, -1),
			(set_spawn_effector_scene_prop_kind, 1, -1),
			(call_script, "script_initialize_all_scene_prop_slots"),
			(call_script, "script_multiplayer_initialize_belfry_wheel_rotations"),
			(call_script, "script_multiplayer_move_moveable_objects_initial_positions"),
			(assign, "$g_destructible_target_1", "spr_catapult_destructible"),
			(assign, "$g_destructible_target_2", "spr_trebuchet_destructible"),
			(scene_prop_get_num_instances, ":scene_prop_num_instances_g_destructible_target_1", "$g_destructible_target_1"),
			(try_for_range, ":localvariable", 0, ":scene_prop_num_instances_g_destructible_target_1"),
				(scene_prop_get_instance, ":scene_prop_instance_g_destructible_target_1_localvariable", "$g_destructible_target_1", ":localvariable"),
				(ge, ":scene_prop_instance_g_destructible_target_1_localvariable", 0),
				(scene_prop_set_team, ":scene_prop_instance_g_destructible_target_1_localvariable", 0),
			(try_end),
			(scene_prop_get_num_instances, ":scene_prop_num_instances_g_destructible_target_2", "$g_destructible_target_2"),
			(try_for_range, ":localvariable_2", 0, ":scene_prop_num_instances_g_destructible_target_2"),
				(scene_prop_get_instance, ":scene_prop_instance_g_destructible_target_2_localvariable_2", "$g_destructible_target_2", ":localvariable_2"),
				(ge, ":scene_prop_instance_g_destructible_target_2_localvariable_2", 0),
				(scene_prop_set_team, ":scene_prop_instance_g_destructible_target_2_localvariable_2", 0),
			(try_end),
			(try_begin),
				(scene_prop_get_num_instances, ":scene_prop_num_instances_catapult_destructible", "spr_catapult_destructible"),
				(ge, ":scene_prop_num_instances_catapult_destructible", 1),
				(scene_prop_get_instance, ":scene_prop_instance_catapult_destructible_0", "spr_catapult_destructible", 0),
				(scene_prop_get_team, "$g_defender_team", ":scene_prop_instance_catapult_destructible_0"),
			(else_try),
				(scene_prop_get_num_instances, ":scene_prop_num_instances_trebuchet_destructible", "spr_trebuchet_destructible"),
				(ge, ":scene_prop_num_instances_trebuchet_destructible", 1),
				(scene_prop_get_instance, ":scene_prop_instance_trebuchet_destructible_0", "spr_trebuchet_destructible", 0),
				(scene_prop_get_team, "$g_defender_team", ":scene_prop_instance_trebuchet_destructible_0"),
			(try_end),
			(assign, "$g_number_of_targets_destroyed", 0),
			(try_begin),
				(assign, "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_team_1"),
				(assign, "$g_multiplayer_num_bots_required_team_2", "$g_multiplayer_num_bots_team_2"),
			(try_end),
			(start_presentation, "prsnt_multiplayer_destructible_targets_display"),
			(assign, "$g_multiplayer_ready_for_spawning_agent", 1)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_multiplayer_server_on_agent_spawn_common", ":trigger_param_1"),
			(try_begin),
				(lt, "$my_team_at_start_of_round", 0),
				(multiplayer_get_my_player, ":multiplayer_my_player"),
				(ge, ":multiplayer_my_player", 0),
				(player_get_agent_id, ":agent_id_multiplayer_my_player", ":multiplayer_my_player"),
				(eq, ":agent_id_multiplayer_my_player", ":trigger_param_1"),
				(ge, ":agent_id_multiplayer_my_player", 0),
				(agent_get_team, "$my_team_at_start_of_round", ":agent_id_multiplayer_my_player"),
			(try_end),
			(try_begin),
				(neg|multiplayer_is_server),
				(try_begin),
					(eq, "$g_round_ended", 1),
					(assign, "$g_round_ended", 0),
					(call_script, "script_initialize_all_scene_prop_slots"),
					(call_script, "script_multiplayer_initialize_belfry_wheel_rotations"),
					(call_script, "script_initialize_objects_clients"),
					(start_presentation, "prsnt_multiplayer_destructible_targets_display"),
					(try_begin),
						(eq, "$g_team_balance_next_round", 1),
						(assign, "$g_team_balance_next_round", 0),
					(try_end),
				(try_end),
			(try_end)
		]),

		(-26.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(store_trigger_param_2, ":trigger_param_2"),
			(call_script, "script_multiplayer_server_on_agent_killed_or_wounded_common", ":trigger_param_1", ":trigger_param_2"),
			(try_begin),
				(lt, "$my_team_at_start_of_round", 0),
				(multiplayer_get_my_player, ":multiplayer_my_player"),
				(ge, ":multiplayer_my_player", 0),
				(player_get_agent_id, ":agent_id_multiplayer_my_player", ":multiplayer_my_player"),
				(ge, ":agent_id_multiplayer_my_player", 0),
				(agent_get_team, "$my_team_at_start_of_round", ":agent_id_multiplayer_my_player"),
			(try_end),
			(try_begin),
				(agent_is_human, ":trigger_param_1"),
				(assign, ":var_5", 0),
				(assign, ":var_6", 0),
				(try_for_agents, ":var_7"),
					(agent_is_human, ":var_7"),
					(try_begin),
						(agent_is_alive, ":var_7"),
						(agent_get_team, ":team_var_7", ":var_7"),
						(try_begin),
							(eq, ":team_var_7", 0),
							(val_add, ":var_5", 1),
						(else_try),
							(eq, ":team_var_7", 1),
							(val_add, ":var_6", 1),
						(try_end),
					(try_end),
				(try_end),
				(try_begin),
					(eq, "$g_round_ended", 0),
					(try_begin),
						(this_or_next|eq, ":var_5", 0),
						(eq, ":var_6", 0),
						(assign, "$g_winner_team", -1),
						(assign, reg0, "$g_multiplayer_respawn_period"),
						(try_begin),
							(eq, ":var_5", 0),
							(try_begin),
								(neq, ":var_6", 0),
								(assign, "$g_winner_team", 1),
							(try_end),
							(try_begin),
								(eq, "$g_winner_team", -1),
							(else_try),
								(eq, "$g_defender_team", 1),
								(try_begin),
									(neg|multiplayer_is_server),
									(call_script, "script_calculate_number_of_targets_destroyed"),
								(try_end),
								(store_sub, ":value", 2, "$g_number_of_targets_destroyed"),
								(call_script, "script_show_multiplayer_message", 16, ":value"),
							(else_try),
								(call_script, "script_show_multiplayer_message", 17, 0),
							(try_end),
						(else_try),
							(try_begin),
								(neq, ":var_5", 0),
								(assign, "$g_winner_team", 0),
							(try_end),
							(try_begin),
								(eq, "$g_winner_team", -1),
							(else_try),
								(eq, "$g_defender_team", 0),
								(try_begin),
									(neg|multiplayer_is_server),
									(call_script, "script_calculate_number_of_targets_destroyed"),
								(try_end),
								(store_sub, ":value", 2, "$g_number_of_targets_destroyed"),
								(call_script, "script_show_multiplayer_message", 16, ":value"),
							(else_try),
								(call_script, "script_show_multiplayer_message", 17, 0),
							(try_end),
						(try_end),
						(store_mission_timer_a, "$g_round_finish_time"),
						(assign, "$g_round_ended", 1),
						(try_begin),
							(multiplayer_is_server),
							(ge, "$g_winner_team", 0),
							(lt, "$g_winner_team", 2),
							(neq, "$g_winner_team", -1),
							(team_get_score, ":score_l_g_winner_team", "$g_winner_team"),
							(store_sub, ":value_2", 2, "$g_number_of_targets_destroyed"),
							(val_add, ":score_l_g_winner_team", ":value_2"),
							(call_script, "script_team_set_score", "$g_winner_team", ":score_l_g_winner_team"),
							(get_max_players, ":max_players"),
							(try_for_range, ":localvariable", 1, ":max_players"),
								(player_is_active, ":localvariable"),
								(multiplayer_send_2_int_to_player, ":localvariable", 72, "$g_winner_team", ":score_l_g_winner_team"),
							(try_end),
						(try_end),
						(try_begin),
							(neq, "$g_defender_team", "$g_winner_team"),
							(neq, "$g_winner_team", -1),
							(assign, "$g_number_of_targets_destroyed", 2),
						(try_end),
					(try_end),
				(try_end),
			(try_end),
			(try_begin),
				(multiplayer_is_server),
				(agent_is_human, ":trigger_param_1"),
				(neg|agent_is_non_player, ":trigger_param_1"),
				(ge, ":trigger_param_1", 0),
				(agent_get_player_id, ":player_id_trigger_param_1", ":trigger_param_1"),
				(ge, ":player_id_trigger_param_1", 0),
				(set_fixed_point_multiplier, 100),
				(agent_get_player_id, ":player_id_trigger_param_1", ":trigger_param_1"),
				(agent_get_position, 0, ":trigger_param_1"),
				(position_get_x, ":position_x_0", 0),
				(position_get_y, ":position_y_0", 0),
				(position_get_z, ":position_z_0", 0),
				(player_set_slot, ":player_id_trigger_param_1", slot_player_death_pos_x, ":position_x_0"),
				(player_set_slot, ":player_id_trigger_param_1", slot_player_death_pos_y, ":position_y_0"),
				(player_set_slot, ":player_id_trigger_param_1", slot_player_death_pos_z, ":position_z_0"),
			(try_end)
		]),

		(-16.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_multiplayer_event_mission_end"),
			(assign, "$g_multiplayer_stats_chart_opened_manually", 0),
			(start_presentation, "prsnt_multiplayer_stats_chart")
		]),

		(1.0, 0.0, 0.0,
		[
			(multiplayer_is_server),
			(eq, "$g_round_ended", 0),
			(eq, "$g_number_of_targets_destroyed", 2)
		],

		[
			(store_mission_timer_a, "$g_round_finish_time"),
			(assign, "$g_round_ended", 1),
			(multiplayer_get_my_player, ":multiplayer_my_player"),
			(call_script, "script_draw_this_round", -9),
			(get_max_players, ":max_players"),
			(try_for_range, ":localvariable", 1, ":max_players"),
				(player_is_active, ":localvariable"),
				(neq, ":localvariable", ":multiplayer_my_player"),
				(multiplayer_send_int_to_player, ":localvariable", 69, -9),
			(try_end)
		]),

		(1.0, 0.0, 0.0,
		[
			(multiplayer_is_server),
			(eq, "$g_round_ended", 0),
			(store_mission_timer_a, ":mission_timer_a"),
			(store_sub, ":value", ":mission_timer_a", "$g_round_start_time"),
			(ge, ":value", "$g_multiplayer_round_max_seconds")
		],

		[
			(store_mission_timer_a, "$g_round_finish_time"),
			(assign, "$g_round_ended", 1),
			(assign, "$g_winner_team", -9),
			(multiplayer_get_my_player, ":multiplayer_my_player"),
			(store_sub, ":value", 2, "$g_number_of_targets_destroyed"),
			(call_script, "script_show_multiplayer_message", 16, ":value"),
			(get_max_players, ":max_players"),
			(try_for_range, ":localvariable", 1, ":max_players"),
				(player_is_active, ":localvariable"),
				(multiplayer_send_2_int_to_player, ":localvariable", 68, 16, ":value"),
			(try_end),
			(call_script, "script_draw_this_round", "$g_winner_team"),
			(get_max_players, ":max_players"),
			(try_for_range, ":localvariable", 1, ":max_players"),
				(player_is_active, ":localvariable"),
				(neq, ":localvariable", ":multiplayer_my_player"),
				(multiplayer_send_int_to_player, ":localvariable", 69, "$g_winner_team"),
			(try_end),
			(try_begin),
				(multiplayer_is_server),
				(assign, "$g_winner_team", "$g_defender_team"),
				(team_get_score, ":score_l_g_winner_team", "$g_winner_team"),
				(store_sub, ":value_2", 2, "$g_number_of_targets_destroyed"),
				(val_add, ":score_l_g_winner_team", ":value_2"),
				(call_script, "script_team_set_score", "$g_winner_team", ":score_l_g_winner_team"),
				(try_for_range, ":localvariable", 1, ":max_players"),
					(player_is_active, ":localvariable"),
					(multiplayer_send_2_int_to_player, ":localvariable", 72, "$g_winner_team", ":score_l_g_winner_team"),
				(try_end),
			(try_end)
		]),

		(10.0, 0.0, 0.0,
		[
			(multiplayer_is_server)
		],

		[
			(assign, ":var_1", 0),
			(assign, ":var_2", 0),
			(get_max_players, ":max_players"),
			(try_for_range, ":localvariable", 0, ":max_players"),
				(player_is_active, ":localvariable"),
				(player_get_team_no, ":team_no_localvariable", ":localvariable"),
				(try_begin),
					(eq, ":team_no_localvariable", 0),
					(val_add, ":var_1", 1),
				(else_try),
					(eq, ":team_no_localvariable", 1),
					(val_add, ":var_2", 1),
				(try_end),
			(try_end),
			(store_sub, ":value", ":var_1", ":var_2"),
			(assign, ":value_2", 0),
			(try_begin),
				(try_begin),
					(store_mul, ":value_3", "$g_multiplayer_auto_team_balance_limit", -1),
					(le, ":value", ":value_3"),
					(store_div, ":value_2", ":value", -2),
				(else_try),
					(ge, ":value", "$g_multiplayer_auto_team_balance_limit"),
					(store_div, ":value_2", ":value", 2),
				(try_end),
			(try_end),
			(try_begin),
				(gt, ":value_2", 0),
				(try_begin),
					(eq, "$g_team_balance_next_round", 0),
					(assign, "$g_team_balance_next_round", 1),
					(call_script, "script_show_multiplayer_message", 3, 0),
					(get_max_players, ":max_players"),
					(try_for_range, ":localvariable_2", 1, ":max_players"),
						(player_is_active, ":localvariable_2"),
						(multiplayer_send_int_to_player, ":localvariable_2", 68, 3),
					(try_end),
					(call_script, "script_warn_player_about_auto_team_balance"),
				(try_end),
			(try_end)
		]),

		(0.0, 0.0, 0.0,
		[
			(multiplayer_is_server),
			(eq, "$g_round_ended", 0),
			(eq, "$g_battle_death_mode_started", 2)
		],

		[
			(set_fixed_point_multiplier, 100),
			(scene_prop_get_instance, ":scene_prop_instance_headquarters_pole_code_only_0", "spr_headquarters_pole_code_only", 0),
			(scene_prop_get_instance, ":scene_prop_instance_headquarters_pole_code_only_1", "spr_headquarters_pole_code_only", 1),
			(scene_prop_get_instance, ":scene_prop_instance_team_1_flag_scene_prop_0", "$team_1_flag_scene_prop", 0),
			(scene_prop_get_instance, ":scene_prop_instance_team_2_flag_scene_prop_0", "$team_2_flag_scene_prop", 0),
			(prop_instance_get_position, 1, ":scene_prop_instance_headquarters_pole_code_only_0"),
			(prop_instance_get_position, 2, ":scene_prop_instance_headquarters_pole_code_only_1"),
			(prop_instance_get_position, 3, ":scene_prop_instance_team_1_flag_scene_prop_0"),
			(prop_instance_get_position, 4, ":scene_prop_instance_team_2_flag_scene_prop_0"),
			(copy_position, 7, 1),
			(position_move_z, 7, 100),
			(copy_position, 8, 2),
			(position_move_z, 8, 100),
			(get_distance_between_positions, ":distance_between_positions_1_3", 1, 3),
			(get_distance_between_positions, ":distance_between_positions_2_4", 2, 4),
			(assign, ":value", 0),
			(assign, ":value_2", 0),
			(get_max_players, ":max_players"),
			(try_for_range, ":localvariable", 0, ":max_players"),
				(player_is_active, ":localvariable"),
				(player_get_agent_id, ":agent_id_localvariable", ":localvariable"),
				(ge, ":agent_id_localvariable", 0),
				(agent_is_human, ":agent_id_localvariable"),
				(agent_is_alive, ":agent_id_localvariable"),
				(agent_get_team, ":team_agent_id_localvariable", ":agent_id_localvariable"),
				(agent_get_position, 0, ":agent_id_localvariable"),
				(agent_get_horse, ":horse_agent_id_localvariable", ":agent_id_localvariable"),
				(eq, ":horse_agent_id_localvariable", -1),
				(try_begin),
					(eq, ":team_agent_id_localvariable", 0),
					(try_begin),
						(get_sq_distance_between_positions, ":sq_distance_between_positions_0_1", 0, 1),
						(lt, ":sq_distance_between_positions_0_1", 1600),
						(try_begin),
							(eq, ":value", 0),
							(assign, ":value", 1),
						(else_try),
							(eq, ":value", -1),
							(assign, ":value", -2),
						(try_end),
					(try_end),
					(try_begin),
						(get_sq_distance_between_positions, ":sq_distance_between_positions_0_1", 0, 2),
						(lt, ":sq_distance_between_positions_0_1", 1600),
						(try_begin),
							(eq, ":value_2", 0),
							(assign, ":value_2", -1),
						(else_try),
							(eq, ":value_2", 1),
							(assign, ":value_2", -2),
						(try_end),
					(try_end),
				(else_try),
					(eq, ":team_agent_id_localvariable", 1),
					(try_begin),
						(get_sq_distance_between_positions, ":sq_distance_between_positions_0_1", 0, 2),
						(lt, ":sq_distance_between_positions_0_1", 1600),
						(try_begin),
							(eq, ":value_2", 0),
							(assign, ":value_2", 1),
						(else_try),
							(assign, ":value_2", -2),
						(try_end),
					(try_end),
					(try_begin),
						(get_sq_distance_between_positions, ":sq_distance_between_positions_0_1", 0, 1),
						(lt, ":sq_distance_between_positions_0_1", 1600),
						(try_begin),
							(eq, ":value", 0),
							(assign, ":value", -1),
						(else_try),
							(eq, ":value", 1),
							(assign, ":value", -2),
						(try_end),
					(try_end),
				(try_end),
			(try_end),
			(try_begin),
				(ge, ":distance_between_positions_1_3", 800),
				(assign, "$g_winner_team", 0),
				(get_max_players, ":max_players"),
				(call_script, "script_draw_this_round", "$g_winner_team"),
				(try_for_range, ":localvariable", 1, ":max_players"),
					(player_is_active, ":localvariable"),
					(multiplayer_send_int_to_player, ":localvariable", 69, "$g_winner_team"),
				(try_end),
				(team_get_score, ":score_0", 0),
				(call_script, "script_team_set_score", 0, ":score_0"),
				(try_for_range, ":localvariable", 1, ":max_players"),
					(player_is_active, ":localvariable"),
					(multiplayer_send_2_int_to_player, ":localvariable", 72, 0, ":score_0"),
				(try_end),
				(store_mission_timer_a, "$g_round_finish_time"),
				(assign, "$g_round_ended", 1),
			(else_try),
				(ge, ":distance_between_positions_2_4", 800),
				(assign, "$g_winner_team", 1),
				(get_max_players, ":max_players"),
				(call_script, "script_draw_this_round", "$g_winner_team"),
				(try_for_range, ":localvariable", 1, ":max_players"),
					(player_is_active, ":localvariable"),
					(multiplayer_send_int_to_player, ":localvariable", 69, "$g_winner_team"),
				(try_end),
				(team_get_score, ":score_1", 1),
				(call_script, "script_team_set_score", 1, ":score_1"),
				(try_for_range, ":localvariable", 1, ":max_players"),
					(player_is_active, ":localvariable"),
					(multiplayer_send_2_int_to_player, ":localvariable", 72, 1, ":score_1"),
				(try_end),
				(call_script, "script_show_multiplayer_message", 12, 0),
				(call_script, "script_check_achievement_last_man_standing", "$g_winner_team"),
				(store_mission_timer_a, "$g_round_finish_time"),
				(assign, "$g_round_ended", 1),
			(try_end),
			(try_begin),
				(eq, "$g_round_ended", 0),
				(position_get_z, ":position_z_3", 3),
				(prop_instance_is_animating, ":value_3", ":scene_prop_instance_team_1_flag_scene_prop_0"),
				(try_begin),
					(eq, ":value", -2),
					(eq, ":value_3", 1),
					(prop_instance_stop_animating, ":scene_prop_instance_team_1_flag_scene_prop_0"),
				(else_try),
					(this_or_next|eq, ":value", 0),
					(eq, ":value", -1),
					(prop_instance_get_animation_target_position, 9, ":scene_prop_instance_team_1_flag_scene_prop_0"),
					(position_get_z, ":position_z_9", 9),
					(this_or_next|eq, ":value_3", 0),
					(gt, ":position_z_9", ":position_z_3"),
					(get_distance_between_positions, ":distance_between_positions_3_7", 3, 7),
					(gt, ":distance_between_positions_3_7", 0),
					(val_mul, ":distance_between_positions_3_7", 16),
					(prop_instance_animate_to_position, ":scene_prop_instance_team_1_flag_scene_prop_0", 7, ":distance_between_positions_3_7"),
				(else_try),
					(eq, ":value", 1),
					(prop_instance_get_animation_target_position, 9, ":scene_prop_instance_team_1_flag_scene_prop_0"),
					(position_get_z, ":position_z_9", 9),
					(this_or_next|eq, ":value_3", 0),
					(lt, ":position_z_9", ":position_z_3"),
					(copy_position, 5, 1),
					(position_move_z, 5, 800),
					(get_distance_between_positions, ":distance_between_positions_3_7", 3, 5),
					(gt, ":distance_between_positions_3_7", 0),
					(val_mul, ":distance_between_positions_3_7", 8),
					(prop_instance_animate_to_position, ":scene_prop_instance_team_1_flag_scene_prop_0", 5, ":distance_between_positions_3_7"),
				(try_end),
				(position_get_z, ":position_z_4", 4),
				(prop_instance_is_animating, ":value_3", ":scene_prop_instance_team_2_flag_scene_prop_0"),
				(try_begin),
					(eq, ":value_2", -2),
					(eq, ":value_3", 1),
					(prop_instance_stop_animating, ":scene_prop_instance_team_2_flag_scene_prop_0"),
				(else_try),
					(this_or_next|eq, ":value_2", 0),
					(eq, ":value_2", -1),
					(prop_instance_get_animation_target_position, 9, ":scene_prop_instance_team_2_flag_scene_prop_0"),
					(position_get_z, ":position_z_9_2", 9),
					(this_or_next|eq, ":value_3", 0),
					(gt, ":position_z_9_2", ":position_z_4"),
					(get_distance_between_positions, ":distance_between_positions_4_8", 4, 8),
					(gt, ":distance_between_positions_4_8", 0),
					(val_mul, ":distance_between_positions_4_8", 16),
					(prop_instance_animate_to_position, ":scene_prop_instance_team_2_flag_scene_prop_0", 8, ":distance_between_positions_4_8"),
				(else_try),
					(eq, ":value_2", 1),
					(prop_instance_get_animation_target_position, 9, ":scene_prop_instance_team_2_flag_scene_prop_0"),
					(position_get_z, ":position_z_9_2", 9),
					(this_or_next|eq, ":value_3", 0),
					(lt, ":position_z_9_2", ":position_z_4"),
					(copy_position, 6, 2),
					(position_move_z, 6, 800),
					(get_distance_between_positions, ":distance_between_positions_4_8", 4, 6),
					(gt, ":distance_between_positions_4_8", 0),
					(val_mul, ":distance_between_positions_4_8", 8),
					(prop_instance_animate_to_position, ":scene_prop_instance_team_2_flag_scene_prop_0", 6, ":distance_between_positions_4_8"),
				(try_end),
			(try_end)
		]),

		(1.0, 0.0, 3.0,
		[
			(multiplayer_is_server),
			(eq, "$g_round_ended", 1),
			(store_mission_timer_a, ":mission_timer_a"),
			(val_sub, ":mission_timer_a", "$g_round_finish_time"),
			(ge, ":mission_timer_a", "$g_multiplayer_respawn_period")
		],

		[
			(assign, ":var_1", 0),
			(assign, ":var_2", 0),
			(get_max_players, ":max_players"),
			(try_for_range, ":localvariable", 0, ":max_players"),
				(player_is_active, ":localvariable"),
				(player_get_team_no, ":team_no_localvariable", ":localvariable"),
				(try_begin),
					(eq, ":team_no_localvariable", 0),
					(val_add, ":var_1", 1),
				(else_try),
					(eq, ":team_no_localvariable", 1),
					(val_add, ":var_2", 1),
				(try_end),
			(try_end),
			(store_sub, ":value", ":var_1", ":var_2"),
			(assign, ":value_2", 0),
			(try_begin),
				(try_begin),
					(store_mul, ":value_3", "$g_multiplayer_auto_team_balance_limit", -1),
					(le, ":value", ":value_3"),
					(store_div, ":value_2", ":value", -2),
					(assign, ":value_4", 1),
					(assign, ":value_5", 0),
				(else_try),
					(ge, ":value", "$g_multiplayer_auto_team_balance_limit"),
					(store_div, ":value_2", ":value", 2),
					(assign, ":value_4", 0),
					(assign, ":value_5", 1),
				(try_end),
			(try_end),
			(try_begin),
				(gt, ":value_2", 0),
				(try_begin),
					(try_for_range, ":unused", 0, ":value_2"),
						(assign, ":value_6", 0),
						(assign, ":value_7", -1),
						(get_max_players, ":max_players"),
						(try_for_range, ":localvariable_2", 0, ":max_players"),
							(player_is_active, ":localvariable_2"),
							(player_get_team_no, ":team_no_localvariable", ":localvariable_2"),
							(eq, ":team_no_localvariable", ":value_4"),
							(player_get_slot, ":localvariable_2_join_time", ":localvariable_2", slot_player_join_time),
							(try_begin),
								(gt, ":localvariable_2_join_time", ":value_6"),
								(assign, ":value_6", ":localvariable_2_join_time"),
								(assign, ":value_7", ":localvariable_2"),
							(try_end),
						(try_end),
						(try_begin),
							(ge, ":value_7", 0),
							(try_begin),
								(player_get_agent_id, ":agent_id_value_7", ":value_7"),
								(ge, ":agent_id_value_7", 0),
								(agent_is_alive, ":agent_id_value_7"),
								(player_get_kill_count, ":kill_count_value_7", ":value_7"),
								(val_add, ":kill_count_value_7", 1),
								(player_set_kill_count, ":value_7", ":kill_count_value_7"),
								(player_get_death_count, ":death_count_value_7", ":value_7"),
								(val_sub, ":death_count_value_7", 1),
								(player_set_death_count, ":value_7", ":death_count_value_7"),
								(player_get_score, ":score_value_7", ":value_7"),
								(val_add, ":score_value_7", 1),
								(player_set_score, ":value_7", ":score_value_7"),
								(try_for_range, ":localvariable_2", 1, ":max_players"),
									(player_is_active, ":localvariable_2"),
									(multiplayer_send_4_int_to_player, ":localvariable_2", 86, ":value_7", ":score_value_7", ":kill_count_value_7", ":death_count_value_7"),
								(try_end),
								(player_get_value_of_original_items, ":value_of_original_items_value_7", ":value_7"),
								(player_get_gold, ":gold_value_7", ":value_7"),
								(val_add, ":gold_value_7", ":value_of_original_items_value_7"),
								(player_set_gold, ":value_7", ":gold_value_7", 15000),
							(try_end),
							(player_set_troop_id, ":value_7", -1),
							(player_set_team_no, ":value_7", ":value_5"),
							(multiplayer_send_message_to_player, ":value_7", 79),
						(try_end),
					(try_end),
					(call_script, "script_show_multiplayer_message", 2, 0),
					(multiplayer_get_my_player, ":multiplayer_my_player"),
					(get_max_players, ":max_players"),
					(try_for_range, ":localvariable_2", 0, ":max_players"),
						(player_is_active, ":localvariable_2"),
						(neq, ":multiplayer_my_player", ":localvariable_2"),
						(multiplayer_send_int_to_player, ":localvariable_2", 68, 2),
					(try_end),
					(assign, "$g_team_balance_next_round", 0),
				(try_end),
			(try_end),
			(assign, "$g_team_balance_next_round", 0),
			(get_max_players, ":max_players"),
			(try_for_range, ":localvariable_2", 0, ":max_players"),
				(player_is_active, ":localvariable_2"),
				(player_set_slot, ":localvariable_2", slot_player_spawned_this_round, 0),
				(player_get_agent_id, ":agent_id_localvariable_2", ":localvariable_2"),
				(ge, ":agent_id_localvariable_2", 0),
				(agent_is_alive, ":agent_id_localvariable_2"),
				(player_save_picked_up_items_for_next_spawn, ":localvariable_2"),
				(player_get_value_of_original_items, ":value_of_original_items_value_7", ":localvariable_2"),
				(player_set_slot, ":localvariable_2", slot_player_last_rounds_used_item_earnings, ":value_of_original_items_value_7"),
			(try_end),
			(assign, ":var_24", 500),
			(val_mul, ":var_24", "$g_multiplayer_round_earnings_multiplier"),
			(val_div, ":var_24", 100),
			(store_sub, ":value_8", 2, "$g_number_of_targets_destroyed"),
			(store_mul, ":value_9", ":value_8", 100),
			(store_mul, ":value_10", "$g_number_of_targets_destroyed", 100),
			(val_add, ":value_9", 100),
			(val_sub, ":value_10", 100),
			(get_max_players, ":max_players"),
			(val_mul, ":value_9", "$g_multiplayer_round_earnings_multiplier"),
			(val_div, ":value_9", 100),
			(val_mul, ":value_10", "$g_multiplayer_round_earnings_multiplier"),
			(val_div, ":value_10", 100),
			(try_for_range, ":localvariable_2", 0, ":max_players"),
				(player_is_active, ":localvariable_2"),
				(player_get_gold, ":gold_value_7", ":localvariable_2"),
				(player_get_team_no, ":team_no_localvariable", ":localvariable_2"),
				(val_add, ":gold_value_7", ":var_24"),
				(try_begin),
					(eq, ":team_no_localvariable", "$g_defender_team"),
					(val_add, ":gold_value_7", ":value_9"),
				(else_try),
					(val_add, ":gold_value_7", ":value_10"),
				(try_end),
				(try_begin),
					(player_get_slot, ":value_of_original_items_value_7", ":localvariable_2", slot_player_last_rounds_used_item_earnings),
					(store_add, ":value_11", ":gold_value_7", ":value_of_original_items_value_7"),
					(store_mul, ":value_12", "$g_multiplayer_initial_gold_multiplier", 10),
					(lt, ":value_11", ":value_12"),
					(store_sub, ":value_13", ":value_12", ":value_11"),
					(val_add, ":gold_value_7", ":value_13"),
				(try_end),
				(player_set_gold, ":localvariable_2", ":gold_value_7", 15000),
			(try_end),
			(assign, "$my_team_at_start_of_round", -1),
			(multiplayer_clear_scene),
			(get_max_players, ":max_players"),
			(try_for_range, ":localvariable_2", 1, ":max_players"),
				(player_is_active, ":localvariable_2"),
				(player_set_slot, ":localvariable_2", slot_player_damage_given_to_target_1, 0),
				(player_set_slot, ":localvariable_2", slot_player_damage_given_to_target_2, 0),
			(try_end),
			(call_script, "script_multiplayer_initialize_belfry_wheel_rotations"),
			(call_script, "script_multiplayer_close_gate_if_it_is_open"),
			(call_script, "script_multiplayer_move_moveable_objects_initial_positions"),
			(assign, "$g_round_ended", 0),
			(assign, "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_team_1"),
			(assign, "$g_multiplayer_num_bots_required_team_2", "$g_multiplayer_num_bots_team_2"),
			(start_presentation, "prsnt_multiplayer_destructible_targets_display"),
			(call_script, "script_initialize_objects"),
			(store_mission_timer_a, "$g_round_start_time"),
			(call_script, "script_initialize_all_scene_prop_slots"),
			(get_max_players, ":max_players"),
			(try_for_range, ":localvariable_2", 0, ":max_players"),
				(player_is_active, ":localvariable_2"),
				(multiplayer_send_int_to_player, ":localvariable_2", 78, -9999),
			(try_end)
		]),

		(0.0, 0.0, 0.0,
		[],

		[
			(assign, ":var_1", "$g_multiplayer_num_bots_team_1"),
			(assign, ":var_2", "$g_multiplayer_num_bots_team_2"),
			(get_max_players, ":max_players"),
			(try_for_range, ":localvariable", 0, ":max_players"),
				(player_is_active, ":localvariable"),
				(player_get_team_no, ":team_no_localvariable", ":localvariable"),
				(try_begin),
					(eq, ":team_no_localvariable", 0),
					(val_add, ":var_1", 1),
				(else_try),
					(eq, ":team_no_localvariable", 1),
					(val_add, ":var_2", 1),
				(try_end),
			(try_end),
			(try_begin),
				(this_or_next|eq, ":var_1", 0),
				(eq, ":var_2", 0),
				(store_mission_timer_a, ":mission_timer_a"),
				(val_sub, ":mission_timer_a", "$g_round_start_time"),
				(le, ":mission_timer_a", 2),
				(store_mission_timer_a, "$g_round_start_time"),
			(try_end)
		]),

		(1.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(get_max_players, ":max_players"),
			(try_for_range, ":localvariable", 0, ":max_players"),
				(player_is_active, ":localvariable"),
				(neg|player_is_busy_with_menus, ":localvariable"),
				(try_begin),
					(player_slot_eq, ":localvariable", slot_player_spawned_this_round, 0),
					(player_get_team_no, ":team_no_localvariable", ":localvariable"),
					(lt, ":team_no_localvariable", 2),
					(player_get_troop_id, ":troop_id_localvariable", ":localvariable"),
					(ge, ":troop_id_localvariable", 0),
					(assign, ":value", 0),
					(assign, ":var_6", 0),
					(assign, ":var_7", 0),
					(try_begin),
						(assign, ":var_8", 0),
						(get_max_players, ":max_players"),
						(try_for_range, ":localvariable_2", 0, ":max_players"),
							(player_is_active, ":localvariable_2"),
							(val_add, ":var_8", 1),
							(player_get_team_no, ":team_no_localvariable_2", ":localvariable_2"),
							(try_begin),
								(eq, ":team_no_localvariable_2", 0),
								(val_add, ":var_6", 1),
							(else_try),
								(eq, ":team_no_localvariable_2", 1),
								(val_add, ":var_7", 1),
							(try_end),
						(try_end),
						(store_mul, ":value_2", ":var_6", ":var_7"),
						(store_mission_timer_a, ":mission_timer_a"),
						(val_sub, ":mission_timer_a", "$g_round_start_time"),
						(this_or_next|lt, ":mission_timer_a", 30),
						(this_or_next|le, ":var_8", 2),
						(eq, ":value_2", 0),
						(eq, "$g_round_ended", 0),
						(assign, ":value", 1),
					(try_end),
					(eq, ":value", 1),
					(try_begin),
						(eq, ":team_no_localvariable", 0),
						(assign, ":value_3", 0),
					(else_try),
						(eq, ":team_no_localvariable", 1),
						(assign, ":value_3", 32),
					(try_end),
					(call_script, "script_multiplayer_buy_agent_equipment", ":localvariable"),
					(player_spawn_new_agent, ":localvariable", ":value_3"),
					(player_set_slot, ":localvariable", slot_player_spawned_this_round, 1),
				(else_try),
					(eq, "$g_multiplayer_player_respawn_as_bot", 1),
					(player_get_agent_id, ":agent_id_localvariable", ":localvariable"),
					(ge, ":agent_id_localvariable", 0),
					(neg|agent_is_alive, ":agent_id_localvariable"),
					(agent_get_time_elapsed_since_removed, ":time_elapsed_since_removed_agent_id_localvariable", ":agent_id_localvariable"),
					(gt, ":time_elapsed_since_removed_agent_id_localvariable", "$g_multiplayer_respawn_period"),
					(player_get_team_no, ":team_no_localvariable", ":localvariable"),
					(assign, ":value_4", 0),
					(try_for_agents, ":var_17"),
						(eq, ":value_4", 0),
						(agent_is_alive, ":var_17"),
						(agent_is_human, ":var_17"),
						(agent_is_non_player, ":var_17"),
						(agent_get_team, ":team_var_17", ":var_17"),
						(eq, ":team_var_17", ":team_no_localvariable"),
						(assign, ":value_4", 1),
					(try_end),
					(try_begin),
						(eq, ":value_4", 1),
						(call_script, "script_find_most_suitable_bot_to_control", ":localvariable"),
						(player_control_agent, ":localvariable", reg0),
						(player_get_slot, ":localvariable_spawned_this_round", ":localvariable", slot_player_spawned_this_round),
						(val_add, ":localvariable_spawned_this_round", 1),
						(player_set_slot, ":localvariable", slot_player_spawned_this_round, ":localvariable_spawned_this_round"),
					(try_end),
				(try_end),
			(try_end)
		]),

		(0.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(eq, "$g_multiplayer_ready_for_spawning_agent", 1),
			(store_add, ":value", "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_required_team_2"),
			(try_begin),
				(gt, ":value", 0),
				(try_begin),
					(this_or_next|eq, "$g_multiplayer_game_type", 2),
					(this_or_next|eq, "$g_multiplayer_game_type", 3),
					(eq, "$g_multiplayer_game_type", 6),
					(team_get_score, ":score_0", 0),
					(team_get_score, ":score_1", 1),
					(store_add, ":value_2", ":score_0", ":score_1"),
					(eq, ":value_2", 0),
					(store_mission_timer_a, ":mission_timer_a"),
					(val_sub, ":mission_timer_a", "$g_round_start_time"),
					(lt, ":mission_timer_a", 20),
					(assign, ":value_3", 0),
				(else_try),
					(assign, ":value_3", 1),
				(try_end),
				(eq, ":value_3", 1),
				(store_random_in_range, ":random_in_range_0_value", 0, ":value"),
				(val_sub, ":random_in_range_0_value", "$g_multiplayer_num_bots_required_team_1"),
				(try_begin),
					(lt, ":random_in_range_0_value", 0),
					(assign, ":value_4", 0),
				(else_try),
					(assign, ":value_4", 1),
				(try_end),
				(try_begin),
					(this_or_next|eq, "$g_multiplayer_game_type", 2),
					(eq, "$g_multiplayer_game_type", 3),
					(store_mission_timer_a, ":mission_timer_a"),
					(val_sub, ":mission_timer_a", "$g_round_start_time"),
					(try_begin),
						(le, ":mission_timer_a", 20),
						(assign, ":value_5", 0),
					(else_try),
						(assign, ":value_5", 1),
					(try_end),
				(else_try),
					(assign, ":value_5", 1),
				(try_end),
				(call_script, "script_multiplayer_find_bot_troop_and_group_for_spawn", ":value_4", ":value_5"),
				(assign, ":var_10", reg0),
				(assign, ":var_11", reg1),
				(team_get_faction, ":faction_value_4", ":value_4"),
				(assign, ":var_13", 0),
				(try_for_range, ":troop", "trp_swadian_crossbowman_multiplayer_ai", "trp_swadian_crossbowman_multiplayer"),
					(store_faction_of_troop, ":faction_of_troop_troop", ":troop"),
					(eq, ":faction_of_troop_troop", ":faction_value_4"),
					(val_add, ":var_13", 1),
				(try_end),
				(assign, ":var_16", 0),
				(get_max_players, ":max_players"),
				(try_for_range, ":localvariable", 0, ":max_players"),
					(player_is_active, ":localvariable"),
					(player_get_team_no, ":team_no_localvariable", ":localvariable"),
					(eq, ":value_4", ":team_no_localvariable"),
					(assign, ":value_6", 0),
					(store_add, ":value_7", 35, ":var_13"),
					(try_for_range, ":localvariable_2", 35, ":value_7"),
						(player_slot_ge, ":localvariable", ":localvariable_2", 1),
						(assign, ":value_6", 1),
						(assign, ":value_7", 0),
					(try_end),
					(ge, ":value_6", 1),
					(val_add, ":var_16", 1),
				(try_end),
				(try_begin),
					(this_or_next|ge, ":var_11", 0),
					(eq, ":var_16", 0),
					(troop_get_inventory_slot, ":inventory_slot_var_10_8", ":var_10", 8),
					(try_begin),
						(ge, ":inventory_slot_var_10_8", 0),
						(assign, ":value_8", 1),
					(else_try),
						(assign, ":value_8", 0),
					(try_end),
					(try_begin),
						(eq, "$g_multiplayer_game_type", 6),
						(store_mission_timer_a, ":mission_timer_a"),
						(val_sub, ":mission_timer_a", "$g_round_start_time"),
						(try_begin),
							(lt, ":mission_timer_a", 20),
							(try_begin),
								(eq, ":value_4", 0),
								(call_script, "script_multiplayer_find_spawn_point", ":value_4", 1, ":value_8"),
							(else_try),
								(assign, reg0, 32),
							(try_end),
						(else_try),
							(call_script, "script_multiplayer_find_spawn_point", ":value_4", 0, ":value_8"),
						(try_end),
					(else_try),
						(this_or_next|eq, "$g_multiplayer_game_type", 2),
						(eq, "$g_multiplayer_game_type", 3),
						(try_begin),
							(eq, ":value_4", 0),
							(assign, reg0, 0),
						(else_try),
							(assign, reg0, 32),
						(try_end),
					(else_try),
						(call_script, "script_multiplayer_find_spawn_point", ":value_4", 0, ":value_8"),
					(try_end),
					(store_current_scene, ":current_scene"),
					(modify_visitors_at_site, ":current_scene"),
					(add_visitors_to_current_scene, reg0, ":var_10", 1, ":value_4", ":var_11"),
					(assign, "$g_multiplayer_ready_for_spawning_agent", 0),
					(try_begin),
						(eq, ":value_4", 0),
						(val_sub, "$g_multiplayer_num_bots_required_team_1", 1),
					(else_try),
						(eq, ":value_4", 1),
						(val_sub, "$g_multiplayer_num_bots_required_team_2", 1),
					(try_end),
				(try_end),
			(try_end)
		]),

		(3.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(try_for_agents, ":var_1"),
				(agent_is_non_player, ":var_1"),
				(agent_is_human, ":var_1"),
				(agent_is_alive, ":var_1"),
				(agent_get_group, ":group_var_1", ":var_1"),
				(try_begin),
					(neg|player_is_active, ":group_var_1"),
					(call_script, "script_multiplayer_change_leader_of_bot", ":var_1"),
				(else_try),
					(player_get_team_no, ":team_no_group_var_1", ":group_var_1"),
					(agent_get_team, ":team_var_1", ":var_1"),
					(neq, ":team_no_group_var_1", ":team_var_1"),
					(call_script, "script_multiplayer_change_leader_of_bot", ":var_1"),
				(try_end),
			(try_end)
		]),

		(1.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(assign, ":value", 0),
			(try_begin),
				(this_or_next|eq, "$g_multiplayer_game_type", 2),
				(this_or_next|eq, "$g_multiplayer_game_type", 3),
				(eq, "$g_multiplayer_game_type", 6),
				(try_begin),
					(eq, "$g_round_ended", 1),
					(store_mission_timer_a, ":mission_timer_a"),
					(val_sub, ":mission_timer_a", "$g_round_finish_time"),
					(store_sub, ":value_2", "$g_multiplayer_respawn_period", 1),
					(ge, ":mission_timer_a", ":value_2"),
					(store_mission_timer_a, ":mission_timer_a_2"),
					(try_begin),
						(this_or_next|eq, "$g_multiplayer_game_type", 2),
						(eq, "$g_multiplayer_game_type", 3),
						(assign, ":value_3", 90),
					(else_try),
						(assign, ":value_3", 120),
					(try_end),
					(store_mul, ":value_4", "$g_multiplayer_game_max_minutes", 60),
					(store_sub, ":value_5", ":value_4", ":value_3"),
					(gt, ":mission_timer_a_2", ":value_5"),
					(assign, ":value", 1),
				(try_end),
				(eq, ":value", 1),
			(else_try),
				(neq, "$g_multiplayer_game_type", 2),
				(neq, "$g_multiplayer_game_type", 3),
				(neq, "$g_multiplayer_game_type", 6),
				(neq, "$g_multiplayer_game_type", 5),
				(store_mission_timer_a, ":mission_timer_a_2"),
				(store_mul, ":value_4", "$g_multiplayer_game_max_minutes", 60),
				(gt, ":mission_timer_a_2", ":value_4"),
				(assign, ":value", 1),
			(else_try),
				(team_get_score, ":score_0", 0),
				(team_get_score, ":score_1", 1),
				(try_begin),
					(neq, "$g_multiplayer_game_type", 5),
					(try_begin),
						(this_or_next|ge, ":score_0", "$g_multiplayer_game_max_points"),
						(ge, ":score_1", "$g_multiplayer_game_max_points"),
						(assign, ":value", 1),
					(try_end),
				(else_try),
					(assign, ":value_6", 0),
					(get_max_players, ":max_players"),
					(try_for_range, ":localvariable", 0, ":max_players"),
						(player_is_active, ":localvariable"),
						(player_get_agent_id, ":agent_id_localvariable", ":localvariable"),
						(ge, ":agent_id_localvariable", 0),
						(neg|agent_is_non_player, ":agent_id_localvariable"),
						(assign, ":value_6", 1),
						(assign, ":max_players", 0),
					(try_end),
					(eq, ":value_6", 1),
					(this_or_next|le, ":score_0", 0),
					(le, ":score_1", 0),
					(assign, ":value", 1),
				(try_end),
			(try_end),
			(try_begin),
				(eq, ":value", 1),
				(call_script, "script_game_multiplayer_get_game_type_mission_template", "$g_multiplayer_game_type"),
				(start_multiplayer_mission, reg0, "$g_multiplayer_selected_map", 0),
				(call_script, "script_game_set_multiplayer_mission_end"),
			(try_end)
		]),

		(-21.0, 0.0, 0.0,
		[],

		[
			(try_begin),
				(eq, "$g_multiplayer_mission_end_screen", 0),
				(assign, "$g_multiplayer_stats_chart_opened_manually", 1),
				(start_presentation, "prsnt_multiplayer_stats_chart"),
			(try_end)
		]),

		(0.0, 0.0, ti_once,
		[],

		[
			(start_presentation, "prsnt_multiplayer_welcome_message")
		]),

		(-24.0, 0.0, 0.0,
		[],

		[
			(start_presentation, "prsnt_multiplayer_round_time_counter"),
			(start_presentation, "prsnt_multiplayer_team_score_display")
		]),

		(-23.0, 0.0, 0.0,
		[],

		[
			(neg|is_presentation_active, "prsnt_multiplayer_escape_menu"),
			(neg|is_presentation_active, "prsnt_multiplayer_stats_chart"),
			(eq, "$g_waiting_for_confirmation_to_terminate", 0),
			(start_presentation, "prsnt_multiplayer_escape_menu")
		])
	]),

	("bandit_lair", mtf_battle_mode, 8,
	"Ambushing a bandit lair",
	[(0, mtef_team_0|mtef_use_exact_number, af_override_horse, aif_start_alarmed, 7, []),
	(1, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 20, []),
	(2, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 20, []),
	(3, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 20, []),
	(4, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 20, []),
	(5, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 20, []),
	(6, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 20, []),
	(7, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 20, []),
	(8, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 20, []),
	(9, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 20, []),
	(10, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 20, [])],
	[
		    (7, 0, ti_once,
    [],
    [
	(call_script, "script_assign_traits"),
    ]),


    (0, 0, 1, 
    [
    ],
    [
	(call_script, "script_stumbling"),
    ]),
		#Bandit lair fix LOL
		
		(0, 0, ti_once, [
	  ], [
	  (assign, "$lav_manor_fix", 1),
	  ]),
		
		







#Decapitations next level right here.
(ti_on_agent_hit, 0, 0, [(eq, "$dynamic_decap", 1),],
[
   (store_trigger_param_1, ":victim_agent"),
   (store_trigger_param_2, ":attacker_agent"),
   (store_trigger_param_3, ":damage"),
   (assign, ":attacker_item", reg0), ### Transfer the item ID to make sure it dosn't change while the script is running
   (copy_position, pos5, pos0), ### Transfer the position of the hit to make sure it dosn't change while the script is running
   (neq, ":victim_agent", -1),
   (try_begin), #-- Decapitations --#
      (agent_is_human, ":victim_agent"),
	  (ge, ":attacker_item", 0),
	  (assign, ":run", 0), ### Reset the run test variable
#	  (try_begin), ### Special weapons that can decap, ovevrrides the below conditions
#		  (this_or_next|eq, ":attacker_item", "itm_supercrossbow"),
#		  (eq, ":attacker_item", "itm_supersledge"),
#		  (assign, ":run", 1),
	  (try_begin),
		  #(neq, ":attacker_item", "itm_mace_1"), ### List of weapons that cannot decapitate
		  #(neq, ":attacker_item", "itm_mace_2"), ### This would be easier to do with a preperty check (for damage type), but I don't know if that is possible or not
		  #(neq, ":attacker_item", "itm_mace_3"),
		  #(neq, ":attacker_item", "itm_staff"), #Keeping active incase of script errors
		  (agent_get_action_dir, ":attack_dir", ":attacker_agent"), ### Makes sure the attack is either a left or right swing
		  (this_or_next|eq, ":attack_dir", 1), ### Right swing
		  (eq, ":attack_dir", 2), ### Left swing
		  (assign, ":run", 1),
	  (try_end),
	  (eq, ":run", 1), ### One of the checks were true, continue to run script
	  #(assign, reg1, ":damage"), #Debug messages
	  #(display_message, "@Damage: {reg1}"),
	  
	  (assign, ":run", 0), ### Reset the run test variable
	  (try_begin),
		(ge, ":damage", "$decap_damage"), ### 30 Minimum damage required to decapitate an agent
		(assign, ":run", 1),
		
#	  (else_try),  ### If debugging mode is on, this bypasses the damage requirement check
#		  (eq,"$g_decapitations_debugging", 1),
#		  (assign, ":run", 1),
#		  (display_message, "@Decap minimum DMG req bypassed"),
	  (try_end),
	  (eq, ":run", 1),
	  
	  (store_agent_hit_points, ":hp", ":victim_agent", 1),
	  (val_add, ":hp", 10), ### 10 Victim must have the negative of this hp or below after hit for the script to move on (never put this value below 0 since the agent has to be absolutley positvely dead)!
	  (ge, ":damage", ":hp"),
	  
	  
	  ### Compare the hit position to the agent's position
      (agent_get_position, pos4, ":victim_agent"),
      (get_distance_between_positions, ":distance", pos4, pos5), 
	  (agent_get_horse, ":is_mounted", ":victim_agent"),
	  (try_begin), ### If the agent is on horseback, these values are used (note that these values will not be exactly correct if the horse is very large or very small)
		(ge, ":is_mounted", 0), ### Will be -1 if no horse is to be found, so anything above means that the agent is mounted
		(assign, ":min_distance", 240), ### Minimum distance from the agent's horse's hooves from which the hit is valid (240 is an approximate value)
		(assign, ":max_distance", 260), ### Maximum distance from the agent's horse's hooves to which the hit is valid (260 is an approximate value)
	  (else_try),  ### If the agent is on foot, these values are used
	    (assign, ":min_distance", 160), ### Minimum distance from the agent's feet from which the hit is valid (160 = slightly below the neck)
	    (assign, ":max_distance", 176), ### Maximum distance from the agent's feet to which the hit is valid (176 = near the nose)
	  (try_end),
      (is_between, ":distance", ":min_distance", ":max_distance"), ### Check to see if the hit is within the allowed area
	  
	  
	  (assign, ":run", 0), ### Default variable value before damage test
	  (try_begin),
		  (store_div, ":chance", ":damage", "$decap_damage_divider"), ### Chance of decap is damage / 4 right now. Lower this value for higher chances of decapitation (or press M+Right Ctrl for debug more if you just want to test easy decaps in-game).
		  
		  #(assign, reg1, ":chance"), #Debug messages
		  #(display_message, "@Decap chance is: {reg1}"),
		  (store_random_in_range, ":diceroll", 0, "$decap_randomizer"), ### Randomizer, 0-100
		  
		  #(assign, reg1, ":diceroll"), #Debug messages
		  #(display_message, "@Diceroll: {reg1}"),
		  (le, ":diceroll", ":chance"), ### ":diceroll" must be less than or equal to ":chance", if it is, decapitation occurs!
		  
		  (assign, ":run", 1), ### SUCCESS!
		  
#     (else_try),  ### If debugging mode is on, bypass chance calculation
#		  (eq,"$g_decapitations_debugging", 1),
#		  (assign, ":run", 1),
#		  (display_message, "@Decap chance calc bypassed"),
	  (try_end),  
	  (eq, ":run", 1), ### Time for the fun stuff!

	  ### Gender test for spawning the right head type
	  (assign, ":head_type", "itm_cut_off_head_male"),
	  (agent_get_troop_id, ":victim_troop", ":victim_agent"),
	  (try_begin),
	    (ge, ":victim_troop", 0),
		(troop_get_type,":victim_gender",":victim_troop"),
		(eq, ":victim_gender", 1),
		(assign, ":head_type", "itm_cut_off_head_female"),
	  (try_end),
	  
	  ### Randomize the spawned head's and/or helmet's position and orientation
	  (store_random_in_range, ":z_rotation", 0, 360),
	  (store_random_in_range, ":y_rotation", -60, 60),
	  (store_random_in_range, ":x_pos", -90, 90),
	  (store_random_in_range, ":y_pos", -90, 90),
	  (position_rotate_z, pos4,":z_rotation"),
	  (position_rotate_y, pos4,":y_rotation"),
	  (position_move_x, pos4, ":x_pos"),
	  (position_move_y, pos4, ":y_pos"),
	  (position_set_z_to_ground_level, pos4),
	  (position_move_z, pos4, 5),
	  (set_spawn_position, pos4),
	  (assign, ":prunetime", 360), ### This is the time in seconds before the spawned head or helmet gets pruned (removed). Recommended to keep it above 0 to make sure it gets removed eventually or when the scene resets, to prevent performance issues.
	  
	  #(spawn_item, ":head_type", 0, ":prunetime"), ### This is the old way of spawning the head on the ground with the helmet, disabled because of the new dynamic heads. You can comment away (disable) the dynamic heads spawning further down and uncomment this line for a less performance-needing approach (with no physics involved).
	  
	  ### Does the agent have a helmet or hat equipped?
      (agent_get_item_slot, ":item", ":victim_agent", 4), #head slot
      (try_begin),
         (ge, ":item", 1), ### Does it?
         (agent_unequip_item, ":victim_agent", ":item"), ### Yes it does. Unequip it to allow replacement by the invisible helmet further down
		 (try_begin),
			 ### Don't spawn items with "itp_attatch_armature" flag: rigging causes floating bugs
			 ### This would be much better to do with an item flag check, but I haven't found any way to do that
			 #(neq, ":item", "itm_with_itp_attatch_armature"),
			 #(neg|is_between,":item","start_of_itm_range_with_itp_attatch_armature","end_of_itm_range_with_itp_attatch_armature"),
			#(set_spawn_position, pos4),
			(spawn_item, ":item", 0, ":prunetime"), ### Spawns the agent's currently equipped headgear on the dropped head's position
		 (try_end),
      (try_end),
	  
	  (agent_equip_item, ":victim_agent", "itm_invisible_head"), ### Put an invisible helmet on the agent's head to "remove" it
	  
	  
	  (agent_get_position, pos4, ":victim_agent"), ### Refreshes the agent's position
	  (position_move_z, pos4, ":min_distance"), ### Move to the where the neck used to be attached
	  
	  
	  ### Blood effects! The last variable is the strength. Lower or increase it for more/less blood (or tweak the particle effects themselves in "module_particle_systems.py").
      (particle_system_burst, "psys_blood_decapitation", pos4, 40), 
	  (particle_system_burst, "psys_game_blood", pos4, 10),
	  (particle_system_burst, "psys_game_blood_2", pos4, 10),
	  
	  (play_sound_at_position, "snd_decapitation_battle", pos4), ### Play some nasty sounds
	  
	  
	  ### Dynamic head spawning! See the bottom of "module_scene_props.py" for physics-related options and more.
	  (position_move_z, pos4, 20),
	  (set_spawn_position, pos4),
	  (assign, ":head_type", "spr_head_dynamic_male"),
	  (try_begin), ### Gender check (for determening the type of head)
		(eq, ":victim_gender", 1),
		(assign, ":head_type", "spr_head_dynamic_female"),
	  (try_end),
	  (spawn_scene_prop, ":head_type"),
	  
		#Addition check if we should allow the message to appears
			(eq, "$allow_decap_mess", 1), #Possible script error

	  ### This below is for the text that shows up when somebody is decapitated.
	  
	  ### Who decapitated who?
		(agent_get_troop_id, ":attacker_troop", ":attacker_agent"),
		(str_store_troop_name, s0, ":attacker_troop"),

		(agent_get_troop_id, ":victim_troop", ":victim_agent"),
		(str_store_troop_name, s1, ":victim_troop"),

	  
	  ### Colour check (friend or foe?)
	  (get_player_agent_no, ":my_agent"),
	  (agent_get_team, ":my_team", ":my_agent"),
	  (agent_get_team, ":victim_team", ":victim_agent"),
	  (try_begin), ### Display it!
		  (neq, ":my_team", ":victim_team"),
		  (display_message, "@>>> {s0} decapitated {s1}!", 0xFF33DD11), ## Green
	  (else_try),
		  (display_message, "@>>> {s0} decapitated {s1}!", 0xFFFF4422), ## Red
	  (try_end),
   (try_end), #-- Decapitations END --#
   
   ]),













			##################################################
##### troop_ratio_bar
##################################################
      (0, 0, ti_once, [
	  (eq, "$use_troopbars", 1),
	  ], [
	  (start_presentation, "prsnt_troop_ratio_bar"),
	  ]),
##################################################
##### troop_ratio_bar
##################################################
	
###Voice-over for Infantry, archers & Cavalry
		
		(0.0, 0.3, 0.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 29) #Everyone!
		],

		[
		(call_script, "script_identify_battle_voices_all")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 30) #Infantry
		],

		[
		(call_script, "script_identify_battle_voices_inf")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 31) #Archers
		],

		[
		(call_script, "script_identify_battle_voices_archers")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 32) #Cavalry
		],

		[
		(call_script, "script_identify_battle_voices_cav")
		]),
		###Voice-over for Infantry, archers & Cavalry	
		
		
		
				
			#####Engage SP Music Tracks FIELD BATTLES
	#####MUSICBOX
	(ti_before_mission_start, 0, ti_once, [ #680 #(ti_after_mission_start, 0, 680, [ #680
	(eq, "$additional_music", 1), #Obtained from Mod Options, affects mission templates, range: ALL SP Hostile music, co-op variant is additional_music_coop.
	],
		
  [
    #(play_track, "track_silence", 1), #Stop current module track
	   (music_set_situation, mtf_sit_fight), #Field
   #(music_set_situation, mtf_sit_siege), #Siege probably don't use
	(assign, "$music_timer", 0), #Patch
  #Randomize chance is 1 in a 5 (20%)
  
  #Field related extend to sieges
  (store_random_in_range, ":randomizer", 0, 2), #50% Chance of randomization
  (try_begin),
  (eq, ":randomizer", 0),
  (store_random_in_range, ":euro_randomizernext", 1, 12),
  (store_random_in_range, ":medi_randomizer", 1, 8),
  (store_random_in_range, ":arab_randomizer", 1, 9),
  (assign, "$track_count_field", ":euro_randomizernext"),
  (assign, "$track_count_field_medi", ":medi_randomizer"),
  (assign, "$track_count_field_arabs", ":arab_randomizer"),
  (try_end),
  #Field related extend to sieges
  ]),
	
	(0, 0, 3, [ #680 #(ti_after_mission_start, 0, 680, [ #680
	(eq, "$additional_music", 1), #Obtained from Mod Options, affects mission templates, range: ALL SP Hostile music, co-op variant is additional_music_coop.
	],
		
  [
		  #(display_message, "@Executing music code"),
		  (store_mission_timer_b, ":time_msec"),
		  #(assign, reg10, ":time_msec"),
          #(str_clear, s10),
          #(str_store_string, s10, "@Mission timer B for music: {reg10}"),
		  #(display_message, s10),
			#if next action time is lower than current time, play the sound
			(ge, ":time_msec", "$music_timer"),
			(reset_mission_timer_b), #Resetting mission timer, too.
			(assign, "$music_timer", 0),# Resetting value when track ends.
		
  #Euro only
     (try_begin),
      (ge, "$track_count_field", 11),
      (assign, "$track_count_field", 1),
    (else_try),
      (val_add, "$track_count_field", 1),
	  (ge, "$track_count_field", 11),
	  (assign, "$track_count_field", 1),
    (try_end),
  #Euro only
  
  #Mediterrain only
  
       (try_begin),
      (ge, "$track_count_field_medi", 8),
      (assign, "$track_count_field_medi", 1),
    (else_try),
      (val_add, "$track_count_field_medi", 1),
	  (ge, "$track_count_field_medi", 8),
	  (assign, "$track_count_field_medi", 1),
    (try_end),
  #Mediterrain only
  
  
  #Arabs only

       (try_begin),
      (ge, "$track_count_field_arabs", 8),
      (assign, "$track_count_field_arabs", 1),
    (else_try),
      (val_add, "$track_count_field_arabs", 1),
	  (ge, "$track_count_field_arabs", 8),
	  (assign, "$track_count_field_arabs", 1),
    (try_end),
	#Arabs only
  
  #Pause between music length in seconds
  #(val_add, "$music_timer", 2),# 5 seconds added
  #Pause between music length in seconds
  
	(party_get_current_terrain, ":current_terrain_main_party", "p_main_party"), #Co-Op variant of this trigger should use scenes in_between rather than terrain because player can't obtain terrain in co-op sessions.
	(try_begin),
	(this_or_next|eq, ":current_terrain_main_party", 1), #rt_mountain
	(this_or_next|eq, ":current_terrain_main_party", 2), #rt_steppe
	(eq, ":current_terrain_main_party", 10), #rt_steppe_forest
	#Begin mediterrain music 5 tracks total
	(try_begin),
	(eq, "$track_count_field_medi", 1), #
	(play_track, "track_medib1", 2),
	(val_add, "$music_timer", 206),# 1 second added
	(else_try),
	
	(eq, "$track_count_field_medi", 2), #
	(play_track, "track_medib3", 2),
	(val_add, "$music_timer", 209),#
	(else_try),
	
	(eq, "$track_count_field_medi", 3), #
	(play_track, "track_medib4", 2),
	(val_add, "$music_timer", 237),#
	(else_try),

	(eq, "$track_count_field_medi", 4), #
	(play_track, "track_medib5", 2),
	(val_add, "$music_timer", 229),#
	(else_try),
	(eq, "$track_count_field_medi", 5), #
	(play_track, "track_medib6", 2),
	(val_add, "$music_timer", 127),#
	(else_try),
	(eq, "$track_count_field_medi", 6), #
	(play_track, "track_medib7", 2),
	(val_add, "$music_timer", 161),#
	
	(else_try),
	(eq, "$track_count_field_medi", 7), #
	(play_track, "track_medib8", 2),
	(val_add, "$music_timer", 250),#
	(try_end),
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 3), #rt_plain
	(this_or_next|eq, ":current_terrain_main_party", 11), #rt_forest
	(eq, ":current_terrain_main_party", 9), #rt_mountain_forest
	#Begin Euro Music
	(try_begin),
	(eq, "$track_count_field", 1), #
	(play_track, "track_eurob1", 2),
	(val_add, "$music_timer", 319),#
	(else_try),
	(eq, "$track_count_field", 2), #
	(play_track, "track_eurob2", 2),
	(val_add, "$music_timer", 279),#
	(else_try),
	
	(eq, "$track_count_field", 3), #
	(play_track, "track_eurob3", 2),
	(val_add, "$music_timer", 248),#
	(else_try),
	
	(eq, "$track_count_field", 4), #
	(play_track, "track_eurob4", 2),
	(val_add, "$music_timer", 332),#
	(else_try),
	
	(eq, "$track_count_field", 5), #
	(play_track, "track_eurob5", 2),
	(val_add, "$music_timer", 93),#
		(else_try),
	
	(eq, "$track_count_field", 6), #
	(play_track, "track_eurob6", 2),
	(val_add, "$music_timer", 76),#
		(else_try),
	
	(eq, "$track_count_field", 7), #
	(play_track, "track_eurob7", 2),
	(val_add, "$music_timer", 80),#
		(else_try),
	
	(eq, "$track_count_field", 8), #
	(play_track, "track_eurob8", 2),
	(val_add, "$music_timer", 58),#
		(else_try),
	
	(eq, "$track_count_field", 9), #
	(play_track, "track_eurob9", 2),
	(val_add, "$music_timer", 58),#
		(else_try),
	
#	(eq, "$track_count_field", 10), #
#	(play_track, "track_eurob10"),
#	(val_add, "$music_timer", 123),#
#		(else_try),
	
	(eq, "$track_count_field", 10), #
	(play_track, "track_eurob11", 2),
	(val_add, "$music_timer", 335),#
	(try_end),
	
	
	
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 4), #rt_snow
	(this_or_next|eq, ":current_terrain_main_party", 12), #rt_snow_forest
	(eq, ":current_terrain_main_party", 7), #rt_bridge
	#Begin Euro Music
	(try_begin),
	(eq, "$track_count_field", 1), #
	(play_track, "track_eurob1", 2),
	(val_add, "$music_timer", 319),#
	(else_try),
	(eq, "$track_count_field", 2), #
	(play_track, "track_eurob2", 2),
	(val_add, "$music_timer", 279),#
	(else_try),
	
	(eq, "$track_count_field", 3), #
	(play_track, "track_eurob3", 2),
	(val_add, "$music_timer", 248),#
	(else_try),
	
	(eq, "$track_count_field", 4), #
	(play_track, "track_eurob4", 2),
	(val_add, "$music_timer", 332),#
	(else_try),
	
	(eq, "$track_count_field", 5), #
	(play_track, "track_eurob5", 2),
	(val_add, "$music_timer", 93),#
		(else_try),
	
	(eq, "$track_count_field", 6), #
	(play_track, "track_eurob6", 2),
	(val_add, "$music_timer", 76),#
		(else_try),
	
	(eq, "$track_count_field", 7), #
	(play_track, "track_eurob7", 2),
	(val_add, "$music_timer", 80),#
		(else_try),
	
	(eq, "$track_count_field", 8), #
	(play_track, "track_eurob8", 2),
	(val_add, "$music_timer", 58),#
		(else_try),
	
	(eq, "$track_count_field", 9), #
	(play_track, "track_eurob9", 2),
	(val_add, "$music_timer", 58),#
		(else_try),
	
#	(eq, "$track_count_field", 10), #
#	(play_track, "track_eurob10"),
#	(val_add, "$music_timer", 123),#
#		(else_try),
	
	(eq, "$track_count_field", 10), #
	(play_track, "track_eurob11", 2),
	(val_add, "$music_timer", 335),#
	(try_end),
	
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 5), #rt_desert
	(eq, ":current_terrain_main_party", 13), #rt_desert_forest
	#Begin arab music
	(try_begin),
	(eq, "$track_count_field_arabs", 1), #
	(play_track, "track_arabb1", 2),
	(val_add, "$music_timer", 262),#
	(else_try),
	(eq, "$track_count_field_arabs", 2), #
	(play_track, "track_arabb2", 2),
	(val_add, "$music_timer", 291),#
	#(else_try),
	#(eq, "$track_count_field_arabs", 3), #
	#(play_track, "track_arabb3"),
	(else_try),
	(eq, "$track_count_field_arabs", 3), #
	(play_track, "track_arabb4", 2),
	(val_add, "$music_timer", 104),#
	(else_try),
	
	(eq, "$track_count_field_arabs", 4), #
	(play_track, "track_arabb5", 2),
	(val_add, "$music_timer", 76),#
		(else_try),
	
	(eq, "$track_count_field_arabs", 5), #
	(play_track, "track_arabb6", 2),
	(val_add, "$music_timer", 218),#
	
			(else_try),
	(eq, "$track_count_field_arabs", 6), #
	(play_track, "track_arabb8", 2),
	(val_add, "$music_timer", 209),#
			(else_try),
	(eq, "$track_count_field_arabs", 7), #
	(play_track, "track_arabb9", 2),
	(val_add, "$music_timer", 103),#
	#	(else_try),
	#
	#(eq, "$track_count_field_arabs", 7), #
	#(play_track, "track_arabb7"),
	(try_end),
	(try_end),
	
  ]),
	
	#####MUSICBOX END
			#####Camera mode by Rubik None-Coop Version Begin
		(0, 0, 0, [(eq, "$extended_camera_mode", 1)],
  [
    (get_player_agent_no, ":player_agent"),
    (agent_get_look_position, pos1, ":player_agent"),
    (position_move_z, pos1, "$g_camera_z"),
    (position_move_y, pos1, "$g_camera_y"),
    (agent_get_horse, ":horse_agent", ":player_agent"),
    (try_begin),
      (ge, ":horse_agent", 0),
      (position_move_z, pos1, 80),
    (try_end),
    (mission_cam_set_position, pos1),
    (try_begin),
      (key_is_down, key_left_control),
      (assign, ":move_val", 50),
    (else_try),
      (assign, ":move_val", 10),
    (try_end),
    (try_begin),
      (key_clicked, key_up),
      (mission_cam_set_mode, 1),
      (val_add, "$g_camera_z", ":move_val"),
    (else_try),
      (key_clicked, key_down),
      (mission_cam_set_mode, 1),
      (val_sub, "$g_camera_z", ":move_val"),
    (else_try),
      (key_clicked, key_left),
      (mission_cam_set_mode, 1),
      (val_add, "$g_camera_y", ":move_val"),
    (else_try),
      (key_clicked, key_right),
      (mission_cam_set_mode, 1),
      (val_sub, "$g_camera_y", ":move_val"),
    (try_end),
    (try_begin),
      (this_or_next|game_key_clicked, gk_view_char),
      (this_or_next|game_key_clicked, gk_zoom),
      (game_key_clicked, gk_cam_toggle),
      (mission_cam_set_mode, 0),
    (try_end),
  ]),
  #####Camera mode by Rubik None-Coop Version End
		
		
###########Torch by troycall/Envious Arm begin

																	#(-25.0, 0.0, 0.0, #Enabling this forces random chance to be 100%
																	#(ti_on_agent_spawn, 0, 0, #Enabling this forces random chance to be 100%
																	(20, 0, ti_once, #Proper one, but reinforcements do not get assigned torches.
        [
          (mission_tpl_are_all_agents_spawned), #From VC Header_Operations to prevent weird behavior.
          (is_currently_night) #Check if currently night time
        ],
        [

		  ####DEFAULT
		   #(try_for_agents, ":agent"),
            #(agent_get_wielded_item, ":item", ":agent", 1),
            #(gt, ":item", -1),
            #(agent_unequip_item, ":agent", ":item"),
            #(agent_equip_item, ":agent", "itm_torch"),
            #(agent_set_wielded_item, ":agent", "itm_torch"),           
          #(try_end),
		  ####END DEFAULT
		  
		  (try_for_agents, ":agent"), #Try for agents...
		  #Extension
		  (agent_is_alive, ":agent"), #For performance reasons
		  #End
		  (agent_is_human, ":agent"), #Performance
          (agent_is_non_player, ":agent"), #Uncommenting this includes player on spawning with torch, may be necessary to uncomment at module_coop_mission_templates.
		  


		 ##########Default Order
		 #######		  (agent_is_human, ":agent"), #Performance
         #######(agent_is_non_player, ":agent"), #Uncommenting this includes player on spawning with torch, may be necessary to uncomment at module_coop_mission_templates.
		 #######
		 ########Extension
		 #######(agent_is_active, ":agent"), #For performance reasons
		 #######(agent_is_alive, ":agent"), #For performance reasons
		 ########End
		  ############
		  		  
				#  (try_begin),
				  
		#		          (agent_get_wielded_item, ":rhand", ":agent", 0),  #Right hand
		#  (assign, ":rhanditem", 0), # Preparing local variable.
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000000000100),
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000004000000),
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000008000000),
		#  (neg|item_has_capability, ":rhanditem", 0x0000000170000000),
		# 

		  #
		  
          #BEGIN DEBUG
          #(assign, reg10, ":agent"),
          #(str_clear, s10),
          #(str_store_string, s10, "@New agent: {reg10}"),
          #END DEBUG
		  #(agent_get_wielded_item, ":rhanditem", ":agent", 0),  #Obtain right hand item
         (agent_get_wielded_item, ":rhanditem", ":agent", 0),  #Obtain right hand item
          (agent_get_wielded_item, ":item", ":agent", 1), # Left hand: shield or -1
          #BEGIN DEBUG
          #(assign, reg10, ":item"),
          #(str_store_string, s10, "@{s10}. LH: {reg10}"),
		  #(display_message, "@Main block Phase A finalized"),
          #END DEBUG
		  #(item_get_type, ":type", ":rhanditem"), #If right hand item is polearm, stop reading rest of code.
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_club_with_spike_head", "itm_wooden_shield"),
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_light_lance", "itm_wooden_shield"),
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_light_lance", "itm_wooden_shield"),
          (try_begin),
		  (neg|is_between, ":rhanditem", "itm_club_with_spike_head", "itm_wooden_shield"),
		  (neg|is_between, ":rhanditem", "itm_lance_banner_jer", "itm_cross_end"), #Update item slots
		  #(neg|troop_has_item_equipped, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		  #(neq, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		  
		# (neg|eq, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		    (gt, ":item", -1), #Check if the agent wields any item in the left hand, this or next.
            #(neq, ":item", -1),# Check if the agent wields any item in the left hand
            (neq, ":item", "itm_torch"), #If agent is using torch, ignore him.
            #(display_message, "@PASSED neg tests"), #Debug message

			
            (store_random_in_range, ":chance", 1, 101), # Chance of item being assigned
            (try_begin),
			  (le, ":chance", "$torch_chance"), #25% = 25
				#lt           = neg | ge # less than		-- (lt,<value>,<value>),
				#neq          = neg | eq # not equal to		-- (neq,<value>,<value>),
				#le           = neg | gt # less or equal to	-- (le,<value>,<value>),
              (agent_unequip_item, ":agent", ":item"),
			  
              #BEGIN DEBUG
              #(str_store_item_name, s11, ":item"),
              #(str_store_string, s10, "@{s10}. Removed item: {s11}"),
			  #(display_message, "@(agent_unequip_item, :agent, :item PASSED."),
              #END DEBUG

               
                (agent_equip_item, ":agent", "itm_torch"), #Tell agent to equip the item
                 #(display_message, "@(agent_equip_item, :agent, :item PASSED."),
                  (agent_set_wielded_item, ":agent", "itm_torch"), #Required for infantry only, cavarly can work without it.
                  #(display_message, "@(agent_set_wielded_item, :agent, :item PASSED."),
                 
                 
                  #BEGIN DEBUG
                #(else_try),
                  #(str_store_string, s10, "@{s10}. Failed random chance."),
                (try_end),
               
              #(else_try),
                #(str_store_string, s10, "@{s10}. Invalid agent for torch"),
              (try_end),
             
              #(display_message, s10),
			  (try_end),
              #END DEBUG
			#  (try_end),
      ]),
	  
###########Torch by troycall/Envious Arm end


		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(call_script, "script_troop_agent_set_banner", "tableau_game_troop_label_banner", ":trigger_param_1", ":troop_id_trigger_param_1")
		]),

		(-22.0, 0.0, 0.0,
		[
			(display_message, "str_cant_use_inventory_now")
		],

		[]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(assign, "$relative_of_merchant_is_found", 0),
			(try_begin),
				(agent_is_human, ":trigger_param_1"),
				(agent_is_alive, ":trigger_param_1"),
				(agent_get_team, ":team_trigger_param_1", ":trigger_param_1"),
				(eq, ":team_trigger_param_1", 1),
				(agent_get_position, 4, ":trigger_param_1"),
				(agent_set_scripted_destination, ":trigger_param_1", 4, 1),
			(try_end),
			(try_begin),
				(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
				(is_between, ":troop_id_trigger_param_1", "trp_relative_of_merchant", "trp_relative_of_merchants_end"),
				(agent_set_team, ":trigger_param_1", 7),
				(team_set_relation, 0, 7, 0),
			(try_end)
		]),

		(0.0, 0.0, 0.0,
		[
			(party_get_template_id, ":template_id_l_g_encountered_party", "$g_encountered_party"),
			(eq, ":template_id_l_g_encountered_party", "pt_looter_lair"),
			(check_quest_active, "qst_save_relative_of_merchant"),
			(eq, "$relative_of_merchant_is_found", 0)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_position, 0, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(is_between, ":troop_id_var_2", "trp_relative_of_merchant", "trp_relative_of_merchants_end"),
				(agent_set_scripted_destination, ":var_2", 0),
				(agent_get_position, 1, ":var_2"),
				(get_distance_between_positions, ":distance_between_positions_0_1", 0, 1),
				(le, ":distance_between_positions_0_1", 200),
				(start_mission_conversation, "trp_relative_of_merchant"),
			(try_end)
		]),

		(-21.0, 0.0, 0.0,
		[
			(display_message, "str_cannot_leave_now")
		],

		[]),

		(0.0, 0.0, ti_once,
		[],

		[
			(assign, "$defender_reinforcement_stage", 0),
			(assign, "$bandits_spawned_extra", 0),
			(assign, "$g_battle_won", 0),
			(assign, "$g_battle_result", 0)
		]),

		(1.0, 0.0, 0.0,
		[],

		[
			(try_for_agents, ":var_1"),
				(agent_is_alive, ":var_1"),
				(agent_get_team, ":team_var_1", ":var_1"),
				(eq, ":team_var_1", 1),
				(agent_is_in_special_mode, ":var_1"),
				(agent_is_human, ":var_1"),
				(agent_get_position, 0, ":var_1"),
				(try_for_agents, ":var_3"),
					(agent_is_alive, ":var_3"),
					(agent_get_team, ":team_var_3", ":var_3"),
					(eq, ":team_var_3", 0),
					(agent_is_human, ":var_3"),
					(store_agent_hit_points, ":agent_hit_points_var_1", ":var_1"),
					(assign, ":value", 0),
					(try_begin),
						(lt, ":agent_hit_points_var_1", 100),
						(try_for_agents, ":value_2"),
							(agent_is_alive, ":value_2"),
							(agent_get_team, ":team_value_2", ":value_2"),
							(eq, ":team_value_2", 1),
							(neq, ":var_1", ":value_2"),
							(agent_is_in_special_mode, ":value_2"),
							(agent_is_human, ":value_2"),
							(agent_get_position, 1, ":var_1"),
							(agent_get_position, 2, ":value_2"),
							(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
							(le, ":distance_between_positions_1_2", 1000),
							(agent_clear_scripted_mode, ":value_2"),
						(try_end),
						(assign, ":value", 1),
					(else_try),
						(agent_get_position, 1, ":var_1"),
						(agent_get_position, 2, ":var_3"),
						(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
						(le, ":distance_between_positions_1_2", 4000),
						(try_for_agents, ":value_2"),
							(agent_is_alive, ":value_2"),
							(agent_get_team, ":team_value_2", ":value_2"),
							(eq, ":team_value_2", 1),
							(neq, ":var_1", ":value_2"),
							(agent_is_in_special_mode, ":value_2"),
							(agent_is_human, ":value_2"),
							(agent_get_position, 1, ":var_1"),
							(agent_get_position, 2, ":value_2"),
							(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
							(le, ":distance_between_positions_1_2", 1000),
							(agent_clear_scripted_mode, ":value_2"),
						(try_end),
						(assign, ":value", 1),
					(try_end),
					(eq, ":value", 1),
					(agent_clear_scripted_mode, ":var_1"),
				(try_end),
			(try_end)
		]),

		(30.0, 0.0, 0.0,
		[
			(le, "$defender_reinforcement_stage", 1)
		],

		[
			(store_character_level, ":character_level_player", "trp_player"),
			(store_add, ":value", 5, ":character_level_player"),
			(val_div, ":value", 3),
			(lt, "$bandits_spawned_extra", ":value"),
			(val_add, "$bandits_spawned_extra", 1),
			(party_get_template_id, ":template_id_l_g_encountered_party", "$g_encountered_party"),
			(store_random_in_range, ":random_in_range_0_2", 0, 2),
			(try_begin),
				(eq, ":template_id_l_g_encountered_party", "pt_sea_raider_lair"),
				(eq, ":random_in_range_0_2", 0),
				(assign, ":value_2", "trp_sea_raider"),
			(else_try),
				(eq, ":template_id_l_g_encountered_party", "pt_forest_bandit_lair"),
				(eq, ":random_in_range_0_2", 0),
				(assign, ":value_2", "trp_forest_bandit"),
			(else_try),
				(eq, ":template_id_l_g_encountered_party", "pt_desert_bandit_lair"),
				(eq, ":random_in_range_0_2", 0),
				(assign, ":value_2", "trp_desert_bandit"),
			(else_try),
				(eq, ":template_id_l_g_encountered_party", "pt_mountain_bandit_lair"),
				(eq, ":random_in_range_0_2", 0),
				(assign, ":value_2", "trp_mountain_bandit"),
			(else_try),
				(eq, ":template_id_l_g_encountered_party", "pt_taiga_bandit_lair"),
				(eq, ":random_in_range_0_2", 0),
				(assign, ":value_2", "trp_taiga_bandit"),
			(else_try),
				(eq, ":template_id_l_g_encountered_party", "pt_steppe_bandit_lair"),
				(eq, ":random_in_range_0_2", 0),
				(assign, ":value_2", "trp_steppe_bandit"),
			(else_try),
				(eq, ":template_id_l_g_encountered_party", "pt_robber_knight_lair"),
				(eq, ":random_in_range_0_2", 0),
				(assign, ":value_2", "trp_raider"),
			(else_try),
				(this_or_next|eq, ":template_id_l_g_encountered_party", "pt_looter_lair"),
				(neq, ":random_in_range_0_2", 0),
				(assign, ":value_2", "trp_looter"),
			(try_end),
			(store_current_scene, ":current_scene"),
			(modify_visitors_at_site, ":current_scene"),
			(store_random_in_range, ":random_in_range_2_11", 2, 11),
			(add_visitors_to_current_scene, ":random_in_range_2_11", ":value_2", 1)
		]),

		(-26.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(store_trigger_param_3, ":trigger_param_3"),
			(try_begin),
				(ge, ":trigger_param_1", 0),
				(agent_is_human, ":trigger_param_1"),
				(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
				(str_store_troop_name, 6, ":troop_id_trigger_param_1"),
				(try_begin),
					(neg|agent_is_ally, ":trigger_param_1"),
					(party_add_members, "p_total_enemy_casualties", ":troop_id_trigger_param_1", 1),
					(try_begin),
						(eq, ":trigger_param_3", 1),
						(party_wound_members, "p_total_enemy_casualties", ":troop_id_trigger_param_1", 1),
					(try_end),
				(try_end),
				(party_add_members, "p_temp_casualties", ":troop_id_trigger_param_1", 1),
				(eq, ":trigger_param_3", 1),
				(party_wound_members, "p_temp_casualties", ":troop_id_trigger_param_1", 1),
			(try_end),
			(assign, ":var_4", 0),
			(try_for_agents, ":var_5"),
				(agent_is_non_player, ":var_5"),
				(agent_is_human, ":var_5"),
				(agent_is_alive, ":var_5"),
				(neg|agent_is_ally, ":var_5"),
				(val_add, ":var_4", 1),
			(try_end),
			(try_begin),
				(le, ":var_4", 2),
				(le, "$defender_reinforcement_stage", 1),
				(val_add, "$defender_reinforcement_stage", 1),
				(store_character_level, ":character_level_player", "trp_player"),
				(store_add, ":value", 5, ":character_level_player"),
				(val_div, ":value", 3),
				(try_begin),
					(ge, "$defender_reinforcement_stage", 2),
					(val_sub, ":value", "$bandits_spawned_extra"),
				(try_end),
				(party_get_template_id, ":template_id_l_g_encountered_party", "$g_encountered_party"),
				(store_random_in_range, ":random_in_range_0_2", 0, 2),
				(try_begin),
					(eq, ":template_id_l_g_encountered_party", "pt_sea_raider_lair"),
					(eq, ":random_in_range_0_2", 0),
					(assign, ":value_2", "trp_sea_raider"),
				(else_try),
					(eq, ":template_id_l_g_encountered_party", "pt_forest_bandit_lair"),
					(eq, ":random_in_range_0_2", 0),
					(assign, ":value_2", "trp_forest_bandit"),
				(else_try),
					(eq, ":template_id_l_g_encountered_party", "pt_desert_bandit_lair"),
					(eq, ":random_in_range_0_2", 0),
					(assign, ":value_2", "trp_desert_bandit"),
				(else_try),
					(eq, ":template_id_l_g_encountered_party", "pt_mountain_bandit_lair"),
					(eq, ":random_in_range_0_2", 0),
					(assign, ":value_2", "trp_mountain_bandit"),
				(else_try),
					(eq, ":template_id_l_g_encountered_party", "pt_taiga_bandit_lair"),
					(eq, ":random_in_range_0_2", 0),
					(assign, ":value_2", "trp_taiga_bandit"),
				(else_try),
					(eq, ":template_id_l_g_encountered_party", "pt_steppe_bandit_lair"),
					(eq, ":random_in_range_0_2", 0),
					(assign, ":value_2", "trp_steppe_bandit"),
				(else_try),
					(eq, ":template_id_l_g_encountered_party", "pt_robber_knight_lair"),
					(eq, ":random_in_range_0_2", 0),
					(assign, ":value_2", "trp_raider"),
				(else_try),
					(this_or_next|eq, ":template_id_l_g_encountered_party", "pt_looter_lair"),
					(neq, ":random_in_range_0_2", 0),
					(assign, ":value_2", "trp_looter"),
				(try_end),
				(store_current_scene, ":current_scene"),
				(modify_visitors_at_site, ":current_scene"),
				(try_for_range, ":unused", 0, ":value"),
					(store_random_in_range, ":random_in_range_2_11", 2, 11),
					(add_visitors_to_current_scene, ":random_in_range_2_11", ":value_2", 1),
				(try_end),
			(try_end)
		]),

		(0.0, 0.0, ti_once,
		[],

		[
					(try_begin),
			(eq, "$additional_music", 0),
			(call_script, "script_music_set_situation_with_culture", 4096),
			(try_end),
			(set_party_battle_mode)
		]),

		(2.0, 0.0, ti_once,
		[
			(neg|main_hero_fallen),
			(num_active_teams_le, 1)
		],

		[
			(party_get_template_id, ":template_id_l_g_encountered_party", "$g_encountered_party"),
			(try_begin),
				(eq, ":template_id_l_g_encountered_party", "pt_looter_lair"),
				(check_quest_active, "qst_save_relative_of_merchant"),
				(assign, ":var_2", "trp_relative_of_merchant"),
				(get_player_agent_no, ":player_agent_no"),
				(agent_get_position, 0, ":player_agent_no"),
				(assign, ":value", 100000),
				(try_for_range, ":number", 1, 10),
					(entry_point_get_position, 1, ":number"),
					(get_distance_between_positions, ":distance_between_positions_0_1", 0, 1),
					(le, ":distance_between_positions_0_1", ":value"),
					(ge, ":distance_between_positions_0_1", 1000),
					(assign, ":var_7", ":number"),
					(assign, ":value", ":distance_between_positions_0_1"),
				(try_end),
				(add_visitors_to_current_scene, ":var_7", ":var_2", 1, 0),
			(try_end)
		]),

		(0.0, 0.0, 0.0,
		[],

		[
			(game_key_clicked, 22),
			(neg|is_presentation_active, "prsnt_battle"),
			(start_presentation, "prsnt_battle")
		]),

		(0.1, 0.0, 0.0,
		[],

		[
			(is_presentation_active, "prsnt_battle"),
			(call_script, "script_update_order_panel_statistics_and_map")
		]),

		(1.0, 4.0, ti_once,
		[
			(assign, ":value", 0),
			(party_get_template_id, ":template_id_l_g_encountered_party", "$g_encountered_party"),
			(try_begin),
				(eq, ":template_id_l_g_encountered_party", "pt_looter_lair"),
				(check_quest_active, "qst_save_relative_of_merchant"),
				(this_or_next|main_hero_fallen),
				(eq, "$relative_of_merchant_is_found", 1),
				(assign, ":value", 1),
			(else_try),
				(this_or_next|neq, ":template_id_l_g_encountered_party", "pt_looter_lair"),
				(neg|check_quest_active, "qst_save_relative_of_merchant"),
				(store_mission_timer_a, ":mission_timer_a"),
				(ge, ":mission_timer_a", 5),
				(this_or_next|main_hero_fallen),
				(num_active_teams_le, 1),
				(assign, ":value", 1),
			(try_end),
			(eq, ":value", 1)
		],

		[
			(try_begin),
				(main_hero_fallen),
			(else_try),
				(party_set_slot, "$g_encountered_party", slot_party_ai_substate, 2),
			(try_end),
			(finish_mission)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_set_matching_sexy_boots", ":trigger_param_1")
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$sp_shield_bash", 1),
			(game_key_is_down, 7),
			(game_key_clicked, 6),
			(neg|main_hero_fallen),
		],

		[
		(call_script, "script_shield_bash"),
		]),

			##AI kicking begin
		   (2, 0, 3, #AI kicking
       [], [
	(get_player_agent_no,":player"),
	(try_for_agents, ":agent"),
		(neq, ":agent", ":player"),
		(agent_is_alive, ":agent"),
		(neq, ":agent", -1),
		(agent_is_human, ":agent"),#Only humans can kick....FOR NOW
		(agent_is_active, ":agent"),
		(agent_slot_eq, ":agent", slot_agent_is_running_away, 0),#Isn't fleeing the battle.
		##He's an eligible human.  Now see if he's in a position to kick.
		(agent_get_attack_action, ":attack_action", ":agent"), #returned values: free = 0, readying_attack = 1, releasing_attack = 2, completing_attack_after_hit = 3, attack_parried = 4, reloading = 5, after_release = 6, cancelling_attack = 7
		(agent_get_defend_action, ":defend_action", ":agent"),#
		(this_or_next|eq,":attack_action",4),#Just got parried
		(this_or_next|eq,":defend_action",1),#Parrying an enemy
		##So he'll only try to kick if he just parried an enemy attack, or his own attack just got parried.
		(agent_get_team, ":team", ":agent"),
		(assign, ":maximum_distance", 100),
		#Target Acquisition
		(agent_ai_get_look_target,":suspect",":agent"),
		(gt,":suspect",0),#Make sure there is someone.
		(agent_is_alive, ":suspect"),
		(agent_is_human, ":suspect"),#Only kick humans
		(agent_is_active, ":suspect"),
		(agent_get_team, ":suspect_team", ":suspect"),
		(neq, ":suspect_team", ":team"),#Friends don't let friends kick friends.
		(agent_get_position, pos1, ":agent"),#Distance check
		(agent_get_position, pos2, ":suspect"),
		(neg|position_is_behind_position, pos2, pos1), #Suspect can't be behind kicker.
		(get_distance_between_positions, ":distance", pos1, pos2),
		(le, ":distance", ":maximum_distance"),
		#Check chance
		(store_random_in_range,":kickchance", 1, 10),
		(try_begin),
			(eq,":kickchance",1), #10% chance per check
				#(display_message, "@Agent kicks."),
				(agent_set_animation, ":agent", "anim_prepare_kick_0"),
				(agent_deliver_damage_to_agent, ":agent", ":suspect", 3),
				(agent_set_animation, ":suspect", "anim_strike3_abdomen_front"),#Get Kicked
			(try_end),
	   (try_end),]),
	   
	   ##AI Kicking end
		
		
		(0.25, 0.0, 4.0,
		[
			(eq, "$sp_shield_bash_ai", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(neq, ":var_2", ":player_agent_no"),
				(agent_is_alive, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_active, ":var_2"), #Test to see if it stops AI from shield bashing (new addition v3)
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(store_skill_level, ":skill_level_shield_troop_id_var_2", "skl_shield", ":troop_id_var_2"),
				(store_proficiency_level, ":proficiency_level_troop_id_var_2_0", ":troop_id_var_2", 0),
				(ge, ":skill_level_shield_troop_id_var_2", 4),
				(ge, ":proficiency_level_troop_id_var_2_0", 200),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(le, ":horse_var_2", 0),
				(try_begin),
					(neg|agent_slot_ge, ":var_2", 50, 1),
					(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
					(agent_get_wielded_item, ":wielded_item_var_2_1", ":var_2", 1),
					(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
					(eq, ":type_wielded_item_var_2_1", 7),
					(agent_get_attack_action, ":attack_action_var_2", ":var_2"),
					(eq, ":attack_action_var_2", 0),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_position, 1, ":var_2"),
					(assign, ":value", -1),
					(assign, ":value_2", 125),
					(try_for_agents, ":var_13"),
						(agent_is_alive, ":var_13"),
						(agent_is_human, ":var_13"),
						(agent_get_position, 2, ":var_13"),
						(neg|position_is_behind_position, 2, 1),
						(agent_get_team, ":team_var_13", ":var_13"),
						(neq, ":team_var_13", ":team_var_2"),
						(try_begin),
							(eq, ":team_var_2", 0),
							(assign, ":value_3", 2),
						(else_try),
							(eq, ":team_var_2", 2),
							(assign, ":value_3", 0),
						(else_try),
							(eq, ":team_var_2", 1),
							(assign, ":value_3", 3),
						(else_try),
							(eq, ":team_var_2", 3),
							(assign, ":value_3", 1),
						(try_end),
						(neq, ":team_var_13", ":value_3"),
						(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
						(le, ":distance_between_positions_1_2", ":value_2"),
						(assign, ":value_2", ":distance_between_positions_1_2"),
						(assign, ":value", ":var_13"),
					(try_end),
					(ge, ":value", 0),
					(agent_get_horse, ":horse_var_2", ":value"),
					(eq, ":horse_var_2", -1),
					(store_random_in_range, ":random_in_range_15_26", 15, 26),
					(agent_set_slot, ":var_2", 50, ":random_in_range_15_26"),
					(agent_set_animation, ":var_2", "anim_shield_bash"),
					(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
					(troop_get_type, ":type_wielded_item_var_2_1", ":troop_id_var_2"),
					(try_begin),
						(eq, ":type_wielded_item_var_2_1", 0),
						(agent_play_sound, ":var_2", "snd_man_yell"),
					(else_try),
						(eq, ":type_wielded_item_var_2_1", 1),
						(agent_play_sound, ":var_2", "snd_woman_yell"),
					(try_end),
					(agent_play_sound, ":value", "snd_wooden_hit_low_armor_high_damage"),
					(agent_get_defend_action, ":attack_action_var_2", ":value"),
					(try_begin),
						(eq, ":attack_action_var_2", 2),
						(neg|position_is_behind_position, 1, 2),
						(agent_get_wielded_item, ":wielded_item_var_2_1", ":value", 1),
						(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
						(eq, ":type_wielded_item_var_2_1", 7),
						(agent_set_animation, ":value", "anim_shield_bash"),
					(else_try),
						(agent_set_animation, ":value", "anim_shield_strike"),
					(try_end),
				(try_end),
				(agent_get_slot, ":var_2_50", ":var_2", 50),
				(val_sub, ":var_2_50", 1),
				(val_max, ":var_2_50", 0),
				(agent_set_slot, ":var_2", 50, ":var_2_50"),
			(try_end)
		])
	] + crouching_triggers ),

	("alley_fight", mtf_battle_mode, 8,
	"Alley fight",
	[(0, mtef_team_0|mtef_use_exact_number, af_override_horse, aif_start_alarmed, 7, []),
	(1, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 20, []),
	(2, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 20, []),
	(3, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 20, [])],
	[
		

    (7, 0, ti_once,
    [],
    [
	(call_script, "script_assign_traits"),
    ]),


    (0, 0, 1, 
    [
    ],
    [
	(call_script, "script_stumbling"),
    ]),





#Decapitations next level right here.
(ti_on_agent_hit, 0, 0, [(eq, "$dynamic_decap", 1),],
[
   (store_trigger_param_1, ":victim_agent"),
   (store_trigger_param_2, ":attacker_agent"),
   (store_trigger_param_3, ":damage"),
   (assign, ":attacker_item", reg0), ### Transfer the item ID to make sure it dosn't change while the script is running
   (copy_position, pos5, pos0), ### Transfer the position of the hit to make sure it dosn't change while the script is running
   (neq, ":victim_agent", -1),
   (try_begin), #-- Decapitations --#
      (agent_is_human, ":victim_agent"),
	  (ge, ":attacker_item", 0),
	  (assign, ":run", 0), ### Reset the run test variable
#	  (try_begin), ### Special weapons that can decap, ovevrrides the below conditions
#		  (this_or_next|eq, ":attacker_item", "itm_supercrossbow"),
#		  (eq, ":attacker_item", "itm_supersledge"),
#		  (assign, ":run", 1),
	  (try_begin),
		  #(neq, ":attacker_item", "itm_mace_1"), ### List of weapons that cannot decapitate
		  #(neq, ":attacker_item", "itm_mace_2"), ### This would be easier to do with a preperty check (for damage type), but I don't know if that is possible or not
		  #(neq, ":attacker_item", "itm_mace_3"),
		  #(neq, ":attacker_item", "itm_staff"), #Keeping active incase of script errors
		  (agent_get_action_dir, ":attack_dir", ":attacker_agent"), ### Makes sure the attack is either a left or right swing
		  (this_or_next|eq, ":attack_dir", 1), ### Right swing
		  (eq, ":attack_dir", 2), ### Left swing
		  (assign, ":run", 1),
	  (try_end),
	  (eq, ":run", 1), ### One of the checks were true, continue to run script
	  #(assign, reg1, ":damage"), #Debug messages
	  #(display_message, "@Damage: {reg1}"),
	  
	  (assign, ":run", 0), ### Reset the run test variable
	  (try_begin),
		(ge, ":damage", "$decap_damage"), ### 30 Minimum damage required to decapitate an agent
		(assign, ":run", 1),
		
#	  (else_try),  ### If debugging mode is on, this bypasses the damage requirement check
#		  (eq,"$g_decapitations_debugging", 1),
#		  (assign, ":run", 1),
#		  (display_message, "@Decap minimum DMG req bypassed"),
	  (try_end),
	  (eq, ":run", 1),
	  
	  (store_agent_hit_points, ":hp", ":victim_agent", 1),
	  (val_add, ":hp", 10), ### 10 Victim must have the negative of this hp or below after hit for the script to move on (never put this value below 0 since the agent has to be absolutley positvely dead)!
	  (ge, ":damage", ":hp"),
	  
	  
	  ### Compare the hit position to the agent's position
      (agent_get_position, pos4, ":victim_agent"),
      (get_distance_between_positions, ":distance", pos4, pos5), 
	  (agent_get_horse, ":is_mounted", ":victim_agent"),
	  (try_begin), ### If the agent is on horseback, these values are used (note that these values will not be exactly correct if the horse is very large or very small)
		(ge, ":is_mounted", 0), ### Will be -1 if no horse is to be found, so anything above means that the agent is mounted
		(assign, ":min_distance", 240), ### Minimum distance from the agent's horse's hooves from which the hit is valid (240 is an approximate value)
		(assign, ":max_distance", 260), ### Maximum distance from the agent's horse's hooves to which the hit is valid (260 is an approximate value)
	  (else_try),  ### If the agent is on foot, these values are used
	    (assign, ":min_distance", 160), ### Minimum distance from the agent's feet from which the hit is valid (160 = slightly below the neck)
	    (assign, ":max_distance", 176), ### Maximum distance from the agent's feet to which the hit is valid (176 = near the nose)
	  (try_end),
      (is_between, ":distance", ":min_distance", ":max_distance"), ### Check to see if the hit is within the allowed area
	  
	  
	  (assign, ":run", 0), ### Default variable value before damage test
	  (try_begin),
		  (store_div, ":chance", ":damage", "$decap_damage_divider"), ### Chance of decap is damage / 4 right now. Lower this value for higher chances of decapitation (or press M+Right Ctrl for debug more if you just want to test easy decaps in-game).
		  
		  #(assign, reg1, ":chance"), #Debug messages
		  #(display_message, "@Decap chance is: {reg1}"),
		  (store_random_in_range, ":diceroll", 0, "$decap_randomizer"), ### Randomizer, 0-100
		  
		  #(assign, reg1, ":diceroll"), #Debug messages
		  #(display_message, "@Diceroll: {reg1}"),
		  (le, ":diceroll", ":chance"), ### ":diceroll" must be less than or equal to ":chance", if it is, decapitation occurs!
		  
		  (assign, ":run", 1), ### SUCCESS!
		  
#     (else_try),  ### If debugging mode is on, bypass chance calculation
#		  (eq,"$g_decapitations_debugging", 1),
#		  (assign, ":run", 1),
#		  (display_message, "@Decap chance calc bypassed"),
	  (try_end),  
	  (eq, ":run", 1), ### Time for the fun stuff!

	  ### Gender test for spawning the right head type
	  (assign, ":head_type", "itm_cut_off_head_male"),
	  (agent_get_troop_id, ":victim_troop", ":victim_agent"),
	  (try_begin),
	    (ge, ":victim_troop", 0),
		(troop_get_type,":victim_gender",":victim_troop"),
		(eq, ":victim_gender", 1),
		(assign, ":head_type", "itm_cut_off_head_female"),
	  (try_end),
	  
	  ### Randomize the spawned head's and/or helmet's position and orientation
	  (store_random_in_range, ":z_rotation", 0, 360),
	  (store_random_in_range, ":y_rotation", -60, 60),
	  (store_random_in_range, ":x_pos", -90, 90),
	  (store_random_in_range, ":y_pos", -90, 90),
	  (position_rotate_z, pos4,":z_rotation"),
	  (position_rotate_y, pos4,":y_rotation"),
	  (position_move_x, pos4, ":x_pos"),
	  (position_move_y, pos4, ":y_pos"),
	  (position_set_z_to_ground_level, pos4),
	  (position_move_z, pos4, 5),
	  (set_spawn_position, pos4),
	  (assign, ":prunetime", 360), ### This is the time in seconds before the spawned head or helmet gets pruned (removed). Recommended to keep it above 0 to make sure it gets removed eventually or when the scene resets, to prevent performance issues.
	  
	  #(spawn_item, ":head_type", 0, ":prunetime"), ### This is the old way of spawning the head on the ground with the helmet, disabled because of the new dynamic heads. You can comment away (disable) the dynamic heads spawning further down and uncomment this line for a less performance-needing approach (with no physics involved).
	  
	  ### Does the agent have a helmet or hat equipped?
      (agent_get_item_slot, ":item", ":victim_agent", 4), #head slot
      (try_begin),
         (ge, ":item", 1), ### Does it?
         (agent_unequip_item, ":victim_agent", ":item"), ### Yes it does. Unequip it to allow replacement by the invisible helmet further down
		 (try_begin),
			 ### Don't spawn items with "itp_attatch_armature" flag: rigging causes floating bugs
			 ### This would be much better to do with an item flag check, but I haven't found any way to do that
			 #(neq, ":item", "itm_with_itp_attatch_armature"),
			 #(neg|is_between,":item","start_of_itm_range_with_itp_attatch_armature","end_of_itm_range_with_itp_attatch_armature"),
			#(set_spawn_position, pos4),
			(spawn_item, ":item", 0, ":prunetime"), ### Spawns the agent's currently equipped headgear on the dropped head's position
		 (try_end),
      (try_end),
	  
	  (agent_equip_item, ":victim_agent", "itm_invisible_head"), ### Put an invisible helmet on the agent's head to "remove" it
	  
	  
	  (agent_get_position, pos4, ":victim_agent"), ### Refreshes the agent's position
	  (position_move_z, pos4, ":min_distance"), ### Move to the where the neck used to be attached
	  
	  
	  ### Blood effects! The last variable is the strength. Lower or increase it for more/less blood (or tweak the particle effects themselves in "module_particle_systems.py").
      (particle_system_burst, "psys_blood_decapitation", pos4, 40), 
	  (particle_system_burst, "psys_game_blood", pos4, 10),
	  (particle_system_burst, "psys_game_blood_2", pos4, 10),
	  
	  (play_sound_at_position, "snd_decapitation_battle", pos4), ### Play some nasty sounds
	  
	  
	  ### Dynamic head spawning! See the bottom of "module_scene_props.py" for physics-related options and more.
	  (position_move_z, pos4, 20),
	  (set_spawn_position, pos4),
	  (assign, ":head_type", "spr_head_dynamic_male"),
	  (try_begin), ### Gender check (for determening the type of head)
		(eq, ":victim_gender", 1),
		(assign, ":head_type", "spr_head_dynamic_female"),
	  (try_end),
	  (spawn_scene_prop, ":head_type"),
	  
		#Addition check if we should allow the message to appears
			(eq, "$allow_decap_mess", 1), #Possible script error

	  ### This below is for the text that shows up when somebody is decapitated.
	  
	  ### Who decapitated who?
		(agent_get_troop_id, ":attacker_troop", ":attacker_agent"),
		(str_store_troop_name, s0, ":attacker_troop"),

		(agent_get_troop_id, ":victim_troop", ":victim_agent"),
		(str_store_troop_name, s1, ":victim_troop"),

	  
	  ### Colour check (friend or foe?)
	  (get_player_agent_no, ":my_agent"),
	  (agent_get_team, ":my_team", ":my_agent"),
	  (agent_get_team, ":victim_team", ":victim_agent"),
	  (try_begin), ### Display it!
		  (neq, ":my_team", ":victim_team"),
		  (display_message, "@>>> {s0} decapitated {s1}!", 0xFF33DD11), ## Green
	  (else_try),
		  (display_message, "@>>> {s0} decapitated {s1}!", 0xFFFF4422), ## Red
	  (try_end),
   (try_end), #-- Decapitations END --#
   
   ]),



	#AI Sound horn!
			(0.0, 0.0, 2.0,
		[
			##(store_random_in_range, ":horn_chance", 0, 22),
			#(eq, ":horn_chance", 0),
		],
		[
			(call_script, "script_formation_ai_sound_horn"),
		]),
	#AI Sound horn end!










			##################################################
##### troop_ratio_bar
##################################################
      (0, 0, ti_once, [
	  (eq, "$use_troopbars", 1),
	  ], [
	  (start_presentation, "prsnt_troop_ratio_bar"),
	  ]),
##################################################
##### troop_ratio_bar
##################################################
	
###Voice-over for Infantry, archers & Cavalry
		
		(0.0, 0.3, 0.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 29) #Everyone!
		],

		[
		(call_script, "script_identify_battle_voices_all")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 30) #Infantry
		],

		[
		(call_script, "script_identify_battle_voices_inf")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 31) #Archers
		],

		[
		(call_script, "script_identify_battle_voices_archers")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 32) #Cavalry
		],

		[
		(call_script, "script_identify_battle_voices_cav")
		]),
		###Voice-over for Infantry, archers & Cavalry	
		
		
		
			
					#####MUSICBOX SIEGE VARIANT
	(ti_after_mission_start, 0, ti_once, [ #680 #(ti_after_mission_start, 0, 680, [ #680
	(eq, "$additional_music", 1),
 #Obtained from Mod Options, affects mission templates, range: ALL SP Hostile music, co-op variant is additional_music_coop.
	],
		
  [
    #(play_track, "track_silence", 1), #Stop current module track
	   (music_set_situation, mtf_sit_fight), #Field
   #(music_set_situation, mtf_sit_siege), #Siege probably don't use
	(assign, "$music_timer", 0), #Patch
  #Randomize chance is 1 in a 5 (20%)
  
  #Field related extend to sieges
  (store_random_in_range, ":randomizer", 0, 2), #50% Chance of randomization
  (try_begin),
  (eq, ":randomizer", 0),
  (store_random_in_range, ":euro_randomizernext", 1, 11),
  (store_random_in_range, ":medi_randomizer", 1, 6),
  (store_random_in_range, ":arab_randomizer", 1, 8),
  (assign, "$track_count_field_siege", ":euro_randomizernext"),
  (assign, "$track_count_field_medi_siege", ":medi_randomizer"),
  (assign, "$track_count_field_arabs_siege", ":arab_randomizer"),
  (try_end),
  #Field related extend to sieges
  ]),
	
	(0, 0, 3, [ #680 #(ti_after_mission_start, 0, 680, [ #680
	(eq, "$additional_music", 1),
	 #Obtained from Mod Options, affects mission templates, range: ALL SP Hostile music, co-op variant is additional_music_coop.
	],
		
  [
		  #(display_message, "@Executing music code"),
		  (store_mission_timer_b, ":time_msec"),
		  #(assign, reg10, ":time_msec"),
          #(str_clear, s10),
          #(str_store_string, s10, "@Mission timer B for music: {reg10}"),
		  #(display_message, s10),
			#if next action time is lower than current time, play the sound
			(ge, ":time_msec", "$music_timer"),
			(reset_mission_timer_b), #Resetting mission timer, too.
			(assign, "$music_timer", 0),# Resetting value when track ends.
		
  #Euro only
     (try_begin),
      (ge, "$track_count_field_siege", 11),
      (assign, "$track_count_field_siege", 1),
    (else_try),
      (val_add, "$track_count_field_siege", 1),
	  (ge, "$track_count_field_siege", 11),
	  (assign, "$track_count_field_siege", 1),
    (try_end),
  #Euro only
  
  #Mediterrain only
  
       (try_begin),
      (ge, "$track_count_field_medi_siege", 6),
      (assign, "$track_count_field_medi_siege", 1),
    (else_try),
      (val_add, "$track_count_field_medi_siege", 1),
	  (ge, "$track_count_field_medi_siege", 6),
	  (assign, "$track_count_field_medi_siege", 1),
    (try_end),
  #Mediterrain only
  
  
  #Arabs only

       (try_begin),
      (ge, "$track_count_field_arabs_siege", 8),
      (assign, "$track_count_field_arabs_siege", 1),
    (else_try),
      (val_add, "$track_count_field_arabs_siege", 1),
	  (ge, "$track_count_field_arabs_siege", 8),
	  (assign, "$track_count_field_arabs_siege", 1),
    (try_end),
	#Arabs only
  
  #Pause between music length in seconds
  #(val_add, "$music_timer", 2),# 5 seconds added
  #Pause between music length in seconds
  
	(party_get_current_terrain, ":current_terrain_main_party", "p_main_party"), #Co-Op variant of this trigger should use scenes in_between rather than terrain because player can't obtain terrain in co-op sessions.
	(try_begin),
	(this_or_next|eq, ":current_terrain_main_party", 1), #rt_mountain
	(this_or_next|eq, ":current_terrain_main_party", 2), #rt_steppe
	(eq, ":current_terrain_main_party", 10), #rt_steppe_forest
	#Begin mediterrain music 5 tracks total
	(try_begin),
	(eq, "$track_count_field_medi_siege", 1), #
	(play_track, "track_medib3", 2),
	(val_add, "$music_timer", 209),# 1 second added
	(else_try),
	
	(eq, "$track_count_field_medi_siege", 2), #
	(play_track, "track_medib4", 2),
	(val_add, "$music_timer", 237),#
	(else_try),
	
	(eq, "$track_count_field_medi_siege", 3), #
	(play_track, "track_medib5", 2),
	(val_add, "$music_timer", 229),#
	(else_try),

	(eq, "$track_count_field_medi_siege", 4), #
	(play_track, "track_medis1", 2),
	(val_add, "$music_timer", 195),#
	(else_try),
	(eq, "$track_count_field_medi_siege", 5), #
	(play_track, "track_medis2", 2),
	(val_add, "$music_timer", 66),#
	(try_end),
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 3), #rt_plain
	(this_or_next|eq, ":current_terrain_main_party", 11), #rt_forest
	(eq, ":current_terrain_main_party", 9), #rt_mountain_forest
	#Begin Euro Music
	(try_begin),
	(eq, "$track_count_field_siege", 1), #
	(play_track, "track_euros1", 2),
	(val_add, "$music_timer", 162),#
	(else_try),
	(eq, "$track_count_field_siege", 2), #
	(play_track, "track_euros2", 2),
	(val_add, "$music_timer", 221),#
	(else_try),
	
	(eq, "$track_count_field_siege", 3), #
	(play_track, "track_euros3", 2),
	(val_add, "$music_timer", 190),#
	(else_try),
	
	(eq, "$track_count_field_siege", 4), #
	(play_track, "track_euros4", 2),
	(val_add, "$music_timer", 317),#
	(else_try),
	
	(eq, "$track_count_field_siege", 5), #
	(play_track, "track_euros5", 2),
	(val_add, "$music_timer", 59),#
		(else_try),
	
	(eq, "$track_count_field_siege", 6), #
	(play_track, "track_euros6", 2),
	(val_add, "$music_timer", 59),#
		(else_try),
	
	(eq, "$track_count_field_siege", 7), #
	(play_track, "track_euros7", 2),
	(val_add, "$music_timer", 85),#
		(else_try),
	
	(eq, "$track_count_field_siege", 8), #
	(play_track, "track_euros8", 2),
	(val_add, "$music_timer", 82),#
		(else_try),
	
	(eq, "$track_count_field_siege", 9), #
	(play_track, "track_euros9", 2),
	(val_add, "$music_timer", 199),#
		(else_try),
	
	(eq, "$track_count_field_siege", 10), #
	(play_track, "track_euros10", 2),
	(val_add, "$music_timer", 281),#
	(try_end),
	
	
	
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 4), #rt_snow
	(this_or_next|eq, ":current_terrain_main_party", 12), #rt_snow_forest
	(eq, ":current_terrain_main_party", 7), #rt_bridge
	#Begin Euro Music
	(try_begin),
	(eq, "$track_count_field_siege", 1), #
	(play_track, "track_euros1", 2),
	(val_add, "$music_timer", 162),#
	(else_try),
	(eq, "$track_count_field_siege", 2), #
	(play_track, "track_euros2", 2),
	(val_add, "$music_timer", 221),#
	(else_try),
	
	(eq, "$track_count_field_siege", 3), #
	(play_track, "track_euros3", 2),
	(val_add, "$music_timer", 190),#
	(else_try),
	
	(eq, "$track_count_field_siege", 4), #
	(play_track, "track_euros4", 2),
	(val_add, "$music_timer", 317),#
	(else_try),
	
	(eq, "$track_count_field_siege", 5), #
	(play_track, "track_euros5", 2),
	(val_add, "$music_timer", 59),#
		(else_try),
	
	(eq, "$track_count_field_siege", 6), #
	(play_track, "track_euros6", 2),
	(val_add, "$music_timer", 59),#
		(else_try),
	
	(eq, "$track_count_field_siege", 7), #
	(play_track, "track_euros7", 2),
	(val_add, "$music_timer", 85),#
		(else_try),
	
	(eq, "$track_count_field_siege", 8), #
	(play_track, "track_euros8", 2),
	(val_add, "$music_timer", 82),#
		(else_try),
	
	(eq, "$track_count_field_siege", 9), #
	(play_track, "track_euros9", 2),
	(val_add, "$music_timer", 199),#
		(else_try),
	
	(eq, "$track_count_field_siege", 10), #
	(play_track, "track_euros10", 2),
	(val_add, "$music_timer", 281),#
	(try_end),
	
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 5), #rt_desert
	(eq, ":current_terrain_main_party", 13), #rt_desert_forest
	#Begin arab music
	(try_begin),
	(eq, "$track_count_field_arabs_siege", 1), #
	(play_track, "track_arabs1",  2),
	(val_add, "$music_timer", 198),#
	(else_try),
	(eq, "$track_count_field_arabs_siege", 2), #
	(play_track, "track_arabs2", 2),
	(val_add, "$music_timer", 112),#
	
	(else_try),
	(eq, "$track_count_field_arabs_siege", 3), #
	(play_track, "track_medis1", 2),
	(val_add, "$music_timer", 195),#
	(else_try),
	
	(eq, "$track_count_field_arabs_siege", 4), #
	(play_track, "track_arabs4", 2),
	(val_add, "$music_timer", 79),#
		(else_try),
	
	(eq, "$track_count_field_arabs_siege", 5), #
	(play_track, "track_arabs5", 2),
	(val_add, "$music_timer", 394),#
	
			(else_try),
	(eq, "$track_count_field_arabs_siege", 6), #
	(play_track, "track_arabs3", 2),
	(val_add, "$music_timer", 80),#
			(else_try),
	(eq, "$track_count_field_arabs_siege", 7), #
	(play_track, "track_medis2", 2),
	(val_add, "$music_timer", 66),#
	(try_end),
	(try_end),
	
  ]),
	
	#####MUSICBOX END
			#####Camera mode by Rubik None-Coop Version Begin
		(0, 0, 0, [(eq, "$extended_camera_mode", 1)],
  [
    (get_player_agent_no, ":player_agent"),
    (agent_get_look_position, pos1, ":player_agent"),
    (position_move_z, pos1, "$g_camera_z"),
    (position_move_y, pos1, "$g_camera_y"),
    (agent_get_horse, ":horse_agent", ":player_agent"),
    (try_begin),
      (ge, ":horse_agent", 0),
      (position_move_z, pos1, 80),
    (try_end),
    (mission_cam_set_position, pos1),
    (try_begin),
      (key_is_down, key_left_control),
      (assign, ":move_val", 50),
    (else_try),
      (assign, ":move_val", 10),
    (try_end),
    (try_begin),
      (key_clicked, key_up),
      (mission_cam_set_mode, 1),
      (val_add, "$g_camera_z", ":move_val"),
    (else_try),
      (key_clicked, key_down),
      (mission_cam_set_mode, 1),
      (val_sub, "$g_camera_z", ":move_val"),
    (else_try),
      (key_clicked, key_left),
      (mission_cam_set_mode, 1),
      (val_add, "$g_camera_y", ":move_val"),
    (else_try),
      (key_clicked, key_right),
      (mission_cam_set_mode, 1),
      (val_sub, "$g_camera_y", ":move_val"),
    (try_end),
    (try_begin),
      (this_or_next|game_key_clicked, gk_view_char),
      (this_or_next|game_key_clicked, gk_zoom),
      (game_key_clicked, gk_cam_toggle),
      (mission_cam_set_mode, 0),
    (try_end),
  ]),
  #####Camera mode by Rubik None-Coop Version End
		
			
###########Torch by troycall/Envious Arm begin

																	#(-25.0, 0.0, 0.0, #Enabling this forces random chance to be 100%
																	#(ti_on_agent_spawn, 0, 0, #Enabling this forces random chance to be 100%
																	(20, 0, ti_once, #Proper one, but reinforcements do not get assigned torches.
        [
          (mission_tpl_are_all_agents_spawned), #From VC Header_Operations to prevent weird behavior.
          (is_currently_night) #Check if currently night time
        ],
        [

		  ####DEFAULT
		   #(try_for_agents, ":agent"),
            #(agent_get_wielded_item, ":item", ":agent", 1),
            #(gt, ":item", -1),
            #(agent_unequip_item, ":agent", ":item"),
            #(agent_equip_item, ":agent", "itm_torch"),
            #(agent_set_wielded_item, ":agent", "itm_torch"),           
          #(try_end),
		  ####END DEFAULT
		  
		  (try_for_agents, ":agent"), #Try for agents...
		  #Extension
		  (agent_is_alive, ":agent"), #For performance reasons
		  #End
		  (agent_is_human, ":agent"), #Performance
          (agent_is_non_player, ":agent"), #Uncommenting this includes player on spawning with torch, may be necessary to uncomment at module_coop_mission_templates.
		  


		 ##########Default Order
		 #######		  (agent_is_human, ":agent"), #Performance
         #######(agent_is_non_player, ":agent"), #Uncommenting this includes player on spawning with torch, may be necessary to uncomment at module_coop_mission_templates.
		 #######
		 ########Extension
		 #######(agent_is_active, ":agent"), #For performance reasons
		 #######(agent_is_alive, ":agent"), #For performance reasons
		 ########End
		  ############
		  		  
				#  (try_begin),
				  
		#		          (agent_get_wielded_item, ":rhand", ":agent", 0),  #Right hand
		#  (assign, ":rhanditem", 0), # Preparing local variable.
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000000000100),
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000004000000),
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000008000000),
		#  (neg|item_has_capability, ":rhanditem", 0x0000000170000000),
		# 

		  #
		  
          #BEGIN DEBUG
          #(assign, reg10, ":agent"),
          #(str_clear, s10),
          #(str_store_string, s10, "@New agent: {reg10}"),
          #END DEBUG
		  #(agent_get_wielded_item, ":rhanditem", ":agent", 0),  #Obtain right hand item
         (agent_get_wielded_item, ":rhanditem", ":agent", 0),  #Obtain right hand item
          (agent_get_wielded_item, ":item", ":agent", 1), # Left hand: shield or -1
          #BEGIN DEBUG
          #(assign, reg10, ":item"),
          #(str_store_string, s10, "@{s10}. LH: {reg10}"),
		  #(display_message, "@Main block Phase A finalized"),
          #END DEBUG
		  #(item_get_type, ":type", ":rhanditem"), #If right hand item is polearm, stop reading rest of code.
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_club_with_spike_head", "itm_wooden_shield"),
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_light_lance", "itm_wooden_shield"),
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_light_lance", "itm_wooden_shield"),
          (try_begin),
		  (neg|is_between, ":rhanditem", "itm_club_with_spike_head", "itm_wooden_shield"),
		  (neg|is_between, ":rhanditem", "itm_lance_banner_jer", "itm_cross_end"), #Update item slots
		  #(neg|troop_has_item_equipped, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		  #(neq, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		  
		# (neg|eq, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		    (gt, ":item", -1), #Check if the agent wields any item in the left hand, this or next.
            #(neq, ":item", -1),# Check if the agent wields any item in the left hand
            (neq, ":item", "itm_torch"), #If agent is using torch, ignore him.
            #(display_message, "@PASSED neg tests"), #Debug message

			
            (store_random_in_range, ":chance", 1, 101), # Chance of item being assigned
            (try_begin),
			  (le, ":chance", "$torch_chance"), #25% = 25
				#lt           = neg | ge # less than		-- (lt,<value>,<value>),
				#neq          = neg | eq # not equal to		-- (neq,<value>,<value>),
				#le           = neg | gt # less or equal to	-- (le,<value>,<value>),
              (agent_unequip_item, ":agent", ":item"),
			  
              #BEGIN DEBUG
              #(str_store_item_name, s11, ":item"),
              #(str_store_string, s10, "@{s10}. Removed item: {s11}"),
			  #(display_message, "@(agent_unequip_item, :agent, :item PASSED."),
              #END DEBUG

               
                (agent_equip_item, ":agent", "itm_torch"), #Tell agent to equip the item
                 #(display_message, "@(agent_equip_item, :agent, :item PASSED."),
                  (agent_set_wielded_item, ":agent", "itm_torch"), #Required for infantry only, cavarly can work without it.
                  #(display_message, "@(agent_set_wielded_item, :agent, :item PASSED."),
                 
                 
                  #BEGIN DEBUG
                #(else_try),
                  #(str_store_string, s10, "@{s10}. Failed random chance."),
                (try_end),
               
              #(else_try),
                #(str_store_string, s10, "@{s10}. Invalid agent for torch"),
              (try_end),
             
              #(display_message, s10),
			  (try_end),
              #END DEBUG
			#  (try_end),
      ]),
	  
###########Torch by troycall/Envious Arm end


		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(call_script, "script_troop_agent_set_banner", "tableau_game_troop_label_banner", ":trigger_param_1", ":troop_id_trigger_param_1")
		]),

		(-22.0, 0.0, 0.0,
		[
			(display_message, "str_cant_use_inventory_now")
		],

		[]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(get_player_agent_no, ":player_agent_no"),
			(neq, ":trigger_param_1", ":player_agent_no"),
			(assign, "$g_main_attacker_agent", ":trigger_param_1"),
			(agent_ai_set_aggressiveness, ":trigger_param_1", 199),
			(try_begin),
				(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
				(is_between, ":troop_id_trigger_param_1", "trp_merchant_kingdom_1", "trp_startup_merchants_end"),
				(agent_set_team, ":trigger_param_1", 7),
				(team_set_relation, 0, 7, 0),
			(try_end)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$talked_with_merchant", 0)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_position, 0, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(is_between, ":troop_id_var_2", "trp_merchant_kingdom_1", "trp_startup_merchants_end"),
				(agent_set_scripted_destination, ":var_2", 0),
				(agent_get_position, 1, ":var_2"),
				(get_distance_between_positions, ":distance_between_positions_0_1", 0, 1),
				(le, ":distance_between_positions_0_1", 200),
				(assign, "$talk_context", 11),
				(start_mission_conversation, ":troop_id_var_2"),
			(try_end)
		]),

		(1.0, 0.0, 0.0,
		[],

		[
			(get_player_agent_no, ":player_agent_no"),
			(ge, "$g_main_attacker_agent", 0),
			(ge, ":player_agent_no", 0),
			(agent_is_active, "$g_main_attacker_agent"),
			(agent_is_active, ":player_agent_no"),
			(agent_get_position, 0, ":player_agent_no"),
			(agent_get_position, 1, "$g_main_attacker_agent"),
			(get_distance_between_positions, ":distance_between_positions_0_1", 0, 1),
			(ge, ":distance_between_positions_0_1", 5),
			(agent_set_scripted_destination, "$g_main_attacker_agent", 0)
		]),

		(-21.0, 0.0, 0.0,
		[],

		[
			(display_message, "str_cannot_leave_now")
		]),

		(0.0, 0.0, ti_once,
		[],

		[
					(try_begin),
			(eq, "$additional_music", 0),
			(call_script, "script_music_set_situation_with_culture", 4096),
			(try_end),
			(set_party_battle_mode)
		]),

		(0.0, 0.0, ti_once,
		[
			(neg|main_hero_fallen),
			(num_active_teams_le, 1)
		],

		[
			(store_faction_of_party, ":faction_of_party_g_starting_town", "$g_starting_town"),
			(try_begin),
				(eq, ":faction_of_party_g_starting_town", "fac_kingdom_1"),
				(assign, ":value", "trp_merchant_kingdom_1"),
			(else_try),
				(eq, ":faction_of_party_g_starting_town", "fac_kingdom_2"),
				(assign, ":value", "trp_merchant_kingdom_2"),
			(else_try),
				(eq, ":faction_of_party_g_starting_town", "fac_kingdom_3"),
				(assign, ":value", "trp_merchant_kingdom_3"),
			(else_try),
				(eq, ":faction_of_party_g_starting_town", "fac_kingdom_4"),
				(assign, ":value", "trp_merchant_kingdom_4"),
			(else_try),
				(eq, ":faction_of_party_g_starting_town", "fac_kingdom_5"),
				(assign, ":value", "trp_merchant_kingdom_5"),
			(else_try),
				(this_or_next|eq, ":faction_of_party_g_starting_town", "fac_kingdom_42"),
				(eq, ":faction_of_party_g_starting_town", "fac_kingdom_6"),
				(assign, ":value", "trp_merchant_kingdom_6"),
			(else_try),
				(eq, ":faction_of_party_g_starting_town", "fac_kingdom_7"),
				(assign, ":value", "trp_merchant_kingdom_7"),
			(else_try),
				(eq, ":faction_of_party_g_starting_town", "fac_kingdom_8"),
				(assign, ":value", "trp_merchant_kingdom_8"),
			(else_try),
				(eq, ":faction_of_party_g_starting_town", "fac_kingdom_9"),
				(assign, ":value", "trp_merchant_kingdom_9"),
			(else_try),
				(eq, ":faction_of_party_g_starting_town", "fac_kingdom_10"),
				(assign, ":value", "trp_merchant_kingdom_10"),
			(else_try),
				(eq, ":faction_of_party_g_starting_town", "fac_kingdom_11"),
				(assign, ":value", "trp_merchant_kingdom_11"),
			(else_try),
				(eq, ":faction_of_party_g_starting_town", "fac_kingdom_12"),
				(assign, ":value", "trp_merchant_kingdom_12"),
			(else_try),
				(eq, ":faction_of_party_g_starting_town", "fac_kingdom_13"),
				(assign, ":value", "trp_merchant_kingdom_13"),
			(else_try),
				(eq, ":faction_of_party_g_starting_town", "fac_kingdom_14"),
				(assign, ":value", "trp_merchant_kingdom_14"),
			(else_try),
				(eq, ":faction_of_party_g_starting_town", "fac_kingdom_15"),
				(assign, ":value", "trp_merchant_kingdom_15"),
			(else_try),
				(eq, ":faction_of_party_g_starting_town", "fac_kingdom_16"),
				(assign, ":value", "trp_merchant_kingdom_16"),
			(else_try),
				(eq, ":faction_of_party_g_starting_town", "fac_kingdom_17"),
				(assign, ":value", "trp_merchant_kingdom_17"),
			(else_try),
				(eq, ":faction_of_party_g_starting_town", "fac_kingdom_18"),
				(assign, ":value", "trp_merchant_kingdom_18"),
			(else_try),
				(eq, ":faction_of_party_g_starting_town", "fac_kingdom_19"),
				(assign, ":value", "trp_merchant_kingdom_19"),
			(else_try),
				(eq, ":faction_of_party_g_starting_town", "fac_kingdom_20"),
				(assign, ":value", "trp_merchant_kingdom_20"),
			(else_try),
				(eq, ":faction_of_party_g_starting_town", "fac_papacy"),
				(assign, ":value", "trp_merchant_kingdom_21"),
			(else_try),
				(eq, ":faction_of_party_g_starting_town", "fac_kingdom_22"),
				(assign, ":value", "trp_merchant_kingdom_22"),
			(else_try),
				(eq, ":faction_of_party_g_starting_town", "fac_kingdom_23"),
				(assign, ":value", "trp_merchant_kingdom_23"),
			(else_try),
				(this_or_next|eq, ":faction_of_party_g_starting_town", "fac_kingdom_24"),
				(this_or_next|eq, ":faction_of_party_g_starting_town", "fac_kingdom_38"),
				(this_or_next|eq, ":faction_of_party_g_starting_town", "fac_kingdom_39"),
				(this_or_next|eq, ":faction_of_party_g_starting_town", "fac_kingdom_40"),
				(eq, ":faction_of_party_g_starting_town", "fac_kingdom_41"),
				(assign, ":value", "trp_merchant_kingdom_24"),
			(else_try),
				(eq, ":faction_of_party_g_starting_town", "fac_kingdom_25"),
				(assign, ":value", "trp_merchant_kingdom_25"),
			(else_try),
				(eq, ":faction_of_party_g_starting_town", "fac_kingdom_26"),
				(assign, ":value", "trp_merchant_kingdom_26"),
			(else_try),
				(eq, ":faction_of_party_g_starting_town", "fac_kingdom_27"),
				(assign, ":value", "trp_merchant_kingdom_27"),
			(else_try),
				(eq, ":faction_of_party_g_starting_town", "fac_kingdom_28"),
				(assign, ":value", "trp_merchant_kingdom_28"),
			(else_try),
				(eq, ":faction_of_party_g_starting_town", "fac_kingdom_29"),
				(assign, ":value", "trp_merchant_kingdom_29"),
			(else_try),
				(eq, ":faction_of_party_g_starting_town", "fac_kingdom_30"),
				(assign, ":value", "trp_merchant_kingdom_30"),
			(else_try),
				(eq, ":faction_of_party_g_starting_town", "fac_kingdom_31"),
				(assign, ":value", "trp_merchant_kingdom_31"),
			(else_try),
				(eq, ":faction_of_party_g_starting_town", "fac_kingdom_32"),
				(assign, ":value", "trp_merchant_kingdom_32"),
			(else_try),
				(this_or_next|eq, ":faction_of_party_g_starting_town", "fac_kingdom_34"),
				(this_or_next|eq, ":faction_of_party_g_starting_town", "fac_kingdom_35"),
				(this_or_next|eq, ":faction_of_party_g_starting_town", "fac_kingdom_36"),
				(eq, ":faction_of_party_g_starting_town", "fac_kingdom_33"),
				(assign, ":value", "trp_merchant_kingdom_2"),
			(else_try),
				(eq, ":faction_of_party_g_starting_town", "fac_kingdom_37"),
				(assign, ":value", "trp_merchant_kingdom_37"),
			(try_end),
			(add_visitors_to_current_scene, 3, ":value", 1, 0)
		]),

		(1.0, 0.0, ti_once,
		[
			(eq, "$talked_with_merchant", 1)
		],

		[
			(try_begin),
				(main_hero_fallen),
				(assign, "$g_killed_first_bandit", 0),
			(else_try),
				(assign, "$g_killed_first_bandit", 1),
			(try_end),
			(finish_mission),
			(assign, "$g_main_attacker_agent", 0),
			(assign, "$talked_with_merchant", 1),
			(assign, "$current_startup_quest_phase", 1),
			(change_screen_return),
			(set_trigger_result, 1),
			(get_player_agent_no, ":player_agent_no"),
			(store_agent_hit_points, ":agent_hit_points_player_agent_no", ":player_agent_no"),
			(try_begin),
				(lt, ":agent_hit_points_player_agent_no", 90),
				(agent_set_hit_points, ":player_agent_no", 90),
			(try_end)
		]),

		(1.0, 3.0, ti_once,
		[
			(main_hero_fallen)
		],

		[
			(try_begin),
				(main_hero_fallen),
				(assign, "$g_killed_first_bandit", 0),
			(else_try),
				(assign, "$g_killed_first_bandit", 1),
			(try_end),
			(finish_mission),
			(assign, "$g_main_attacker_agent", 0),
			(assign, "$talked_with_merchant", 1),
			(assign, "$current_startup_quest_phase", 1),
			(change_screen_return),
			(set_trigger_result, 1),
			(get_player_agent_no, ":player_agent_no"),
			(store_agent_hit_points, ":agent_hit_points_player_agent_no", ":player_agent_no"),
			(try_begin),
				(lt, ":agent_hit_points_player_agent_no", 90),
				(agent_set_hit_points, ":player_agent_no", 90),
			(try_end)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_set_matching_sexy_boots", ":trigger_param_1")
		]),

			(0.0, 0.0, 0.0,
		[
			(eq, "$sp_shield_bash", 1),
			(game_key_is_down, 7),
			(game_key_clicked, 6),
			(neg|main_hero_fallen),
		],

		[
		(call_script, "script_shield_bash"),
		]),

			##AI kicking begin
		   (2, 0, 3, #AI kicking
       [], [
	(get_player_agent_no,":player"),
	(try_for_agents, ":agent"),
		(neq, ":agent", ":player"),
		(agent_is_alive, ":agent"),
		(neq, ":agent", -1),
		(agent_is_human, ":agent"),#Only humans can kick....FOR NOW
		(agent_is_active, ":agent"),
		(agent_slot_eq, ":agent", slot_agent_is_running_away, 0),#Isn't fleeing the battle.
		##He's an eligible human.  Now see if he's in a position to kick.
		(agent_get_attack_action, ":attack_action", ":agent"), #returned values: free = 0, readying_attack = 1, releasing_attack = 2, completing_attack_after_hit = 3, attack_parried = 4, reloading = 5, after_release = 6, cancelling_attack = 7
		(agent_get_defend_action, ":defend_action", ":agent"),#
		(this_or_next|eq,":attack_action",4),#Just got parried
		(this_or_next|eq,":defend_action",1),#Parrying an enemy
		##So he'll only try to kick if he just parried an enemy attack, or his own attack just got parried.
		(agent_get_team, ":team", ":agent"),
		(assign, ":maximum_distance", 100),
		#Target Acquisition
		(agent_ai_get_look_target,":suspect",":agent"),
		(gt,":suspect",0),#Make sure there is someone.
		(agent_is_alive, ":suspect"),
		(agent_is_human, ":suspect"),#Only kick humans
		(agent_is_active, ":suspect"),
		(agent_get_team, ":suspect_team", ":suspect"),
		(neq, ":suspect_team", ":team"),#Friends don't let friends kick friends.
		(agent_get_position, pos1, ":agent"),#Distance check
		(agent_get_position, pos2, ":suspect"),
		(neg|position_is_behind_position, pos2, pos1), #Suspect can't be behind kicker.
		(get_distance_between_positions, ":distance", pos1, pos2),
		(le, ":distance", ":maximum_distance"),
		#Check chance
		(store_random_in_range,":kickchance", 1, 10),
		(try_begin),
			(eq,":kickchance",1), #10% chance per check
				#(display_message, "@Agent kicks."),
				(agent_set_animation, ":agent", "anim_prepare_kick_0"),
				(agent_deliver_damage_to_agent, ":agent", ":suspect", 3),
				(agent_set_animation, ":suspect", "anim_strike3_abdomen_front"),#Get Kicked
			(try_end),
	   (try_end),]),
	   
	   ##AI Kicking end
		
		
		(0.25, 0.0, 4.0,
		[
			(eq, "$sp_shield_bash_ai", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(neq, ":var_2", ":player_agent_no"),
				(agent_is_alive, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_active, ":var_2"), #Test to see if it stops AI from shield bashing (new addition v3)
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(store_skill_level, ":skill_level_shield_troop_id_var_2", "skl_shield", ":troop_id_var_2"),
				(store_proficiency_level, ":proficiency_level_troop_id_var_2_0", ":troop_id_var_2", 0),
				(ge, ":skill_level_shield_troop_id_var_2", 4),
				(ge, ":proficiency_level_troop_id_var_2_0", 200),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(le, ":horse_var_2", 0),
				(try_begin),
					(neg|agent_slot_ge, ":var_2", 50, 1),
					(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
					(agent_get_wielded_item, ":wielded_item_var_2_1", ":var_2", 1),
					(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
					(eq, ":type_wielded_item_var_2_1", 7),
					(agent_get_attack_action, ":attack_action_var_2", ":var_2"),
					(eq, ":attack_action_var_2", 0),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_position, 1, ":var_2"),
					(assign, ":value", -1),
					(assign, ":value_2", 125),
					(try_for_agents, ":var_13"),
						(agent_is_alive, ":var_13"),
						(agent_is_human, ":var_13"),
						(agent_get_position, 2, ":var_13"),
						(neg|position_is_behind_position, 2, 1),
						(agent_get_team, ":team_var_13", ":var_13"),
						(neq, ":team_var_13", ":team_var_2"),
						(try_begin),
							(eq, ":team_var_2", 0),
							(assign, ":value_3", 2),
						(else_try),
							(eq, ":team_var_2", 2),
							(assign, ":value_3", 0),
						(else_try),
							(eq, ":team_var_2", 1),
							(assign, ":value_3", 3),
						(else_try),
							(eq, ":team_var_2", 3),
							(assign, ":value_3", 1),
						(try_end),
						(neq, ":team_var_13", ":value_3"),
						(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
						(le, ":distance_between_positions_1_2", ":value_2"),
						(assign, ":value_2", ":distance_between_positions_1_2"),
						(assign, ":value", ":var_13"),
					(try_end),
					(ge, ":value", 0),
					(agent_get_horse, ":horse_var_2", ":value"),
					(eq, ":horse_var_2", -1),
					(store_random_in_range, ":random_in_range_15_26", 15, 26),
					(agent_set_slot, ":var_2", 50, ":random_in_range_15_26"),
					(agent_set_animation, ":var_2", "anim_shield_bash"),
					(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
					(troop_get_type, ":type_wielded_item_var_2_1", ":troop_id_var_2"),
					(try_begin),
						(eq, ":type_wielded_item_var_2_1", 0),
						(agent_play_sound, ":var_2", "snd_man_yell"),
					(else_try),
						(eq, ":type_wielded_item_var_2_1", 1),
						(agent_play_sound, ":var_2", "snd_woman_yell"),
					(try_end),
					(agent_play_sound, ":value", "snd_wooden_hit_low_armor_high_damage"),
					(agent_get_defend_action, ":attack_action_var_2", ":value"),
					(try_begin),
						(eq, ":attack_action_var_2", 2),
						(neg|position_is_behind_position, 1, 2),
						(agent_get_wielded_item, ":wielded_item_var_2_1", ":value", 1),
						(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
						(eq, ":type_wielded_item_var_2_1", 7),
						(agent_set_animation, ":value", "anim_shield_bash"),
					(else_try),
						(agent_set_animation, ":value", "anim_shield_strike"),
					(try_end),
				(try_end),
				(agent_get_slot, ":var_2_50", ":var_2", 50),
				(val_sub, ":var_2_50", 1),
				(val_max, ":var_2_50", 0),
				(agent_set_slot, ":var_2", 50, ":var_2_50"),
			(try_end)
		])
	] ),

	("meeting_merchant", 0, -1,
	"Meeting with the merchant",
	[(0, mtef_team_0, af_override_horse, 0, 1, []),
	(1, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(2, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(3, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(4, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(5, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(6, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(7, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(8, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(9, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, [])],
	[
		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(try_begin),
				(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
				(is_between, ":troop_id_trigger_param_1", "trp_merchant_kingdom_1", "trp_startup_merchants_end"),
				(agent_set_team, ":trigger_param_1", 7),
				(team_set_relation, 0, 7, 0),
			(try_end)
		]),

		(1.0, 0.0, ti_once,
		[],

		[
			(assign, "$dialog_with_merchant_ended", 0),
			(store_current_scene, ":current_scene"),
			(scene_set_slot, ":current_scene", slot_scene_visited, 1),
			(try_begin),
				(eq, "$sneaked_into_town", 1),
				(call_script, "script_music_set_situation_with_culture", 16384),
			(else_try),
				(eq, "$talk_context", 14),
				(call_script, "script_music_set_situation_with_culture", 512),
			(else_try),
				(call_script, "script_music_set_situation_with_culture", 8192),
			(try_end)
		]),

		(1.0, 0.0, 0.0,
		[
			(assign, ":value", 0),
			(try_begin),
				(ge, "$dialog_with_merchant_ended", 6),
				(assign, ":value", 1),
			(else_try),
				(ge, "$dialog_with_merchant_ended", 1),
				(neg|conversation_screen_is_active),
				(try_begin),
					(eq, "$dialog_with_merchant_ended", 1),
					(check_quest_active, "qst_collect_men"),
					(dialog_box, "str_start_up_first_quest", "@Tutorial"),
				(try_end),
				(val_add, "$dialog_with_merchant_ended", 1),
				(assign, ":value", 0),
			(try_end),
			(try_begin),
				(conversation_screen_is_active),
				(tutorial_message, -1),
				(assign, ":value", 0),
			(try_end),
			(eq, ":value", 1)
		],

		[
			(tutorial_message_set_size, 17, 17),
			(tutorial_message_set_position, 500, 650),
			(tutorial_message_set_center_justify, 0),
			(tutorial_message_set_background, 1),
			(tutorial_message, "str_press_tab_to_exit_from_town")
		]),

		(-19.0, 0.0, 0.0,
		[],

		[]),

		(-22.0, 0.0, 0.0,
		[
			(set_trigger_result, 1)
		],

		[]),

		(-21.0, 0.0, 0.0,
		[
			(try_begin),
				(gt, "$dialog_with_merchant_ended", 0),
				(assign, ":value", 0),
				(party_get_position, 1, "$current_town"),
				(try_for_range, ":unused", 0, 10),
					(map_get_random_position_around_position, 0, 1, 2),
					(get_distance_between_positions, ":distance_between_positions_0_1", 0, 1),
					(ge, ":distance_between_positions_0_1", ":value"),
					(assign, ":value", ":distance_between_positions_0_1"),
					(copy_position, 2, 0),
				(try_end),
				(party_set_position, "p_main_party", 2),
				(finish_mission),
				(assign, "$current_startup_quest_phase", 2),
				(tutorial_message, -1),
				(tutorial_message_set_background, 0),
				(change_screen_map),
				(try_begin),
					(check_quest_finished, "qst_save_town_from_bandits"),
					(assign, "$g_do_one_more_meeting_with_merchant", 1),
				(else_try),
					(set_spawn_radius, 50),
					(try_for_range, ":unused", 0, 20),
						(spawn_around_party, "p_main_party", "pt_looters"),
					(try_end),
				(try_end),
				(set_trigger_result, 1),
			(else_try),
				(display_message, "str_cannot_leave_now"),
			(try_end)
		],

		[]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_set_matching_sexy_boots", ":trigger_param_1")
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$sp_shield_bash", 1),
			(game_key_is_down, 7),
			(game_key_clicked, 6),
			(neg|main_hero_fallen),
		],

		[
		(call_script, "script_shield_bash"),
		]),

			##AI kicking begin
		   (2, 0, 3, #AI kicking
       [], [
	(get_player_agent_no,":player"),
	(try_for_agents, ":agent"),
		(neq, ":agent", ":player"),
		(agent_is_alive, ":agent"),
		(neq, ":agent", -1),
		(agent_is_human, ":agent"),#Only humans can kick....FOR NOW
		(agent_is_active, ":agent"),
		(agent_slot_eq, ":agent", slot_agent_is_running_away, 0),#Isn't fleeing the battle.
		##He's an eligible human.  Now see if he's in a position to kick.
		(agent_get_attack_action, ":attack_action", ":agent"), #returned values: free = 0, readying_attack = 1, releasing_attack = 2, completing_attack_after_hit = 3, attack_parried = 4, reloading = 5, after_release = 6, cancelling_attack = 7
		(agent_get_defend_action, ":defend_action", ":agent"),#
		(this_or_next|eq,":attack_action",4),#Just got parried
		(this_or_next|eq,":defend_action",1),#Parrying an enemy
		##So he'll only try to kick if he just parried an enemy attack, or his own attack just got parried.
		(agent_get_team, ":team", ":agent"),
		(assign, ":maximum_distance", 100),
		#Target Acquisition
		(agent_ai_get_look_target,":suspect",":agent"),
		(gt,":suspect",0),#Make sure there is someone.
		(agent_is_alive, ":suspect"),
		(agent_is_human, ":suspect"),#Only kick humans
		(agent_is_active, ":suspect"),
		(agent_get_team, ":suspect_team", ":suspect"),
		(neq, ":suspect_team", ":team"),#Friends don't let friends kick friends.
		(agent_get_position, pos1, ":agent"),#Distance check
		(agent_get_position, pos2, ":suspect"),
		(neg|position_is_behind_position, pos2, pos1), #Suspect can't be behind kicker.
		(get_distance_between_positions, ":distance", pos1, pos2),
		(le, ":distance", ":maximum_distance"),
		#Check chance
		(store_random_in_range,":kickchance", 1, 10),
		(try_begin),
			(eq,":kickchance",1), #10% chance per check
				#(display_message, "@Agent kicks."),
				(agent_set_animation, ":agent", "anim_prepare_kick_0"),
				(agent_deliver_damage_to_agent, ":agent", ":suspect", 3),
				(agent_set_animation, ":suspect", "anim_strike3_abdomen_front"),#Get Kicked
			(try_end),
	   (try_end),]),
	   
	   ##AI Kicking end
		
		
		(0.25, 0.0, 4.0,
		[
			(eq, "$sp_shield_bash_ai", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(neq, ":var_2", ":player_agent_no"),
				(agent_is_alive, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_active, ":var_2"), #Test to see if it stops AI from shield bashing (new addition v3)
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(store_skill_level, ":skill_level_shield_troop_id_var_2", "skl_shield", ":troop_id_var_2"),
				(store_proficiency_level, ":proficiency_level_troop_id_var_2_0", ":troop_id_var_2", 0),
				(ge, ":skill_level_shield_troop_id_var_2", 4),
				(ge, ":proficiency_level_troop_id_var_2_0", 200),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(le, ":horse_var_2", 0),
				(try_begin),
					(neg|agent_slot_ge, ":var_2", 50, 1),
					(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
					(agent_get_wielded_item, ":wielded_item_var_2_1", ":var_2", 1),
					(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
					(eq, ":type_wielded_item_var_2_1", 7),
					(agent_get_attack_action, ":attack_action_var_2", ":var_2"),
					(eq, ":attack_action_var_2", 0),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_position, 1, ":var_2"),
					(assign, ":value", -1),
					(assign, ":value_2", 125),
					(try_for_agents, ":var_13"),
						(agent_is_alive, ":var_13"),
						(agent_is_human, ":var_13"),
						(agent_get_position, 2, ":var_13"),
						(neg|position_is_behind_position, 2, 1),
						(agent_get_team, ":team_var_13", ":var_13"),
						(neq, ":team_var_13", ":team_var_2"),
						(try_begin),
							(eq, ":team_var_2", 0),
							(assign, ":value_3", 2),
						(else_try),
							(eq, ":team_var_2", 2),
							(assign, ":value_3", 0),
						(else_try),
							(eq, ":team_var_2", 1),
							(assign, ":value_3", 3),
						(else_try),
							(eq, ":team_var_2", 3),
							(assign, ":value_3", 1),
						(try_end),
						(neq, ":team_var_13", ":value_3"),
						(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
						(le, ":distance_between_positions_1_2", ":value_2"),
						(assign, ":value_2", ":distance_between_positions_1_2"),
						(assign, ":value", ":var_13"),
					(try_end),
					(ge, ":value", 0),
					(agent_get_horse, ":horse_var_2", ":value"),
					(eq, ":horse_var_2", -1),
					(store_random_in_range, ":random_in_range_15_26", 15, 26),
					(agent_set_slot, ":var_2", 50, ":random_in_range_15_26"),
					(agent_set_animation, ":var_2", "anim_shield_bash"),
					(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
					(troop_get_type, ":type_wielded_item_var_2_1", ":troop_id_var_2"),
					(try_begin),
						(eq, ":type_wielded_item_var_2_1", 0),
						(agent_play_sound, ":var_2", "snd_man_yell"),
					(else_try),
						(eq, ":type_wielded_item_var_2_1", 1),
						(agent_play_sound, ":var_2", "snd_woman_yell"),
					(try_end),
					(agent_play_sound, ":value", "snd_wooden_hit_low_armor_high_damage"),
					(agent_get_defend_action, ":attack_action_var_2", ":value"),
					(try_begin),
						(eq, ":attack_action_var_2", 2),
						(neg|position_is_behind_position, 1, 2),
						(agent_get_wielded_item, ":wielded_item_var_2_1", ":value", 1),
						(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
						(eq, ":type_wielded_item_var_2_1", 7),
						(agent_set_animation, ":value", "anim_shield_bash"),
					(else_try),
						(agent_set_animation, ":value", "anim_shield_strike"),
					(try_end),
				(try_end),
				(agent_get_slot, ":var_2_50", ":var_2", 50),
				(val_sub, ":var_2_50", 1),
				(val_max, ":var_2_50", 0),
				(agent_set_slot, ":var_2", 50, ":var_2_50"),
			(try_end)
		])
	] ),

	("town_fight", 0, -1,
	"Town Fight",
	[(0, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, []),
	(1, mtef_scene_source|mtef_team_0, af_override_horse, 0, 1, []),
	(2, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(3, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(4, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(5, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(6, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(7, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(8, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(9, mtef_visitor_source, af_override_horse, 0, 1, []),
	(10, mtef_visitor_source, af_override_horse, 0, 1, []),
	(11, mtef_visitor_source|mtef_team_1, af_override_horse, 0, 1, []),
	(12, mtef_visitor_source|mtef_team_1, af_override_horse, 0, 1, []),
	(13, mtef_visitor_source|mtef_team_1, af_override_horse, 0, 1, []),
	(14, mtef_visitor_source, af_override_horse, 0, 1, []),
	(15, mtef_visitor_source, af_override_horse, 0, 1, []),
	(16, mtef_visitor_source, af_override_horse, 0, 1, []),
	(17, mtef_visitor_source, af_override_horse, 0, 1, []),
	(18, mtef_visitor_source, af_override_horse, 0, 1, []),
	(19, mtef_visitor_source, af_override_horse, 0, 1, []),
	(20, mtef_visitor_source, af_override_horse, 0, 1, []),
	(21, mtef_visitor_source|mtef_team_1, af_override_horse, 0, 1, []),
	(22, mtef_visitor_source|mtef_team_1, af_override_horse, 0, 1, []),
	(23, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(24, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(25, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(26, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(27, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(28, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(29, mtef_visitor_source, af_override_horse, 0, 1, []),
	(30, mtef_visitor_source, af_override_horse, 0, 1, []),
	(31, mtef_visitor_source, af_override_horse, 0, 1, []),
	(32, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(33, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(34, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(35, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(36, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(37, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(38, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(39, mtef_visitor_source|mtef_team_0, af_override_horse, 0, 1, []),
	(40, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(41, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(42, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(43, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(44, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(45, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(46, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(47, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, [])],
	[
		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(call_script, "script_troop_agent_set_banner", "tableau_game_troop_label_banner", ":trigger_param_1", ":troop_id_trigger_param_1")
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_set_team, ":trigger_param_1", 0)
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(mission_disable_talk),
			(assign, "$g_main_attacker_agent", 0),
			(set_party_battle_mode),
			(assign, "$number_of_bandits_killed_by_player", 0),
			(assign, "$number_of_civilian_loses", 0),
			(set_fixed_point_multiplier, 100)
		]),

		(1.0, 0.0, ti_once,
		[
			(call_script, "script_init_town_walker_agents")
		],

		[]),

		(-26.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(store_trigger_param_2, ":trigger_param_2"),
			(try_begin),
				(agent_get_team, ":team_trigger_param_1", ":trigger_param_1"),
				(eq, ":team_trigger_param_1", 1),
				(get_player_agent_no, ":player_agent_no"),
				(eq, ":player_agent_no", ":trigger_param_2"),
				(val_add, "$number_of_bandits_killed_by_player", 1),
			(else_try),
				(eq, ":team_trigger_param_1", 0),
				(val_add, "$number_of_civilian_loses", 1),
			(try_end)
		]),

		(1.0, 0.0, 0.0,
		[
			(lt, "$merchant_sign_count", 8),
			(val_add, "$merchant_sign_count", 1),
			(try_begin),
				(eq, "$merchant_sign_count", 2),
				(get_player_agent_no, ":player_agent_no"),
				(try_for_agents, ":var_2"),
					(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
					(ge, ":troop_id_var_2", "trp_merchant_kingdom_1"),
					(lt, ":troop_id_var_2", "trp_startup_merchants_end"),
					(assign, "$g_city_merchant_troop_id", ":troop_id_var_2"),
					(assign, "$g_city_merchant_agent_id", ":var_2"),
					(agent_get_position, 0, ":player_agent_no"),
					(agent_get_position, 1, ":var_2"),
					(assign, ":value", -1000),
					(try_for_range, ":number", 0, 64),
						(entry_point_get_position, 6, ":number"),
						(get_distance_between_positions, ":distance_between_positions_0_6", 0, 6),
						(get_distance_between_positions, ":distance_between_positions_1_6", 1, 6),
						(store_sub, ":value_2", ":distance_between_positions_1_6", ":distance_between_positions_0_6"),
						(ge, ":distance_between_positions_1_6", 15),
						(ge, ":value_2", ":value"),
						(copy_position, 2, 6),
						(assign, ":value", ":value_2"),
					(try_end),
					(agent_set_scripted_destination, ":var_2", 2, 0),
					(agent_set_speed_limit, ":var_2", 10),
				(try_end),
			(else_try),
				(eq, "$merchant_sign_count", 5),
				(get_player_agent_no, ":player_agent_no"),
				(agent_get_position, 0, ":player_agent_no"),
				(agent_set_scripted_destination, "$g_city_merchant_agent_id", 0, 0),
				(agent_set_speed_limit, "$g_city_merchant_agent_id", 10),
			(else_try),
				(eq, "$merchant_sign_count", 7),
				(agent_clear_scripted_mode, "$g_city_merchant_agent_id"),
				(assign, "$talk_context", 0),
				(start_mission_conversation, "$g_city_merchant_troop_id"),
			(try_end)
		],

		[]),

		(1.0, 0.0, 0.0,
		[],

		[
			(ge, "$merchant_sign_count", 8),
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(neq, ":var_2", ":player_agent_no"),
				(agent_is_alive, ":var_2"),
				(agent_get_team, ":team_var_2", ":var_2"),
				(eq, ":team_var_2", 0),
				(agent_get_position, 0, ":var_2"),
				(assign, ":value", 10000),
				(try_for_agents, ":var_5"),
					(agent_is_alive, ":var_5"),
					(agent_get_team, ":team_var_5", ":var_5"),
					(eq, ":team_var_5", 1),
					(agent_get_position, 1, ":var_5"),
					(get_distance_between_positions, ":distance_between_positions_0_1", 0, 1),
					(le, ":distance_between_positions_0_1", ":value"),
					(assign, ":value", ":distance_between_positions_0_1"),
					(copy_position, 2, 1),
				(try_end),
				(assign, reg1, ":distance_between_positions_0_1"),
				(try_begin),
					(le, ":value", 500),
					(agent_clear_scripted_mode, ":var_2"),
				(else_try),
					(lt, ":value", 10000),
					(agent_set_scripted_destination, ":var_2", 2, 0),
				(try_end),
			(try_end)
		]),

		(3.0, 0.0, 0.0,
		[
			(lt, "$merchant_sign_count", 8),
			(call_script, "script_tick_town_walkers")
		],

		[]),

		(2.0, 0.0, 0.0,
		[
			(call_script, "script_center_ambiance_sounds")
		],

		[]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_change_banners_and_chest")
		]),

		(1.0, 4.0, ti_once,
		[
			(this_or_next|main_hero_fallen),
			(num_active_teams_le, 1),
			(ge, "$merchant_sign_count", 8)
		],

		[
			(try_begin),
				(main_hero_fallen),
				(assign, "$g_killed_first_bandit", 0),
			(else_try),
				(assign, "$g_killed_first_bandit", 1),
			(try_end),
			(assign, "$current_startup_quest_phase", 4),
			(mission_enable_talk),
			(finish_mission),
			(unlock_achievement, 6),
			(change_screen_return),
			(set_trigger_result, 1)
		]),

		(-22.0, 0.0, 0.0,
		[
			(try_begin),
				(eq, "$g_mt_mode", 0),
				(set_trigger_result, 1),
			(else_try),
				(eq, "$g_mt_mode", 1),
				(display_message, "str_cant_use_inventory_disguised"),
			(else_try),
				(display_message, "str_cant_use_inventory_now"),
			(try_end)
		],

		[]),

		(-21.0, 0.0, 0.0,
		[
			(display_message, "str_cannot_leave_now")
		],

		[]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_set_matching_sexy_boots", ":trigger_param_1")
		]),

			(0.0, 0.0, 0.0,
		[
			(eq, "$sp_shield_bash", 1),
			(game_key_is_down, 7),
			(game_key_clicked, 6),
			(neg|main_hero_fallen),
		],

		[
		(call_script, "script_shield_bash"),
		]),

			##AI kicking begin
		   (2, 0, 3, #AI kicking
       [], [
	(get_player_agent_no,":player"),
	(try_for_agents, ":agent"),
		(neq, ":agent", ":player"),
		(agent_is_alive, ":agent"),
		(neq, ":agent", -1),
		(agent_is_human, ":agent"),#Only humans can kick....FOR NOW
		(agent_is_active, ":agent"),
		(agent_slot_eq, ":agent", slot_agent_is_running_away, 0),#Isn't fleeing the battle.
		##He's an eligible human.  Now see if he's in a position to kick.
		(agent_get_attack_action, ":attack_action", ":agent"), #returned values: free = 0, readying_attack = 1, releasing_attack = 2, completing_attack_after_hit = 3, attack_parried = 4, reloading = 5, after_release = 6, cancelling_attack = 7
		(agent_get_defend_action, ":defend_action", ":agent"),#
		(this_or_next|eq,":attack_action",4),#Just got parried
		(this_or_next|eq,":defend_action",1),#Parrying an enemy
		##So he'll only try to kick if he just parried an enemy attack, or his own attack just got parried.
		(agent_get_team, ":team", ":agent"),
		(assign, ":maximum_distance", 100),
		#Target Acquisition
		(agent_ai_get_look_target,":suspect",":agent"),
		(gt,":suspect",0),#Make sure there is someone.
		(agent_is_alive, ":suspect"),
		(agent_is_human, ":suspect"),#Only kick humans
		(agent_is_active, ":suspect"),
		(agent_get_team, ":suspect_team", ":suspect"),
		(neq, ":suspect_team", ":team"),#Friends don't let friends kick friends.
		(agent_get_position, pos1, ":agent"),#Distance check
		(agent_get_position, pos2, ":suspect"),
		(neg|position_is_behind_position, pos2, pos1), #Suspect can't be behind kicker.
		(get_distance_between_positions, ":distance", pos1, pos2),
		(le, ":distance", ":maximum_distance"),
		#Check chance
		(store_random_in_range,":kickchance", 1, 10),
		(try_begin),
			(eq,":kickchance",1), #10% chance per check
				#(display_message, "@Agent kicks."),
				(agent_set_animation, ":agent", "anim_prepare_kick_0"),
				(agent_deliver_damage_to_agent, ":agent", ":suspect", 3),
				(agent_set_animation, ":suspect", "anim_strike3_abdomen_front"),#Get Kicked
			(try_end),
	   (try_end),]),
	   
	   ##AI Kicking end
		
		
		(0.25, 0.0, 4.0,
		[
			(eq, "$sp_shield_bash_ai", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(neq, ":var_2", ":player_agent_no"),
				(agent_is_alive, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_active, ":var_2"), #Test to see if it stops AI from shield bashing (new addition v3)
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(store_skill_level, ":skill_level_shield_troop_id_var_2", "skl_shield", ":troop_id_var_2"),
				(store_proficiency_level, ":proficiency_level_troop_id_var_2_0", ":troop_id_var_2", 0),
				(ge, ":skill_level_shield_troop_id_var_2", 4),
				(ge, ":proficiency_level_troop_id_var_2_0", 200),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(le, ":horse_var_2", 0),
				(try_begin),
					(neg|agent_slot_ge, ":var_2", 50, 1),
					(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
					(agent_get_wielded_item, ":wielded_item_var_2_1", ":var_2", 1),
					(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
					(eq, ":type_wielded_item_var_2_1", 7),
					(agent_get_attack_action, ":attack_action_var_2", ":var_2"),
					(eq, ":attack_action_var_2", 0),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_position, 1, ":var_2"),
					(assign, ":value", -1),
					(assign, ":value_2", 125),
					(try_for_agents, ":var_13"),
						(agent_is_alive, ":var_13"),
						(agent_is_human, ":var_13"),
						(agent_get_position, 2, ":var_13"),
						(neg|position_is_behind_position, 2, 1),
						(agent_get_team, ":team_var_13", ":var_13"),
						(neq, ":team_var_13", ":team_var_2"),
						(try_begin),
							(eq, ":team_var_2", 0),
							(assign, ":value_3", 2),
						(else_try),
							(eq, ":team_var_2", 2),
							(assign, ":value_3", 0),
						(else_try),
							(eq, ":team_var_2", 1),
							(assign, ":value_3", 3),
						(else_try),
							(eq, ":team_var_2", 3),
							(assign, ":value_3", 1),
						(try_end),
						(neq, ":team_var_13", ":value_3"),
						(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
						(le, ":distance_between_positions_1_2", ":value_2"),
						(assign, ":value_2", ":distance_between_positions_1_2"),
						(assign, ":value", ":var_13"),
					(try_end),
					(ge, ":value", 0),
					(agent_get_horse, ":horse_var_2", ":value"),
					(eq, ":horse_var_2", -1),
					(store_random_in_range, ":random_in_range_15_26", 15, 26),
					(agent_set_slot, ":var_2", 50, ":random_in_range_15_26"),
					(agent_set_animation, ":var_2", "anim_shield_bash"),
					(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
					(troop_get_type, ":type_wielded_item_var_2_1", ":troop_id_var_2"),
					(try_begin),
						(eq, ":type_wielded_item_var_2_1", 0),
						(agent_play_sound, ":var_2", "snd_man_yell"),
					(else_try),
						(eq, ":type_wielded_item_var_2_1", 1),
						(agent_play_sound, ":var_2", "snd_woman_yell"),
					(try_end),
					(agent_play_sound, ":value", "snd_wooden_hit_low_armor_high_damage"),
					(agent_get_defend_action, ":attack_action_var_2", ":value"),
					(try_begin),
						(eq, ":attack_action_var_2", 2),
						(neg|position_is_behind_position, 1, 2),
						(agent_get_wielded_item, ":wielded_item_var_2_1", ":value", 1),
						(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
						(eq, ":type_wielded_item_var_2_1", 7),
						(agent_set_animation, ":value", "anim_shield_bash"),
					(else_try),
						(agent_set_animation, ":value", "anim_shield_strike"),
					(try_end),
				(try_end),
				(agent_get_slot, ":var_2_50", ":var_2", 50),
				(val_sub, ":var_2_50", 1),
				(val_max, ":var_2_50", 0),
				(agent_set_slot, ":var_2", 50, ":var_2_50"),
			(try_end)
		])
	] + crouching_triggers ),

	("multiplayer_duel", mtf_battle_mode, -1,
	"You lead your men to battle.",
	[(0, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(1, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(2, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(3, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(4, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(5, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(6, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(7, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(8, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(9, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(10, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(11, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(12, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(13, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(14, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(15, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(16, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(17, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(18, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(19, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(20, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(21, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(22, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(23, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(24, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(25, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(26, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(27, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(28, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(29, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(30, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(31, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(32, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(33, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(34, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(35, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(36, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(37, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(38, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(39, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(40, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(41, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(42, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(43, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(44, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(45, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(46, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(47, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(48, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(49, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(50, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(51, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(52, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(53, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(54, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(55, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(56, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(57, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(58, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(59, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(60, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(61, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(62, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(63, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, [])],
	[
		

		
		
		
		(1.0, 5.0, 0.0,
		[
			(multiplayer_is_server),
			(eq, "$g_multiplayer_poll_running", 1),
			(eq, "$g_multiplayer_poll_ended", 0),
			(store_mission_timer_a, ":mission_timer_a"),
			(store_add, ":value", "$g_multiplayer_poll_no_count", "$g_multiplayer_poll_yes_count"),
			(this_or_next|eq, ":value", "$g_multiplayer_poll_num_sent"),
			(gt, ":mission_timer_a", "$g_multiplayer_poll_end_time"),
			(call_script, "script_cf_multiplayer_evaluate_poll")
		],

		[
			(assign, "$g_multiplayer_poll_running", 0),
			(try_begin),
				(this_or_next|eq, "$g_multiplayer_poll_to_show", 0),
				(eq, "$g_multiplayer_poll_to_show", 3),
				(call_script, "script_game_multiplayer_get_game_type_mission_template", "$g_multiplayer_game_type"),
				(start_multiplayer_mission, reg0, "$g_multiplayer_poll_value_to_show", 1),
				(call_script, "script_game_set_multiplayer_mission_end"),
			(try_end)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_multiplayer_server_on_agent_spawn_common", ":trigger_param_1")
		]),

		(-15.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_multiplayer_server_player_joined_common", ":trigger_param_1")
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(assign, "$g_multiplayer_game_type", 7),
			(call_script, "script_multiplayer_server_before_mission_start_common"),
			(team_set_relation, 0, 0, 1),
			(team_set_relation, 0, 1, 1),
			(team_set_relation, 1, 1, 1),
			(mission_set_duel_mode, 1),
			(call_script, "script_multiplayer_init_mission_variables"),
			(call_script, "script_multiplayer_remove_destroy_mod_targets"),
			(call_script, "script_multiplayer_remove_headquarters_flags")
		]),

		(-20.0, 0.0, 0.0,
		[],

		[
			(set_spawn_effector_scene_prop_kind, 0, -1),
			(set_spawn_effector_scene_prop_kind, 1, -1),
			(call_script, "script_initialize_all_scene_prop_slots"),
			(call_script, "script_multiplayer_move_moveable_objects_initial_positions"),
			(assign, "$g_multiplayer_ready_for_spawning_agent", 1)
		]),

		(-16.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_multiplayer_event_mission_end"),
			(assign, "$g_multiplayer_stats_chart_opened_manually", 0),
			(start_presentation, "prsnt_multiplayer_stats_chart_deathmatch")
		]),

		(-26.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(store_trigger_param_2, ":trigger_param_2"),
			(call_script, "script_multiplayer_server_on_agent_killed_or_wounded_common", ":trigger_param_1", ":trigger_param_2"),
			(try_begin),
				(get_player_agent_no, ":player_agent_no"),
				(agent_is_active, ":player_agent_no"),
				(agent_slot_ge, ":player_agent_no", 21, 0),
				(try_begin),
					(eq, ":trigger_param_1", ":player_agent_no"),
					(display_message, "str_you_have_lost_a_duel"),
				(else_try),
					(agent_slot_eq, ":player_agent_no", slot_agent_in_duel_with, ":trigger_param_1"),
					(display_message, "str_you_have_won_a_duel"),
				(try_end),
			(try_end),
			(try_begin),
				(agent_slot_ge, ":trigger_param_1", 21, 0),
				(agent_get_slot, ":trigger_param_1_in_duel_with", ":trigger_param_1", slot_agent_in_duel_with),
				(agent_set_slot, ":trigger_param_1", slot_agent_in_duel_with, -1),
				(try_begin),
					(agent_is_active, ":trigger_param_1_in_duel_with"),
					(agent_set_slot, ":trigger_param_1_in_duel_with", slot_agent_in_duel_with, -1),
					(agent_clear_relations_with_agents, ":trigger_param_1_in_duel_with"),
					(try_begin),
						(agent_get_player_id, ":player_id_trigger_param_1_in_duel_with", ":trigger_param_1_in_duel_with"),
						(neg|player_is_active, ":player_id_trigger_param_1_in_duel_with"),
						(agent_force_rethink, ":trigger_param_1_in_duel_with"),
					(try_end),
				(try_end),
			(try_end)
		]),

		(1.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(get_max_players, ":max_players"),
			(try_for_range, ":localvariable", 0, ":max_players"),
				(player_is_active, ":localvariable"),
				(neg|player_is_busy_with_menus, ":localvariable"),
				(player_get_team_no, ":team_no_localvariable", ":localvariable"),
				(lt, ":team_no_localvariable", 2),
				(player_get_troop_id, ":troop_id_localvariable", ":localvariable"),
				(ge, ":troop_id_localvariable", 0),
				(player_get_agent_id, ":agent_id_localvariable", ":localvariable"),
				(assign, ":value", 0),
				(try_begin),
					(player_get_slot, ":localvariable_first_spawn", ":localvariable", slot_player_first_spawn),
					(eq, ":localvariable_first_spawn", 1),
					(assign, ":value", 1),
					(player_set_slot, ":localvariable", slot_player_first_spawn, 0),
				(else_try),
					(try_begin),
						(lt, ":agent_id_localvariable", 0),
						(assign, ":value", 1),
					(else_try),
						(neg|agent_is_alive, ":agent_id_localvariable"),
						(agent_get_time_elapsed_since_removed, ":time_elapsed_since_removed_agent_id_localvariable", ":agent_id_localvariable"),
						(gt, ":time_elapsed_since_removed_agent_id_localvariable", "$g_multiplayer_respawn_period"),
						(assign, ":value", 1),
					(try_end),
				(try_end),
				(eq, ":value", 1),
				(call_script, "script_multiplayer_buy_agent_equipment", ":localvariable"),
				(troop_get_inventory_slot, ":inventory_slot_troop_id_localvariable_8", ":troop_id_localvariable", 8),
				(try_begin),
					(ge, ":inventory_slot_troop_id_localvariable_8", 0),
					(assign, ":value_2", 1),
				(else_try),
					(assign, ":value_2", 0),
				(try_end),
				(call_script, "script_multiplayer_find_spawn_point", ":team_no_localvariable", 0, ":value_2"),
				(player_spawn_new_agent, ":localvariable", reg0),
			(try_end)
		]),

		(1.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(store_mission_timer_a, ":mission_timer_a"),
			(ge, ":mission_timer_a", 2),
			(assign, ":var_2", 0),
			(assign, ":var_3", 0),
			(try_for_agents, ":var_4"),
				(agent_is_non_player, ":var_4"),
				(agent_is_human, ":var_4"),
				(assign, ":value", 0),
				(try_begin),
					(agent_is_alive, ":var_4"),
					(assign, ":value", 1),
				(else_try),
					(agent_get_time_elapsed_since_removed, ":time_elapsed_since_removed_var_4", ":var_4"),
					(le, ":time_elapsed_since_removed_var_4", "$g_multiplayer_respawn_period"),
					(assign, ":value", 1),
				(try_end),
				(eq, ":value", 1),
				(agent_get_team, ":team_var_4", ":var_4"),
				(try_begin),
					(eq, ":team_var_4", 0),
					(val_add, ":var_2", 1),
				(else_try),
					(eq, ":team_var_4", 1),
					(val_add, ":var_3", 1),
				(try_end),
			(try_end),
			(store_sub, "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_team_1", ":var_2"),
			(store_sub, "$g_multiplayer_num_bots_required_team_2", "$g_multiplayer_num_bots_team_2", ":var_3"),
			(val_max, "$g_multiplayer_num_bots_required_team_1", 0),
			(val_max, "$g_multiplayer_num_bots_required_team_2", 0)
		]),

		(0.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(eq, "$g_multiplayer_ready_for_spawning_agent", 1),
			(store_add, ":value", "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_required_team_2"),
			(try_begin),
				(gt, ":value", 0),
				(store_random_in_range, ":random_in_range_0_value", 0, ":value"),
				(val_sub, ":random_in_range_0_value", "$g_multiplayer_num_bots_required_team_1"),
				(try_begin),
					(lt, ":random_in_range_0_value", 0),
					(assign, ":value_2", 0),
					(val_sub, "$g_multiplayer_num_bots_required_team_1", 1),
				(else_try),
					(assign, ":value_2", 1),
					(val_sub, "$g_multiplayer_num_bots_required_team_2", 1),
				(try_end),
				(team_get_faction, ":faction_value_2", ":value_2"),
				(assign, ":var_5", 0),
				(try_for_range, ":troop", "trp_swadian_crossbowman_multiplayer_ai", "trp_swadian_crossbowman_multiplayer"),
					(store_faction_of_troop, ":faction_of_troop_troop", ":troop"),
					(eq, ":faction_of_troop_troop", ":faction_value_2"),
					(val_add, ":var_5", 1),
				(try_end),
				(store_random_in_range, ":random_in_range_0_var_5", 0, ":var_5"),
				(assign, ":value_3", "trp_swadian_crossbowman_multiplayer"),
				(try_for_range, ":troop", "trp_swadian_crossbowman_multiplayer_ai", ":value_3"),
					(store_faction_of_troop, ":faction_of_troop_troop", ":troop"),
					(eq, ":faction_of_troop_troop", ":faction_value_2"),
					(val_sub, ":random_in_range_0_var_5", 1),
					(lt, ":random_in_range_0_var_5", 0),
					(assign, ":value_3", 0),
					(assign, ":var_10", ":troop"),
				(try_end),
				(troop_get_inventory_slot, ":inventory_slot_var_10_8", ":var_10", 8),
				(try_begin),
					(ge, ":inventory_slot_var_10_8", 0),
					(assign, ":value_4", 1),
				(else_try),
					(assign, ":value_4", 0),
				(try_end),
				(call_script, "script_multiplayer_find_spawn_point", ":value_2", 0, ":value_4"),
				(store_current_scene, ":current_scene"),
				(modify_visitors_at_site, ":current_scene"),
				(add_visitors_to_current_scene, reg0, ":var_10", 1, ":value_2", -1),
				(assign, "$g_multiplayer_ready_for_spawning_agent", 0),
			(try_end)
		]),

		(1.0, 0.0, 0.0,
		[],

		[
			(multiplayer_is_server),
			(assign, ":value", 0),
			(try_begin),
				(store_mission_timer_a, ":mission_timer_a"),
				(store_mul, ":value_2", "$g_multiplayer_game_max_minutes", 60),
				(gt, ":mission_timer_a", ":value_2"),
				(assign, ":value", 1),
			(try_end),
			(try_begin),
				(eq, ":value", 1),
				(call_script, "script_game_multiplayer_get_game_type_mission_template", "$g_multiplayer_game_type"),
				(start_multiplayer_mission, reg0, "$g_multiplayer_selected_map", 0),
				(call_script, "script_game_set_multiplayer_mission_end"),
			(try_end)
		]),

		(-21.0, 0.0, 0.0,
		[],

		[
			(try_begin),
				(eq, "$g_multiplayer_mission_end_screen", 0),
				(assign, "$g_multiplayer_stats_chart_opened_manually", 1),
				(start_presentation, "prsnt_multiplayer_stats_chart_deathmatch"),
			(try_end)
		]),

		(0.0, 0.0, ti_once,
		[],

		[
			(start_presentation, "prsnt_multiplayer_welcome_message")
		]),

		(-23.0, 0.0, 0.0,
		[],

		[
			(neg|is_presentation_active, "prsnt_multiplayer_escape_menu"),
			(neg|is_presentation_active, "prsnt_multiplayer_stats_chart_deathmatch"),
			(eq, "$g_waiting_for_confirmation_to_terminate", 0),
			(start_presentation, "prsnt_multiplayer_escape_menu")
		])
	] + crouching_triggers),

	("arena_tournament_fight", mtf_arena_fight|mtf_team_fight, -1,
	"You enter a melee fight in the arena.",
	[(0, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(1, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(2, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(3, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(4, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(5, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(6, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(7, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
	(8, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(9, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(10, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(11, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(12, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(13, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(14, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(15, mtef_visitor_source|mtef_team_1, 0, aif_start_alarmed, 1, []),
	(16, mtef_visitor_source|mtef_team_2, 0, aif_start_alarmed, 1, []),
	(17, mtef_visitor_source|mtef_team_2, 0, aif_start_alarmed, 1, []),
	(18, mtef_visitor_source|mtef_team_2, 0, aif_start_alarmed, 1, []),
	(19, mtef_visitor_source|mtef_team_2, 0, aif_start_alarmed, 1, []),
	(20, mtef_visitor_source|mtef_team_2, 0, aif_start_alarmed, 1, []),
	(21, mtef_visitor_source|mtef_team_2, 0, aif_start_alarmed, 1, []),
	(22, mtef_visitor_source|mtef_team_2, 0, aif_start_alarmed, 1, []),
	(23, mtef_visitor_source|mtef_team_2, 0, aif_start_alarmed, 1, []),
	(24, mtef_visitor_source|mtef_team_3, 0, aif_start_alarmed, 1, []),
	(25, mtef_visitor_source|mtef_team_3, 0, aif_start_alarmed, 1, []),
	(26, mtef_visitor_source|mtef_team_3, 0, aif_start_alarmed, 1, []),
	(27, mtef_visitor_source|mtef_team_3, 0, aif_start_alarmed, 1, []),
	(28, mtef_visitor_source|mtef_team_3, 0, aif_start_alarmed, 1, []),
	(29, mtef_visitor_source|mtef_team_3, 0, aif_start_alarmed, 1, []),
	(30, mtef_visitor_source|mtef_team_3, 0, aif_start_alarmed, 1, []),
	(31, mtef_visitor_source|mtef_team_3, 0, aif_start_alarmed, 1, [])],
	[
		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(call_script, "script_troop_agent_set_banner", "tableau_game_troop_label_banner", ":trigger_param_1", ":troop_id_trigger_param_1")
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_change_banners_and_chest"),
			(assign, "$g_arena_training_num_agents_spawned", 0)
		]),

		(-22.0, 0.0, 0.0,
		[
			(display_message, "str_cant_use_inventory_arena")
		],

		[]),

		(-21.0, 0.0, 0.0,
		[],

		[
			(try_begin),
				(eq, "$g_mt_mode", 2),
				(set_trigger_result, 1),
			(else_try),
				(question_box, "str_give_up_fight"),
			(try_end)
		]),

		(-8.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(eq, ":trigger_param_1", 0),
			(try_begin),
				(eq, "$g_mt_mode", 3),
				(call_script, "script_end_tournament_fight_new", 0),
			(else_try),
				(eq, "$g_mt_mode", 1),
				(get_player_agent_no, ":player_agent_no"),
				(agent_get_kill_count, "$g_arena_training_kills", ":player_agent_no", 1),
			(try_end),
			(finish_mission, 0)
		]),

		(1.0, 0.0, ti_once,
		[],

		[
			(eq, "$g_mt_mode", 2),
			(call_script, "script_music_set_situation_with_culture", 65536),
			(store_current_scene, reg1),
			(scene_set_slot, reg1, slot_scene_visited, 1),
			(mission_enable_talk),
			(get_player_agent_no, ":player_agent_no"),
			(assign, ":value", 0),
			(try_for_agents, ":var_3"),
				(neq, ":var_3", ":player_agent_no"),
				(agent_get_troop_id, ":troop_id_var_3", ":var_3"),
				(is_between, ":troop_id_var_3", "trp_novice_fighter", "trp_tournament_master"),
				(eq, ":value", 0),
				(agent_set_team, ":var_3", 1),
				(assign, ":value", 1),
			(try_end)
		]),

		(0.0, 0.0, ti_once,
		[],

		[
			(eq, "$g_mt_mode", 3),
			(play_sound, "snd_arena_ambiance", 2),
			(call_script, "script_music_set_situation_with_culture", 131072)
		]),

		(1.0, 4.0, ti_once,
		[
			(eq, "$g_mt_mode", 3),
			(num_active_teams_le, 1)
		],

		[
			(try_begin),
				(get_player_agent_no, ":player_agent_no"),
				(agent_get_team, ":team_player_agent_no", ":player_agent_no"),
				(assign, ":value", 0),
				(try_for_agents, ":var_4"),
					(agent_is_alive, ":var_4"),
					(agent_is_human, ":var_4"),
					(agent_get_team, ":team_var_4", ":var_4"),
					(eq, ":team_var_4", ":team_player_agent_no"),
					(assign, ":value", 1),
				(try_end),
				(eq, ":value", 1),
				(call_script, "script_end_tournament_fight_new", 1),
				(call_script, "script_play_victorious_sound"),
				(finish_mission),
			(else_try),
				(call_script, "script_end_tournament_fight_new", 0),
				(finish_mission),
			(try_end)
		]),

		(-24.0, 0.0, 0.0,
		[],

		[
			(eq, "$g_mt_mode", 1),
			(start_presentation, "prsnt_arena_training")
		]),

		(0.0, 0.0, ti_once,
		[],

		[
			(eq, "$g_mt_mode", 1),
			(assign, "$g_arena_training_max_opponents", 40),
			(assign, "$g_arena_training_num_agents_spawned", 0),
			(assign, "$g_arena_training_kills", 0),
			(assign, "$g_arena_training_won", 0),
			(call_script, "script_music_set_situation_with_culture", 131072)
		]),

		(1.0, 4.0, ti_once,
		[
			(eq, "$g_mt_mode", 1),
			(store_mission_timer_a, ":mission_timer_a"),
			(gt, ":mission_timer_a", 3),
			(assign, ":value", 0),
			(try_begin),
				(ge, "$g_arena_training_num_agents_spawned", "$g_arena_training_max_opponents"),
				(num_active_teams_le, 1),
				(assign, ":value", 1),
			(try_end),
			(this_or_next|eq, ":value", 1),
			(main_hero_fallen)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_kill_count, "$g_arena_training_kills", ":player_agent_no", 1),
			(assign, "$g_arena_training_won", 0),
			(try_begin),
				(neg|main_hero_fallen),
				(assign, "$g_arena_training_won", 1),
			(try_end),
			(assign, "$g_mt_mode", 2),
			(set_jump_mission, "mt_arena_melee_fight"),
			(party_get_slot, ":current_town_town_arena", "$current_town", slot_town_arena),
			(modify_visitors_at_site, ":current_town_town_arena"),
			(reset_visitors),
			(set_visitor, 35, "trp_veteran_fighter"),
			(set_visitor, 36, "trp_euro_horse_4"),
			(party_get_slot, ":current_town_600", "$current_town", 600),
			(set_visitor, 52, ":current_town_600"),
			(set_jump_entry, 50),
			(jump_to_scene, ":current_town_town_arena")
		]),

		(0.2, 0.0, 0.0,
		[
			(eq, "$g_mt_mode", 1),
			(assign, ":var_1", 0),
			(try_for_agents, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_alive, ":var_2"),
				(agent_get_team, ":team_var_2", ":var_2"),
				(is_between, ":team_var_2", 0, 7),
				(val_add, ":var_1", 1),
			(try_end),
			(lt, ":var_1", 7),
			(neg|main_hero_fallen),
			(store_mission_timer_a, ":mission_timer_a"),
			(this_or_next|ge, ":mission_timer_a", "$g_arena_training_next_spawn_time"),
			(this_or_next|lt, "$g_arena_training_num_agents_spawned", 6),
			(num_active_teams_le, 1),
			(lt, "$g_arena_training_num_agents_spawned", "$g_arena_training_max_opponents")
		],

		[
			(assign, ":value", "$g_arena_training_num_agents_spawned"),
			(store_div, ":value", "$g_arena_training_num_agents_spawned", 6),
			(assign, ":var_2", "$g_arena_training_num_agents_spawned"),
			(val_mod, ":var_2", 6),
			(val_add, ":value", ":var_2"),
			(val_min, ":value", 9),
			(val_add, ":value", "trp_arena_training_fighter_1"),
			(assign, ":value_2", 10000),
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_position, 5, ":player_agent_no"),
			(try_for_range, ":unused", 0, ":value_2"),
				(store_random_in_range, ":random_in_range_32_40", 32, 40),
				(neq, ":random_in_range_32_40", "$g_player_entry_point"),
				(entry_point_get_position, 1, ":random_in_range_32_40"),
				(get_distance_between_positions, ":distance_between_positions_5_1", 5, 1),
				(gt, ":distance_between_positions_5_1", 1200),
				(assign, ":value_2", 0),
			(try_end),
			(add_visitors_to_current_scene, ":random_in_range_32_40", ":value", 1),
			(store_add, ":value_3", "$g_arena_training_num_agents_spawned", 1),
			(store_mission_timer_a, ":mission_timer_a"),
			(store_add, "$g_arena_training_next_spawn_time", ":mission_timer_a", 14),
			(store_div, ":value_4", ":value_3", 3),
			(val_sub, "$g_arena_training_next_spawn_time", ":value_4")
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$g_mt_mode", 1)
		],

		[
			(assign, ":var_1", 6),
			(val_max, ":var_1", 1),
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_3"),
				(agent_is_human, ":var_3"),
				(agent_is_alive, ":var_3"),
				(agent_slot_eq, ":var_3", slot_agent_arena_team_set, 0),
				(agent_get_team, ":team_var_3", ":var_3"),
				(is_between, ":team_var_3", 0, 7),
				(try_begin),
					(eq, ":var_3", ":player_agent_no"),
					(agent_set_team, ":var_3", 6),
				(else_try),
					(store_random_in_range, ":random_in_range_0_var_1", 0, ":var_1"),
					(try_for_range, ":number", 0, 6),
						(troop_set_slot, "trp_temp_array_a", ":number", 0),
					(try_end),
					(try_for_agents, ":var_7"),
						(agent_is_human, ":var_7"),
						(agent_is_alive, ":var_7"),
						(neq, ":var_3", ":player_agent_no"),
						(agent_slot_eq, ":var_7", slot_agent_arena_team_set, 1),
						(agent_get_team, ":team_var_7", ":var_7"),
						(troop_get_slot, ":temp_array_a_team_var_7", "trp_temp_array_a", ":team_var_7"),
						(val_add, ":temp_array_a_team_var_7", 1),
						(troop_set_slot, "trp_temp_array_a", ":team_var_7", ":temp_array_a_team_var_7"),
					(try_end),
					(assign, ":value", 0),
					(troop_get_slot, ":temp_array_a_relations_begin", "trp_temp_array_a", slot_troop_relations_begin),
					(try_for_range, ":number", 1, 6),
						(troop_slot_ge, "trp_temp_array_a", ":number", ":temp_array_a_relations_begin"),
						(troop_get_slot, ":temp_array_a_relations_begin", "trp_temp_array_a", ":number"),
						(assign, ":value", ":number"),
					(try_end),
					(store_random_in_range, ":random_in_range_5_100", 5, 100),
					(try_begin),
						(lt, ":random_in_range_5_100", "$g_arena_training_num_agents_spawned"),
						(assign, ":random_in_range_0_var_1", ":value"),
					(try_end),
					(agent_set_team, ":var_3", ":random_in_range_0_var_1"),
				(try_end),
				(agent_set_slot, ":var_3", slot_agent_arena_team_set, 1),
				(try_begin),
					(neq, ":var_3", ":player_agent_no"),
					(val_add, "$g_arena_training_num_agents_spawned", 1),
				(try_end),
			(try_end)
		]),

		(-28.0, 0.3, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(store_trigger_param_2, ":trigger_param_2"),
			(store_trigger_param_3, ":trigger_param_3"),
			(assign, ":var_4", reg0),
			(agent_is_human, ":trigger_param_1"),
			(agent_is_alive, ":trigger_param_1"), #this addition
			(agent_is_active, ":trigger_param_1"), #This addition, i disabled tihs whole mission template to fix the bug too.
			(get_player_agent_no, ":player_agent_no"),
			(try_begin),
				(eq, "$tom_weapon_break", 1),
				(eq, ":trigger_param_1", ":player_agent_no"),
				(store_random_in_range, ":random_in_range_0_1000", 0, 1000),
				(eq, ":random_in_range_0_1000", 1),
				(store_random_in_range, ":random_in_range_4_8", 4, 8),
				(troop_get_inventory_slot, ":inventory_slot_player_random_in_range_4_8", "trp_player", ":random_in_range_4_8"),
				(gt, ":inventory_slot_player_random_in_range_4_8", 0),
				(str_store_item_name, 20, ":inventory_slot_player_random_in_range_4_8"),
				(troop_get_inventory_slot_modifier, ":inventory_slot_modifier_player_random_in_range_4_8", "trp_player", ":random_in_range_4_8"),
				(try_begin),
					(eq, ":inventory_slot_modifier_player_random_in_range_4_8", 6),
					(display_message, "@Your {s20} is too crappy to fall apart!", 0x00ff0000),
				(else_try),
					(troop_add_item, "trp_broken_items", ":inventory_slot_player_random_in_range_4_8", ":inventory_slot_modifier_player_random_in_range_4_8"),
					(troop_set_inventory_slot_modifier, "trp_player", ":random_in_range_4_8", 6),
					(display_message, "@Your {s20} cracks!", 0x00ff0000),
				(try_end),
			(try_end),
			(try_begin),
				(eq, "$tom_weapon_break", 1),
				(eq, ":trigger_param_2", ":player_agent_no"),
				(is_between, ":var_4", 1, "itm_cross_end"), #Previously itm_items_end
				(neg|is_between, ":var_4", "itm_light_lance", "itm_wooden_shield"),
				(item_get_type, ":type_var_4", ":var_4"),
				(ge, ":trigger_param_3", 10),
				(neq, ":type_var_4", 10),
				(neq, ":type_var_4", 8),
				(neq, ":type_var_4", 9),
				(neq, ":type_var_4", 5),
				(neq, ":type_var_4", 6),
				(store_random_in_range, ":random_in_range_0_1000", 0, 600),
				(eq, ":random_in_range_0_1000", 1),
				(assign, ":value", -1),
				(try_for_range, ":random_in_range_4_8", 0, 4),
					(troop_get_inventory_slot, ":inventory_slot_player_random_in_range_4_8_2", "trp_player", ":random_in_range_4_8"),
					(eq, ":inventory_slot_player_random_in_range_4_8_2", ":var_4"),
					(assign, ":value", ":random_in_range_4_8"),
				(try_end),
				(gt, ":value", 0),
				(str_store_item_name, 20, ":var_4"),
				(troop_get_inventory_slot_modifier, ":inventory_slot_modifier_player_random_in_range_4_8", "trp_player", ":value"),
				(try_begin),
					(eq, ":inventory_slot_modifier_player_random_in_range_4_8", 6),
					(display_message, "@Your {s20} falls apart!", 0x00ff0000),
					(agent_unequip_item, ":player_agent_no", ":var_4"),
					(troop_remove_item, "trp_player", ":var_4"),
					(troop_remove_item, "trp_broken_items", ":var_4"),
				(else_try),
					(troop_add_item, "trp_broken_items", ":var_4", ":inventory_slot_modifier_player_random_in_range_4_8"),
					(troop_set_inventory_slot_modifier, "trp_player", ":value", 6),
					(display_message, "@Your {s20} cracks!", 0x00ff0000),
				(try_end),
			(try_end),
			(agent_get_horse, ":horse_trigger_param_2", ":trigger_param_2"),
			(try_begin),
				(eq, "$tom_lance_breaking", 1),
				(gt, ":horse_trigger_param_2", 0),
				(this_or_next|is_between, ":var_4", "itm_light_lance", "itm_spear_a"), #Updated item slots
				(is_between, ":var_4", "itm_lance_banner_jer", "itm_pike_banner_teu"), #Updated item slots
				(ge, ":trigger_param_3", 50),
				(store_random_in_range, ":random_in_range_0_100", 0, 100),
				(gt, ":random_in_range_0_100", 20),
				(try_begin),
					(eq, ":trigger_param_2", ":player_agent_no"),
					(display_message, "@You broke your lance!", 0x00ff0000),
				(try_end),
				########Add effects on weapon break *Lances*
        (agent_get_position, pos1, ":trigger_param_2"),
		(agent_play_sound, ":trigger_param_1", "snd_shield_broken"),
		(particle_system_burst, "psys_lanse", pos1, 10),
        (particle_system_burst, "psys_lanse_straw", pos1, 30),
                ####Extend to Lanse_Blood
		#(particle_system_burst, "psys_lanse_blood", pos1, 10),
        #(particle_system_burst, "psys_lanse_blood", pos1, 30),
		        ########End Effects
				(agent_unequip_item, ":trigger_param_2", ":var_4"),
			(else_try),
				(this_or_next|is_between, ":var_4", "itm_bamboo_spear", "itm_wooden_shield"), #Updated item slots
				(is_between, ":var_4", "itm_pike_banner_teu", "itm_items_end"), #Updated item slots
				(le, ":horse_trigger_param_2", 0),
				(ge, ":trigger_param_3", 8),
				(store_random_in_range, ":random_in_range_0_100", 0, 100),
				(ge, ":random_in_range_0_100", 90),
				(try_begin),
					(eq, ":trigger_param_2", ":player_agent_no"),
					(display_message, "@You broke your spear!", 0x00ff0000),
				(try_end),
				########Add effects on weapon break *Spears*
        (agent_get_position, pos1, ":trigger_param_2"),
		(agent_play_sound, ":trigger_param_1", "snd_shield_broken"),
		(store_random_in_range, ":psys_to_use", "psys_lanse", "psys_lanse_blood"),
		(particle_system_burst, ":psys_to_use", pos1, 7), #Default = 10 (Higher = Bigger Particles)
        (particle_system_burst, ":psys_to_use", pos1, 21), #Default = 30 (Higher = Bigger Particles)
                ####Extend to Lanse_Blood
		#(particle_system_burst, "psys_lanse_blood", pos1, 10),
        #(particle_system_burst, "psys_lanse_blood", pos1, 30),
		        ########End Effects
				(agent_unequip_item, ":trigger_param_2", ":var_4"),
			(try_end),
			###Envfix weapon breaking patch start here
		]),

		(0.0, 0.0, 5.0,
		[],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_non_player, ":var_2"), #Agent must not be a player V1.0998D2
				(neq, ":player_agent_no", ":var_2"),
				(agent_slot_eq, ":var_2", 100, 0),
				(agent_is_alive, ":var_2"),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(agent_get_ammo, ":ammo_var_2", ":var_2"),
				(le, ":ammo_var_2", 0),
				(try_begin),
					(gt, ":horse_var_2", 0),
					(neg|troop_is_guarantee_ranged, ":troop_id_var_2"),
					(agent_get_wielded_item, ":wielded_item_var_2_0", ":var_2", 0),
					(neg|is_between, ":wielded_item_var_2_0", "itm_light_lance", "itm_spear_a"),
					(try_for_range, ":item", "itm_light_lance", "itm_spear_a"),
						(agent_set_wielded_item, ":var_2", ":item"),
					(try_end),
				(else_try),
					(eq, "$tom_use_banners", 1),
					(try_for_range, ":item", 1198, 1202),
						(agent_set_wielded_item, ":var_2", ":item"),
					(try_end),
					(agent_get_wielded_item, ":item", ":var_2", 0),
					(is_between, ":item", 1198, 1202),
				(else_try),
					(neg|troop_is_guarantee_ranged, ":troop_id_var_2"),
					(le, ":horse_var_2", 0),
					(agent_get_wielded_item, ":wielded_item_var_2_0", ":var_2", 0),
					(is_between, ":wielded_item_var_2_0", "itm_light_lance", "itm_spear_a"),
					(try_for_range, reg0, 0, 4),
						(agent_get_item_slot, ":item", ":var_2", reg0),
						(is_between, ":item", 1, "itm_cross_end"), #Previously itm_items_end
						(neg|is_between, ":item", "itm_light_lance", "itm_bamboo_spear"),
						(item_get_type, ":type_item", ":item"),
						(this_or_next|eq, ":type_item", 3),
						(this_or_next|eq, ":type_item", 4),
						(eq, ":type_item", 2),
						(agent_set_wielded_item, ":var_2", ":item"),
					(try_end),
				(else_try),
					(neg|troop_is_guarantee_ranged, ":troop_id_var_2"),
					(le, ":horse_var_2", 0),
					(agent_get_wielded_item, ":wielded_item_var_2_0", ":var_2", 0),
					(neg|is_between, ":wielded_item_var_2_0", "itm_bamboo_spear", "itm_wooden_shield"),
					(try_for_range, ":item", "itm_bamboo_spear", "itm_wooden_shield"),
						(agent_set_wielded_item, ":var_2", ":item"),
					(try_end),
				(else_try),
					(troop_is_guarantee_ranged, ":troop_id_var_2"),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_division, ":division_var_2", ":var_2"),
					(team_get_hold_fire_order, ":hold_fire_order_team_var_2_division_var_2", ":team_var_2", ":division_var_2"),
					(neq, ":hold_fire_order_team_var_2_division_var_2", 1),
					(is_between, ":wielded_item_var_2_0", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_0", ":wielded_item_var_2_0"),
					(this_or_next|le, ":wielded_item_var_2_0", -1),
					(this_or_next|neq, ":type_wielded_item_var_2_0", 10),
					(this_or_next|neq, ":type_wielded_item_var_2_0", 9),
					(neq, ":type_wielded_item_var_2_0", 8),
					(call_script, "script_get_closest_enemy_distance_new", ":var_2", ":team_var_2", 300),
					(assign, ":var_13", reg1),
					(gt, ":var_13", 300),
					(assign, ":value", 4),
					(try_for_range, reg0, 0, ":value"),
						(agent_get_item_slot, ":item_slot_var_2_reg0", ":var_2", reg0),
						(is_between, ":item_slot_var_2_reg0", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_0", ":item_slot_var_2_reg0"),
						(this_or_next|eq, ":type_wielded_item_var_2_0", 10),
						(this_or_next|eq, ":type_wielded_item_var_2_0", 8),
						(eq, ":type_wielded_item_var_2_0", 9),
						(agent_set_wielded_item, ":var_2", ":item_slot_var_2_reg0"),
						(assign, ":value", -1),
					(try_end),
				(try_end),
			(try_end)
		])
	] + crouching_triggers ),

	("arena_tournament_fight_foot", mtf_arena_fight|mtf_team_fight, -1,
	"You enter a melee fight in the arena.",
	[(0, mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
	(1, mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
	(2, mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
	(3, mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
	(4, mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
	(5, mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
	(6, mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
	(7, mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
	(8, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(9, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(10, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(11, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(12, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(13, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(14, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(15, mtef_visitor_source|mtef_team_1, af_override_horse, aif_start_alarmed, 1, []),
	(16, mtef_visitor_source|mtef_team_2, af_override_horse, aif_start_alarmed, 1, []),
	(17, mtef_visitor_source|mtef_team_2, af_override_horse, aif_start_alarmed, 1, []),
	(18, mtef_visitor_source|mtef_team_2, af_override_horse, aif_start_alarmed, 1, []),
	(19, mtef_visitor_source|mtef_team_2, af_override_horse, aif_start_alarmed, 1, []),
	(20, mtef_visitor_source|mtef_team_2, af_override_horse, aif_start_alarmed, 1, []),
	(21, mtef_visitor_source|mtef_team_2, af_override_horse, aif_start_alarmed, 1, []),
	(22, mtef_visitor_source|mtef_team_2, af_override_horse, aif_start_alarmed, 1, []),
	(23, mtef_visitor_source|mtef_team_2, af_override_horse, aif_start_alarmed, 1, []),
	(24, mtef_visitor_source|mtef_team_3, af_override_horse, aif_start_alarmed, 1, []),
	(25, mtef_visitor_source|mtef_team_3, af_override_horse, aif_start_alarmed, 1, []),
	(26, mtef_visitor_source|mtef_team_3, af_override_horse, aif_start_alarmed, 1, []),
	(27, mtef_visitor_source|mtef_team_3, af_override_horse, aif_start_alarmed, 1, []),
	(28, mtef_visitor_source|mtef_team_3, af_override_horse, aif_start_alarmed, 1, []),
	(29, mtef_visitor_source|mtef_team_3, af_override_horse, aif_start_alarmed, 1, []),
	(30, mtef_visitor_source|mtef_team_3, af_override_horse, aif_start_alarmed, 1, []),
	(31, mtef_visitor_source|mtef_team_3, af_override_horse, aif_start_alarmed, 1, [])],
	[
		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(call_script, "script_troop_agent_set_banner", "tableau_game_troop_label_banner", ":trigger_param_1", ":troop_id_trigger_param_1")
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_change_banners_and_chest"),
			(assign, "$g_arena_training_num_agents_spawned", 0)
		]),

		(-22.0, 0.0, 0.0,
		[
			(display_message, "str_cant_use_inventory_arena")
		],

		[]),

		(-21.0, 0.0, 0.0,
		[],

		[
			(try_begin),
				(eq, "$g_mt_mode", 2),
				(set_trigger_result, 1),
			(else_try),
				(question_box, "str_give_up_fight"),
			(try_end)
		]),

		(-8.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(eq, ":trigger_param_1", 0),
			(try_begin),
				(eq, "$g_mt_mode", 3),
				(call_script, "script_end_tournament_fight_new", 0),
			(else_try),
				(eq, "$g_mt_mode", 1),
				(get_player_agent_no, ":player_agent_no"),
				(agent_get_kill_count, "$g_arena_training_kills", ":player_agent_no", 1),
			(try_end),
			(finish_mission, 0)
		]),

		(1.0, 0.0, ti_once,
		[],

		[
			(eq, "$g_mt_mode", 2),
			(call_script, "script_music_set_situation_with_culture", 65536),
			(store_current_scene, reg1),
			(scene_set_slot, reg1, slot_scene_visited, 1),
			(mission_enable_talk),
			(get_player_agent_no, ":player_agent_no"),
			(assign, ":value", 0),
			(try_for_agents, ":var_3"),
				(neq, ":var_3", ":player_agent_no"),
				(agent_get_troop_id, ":troop_id_var_3", ":var_3"),
				(is_between, ":troop_id_var_3", "trp_novice_fighter", "trp_tournament_master"),
				(eq, ":value", 0),
				(agent_set_team, ":var_3", 1),
				(assign, ":value", 1),
			(try_end)
		]),

		(0.0, 0.0, ti_once,
		[],

		[
			(eq, "$g_mt_mode", 3),
			(play_sound, "snd_arena_ambiance", 2),
			(call_script, "script_music_set_situation_with_culture", 131072)
		]),

		(1.0, 4.0, ti_once,
		[
			(eq, "$g_mt_mode", 3),
			(num_active_teams_le, 1)
		],

		[
			(try_begin),
				(get_player_agent_no, ":player_agent_no"),
				(agent_get_team, ":team_player_agent_no", ":player_agent_no"),
				(assign, ":value", 0),
				(try_for_agents, ":var_4"),
					(agent_is_alive, ":var_4"),
					(agent_is_human, ":var_4"),
					(agent_get_team, ":team_var_4", ":var_4"),
					(eq, ":team_var_4", ":team_player_agent_no"),
					(assign, ":value", 1),
				(try_end),
				(eq, ":value", 1),
				(call_script, "script_end_tournament_fight_new", 1),
				(call_script, "script_play_victorious_sound"),
				(finish_mission),
			(else_try),
				(call_script, "script_end_tournament_fight_new", 0),
				(finish_mission),
			(try_end)
		]),

		(-24.0, 0.0, 0.0,
		[],

		[
			(eq, "$g_mt_mode", 1),
			(start_presentation, "prsnt_arena_training")
		]),

		(0.0, 0.0, ti_once,
		[],

		[
			(eq, "$g_mt_mode", 1),
			(assign, "$g_arena_training_max_opponents", 40),
			(assign, "$g_arena_training_num_agents_spawned", 0),
			(assign, "$g_arena_training_kills", 0),
			(assign, "$g_arena_training_won", 0),
			(call_script, "script_music_set_situation_with_culture", 131072),
		]),

		(1.0, 4.0, ti_once,
		[
			(eq, "$g_mt_mode", 1),
			(store_mission_timer_a, ":mission_timer_a"),
			(gt, ":mission_timer_a", 3),
			(assign, ":value", 0),
			(try_begin),
				(ge, "$g_arena_training_num_agents_spawned", "$g_arena_training_max_opponents"),
				(num_active_teams_le, 1),
				(assign, ":value", 1),
			(try_end),
			(this_or_next|eq, ":value", 1),
			(main_hero_fallen)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_kill_count, "$g_arena_training_kills", ":player_agent_no", 1),
			(assign, "$g_arena_training_won", 0),
			(try_begin),
				(neg|main_hero_fallen),
				(assign, "$g_arena_training_won", 1),
			(try_end),
			(assign, "$g_mt_mode", 2),
			(set_jump_mission, "mt_arena_melee_fight"),
			(party_get_slot, ":current_town_town_arena", "$current_town", slot_town_arena),
			(modify_visitors_at_site, ":current_town_town_arena"),
			(reset_visitors),
			(set_visitor, 35, "trp_veteran_fighter"),
			(set_visitor, 36, "trp_euro_horse_4"),
			(party_get_slot, ":current_town_600", "$current_town", 600),
			(set_visitor, 52, ":current_town_600"),
			(set_jump_entry, 50),
			(jump_to_scene, ":current_town_town_arena")
		]),

		(0.2, 0.0, 0.0,
		[
			(eq, "$g_mt_mode", 1),
			(assign, ":var_1", 0),
			(try_for_agents, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_alive, ":var_2"),
				(agent_get_team, ":team_var_2", ":var_2"),
				(is_between, ":team_var_2", 0, 7),
				(val_add, ":var_1", 1),
			(try_end),
			(lt, ":var_1", 7),
			(neg|main_hero_fallen),
			(store_mission_timer_a, ":mission_timer_a"),
			(this_or_next|ge, ":mission_timer_a", "$g_arena_training_next_spawn_time"),
			(this_or_next|lt, "$g_arena_training_num_agents_spawned", 6),
			(num_active_teams_le, 1),
			(lt, "$g_arena_training_num_agents_spawned", "$g_arena_training_max_opponents")
		],

		[
			(assign, ":value", "$g_arena_training_num_agents_spawned"),
			(store_div, ":value", "$g_arena_training_num_agents_spawned", 6),
			(assign, ":var_2", "$g_arena_training_num_agents_spawned"),
			(val_mod, ":var_2", 6),
			(val_add, ":value", ":var_2"),
			(val_min, ":value", 9),
			(val_add, ":value", "trp_arena_training_fighter_1"),
			(assign, ":value_2", 10000),
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_position, 5, ":player_agent_no"),
			(try_for_range, ":unused", 0, ":value_2"),
				(store_random_in_range, ":random_in_range_32_40", 32, 40),
				(neq, ":random_in_range_32_40", "$g_player_entry_point"),
				(entry_point_get_position, 1, ":random_in_range_32_40"),
				(get_distance_between_positions, ":distance_between_positions_5_1", 5, 1),
				(gt, ":distance_between_positions_5_1", 1200),
				(assign, ":value_2", 0),
			(try_end),
			(add_visitors_to_current_scene, ":random_in_range_32_40", ":value", 1),
			(store_add, ":value_3", "$g_arena_training_num_agents_spawned", 1),
			(store_mission_timer_a, ":mission_timer_a"),
			(store_add, "$g_arena_training_next_spawn_time", ":mission_timer_a", 14),
			(store_div, ":value_4", ":value_3", 3),
			(val_sub, "$g_arena_training_next_spawn_time", ":value_4")
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$g_mt_mode", 1)
		],

		[
			(assign, ":var_1", 6),
			(val_max, ":var_1", 1),
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_3"),
				(agent_is_human, ":var_3"),
				(agent_is_alive, ":var_3"),
				(agent_slot_eq, ":var_3", slot_agent_arena_team_set, 0),
				(agent_get_team, ":team_var_3", ":var_3"),
				(is_between, ":team_var_3", 0, 7),
				(try_begin),
					(eq, ":var_3", ":player_agent_no"),
					(agent_set_team, ":var_3", 6),
				(else_try),
					(store_random_in_range, ":random_in_range_0_var_1", 0, ":var_1"),
					(try_for_range, ":number", 0, 6),
						(troop_set_slot, "trp_temp_array_a", ":number", 0),
					(try_end),
					(try_for_agents, ":var_7"),
						(agent_is_human, ":var_7"),
						(agent_is_alive, ":var_7"),
						(neq, ":var_3", ":player_agent_no"),
						(agent_slot_eq, ":var_7", slot_agent_arena_team_set, 1),
						(agent_get_team, ":team_var_7", ":var_7"),
						(troop_get_slot, ":temp_array_a_team_var_7", "trp_temp_array_a", ":team_var_7"),
						(val_add, ":temp_array_a_team_var_7", 1),
						(troop_set_slot, "trp_temp_array_a", ":team_var_7", ":temp_array_a_team_var_7"),
					(try_end),
					(assign, ":value", 0),
					(troop_get_slot, ":temp_array_a_relations_begin", "trp_temp_array_a", slot_troop_relations_begin),
					(try_for_range, ":number", 1, 6),
						(troop_slot_ge, "trp_temp_array_a", ":number", ":temp_array_a_relations_begin"),
						(troop_get_slot, ":temp_array_a_relations_begin", "trp_temp_array_a", ":number"),
						(assign, ":value", ":number"),
					(try_end),
					(store_random_in_range, ":random_in_range_5_100", 5, 100),
					(try_begin),
						(lt, ":random_in_range_5_100", "$g_arena_training_num_agents_spawned"),
						(assign, ":random_in_range_0_var_1", ":value"),
					(try_end),
					(agent_set_team, ":var_3", ":random_in_range_0_var_1"),
				(try_end),
				(agent_set_slot, ":var_3", slot_agent_arena_team_set, 1),
				(try_begin),
					(neq, ":var_3", ":player_agent_no"),
					(val_add, "$g_arena_training_num_agents_spawned", 1),
				(try_end),
			(try_end)
		]),

		(-28.0, 0.3, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(store_trigger_param_2, ":trigger_param_2"),
			(store_trigger_param_3, ":trigger_param_3"),
			(assign, ":var_4", reg0),
			(agent_is_human, ":trigger_param_1"),
			(agent_is_alive, ":trigger_param_1"), #this addition
			(agent_is_active, ":trigger_param_1"), #This addition, i disabled tihs whole mission template to fix the bug too.
			(get_player_agent_no, ":player_agent_no"),
			(try_begin),
				(eq, "$tom_weapon_break", 1),
				(eq, ":trigger_param_1", ":player_agent_no"),
				(store_random_in_range, ":random_in_range_0_1000", 0, 1000),
				(eq, ":random_in_range_0_1000", 1),
				(store_random_in_range, ":random_in_range_4_8", 4, 8),
				(troop_get_inventory_slot, ":inventory_slot_player_random_in_range_4_8", "trp_player", ":random_in_range_4_8"),
				(gt, ":inventory_slot_player_random_in_range_4_8", 0),
				(str_store_item_name, 20, ":inventory_slot_player_random_in_range_4_8"),
				(troop_get_inventory_slot_modifier, ":inventory_slot_modifier_player_random_in_range_4_8", "trp_player", ":random_in_range_4_8"),
				(try_begin),
					(eq, ":inventory_slot_modifier_player_random_in_range_4_8", 6),
					(display_message, "@Your {s20} is too crappy to fall apart!", 0x00ff0000),
				(else_try),
					(troop_add_item, "trp_broken_items", ":inventory_slot_player_random_in_range_4_8", ":inventory_slot_modifier_player_random_in_range_4_8"),
					(troop_set_inventory_slot_modifier, "trp_player", ":random_in_range_4_8", 6),
					(display_message, "@Your {s20} cracks!", 0x00ff0000),
				(try_end),
			(try_end),
			(try_begin),
				(eq, "$tom_weapon_break", 1),
				(eq, ":trigger_param_2", ":player_agent_no"),
				(is_between, ":var_4", 1, "itm_cross_end"), #Previously itm_items_end
				(neg|is_between, ":var_4", "itm_light_lance", "itm_wooden_shield"),
				(item_get_type, ":type_var_4", ":var_4"),
				(ge, ":trigger_param_3", 10),
				(neq, ":type_var_4", 10),
				(neq, ":type_var_4", 8),
				(neq, ":type_var_4", 9),
				(neq, ":type_var_4", 5),
				(neq, ":type_var_4", 6),
				(store_random_in_range, ":random_in_range_0_1000", 0, 600),
				(eq, ":random_in_range_0_1000", 1),
				(assign, ":value", -1),
				(try_for_range, ":random_in_range_4_8", 0, 4),
					(troop_get_inventory_slot, ":inventory_slot_player_random_in_range_4_8_2", "trp_player", ":random_in_range_4_8"),
					(eq, ":inventory_slot_player_random_in_range_4_8_2", ":var_4"),
					(assign, ":value", ":random_in_range_4_8"),
				(try_end),
				(gt, ":value", 0),
				(str_store_item_name, 20, ":var_4"),
				(troop_get_inventory_slot_modifier, ":inventory_slot_modifier_player_random_in_range_4_8", "trp_player", ":value"),
				(try_begin),
					(eq, ":inventory_slot_modifier_player_random_in_range_4_8", 6),
					(display_message, "@Your {s20} falls apart!", 0x00ff0000),
					(agent_unequip_item, ":player_agent_no", ":var_4"),
					(troop_remove_item, "trp_player", ":var_4"),
					(troop_remove_item, "trp_broken_items", ":var_4"),
				(else_try),
					(troop_add_item, "trp_broken_items", ":var_4", ":inventory_slot_modifier_player_random_in_range_4_8"),
					(troop_set_inventory_slot_modifier, "trp_player", ":value", 6),
					(display_message, "@Your {s20} cracks!", 0x00ff0000),
				(try_end),
			(try_end),
			(agent_get_horse, ":horse_trigger_param_2", ":trigger_param_2"),
			(try_begin),
				(eq, "$tom_lance_breaking", 1),
				(gt, ":horse_trigger_param_2", 0),
				(this_or_next|is_between, ":var_4", "itm_light_lance", "itm_spear_a"), #Updated item slots
				(is_between, ":var_4", "itm_lance_banner_jer", "itm_pike_banner_teu"), #Updated item slots
				(ge, ":trigger_param_3", 50),
				(store_random_in_range, ":random_in_range_0_100", 0, 100),
				(gt, ":random_in_range_0_100", 20),
				(try_begin),
					(eq, ":trigger_param_2", ":player_agent_no"),
					(display_message, "@You broke your lance!", 0x00ff0000),
				(try_end),
				########Add effects on weapon break *Lances*
        (agent_get_position, pos1, ":trigger_param_2"),
		(agent_play_sound, ":trigger_param_1", "snd_shield_broken"),
		(particle_system_burst, "psys_lanse", pos1, 10),
        (particle_system_burst, "psys_lanse_straw", pos1, 30),
                ####Extend to Lanse_Blood
		#(particle_system_burst, "psys_lanse_blood", pos1, 10),
        #(particle_system_burst, "psys_lanse_blood", pos1, 30),
		        ########End Effects
				(agent_unequip_item, ":trigger_param_2", ":var_4"),
			(else_try),
				(this_or_next|is_between, ":var_4", "itm_bamboo_spear", "itm_wooden_shield"), #Updated item slots
				(is_between, ":var_4", "itm_pike_banner_teu", "itm_items_end"), #Updated item slots
				(le, ":horse_trigger_param_2", 0),
				(ge, ":trigger_param_3", 8),
				(store_random_in_range, ":random_in_range_0_100", 0, 100),
				(ge, ":random_in_range_0_100", 90),
				(try_begin),
					(eq, ":trigger_param_2", ":player_agent_no"),
					(display_message, "@You broke your spear!", 0x00ff0000),
				(try_end),
				########Add effects on weapon break *Spears*
        (agent_get_position, pos1, ":trigger_param_2"),
		(agent_play_sound, ":trigger_param_1", "snd_shield_broken"),
		(store_random_in_range, ":psys_to_use", "psys_lanse", "psys_lanse_blood"),
		(particle_system_burst, ":psys_to_use", pos1, 7), #Default = 10 (Higher = Bigger Particles)
        (particle_system_burst, ":psys_to_use", pos1, 21), #Default = 30 (Higher = Bigger Particles)
                ####Extend to Lanse_Blood
		#(particle_system_burst, "psys_lanse_blood", pos1, 10),
        #(particle_system_burst, "psys_lanse_blood", pos1, 30),
		        ########End Effects
				(agent_unequip_item, ":trigger_param_2", ":var_4"),
			(try_end),
			###Envfix weapon breaking patch start here
		]),

		(0.0, 0.0, 5.0,
		[],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_non_player, ":var_2"), #Agent must not be a player V1.0998D2
				(neq, ":player_agent_no", ":var_2"),
				(agent_slot_eq, ":var_2", 100, 0),
				(agent_is_alive, ":var_2"),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(agent_get_ammo, ":ammo_var_2", ":var_2"),
				(le, ":ammo_var_2", 0),
				(try_begin),
					(gt, ":horse_var_2", 0),
					(neg|troop_is_guarantee_ranged, ":troop_id_var_2"),
					(agent_get_wielded_item, ":wielded_item_var_2_0", ":var_2", 0),
					(neg|is_between, ":wielded_item_var_2_0", "itm_light_lance", "itm_spear_a"),
					(try_for_range, ":item", "itm_light_lance", "itm_spear_a"),
						(agent_set_wielded_item, ":var_2", ":item"),
					(try_end),
				(else_try),
					(eq, "$tom_use_banners", 1),
					(try_for_range, ":item", 1198, 1202),
						(agent_set_wielded_item, ":var_2", ":item"),
					(try_end),
					(agent_get_wielded_item, ":item", ":var_2", 0),
					(is_between, ":item", 1198, 1202),
				(else_try),
					(neg|troop_is_guarantee_ranged, ":troop_id_var_2"),
					(le, ":horse_var_2", 0),
					(agent_get_wielded_item, ":wielded_item_var_2_0", ":var_2", 0),
					(is_between, ":wielded_item_var_2_0", "itm_light_lance", "itm_spear_a"),
					(try_for_range, reg0, 0, 4),
						(agent_get_item_slot, ":item", ":var_2", reg0),
						(is_between, ":item", 1, "itm_cross_end"), #Previously itm_items_end
						(neg|is_between, ":item", "itm_light_lance", "itm_bamboo_spear"),
						(item_get_type, ":type_item", ":item"),
						(this_or_next|eq, ":type_item", 3),
						(this_or_next|eq, ":type_item", 4),
						(eq, ":type_item", 2),
						(agent_set_wielded_item, ":var_2", ":item"),
					(try_end),
				(else_try),
					(neg|troop_is_guarantee_ranged, ":troop_id_var_2"),
					(le, ":horse_var_2", 0),
					(agent_get_wielded_item, ":wielded_item_var_2_0", ":var_2", 0),
					(neg|is_between, ":wielded_item_var_2_0", "itm_bamboo_spear", "itm_wooden_shield"),
					(try_for_range, ":item", "itm_bamboo_spear", "itm_wooden_shield"),
						(agent_set_wielded_item, ":var_2", ":item"),
					(try_end),
				(else_try),
					(troop_is_guarantee_ranged, ":troop_id_var_2"),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_division, ":division_var_2", ":var_2"),
					(team_get_hold_fire_order, ":hold_fire_order_team_var_2_division_var_2", ":team_var_2", ":division_var_2"),
					(neq, ":hold_fire_order_team_var_2_division_var_2", 1),
					(is_between, ":wielded_item_var_2_0", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_0", ":wielded_item_var_2_0"),
					(this_or_next|le, ":wielded_item_var_2_0", -1),
					(this_or_next|neq, ":type_wielded_item_var_2_0", 10),
					(this_or_next|neq, ":type_wielded_item_var_2_0", 9),
					(neq, ":type_wielded_item_var_2_0", 8),
					(call_script, "script_get_closest_enemy_distance_new", ":var_2", ":team_var_2", 300),
					(assign, ":var_13", reg1),
					(gt, ":var_13", 300),
					(assign, ":value", 4),
					(try_for_range, reg0, 0, ":value"),
						(agent_get_item_slot, ":item_slot_var_2_reg0", ":var_2", reg0),
						(is_between, ":item_slot_var_2_reg0", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_0", ":item_slot_var_2_reg0"),
						(this_or_next|eq, ":type_wielded_item_var_2_0", 10),
						(this_or_next|eq, ":type_wielded_item_var_2_0", 8),
						(eq, ":type_wielded_item_var_2_0", 9),
						(agent_set_wielded_item, ":var_2", ":item_slot_var_2_reg0"),
						(assign, ":value", -1),
					(try_end),
				(try_end),
			(try_end)
		])
	] + crouching_triggers ),

	("ship_battle", mtf_battle_mode, 8,
	"You close in and board the enemy ships",
	[(0, mtef_defenders|mtef_team_0, af_override_horse, aif_start_alarmed, 0, []),
	(1, mtef_defenders|mtef_team_0, af_override_horse, aif_start_alarmed, 6, []),
	(2, mtef_defenders|mtef_team_0, af_override_horse, aif_start_alarmed, 6, []),
	(10, mtef_attackers|mtef_team_1, af_override_horse, aif_start_alarmed, 6, []),
	(11, mtef_attackers|mtef_team_1, af_override_horse, aif_start_alarmed, 3, []),
	(12, mtef_attackers|mtef_team_1, af_override_horse, aif_start_alarmed, 3, [])],
	[
					

    (7, 0, ti_once,
    [],
    [
	(call_script, "script_assign_traits"),
    ]),


    (0, 0, 1, 
    [
    ],
    [
	(call_script, "script_stumbling"),
    ]),





#Decapitations next level right here.
(ti_on_agent_hit, 0, 0, [(eq, "$dynamic_decap", 1),],
[
   (store_trigger_param_1, ":victim_agent"),
   (store_trigger_param_2, ":attacker_agent"),
   (store_trigger_param_3, ":damage"),
   (assign, ":attacker_item", reg0), ### Transfer the item ID to make sure it dosn't change while the script is running
   (copy_position, pos5, pos0), ### Transfer the position of the hit to make sure it dosn't change while the script is running
   (neq, ":victim_agent", -1),
   (try_begin), #-- Decapitations --#
      (agent_is_human, ":victim_agent"),
	  (ge, ":attacker_item", 0),
	  (assign, ":run", 0), ### Reset the run test variable
#	  (try_begin), ### Special weapons that can decap, ovevrrides the below conditions
#		  (this_or_next|eq, ":attacker_item", "itm_supercrossbow"),
#		  (eq, ":attacker_item", "itm_supersledge"),
#		  (assign, ":run", 1),
	  (try_begin),
		  #(neq, ":attacker_item", "itm_mace_1"), ### List of weapons that cannot decapitate
		  #(neq, ":attacker_item", "itm_mace_2"), ### This would be easier to do with a preperty check (for damage type), but I don't know if that is possible or not
		  #(neq, ":attacker_item", "itm_mace_3"),
		  #(neq, ":attacker_item", "itm_staff"), #Keeping active incase of script errors
		  (agent_get_action_dir, ":attack_dir", ":attacker_agent"), ### Makes sure the attack is either a left or right swing
		  (this_or_next|eq, ":attack_dir", 1), ### Right swing
		  (eq, ":attack_dir", 2), ### Left swing
		  (assign, ":run", 1),
	  (try_end),
	  (eq, ":run", 1), ### One of the checks were true, continue to run script
	  #(assign, reg1, ":damage"), #Debug messages
	  #(display_message, "@Damage: {reg1}"),
	  
	  (assign, ":run", 0), ### Reset the run test variable
	  (try_begin),
		(ge, ":damage", "$decap_damage"), ### 30 Minimum damage required to decapitate an agent
		(assign, ":run", 1),
		
#	  (else_try),  ### If debugging mode is on, this bypasses the damage requirement check
#		  (eq,"$g_decapitations_debugging", 1),
#		  (assign, ":run", 1),
#		  (display_message, "@Decap minimum DMG req bypassed"),
	  (try_end),
	  (eq, ":run", 1),
	  
	  (store_agent_hit_points, ":hp", ":victim_agent", 1),
	  (val_add, ":hp", 10), ### 10 Victim must have the negative of this hp or below after hit for the script to move on (never put this value below 0 since the agent has to be absolutley positvely dead)!
	  (ge, ":damage", ":hp"),
	  
	  
	  ### Compare the hit position to the agent's position
      (agent_get_position, pos4, ":victim_agent"),
      (get_distance_between_positions, ":distance", pos4, pos5), 
	  (agent_get_horse, ":is_mounted", ":victim_agent"),
	  (try_begin), ### If the agent is on horseback, these values are used (note that these values will not be exactly correct if the horse is very large or very small)
		(ge, ":is_mounted", 0), ### Will be -1 if no horse is to be found, so anything above means that the agent is mounted
		(assign, ":min_distance", 240), ### Minimum distance from the agent's horse's hooves from which the hit is valid (240 is an approximate value)
		(assign, ":max_distance", 260), ### Maximum distance from the agent's horse's hooves to which the hit is valid (260 is an approximate value)
	  (else_try),  ### If the agent is on foot, these values are used
	    (assign, ":min_distance", 160), ### Minimum distance from the agent's feet from which the hit is valid (160 = slightly below the neck)
	    (assign, ":max_distance", 176), ### Maximum distance from the agent's feet to which the hit is valid (176 = near the nose)
	  (try_end),
      (is_between, ":distance", ":min_distance", ":max_distance"), ### Check to see if the hit is within the allowed area
	  
	  
	  (assign, ":run", 0), ### Default variable value before damage test
	  (try_begin),
		  (store_div, ":chance", ":damage", "$decap_damage_divider"), ### Chance of decap is damage / 4 right now. Lower this value for higher chances of decapitation (or press M+Right Ctrl for debug more if you just want to test easy decaps in-game).
		  
		  #(assign, reg1, ":chance"), #Debug messages
		  #(display_message, "@Decap chance is: {reg1}"),
		  (store_random_in_range, ":diceroll", 0, "$decap_randomizer"), ### Randomizer, 0-100
		  
		  #(assign, reg1, ":diceroll"), #Debug messages
		  #(display_message, "@Diceroll: {reg1}"),
		  (le, ":diceroll", ":chance"), ### ":diceroll" must be less than or equal to ":chance", if it is, decapitation occurs!
		  
		  (assign, ":run", 1), ### SUCCESS!
		  
#     (else_try),  ### If debugging mode is on, bypass chance calculation
#		  (eq,"$g_decapitations_debugging", 1),
#		  (assign, ":run", 1),
#		  (display_message, "@Decap chance calc bypassed"),
	  (try_end),  
	  (eq, ":run", 1), ### Time for the fun stuff!

	  ### Gender test for spawning the right head type
	  (assign, ":head_type", "itm_cut_off_head_male"),
	  (agent_get_troop_id, ":victim_troop", ":victim_agent"),
	  (try_begin),
	    (ge, ":victim_troop", 0),
		(troop_get_type,":victim_gender",":victim_troop"),
		(eq, ":victim_gender", 1),
		(assign, ":head_type", "itm_cut_off_head_female"),
	  (try_end),
	  
	  ### Randomize the spawned head's and/or helmet's position and orientation
	  (store_random_in_range, ":z_rotation", 0, 360),
	  (store_random_in_range, ":y_rotation", -60, 60),
	  (store_random_in_range, ":x_pos", -90, 90),
	  (store_random_in_range, ":y_pos", -90, 90),
	  (position_rotate_z, pos4,":z_rotation"),
	  (position_rotate_y, pos4,":y_rotation"),
	  (position_move_x, pos4, ":x_pos"),
	  (position_move_y, pos4, ":y_pos"),
	  (position_set_z_to_ground_level, pos4),
	  (position_move_z, pos4, 5),
	  (set_spawn_position, pos4),
	  (assign, ":prunetime", 360), ### This is the time in seconds before the spawned head or helmet gets pruned (removed). Recommended to keep it above 0 to make sure it gets removed eventually or when the scene resets, to prevent performance issues.
	  
	  #(spawn_item, ":head_type", 0, ":prunetime"), ### This is the old way of spawning the head on the ground with the helmet, disabled because of the new dynamic heads. You can comment away (disable) the dynamic heads spawning further down and uncomment this line for a less performance-needing approach (with no physics involved).
	  
	  ### Does the agent have a helmet or hat equipped?
      (agent_get_item_slot, ":item", ":victim_agent", 4), #head slot
      (try_begin),
         (ge, ":item", 1), ### Does it?
         (agent_unequip_item, ":victim_agent", ":item"), ### Yes it does. Unequip it to allow replacement by the invisible helmet further down
		 (try_begin),
			 ### Don't spawn items with "itp_attatch_armature" flag: rigging causes floating bugs
			 ### This would be much better to do with an item flag check, but I haven't found any way to do that
			 #(neq, ":item", "itm_with_itp_attatch_armature"),
			 #(neg|is_between,":item","start_of_itm_range_with_itp_attatch_armature","end_of_itm_range_with_itp_attatch_armature"),
			#(set_spawn_position, pos4),
			(spawn_item, ":item", 0, ":prunetime"), ### Spawns the agent's currently equipped headgear on the dropped head's position
		 (try_end),
      (try_end),
	  
	  (agent_equip_item, ":victim_agent", "itm_invisible_head"), ### Put an invisible helmet on the agent's head to "remove" it
	  
	  
	  (agent_get_position, pos4, ":victim_agent"), ### Refreshes the agent's position
	  (position_move_z, pos4, ":min_distance"), ### Move to the where the neck used to be attached
	  
	  
	  ### Blood effects! The last variable is the strength. Lower or increase it for more/less blood (or tweak the particle effects themselves in "module_particle_systems.py").
      (particle_system_burst, "psys_blood_decapitation", pos4, 40), 
	  (particle_system_burst, "psys_game_blood", pos4, 10),
	  (particle_system_burst, "psys_game_blood_2", pos4, 10),
	  
	  (play_sound_at_position, "snd_decapitation_battle", pos4), ### Play some nasty sounds
	  
	  
	  ### Dynamic head spawning! See the bottom of "module_scene_props.py" for physics-related options and more.
	  (position_move_z, pos4, 20),
	  (set_spawn_position, pos4),
	  (assign, ":head_type", "spr_head_dynamic_male"),
	  (try_begin), ### Gender check (for determening the type of head)
		(eq, ":victim_gender", 1),
		(assign, ":head_type", "spr_head_dynamic_female"),
	  (try_end),
	  (spawn_scene_prop, ":head_type"),
	  
		#Addition check if we should allow the message to appears
			(eq, "$allow_decap_mess", 1), #Possible script error

	  ### This below is for the text that shows up when somebody is decapitated.
	  
	  ### Who decapitated who?
		(agent_get_troop_id, ":attacker_troop", ":attacker_agent"),
		(str_store_troop_name, s0, ":attacker_troop"),

		(agent_get_troop_id, ":victim_troop", ":victim_agent"),
		(str_store_troop_name, s1, ":victim_troop"),

	  
	  ### Colour check (friend or foe?)
	  (get_player_agent_no, ":my_agent"),
	  (agent_get_team, ":my_team", ":my_agent"),
	  (agent_get_team, ":victim_team", ":victim_agent"),
	  (try_begin), ### Display it!
		  (neq, ":my_team", ":victim_team"),
		  (display_message, "@>>> {s0} decapitated {s1}!", 0xFF33DD11), ## Green
	  (else_try),
		  (display_message, "@>>> {s0} decapitated {s1}!", 0xFFFF4422), ## Red
	  (try_end),
   (try_end), #-- Decapitations END --#
   
   ]),



	#AI Sound horn!
			(0.0, 0.0, 2.0,
		[
			##(store_random_in_range, ":horn_chance", 0, 22),
			#(eq, ":horn_chance", 0),
		],
		[
			(call_script, "script_formation_ai_sound_horn"),
		]),
	#AI Sound horn end!










			##################################################
##### troop_ratio_bar
##################################################
      (0, 0, ti_once, [
	  (eq, "$use_troopbars", 1),
	  ], [
	  (start_presentation, "prsnt_troop_ratio_bar"),
	  ]),
##################################################
##### troop_ratio_bar
##################################################
	
###Voice-over for Infantry, archers & Cavalry
		
		(0.0, 0.3, 0.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 29) #Everyone!
		],

		[
		(call_script, "script_identify_battle_voices_all")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 30) #Infantry
		],

		[
		(call_script, "script_identify_battle_voices_inf")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 31) #Archers
		],

		[
		(call_script, "script_identify_battle_voices_archers")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 32) #Cavalry
		],

		[
		(call_script, "script_identify_battle_voices_cav")
		]),
		###Voice-over for Infantry, archers & Cavalry	
		
		
		
		
			#####Camera mode by Rubik None-Coop Version Begin
		(0, 0, 0, [(eq, "$extended_camera_mode", 1)],
  [
    (get_player_agent_no, ":player_agent"),
    (agent_get_look_position, pos1, ":player_agent"),
    (position_move_z, pos1, "$g_camera_z"),
    (position_move_y, pos1, "$g_camera_y"),
    (agent_get_horse, ":horse_agent", ":player_agent"),
    (try_begin),
      (ge, ":horse_agent", 0),
      (position_move_z, pos1, 80),
    (try_end),
    (mission_cam_set_position, pos1),
    (try_begin),
      (key_is_down, key_left_control),
      (assign, ":move_val", 50),
    (else_try),
      (assign, ":move_val", 10),
    (try_end),
    (try_begin),
      (key_clicked, key_up),
      (mission_cam_set_mode, 1),
      (val_add, "$g_camera_z", ":move_val"),
    (else_try),
      (key_clicked, key_down),
      (mission_cam_set_mode, 1),
      (val_sub, "$g_camera_z", ":move_val"),
    (else_try),
      (key_clicked, key_left),
      (mission_cam_set_mode, 1),
      (val_add, "$g_camera_y", ":move_val"),
    (else_try),
      (key_clicked, key_right),
      (mission_cam_set_mode, 1),
      (val_sub, "$g_camera_y", ":move_val"),
    (try_end),
    (try_begin),
      (this_or_next|game_key_clicked, gk_view_char),
      (this_or_next|game_key_clicked, gk_zoom),
      (game_key_clicked, gk_cam_toggle),
      (mission_cam_set_mode, 0),
    (try_end),
  ]),
  #####Camera mode by Rubik None-Coop Version End
		
		
###########Torch by troycall/Envious Arm begin

																	#(-25.0, 0.0, 0.0, #Enabling this forces random chance to be 100%
																	#(ti_on_agent_spawn, 0, 0, #Enabling this forces random chance to be 100%
																	(20, 0, ti_once, #Proper one, but reinforcements do not get assigned torches.
        [
          (mission_tpl_are_all_agents_spawned), #From VC Header_Operations to prevent weird behavior.
          (is_currently_night) #Check if currently night time
        ],
        [

		  ####DEFAULT
		   #(try_for_agents, ":agent"),
            #(agent_get_wielded_item, ":item", ":agent", 1),
            #(gt, ":item", -1),
            #(agent_unequip_item, ":agent", ":item"),
            #(agent_equip_item, ":agent", "itm_torch"),
            #(agent_set_wielded_item, ":agent", "itm_torch"),           
          #(try_end),
		  ####END DEFAULT
		  
		  (try_for_agents, ":agent"), #Try for agents...
		  #Extension
		  (agent_is_alive, ":agent"), #For performance reasons
		  #End
		  (agent_is_human, ":agent"), #Performance
          (agent_is_non_player, ":agent"), #Uncommenting this includes player on spawning with torch, may be necessary to uncomment at module_coop_mission_templates.
		  


		 ##########Default Order
		 #######		  (agent_is_human, ":agent"), #Performance
         #######(agent_is_non_player, ":agent"), #Uncommenting this includes player on spawning with torch, may be necessary to uncomment at module_coop_mission_templates.
		 #######
		 ########Extension
		 #######(agent_is_active, ":agent"), #For performance reasons
		 #######(agent_is_alive, ":agent"), #For performance reasons
		 ########End
		  ############
		  		  
				#  (try_begin),
				  
		#		          (agent_get_wielded_item, ":rhand", ":agent", 0),  #Right hand
		#  (assign, ":rhanditem", 0), # Preparing local variable.
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000000000100),
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000004000000),
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000008000000),
		#  (neg|item_has_capability, ":rhanditem", 0x0000000170000000),
		# 

		  #
		  
          #BEGIN DEBUG
          #(assign, reg10, ":agent"),
          #(str_clear, s10),
          #(str_store_string, s10, "@New agent: {reg10}"),
          #END DEBUG
		  #(agent_get_wielded_item, ":rhanditem", ":agent", 0),  #Obtain right hand item
         (agent_get_wielded_item, ":rhanditem", ":agent", 0),  #Obtain right hand item
          (agent_get_wielded_item, ":item", ":agent", 1), # Left hand: shield or -1
          #BEGIN DEBUG
          #(assign, reg10, ":item"),
          #(str_store_string, s10, "@{s10}. LH: {reg10}"),
		  #(display_message, "@Main block Phase A finalized"),
          #END DEBUG
		  #(item_get_type, ":type", ":rhanditem"), #If right hand item is polearm, stop reading rest of code.
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_club_with_spike_head", "itm_wooden_shield"),
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_light_lance", "itm_wooden_shield"),
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_light_lance", "itm_wooden_shield"),
          (try_begin),
		  (neg|is_between, ":rhanditem", "itm_club_with_spike_head", "itm_wooden_shield"),
		  (neg|is_between, ":rhanditem", "itm_lance_banner_jer", "itm_cross_end"), #Update item slots
		  #(neg|troop_has_item_equipped, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		  #(neq, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		  
		# (neg|eq, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		    (gt, ":item", -1), #Check if the agent wields any item in the left hand, this or next.
            #(neq, ":item", -1),# Check if the agent wields any item in the left hand
            (neq, ":item", "itm_torch"), #If agent is using torch, ignore him.
            #(display_message, "@PASSED neg tests"), #Debug message

			
            (store_random_in_range, ":chance", 1, 101), # Chance of item being assigned
            (try_begin),
			  (le, ":chance", "$torch_chance"), #25% = 25
				#lt           = neg | ge # less than		-- (lt,<value>,<value>),
				#neq          = neg | eq # not equal to		-- (neq,<value>,<value>),
				#le           = neg | gt # less or equal to	-- (le,<value>,<value>),
              (agent_unequip_item, ":agent", ":item"),
			  
              #BEGIN DEBUG
              #(str_store_item_name, s11, ":item"),
              #(str_store_string, s10, "@{s10}. Removed item: {s11}"),
			  #(display_message, "@(agent_unequip_item, :agent, :item PASSED."),
              #END DEBUG

               
                (agent_equip_item, ":agent", "itm_torch"), #Tell agent to equip the item
                 #(display_message, "@(agent_equip_item, :agent, :item PASSED."),
                  (agent_set_wielded_item, ":agent", "itm_torch"), #Required for infantry only, cavarly can work without it.
                  #(display_message, "@(agent_set_wielded_item, :agent, :item PASSED."),
                 
                 
                  #BEGIN DEBUG
                #(else_try),
                  #(str_store_string, s10, "@{s10}. Failed random chance."),
                (try_end),
               
              #(else_try),
                #(str_store_string, s10, "@{s10}. Invalid agent for torch"),
              (try_end),
             
              #(display_message, s10),
			  (try_end),
              #END DEBUG
			#  (try_end),
      ]),
	  
###########Torch by troycall/Envious Arm end


		(0.0, 0.0, ti_once,
		[],

		[
			(play_sound, "snd_sea_ambiance", 2)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_agent_reassign_team", ":trigger_param_1"),
			(assign, ":var_2", 5000),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(store_character_level, ":character_level_troop_id_trigger_param_1", ":troop_id_trigger_param_1"),
			(val_mul, ":character_level_troop_id_trigger_param_1", 35),
			(val_add, ":var_2", ":character_level_troop_id_trigger_param_1"),
			(store_random_in_range, ":random_in_range_0_3000", 0, 3000),
			(val_add, ":var_2", ":random_in_range_0_3000"),
			#Removedforunassignedstuff#(agent_get_party_id, ":party_id_trigger_param_1", ":trigger_param_1"), #Removedforunassignedstuff#
			#(party_get_morale, ":morale_party_id_trigger_param_1", ":party_id_trigger_param_1"), #Disabled morale for ship battles to prevent script error.
			#Removedforunassignedstuff#(store_sub, ":value", ":morale_party_id_trigger_param_1", 70), #Removedforunassignedstuff#
			#Removedforunassignedstuff#(val_mul, ":value", 30), #Removedforunassignedstuff#
			#Removedforunassignedstuff#(val_add, ":var_2", ":value"),#Removedforunassignedstuff#
			(agent_set_slot, ":trigger_param_1", slot_agent_courage_score, ":var_2")
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(call_script, "script_troop_agent_set_banner", "tableau_game_troop_label_banner", ":trigger_param_1", ":troop_id_trigger_param_1")
		]),

		(-26.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(store_trigger_param_2, ":trigger_param_2"), #Removedforunassignedstuff#
			(store_trigger_param_3, ":trigger_param_3"),
			(try_begin),
				(ge, ":trigger_param_1", 0),
				(neg|agent_is_ally, ":trigger_param_1"),
				(agent_is_human, ":trigger_param_1"),
				(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
				(party_add_members, "p_total_enemy_casualties", ":troop_id_trigger_param_1", 1),
				(eq, ":trigger_param_3", 1),
				(party_wound_members, "p_total_enemy_casualties", ":troop_id_trigger_param_1", 1),
			(try_end)
		]),

		(-21.0, 0.0, 0.0,
		[],

		[
			(try_begin),
				(eq, "$g_battle_won", 1),
				(call_script, "script_count_mission_casualties_from_agents"),
				(finish_mission, 0),
			(else_try),
				(eq, "$pin_player_fallen", 1),
				(eq, "$g_battle_won", 0),
				(call_script, "script_simulate_retreat", 5, 20, 1),
				(str_store_string, 5, "str_retreat"),
				(call_script, "script_count_mission_casualties_from_agents"),
				(set_mission_result, -1),
				(finish_mission, 0),
			(else_try),
				(eq, "$pin_player_fallen", 1),
				(eq, "$g_battle_won", -1),
				(call_script, "script_count_mission_casualties_from_agents"),
				(finish_mission, 0),
			(else_try),
				(call_script, "script_cf_check_enemies_nearby"),
				(question_box, "str_do_you_want_to_retreat"),
			(else_try),
				(get_player_agent_no, ":player_agent_no"),
				(neg|agent_is_alive, ":player_agent_no"),
				(call_script, "script_cf_check_enemies_nearby"),
				(question_box, "str_do_you_want_to_retreat"),
			(else_try),
				(display_message, "str_can_not_retreat"),
			(try_end)
		]),

		(-8.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(eq, ":trigger_param_1", 0),
			(assign, "$pin_player_fallen", 0),
			(try_begin),
				(store_mission_timer_a, ":mission_timer_a"),
				(gt, ":mission_timer_a", 20),
				(str_store_string, 5, "str_retreat"),
				(call_script, "script_simulate_retreat", 10, 20, 1),
			(try_end),
			(call_script, "script_count_mission_casualties_from_agents"),
			(finish_mission, 0)
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(team_set_relation, 0, 2, 1),
			(team_set_relation, 1, 3, 1),
			(call_script, "script_place_player_banner_near_inventory_bms"),
			(party_clear, "p_routed_enemies"),
			(assign, "$g_latest_order_1", 1),
			(assign, "$g_latest_order_2", 1),
			(assign, "$g_latest_order_3", 1),
			(assign, "$g_latest_order_4", 1)
		]),

		(0.0, 0.0, ti_once,
		[],

		[
			(assign, "$g_battle_won", 0),
			(assign, "$defender_reinforcement_stage", 0),
			(assign, "$attacker_reinforcement_stage", 0),
			(call_script, "script_place_player_banner_near_inventory"),
			#			(try_begin),
			#(eq, "$additional_music", 0),
			(call_script, "script_combat_music_set_situation_with_culture"),
			#(try_end),
			(assign, "$g_defender_reinforcement_limit", 2),
			(assign, "$dmod_current_agent", -1),
			(assign, "$dmod_move_camera", -1)
		]),

		(30.0, 0.0, 0.0,
		[],

		[]),

		(2.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_check_friendly_kills")
		]),

		(1.0, 0.0, 5.0,
		[
			(call_script, "script_party_count_members_with_full_health", "p_collective_enemy"),
			(assign, ":var_1", reg0),
			(assign, ":var_2", 0),
			(try_for_agents, ":var_3"),
				(agent_is_human, ":var_3"),
				(agent_get_party_id, ":party_id_var_3", ":var_3"),
				(try_begin),
					(neq, ":party_id_var_3", "p_main_party"),
					(neg|agent_is_ally, ":var_3"),
					(val_add, ":var_2", 1),
				(try_end),
			(try_end),
			(store_sub, ":value", ":var_1", ":var_2"),
			(try_begin),
				(lt, ":value", 15),
				(ge, "$defender_reinforcement_stage", 2),
				(eq, "$defender_reinforcement_limit_increased", 0),
				(val_add, "$g_defender_reinforcement_limit", 1),
				(assign, "$defender_reinforcement_limit_increased", 1),
			(try_end),
			(lt, "$defender_reinforcement_stage", "$g_defender_reinforcement_limit"),
			(store_mission_timer_a, ":mission_timer_a"),
			(ge, ":mission_timer_a", 10),
			(store_normalized_team_count, ":normalized_team_count_0", 0),
			(lt, ":normalized_team_count_0", 6)
		],

		[
			(add_reinforcements_to_entry, 2, 7),
			(assign, "$defender_reinforcement_limit_increased", 0),
			(val_add, "$defender_reinforcement_stage", 1)
		]),

		(1.0, 0.0, 5.0,
		[
			(lt, "$attacker_reinforcement_stage", "$g_defender_reinforcement_limit"),
			(store_mission_timer_a, ":mission_timer_a"),
			(ge, ":mission_timer_a", 10),
			(store_normalized_team_count, ":normalized_team_count_1", 1),
			(lt, ":normalized_team_count_1", 6)
		],

		[
			(add_reinforcements_to_entry, 4, 7),
			(val_add, "$attacker_reinforcement_stage", 1)
		]),

		(5.0, 60.0, ti_once,
		[
			(store_mission_timer_a, reg1),
			(ge, reg1, 10),
			(all_enemies_defeated, 5),
			(set_mission_result, 1),
			(display_message, "str_msg_battle_won"),
			#(play_sound, "snd_won_battle"), #Moved to victorious main menu
			(assign, "$g_battle_won", 1),
			(assign, "$g_battle_result", 1),
			(call_script, "script_play_victorious_sound")
		],

		[
			(call_script, "script_count_mission_casualties_from_agents"),
			(finish_mission, 1)
		]),

		(10.0, 0.0, 0.0, # Battle won/lost messages!
		[],

		[
			(eq, "$g_battle_won", 1),
			#(play_sound, "snd_won_battle"), #Moved to victorious main menu
			(display_message, "str_msg_battle_won")
		]),

		(1.0, 60.0, ti_once,
		[
			(store_mission_timer_a, reg1),
			(ge, reg1, 10),
			(main_hero_fallen),
			(assign, ":var_1", 0),
			(try_for_agents, ":var_2"),
				(agent_is_ally, ":var_2"),
				(agent_is_alive, ":var_2"),
				(val_add, ":var_1", 1),
			(try_end),
			(eq, ":var_1", 0),
			(set_mission_result, -1),
						(try_begin),
			(eq, "$colored_messages", 1),
			(display_message, "@Battle lost...", 0x00f78078),
			(else_try),
			(display_message, "@Battle lost..."),
			(try_end),
			(assign, "$g_battle_won", -1),
			(assign, "$g_battle_result", -1)
		],

		[
			(call_script, "script_count_mission_casualties_from_agents"),
			(finish_mission, 0)
		]),

		(10.0, 0.0, 0.0, # Battle won/lost messages!
		[],

		[
			(eq, "$g_battle_won", -1),
						(try_begin),
			(eq, "$colored_messages", 1),
			(display_message, "@Battle lost! Press tab key to leave...", 0x00f78078),
			(else_try),
			(display_message, "@Battle lost! Press tab key to leave..."),
			(try_end),
			#(play_sound, "snd_battle_sounds"), #Moved to your companions carry you away from the fighting menu
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(gt, "$dmod_current_agent", 0),
			(eq, "$setting_use_dmod", 1),
			(eq, "$dmod_move_camera", 1),
			(agent_get_position, 1, "$dmod_current_agent"),
			(position_move_z, 1, 300),
			(position_move_y, 1, -300),
			(agent_get_horse, ":horse_l_dmod_current_agent", "$dmod_current_agent"),
			(try_begin),
				(ge, ":horse_l_dmod_current_agent", 0),
			(try_end),
			(try_begin),
				(eq, "$pop_camera_on", 1),
				(assign, "$pop_camera_on", 0),
			(try_end),
			(mission_cam_set_position, 1),
			(mission_cam_set_mode, 1),
			(set_fixed_point_multiplier, 100)
		],

		[]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(eq, "$setting_use_dmod", 1),
			(key_clicked, 238),
			(main_hero_fallen),
			(call_script, "script_dmod_cycle_forwards")
		],

		[]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(eq, "$setting_use_dmod", 1),
			(key_clicked, 239),
			(main_hero_fallen),
			(call_script, "script_dmod_cycle_backwards")
		],

		[]),

		(0.0, 0.0, ti_once,
		[],

		[
			(assign, "$pop_camera_on", 0),
			(assign, "$pop_camera_mouse_center_x", 500),
			(assign, "$pop_camera_mouse_center_y", 375),
			(assign, "$pop_camera_mouse_x", "$pop_camera_mouse_center_x"),
			(assign, "$pop_camera_mouse_y", "$pop_camera_mouse_center_y"),
			(assign, "$pop_camera_mouse_counter", 0)
		]),

		(0.0, 4.0, ti_once,
		[
			(eq, "$enable_deahtcam", 1),
			(main_hero_fallen),
			(eq, "$pop_camera_on", 0),
			(assign, "$tom_sand_storm", 0)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_position, 1, ":player_agent_no"),
			(position_get_x, ":position_x_1", 1),
			(position_get_y, ":position_y_1", 1),
			(init_position, 47),
			(position_set_x, 47, ":position_x_1"),
			(position_set_y, 47, ":position_y_1"),
			(position_set_z_to_ground_level, 47),
			(position_move_z, 47, 250),
			(mission_cam_set_mode, 1, 0, 0),
			(mission_cam_set_position, 47),
			(assign, "$pop_camera_rotx", 0),
			(assign, "$pop_camera_on", 1)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(this_or_next|eq, "$dmod_move_camera", 1),
			(eq, "$pop_camera_on", 1),
			(this_or_next|game_key_clicked, 0),
			(this_or_next|game_key_is_down, 0),
			(this_or_next|game_key_clicked, 1),
			(this_or_next|game_key_is_down, 1),
			(this_or_next|game_key_clicked, 2),
			(this_or_next|game_key_is_down, 2),
			(this_or_next|game_key_clicked, 3),
			(game_key_is_down, 3)
		],

		[
			(try_begin),
				(eq, "$dmod_move_camera", 1),
				(mission_cam_set_mode, 1, 0, 0),
				(assign, "$pop_camera_rotx", 0),
				(assign, "$pop_camera_on", 1),
				(assign, "$dmod_move_camera", 0),
			(try_end),
			(mission_cam_get_position, 47),
			(assign, ":value", 0),
			(assign, ":value_2", 0),
			(try_begin),
				(this_or_next|game_key_clicked, 0),
				(game_key_is_down, 0),
				(assign, ":value_2", 10),
			(try_end),
			(try_begin),
				(this_or_next|game_key_clicked, 1),
				(game_key_is_down, 1),
				(assign, ":value_2", -10),
			(try_end),
			(try_begin),
				(this_or_next|game_key_clicked, 2),
				(game_key_is_down, 2),
				(assign, ":value", -10),
			(try_end),
			(try_begin),
				(this_or_next|game_key_clicked, 3),
				(game_key_is_down, 3),
				(assign, ":value", 10),
			(try_end),
			(position_move_x, 47, ":value"),
			(position_move_y, 47, ":value_2"),
			(mission_cam_set_position, 47)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(eq, "$pop_camera_on", 1),
			(neg|is_presentation_active, "prsnt_battle"),
			(mouse_get_position, 1),
			(set_fixed_point_multiplier, 1000),
			(position_get_x, reg1, 1),
			(position_get_y, reg2, 1),
			(set_fixed_point_multiplier, 100),
			(this_or_next|neq, reg1, "$pop_camera_mouse_center_x"),
			(neq, reg2, "$pop_camera_mouse_center_y")
		],

		[
			(assign, ":value", 1),
			(try_begin),
				(eq, reg1, "$pop_camera_mouse_x"),
				(eq, reg2, "$pop_camera_mouse_y"),
				(val_add, "$pop_camera_mouse_counter", 1),
				(try_begin),
					(gt, "$pop_camera_mouse_counter", 50),
					(assign, "$pop_camera_mouse_center_x", reg1),
					(assign, "$pop_camera_mouse_center_y", reg2),
					(assign, "$pop_camera_mouse_counter", 0),
				(try_end),
				(assign, ":value", 0),
			(try_end),
			(eq, ":value", 1),
			(assign, "$pop_camera_mouse_counter", 0),
			(assign, "$pop_camera_mouse_x", reg1),
			(assign, "$pop_camera_mouse_y", reg2),
			(mission_cam_get_position, 47),
			(store_sub, ":value_2", "$pop_camera_mouse_center_x", reg1),
			(store_sub, ":value_3", reg2, "$pop_camera_mouse_center_y"),
			(try_for_range, ":number", 0, 2),
				(try_begin),
					(eq, ":number", 1),
					(assign, ":value_2", ":value_3"),
				(try_end),
				(this_or_next|lt, ":value_2", -2),
				(gt, ":value_2", 2),
				(assign, ":value_4", 1),
				(try_begin),
					(lt, ":value_2", 0),
					(assign, ":value_4", -1),
				(try_end),
				(val_abs, ":value_2"),
				(val_sub, ":value_2", 2),
				(convert_to_fixed_point, ":value_2"),
				(store_sqrt, ":value_2", ":value_2"),
				(convert_from_fixed_point, ":value_2"),
				(val_clamp, ":value_2", 1, 64),
				(val_mul, ":value_2", ":value_4"),
				(try_begin),
					(eq, ":number", 0),
					(store_mul, ":value_5", "$pop_camera_rotx", -1),
					(position_rotate_x, 47, ":value_5"),
					(position_rotate_z, 47, ":value_2"),
					(position_rotate_x, 47, "$pop_camera_rotx"),
				(try_end),
				(try_begin),
					(eq, ":number", 1),
					(position_rotate_x, 47, ":value_2"),
					(val_add, "$pop_camera_rotx", ":value_2"),
				(try_end),
			(try_end),
			(mission_cam_set_position, 47)
		]),

		(1.0, 4.0, ti_once,
		[
			(main_hero_fallen)
		],

		[
			(assign, "$pin_player_fallen", 1),
			(neq, "$use_player_auxiliary", 1),
			(display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
			(display_message, "@If you choose to watch the fight you can use the mouse scroll up and down to switch between troop view or AWDS keys for free camera view.")
		]),

		(-22.0, 0.0, 0.0,
		[],

		[
			(display_message, "str_use_baggage_for_inventory")
		]),

		(0.0, 0.0, 0.0,
		[],

		[
			(game_key_clicked, 22),
			(neg|is_presentation_active, "prsnt_battle"),
			(start_presentation, "prsnt_battle")
		]),

		(0.1, 0.0, 0.0,
		[],

		[
			(is_presentation_active, "prsnt_battle"),
			(call_script, "script_update_order_panel_statistics_and_map")
		]),

		(0.0, 0.0, 5.0,
		[],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_non_player, ":var_2"), #Agent must not be a player V1.0998D2
				(neq, ":player_agent_no", ":var_2"),
				(agent_slot_eq, ":var_2", 100, 0),
				(agent_is_alive, ":var_2"),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(agent_get_ammo, ":ammo_var_2", ":var_2"),
				(le, ":ammo_var_2", 0),
				(try_begin),
					(gt, ":horse_var_2", 0),
					(neg|troop_is_guarantee_ranged, ":troop_id_var_2"),
					(agent_get_wielded_item, ":wielded_item_var_2_0", ":var_2", 0),
					(neg|is_between, ":wielded_item_var_2_0", "itm_light_lance", "itm_spear_a"),
					(try_for_range, ":item", "itm_light_lance", "itm_spear_a"),
						(agent_set_wielded_item, ":var_2", ":item"),
					(try_end),
				(else_try),
					(eq, "$tom_use_banners", 1),
					(try_for_range, ":item", 1198, 1202),
						(agent_set_wielded_item, ":var_2", ":item"),
					(try_end),
					(agent_get_wielded_item, ":item", ":var_2", 0),
					(is_between, ":item", 1198, 1202),
				(else_try),
					(neg|troop_is_guarantee_ranged, ":troop_id_var_2"),
					(le, ":horse_var_2", 0),
					(agent_get_wielded_item, ":wielded_item_var_2_0", ":var_2", 0),
					(is_between, ":wielded_item_var_2_0", "itm_light_lance", "itm_spear_a"),
					(try_for_range, reg0, 0, 4),
						(agent_get_item_slot, ":item", ":var_2", reg0),
						(is_between, ":item", 1, "itm_cross_end"), #Previously itm_items_end
						(neg|is_between, ":item", "itm_light_lance", "itm_bamboo_spear"),
						(item_get_type, ":type_item", ":item"),
						(this_or_next|eq, ":type_item", 3),
						(this_or_next|eq, ":type_item", 4),
						(eq, ":type_item", 2),
						(agent_set_wielded_item, ":var_2", ":item"),
					(try_end),
				(else_try),
					(neg|troop_is_guarantee_ranged, ":troop_id_var_2"),
					(le, ":horse_var_2", 0),
					(agent_get_wielded_item, ":wielded_item_var_2_0", ":var_2", 0),
					(neg|is_between, ":wielded_item_var_2_0", "itm_bamboo_spear", "itm_wooden_shield"),
					(try_for_range, ":item", "itm_bamboo_spear", "itm_wooden_shield"),
						(agent_set_wielded_item, ":var_2", ":item"),
					(try_end),
				(else_try),
					(troop_is_guarantee_ranged, ":troop_id_var_2"),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_division, ":division_var_2", ":var_2"),
					(team_get_hold_fire_order, ":hold_fire_order_team_var_2_division_var_2", ":team_var_2", ":division_var_2"),
					(neq, ":hold_fire_order_team_var_2_division_var_2", 1),
					(is_between, ":wielded_item_var_2_0", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_0", ":wielded_item_var_2_0"),
					(this_or_next|le, ":wielded_item_var_2_0", -1),
					(this_or_next|neq, ":type_wielded_item_var_2_0", 10),
					(this_or_next|neq, ":type_wielded_item_var_2_0", 9),
					(neq, ":type_wielded_item_var_2_0", 8),
					(call_script, "script_get_closest_enemy_distance_new", ":var_2", ":team_var_2", 300),
					(assign, ":var_13", reg1),
					(gt, ":var_13", 300),
					(assign, ":value", 4),
					(try_for_range, reg0, 0, ":value"),
						(agent_get_item_slot, ":item_slot_var_2_reg0", ":var_2", reg0),
						(is_between, ":item_slot_var_2_reg0", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_0", ":item_slot_var_2_reg0"),
						(this_or_next|eq, ":type_wielded_item_var_2_0", 10),
						(this_or_next|eq, ":type_wielded_item_var_2_0", 8),
						(eq, ":type_wielded_item_var_2_0", 9),
						(agent_set_wielded_item, ":var_2", ":item_slot_var_2_reg0"),
						(assign, ":value", -1),
					(try_end),
				(try_end),
			(try_end)
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(assign, "$enable_deahtcam", 1),
			(assign, "$auxilary_player_active", 0),
			(eq, "$use_player_auxiliary", 1),
			(assign, "$g_move_heroes", 1),
			(party_clear, "p_temp_casualties_3"),
			(call_script, "script_party_add_party", "p_temp_casualties_3", "p_main_party"),
			(set_player_troop, "trp_player"),
			(assign, "$enable_deahtcam", 0)
		]),

		(5.0, 0.0, 0.0,
		[
			(eq, "$use_player_auxiliary", 1),
			(eq, "$enable_deahtcam", 0),
			(get_player_agent_no, ":player_agent_no"),
			(neg|agent_is_alive, ":player_agent_no")
		],

		[
			(set_fixed_point_multiplier, 100),
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_team, ":team_player_agent_no", ":player_agent_no"),
			(agent_get_division, ":division_player_agent_no", ":player_agent_no"),
			(assign, ":value", 0),
			(try_for_agents, ":var_5"),
				(eq, ":value", 0),
				(agent_is_human, ":var_5"),
				(agent_is_alive, ":var_5"),
				(agent_get_team, ":team_var_5", ":var_5"),
				(agent_get_party_id, ":party_id_var_5", ":var_5"),
				(eq, ":party_id_var_5", "p_main_party"),
				(agent_get_division, ":division_player_agent_no_2", ":player_agent_no"),
				(agent_get_group, ":group_player_agent_no", ":player_agent_no"),
				(eq, ":team_player_agent_no", ":team_var_5"),
				(eq, ":division_player_agent_no", ":division_player_agent_no_2"),
				(agent_get_troop_id, ":troop_id_var_5", ":var_5"),
				(neg|is_between, ":troop_id_var_5", "trp_npc1", "trp_knight_1_1_wife"),
				(set_player_troop, ":troop_id_var_5"),
				(store_agent_hit_points, ":agent_hit_points_var_5_1", ":var_5", 1),
				(agent_get_position, 1, ":var_5"),
				(position_set_z, 1, -2000),
				(position_set_x, 1, 0),
				(position_set_y, 1, 0),
				(agent_get_position, 0, ":var_5"),
				(set_spawn_position, 0),
				(agent_get_horse, ":horse_var_5", ":var_5"),
				(try_begin),
					(gt, ":horse_var_5", 0),
					(agent_set_position, ":horse_var_5", 1),
					(remove_agent, ":horse_var_5"),
				(try_end),
				(agent_set_position, ":var_5", 1),
				(agent_set_slot, ":var_5", 100, 1),
				(agent_get_slot, ":var_5_102", ":var_5", 102),
				(remove_agent, ":var_5"),
				(spawn_agent, ":troop_id_var_5"),
				(assign, ":player_agent_no", reg0),
				(agent_set_slot, ":player_agent_no", 102, ":var_5_102"),
				(agent_set_team, ":player_agent_no", ":team_player_agent_no"),
				(agent_set_hit_points, ":player_agent_no", ":agent_hit_points_var_5_1", 1),
				(agent_set_group, ":player_agent_no", ":group_player_agent_no"),
				(agent_set_slot, ":player_agent_no", 100, 2),
				(agent_set_slot, ":player_agent_no", 101, ":troop_id_var_5"),
				(try_begin),
					(agent_get_horse, ":horse_player_agent_no", ":player_agent_no"),
					(gt, ":horse_player_agent_no", 0),
					(lt, ":horse_var_5", 0),
					(agent_set_position, ":horse_player_agent_no", 1),
					(remove_agent, ":horse_player_agent_no"),
				(try_end),
				(set_player_troop, "trp_player"),
				(assign, ":value", 1),
				(assign, "$auxilary_player_active", 1),
			(try_end),
			(eq, ":value", 0),
			(assign, "$enable_deahtcam", 1)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_set_matching_sexy_boots", ":trigger_param_1")
		]),

			(0.0, 0.0, 0.0,
		[
			(eq, "$sp_shield_bash", 1),
			(game_key_is_down, 7),
			(game_key_clicked, 6),
			(neg|main_hero_fallen),
		],

		[
		(call_script, "script_shield_bash"),
		]),

			##AI kicking begin
		   (2, 0, 3, #AI kicking
       [], [
	(get_player_agent_no,":player"),
	(try_for_agents, ":agent"),
		(neq, ":agent", ":player"),
		(agent_is_alive, ":agent"),
		(neq, ":agent", -1),
		(agent_is_human, ":agent"),#Only humans can kick....FOR NOW
		(agent_is_active, ":agent"),
		(agent_slot_eq, ":agent", slot_agent_is_running_away, 0),#Isn't fleeing the battle.
		##He's an eligible human.  Now see if he's in a position to kick.
		(agent_get_attack_action, ":attack_action", ":agent"), #returned values: free = 0, readying_attack = 1, releasing_attack = 2, completing_attack_after_hit = 3, attack_parried = 4, reloading = 5, after_release = 6, cancelling_attack = 7
		(agent_get_defend_action, ":defend_action", ":agent"),#
		(this_or_next|eq,":attack_action",4),#Just got parried
		(this_or_next|eq,":defend_action",1),#Parrying an enemy
		##So he'll only try to kick if he just parried an enemy attack, or his own attack just got parried.
		(agent_get_team, ":team", ":agent"),
		(assign, ":maximum_distance", 100),
		#Target Acquisition
		(agent_ai_get_look_target,":suspect",":agent"),
		(gt,":suspect",0),#Make sure there is someone.
		(agent_is_alive, ":suspect"),
		(agent_is_human, ":suspect"),#Only kick humans
		(agent_is_active, ":suspect"),
		(agent_get_team, ":suspect_team", ":suspect"),
		(neq, ":suspect_team", ":team"),#Friends don't let friends kick friends.
		(agent_get_position, pos1, ":agent"),#Distance check
		(agent_get_position, pos2, ":suspect"),
		(neg|position_is_behind_position, pos2, pos1), #Suspect can't be behind kicker.
		(get_distance_between_positions, ":distance", pos1, pos2),
		(le, ":distance", ":maximum_distance"),
		#Check chance
		(store_random_in_range,":kickchance", 1, 10),
		(try_begin),
			(eq,":kickchance",1), #10% chance per check
				#(display_message, "@Agent kicks."),
				(agent_set_animation, ":agent", "anim_prepare_kick_0"),
				(agent_deliver_damage_to_agent, ":agent", ":suspect", 3),
				(agent_set_animation, ":suspect", "anim_strike3_abdomen_front"),#Get Kicked
			(try_end),
	   (try_end),]),
	   
	   ##AI Kicking end
		
		
		(0.25, 0.0, 4.0,
		[
			(eq, "$sp_shield_bash_ai", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(neq, ":var_2", ":player_agent_no"),
				(agent_is_alive, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_active, ":var_2"), #Test to see if it stops AI from shield bashing (new addition v3)
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(store_skill_level, ":skill_level_shield_troop_id_var_2", "skl_shield", ":troop_id_var_2"),
				(store_proficiency_level, ":proficiency_level_troop_id_var_2_0", ":troop_id_var_2", 0),
				(ge, ":skill_level_shield_troop_id_var_2", 4),
				(ge, ":proficiency_level_troop_id_var_2_0", 200),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(le, ":horse_var_2", 0),
				(try_begin),
					(neg|agent_slot_ge, ":var_2", 50, 1),
					(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
					(agent_get_wielded_item, ":wielded_item_var_2_1", ":var_2", 1),
					(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
					(eq, ":type_wielded_item_var_2_1", 7),
					(agent_get_attack_action, ":attack_action_var_2", ":var_2"),
					(eq, ":attack_action_var_2", 0),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_position, 1, ":var_2"),
					(assign, ":value", -1),
					(assign, ":value_2", 125),
					(try_for_agents, ":var_13"),
						(agent_is_alive, ":var_13"),
						(agent_is_human, ":var_13"),
						(agent_get_position, 2, ":var_13"),
						(neg|position_is_behind_position, 2, 1),
						(agent_get_team, ":team_var_13", ":var_13"),
						(neq, ":team_var_13", ":team_var_2"),
						(try_begin),
							(eq, ":team_var_2", 0),
							(assign, ":value_3", 2),
						(else_try),
							(eq, ":team_var_2", 2),
							(assign, ":value_3", 0),
						(else_try),
							(eq, ":team_var_2", 1),
							(assign, ":value_3", 3),
						(else_try),
							(eq, ":team_var_2", 3),
							(assign, ":value_3", 1),
						(try_end),
						(neq, ":team_var_13", ":value_3"),
						(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
						(le, ":distance_between_positions_1_2", ":value_2"),
						(assign, ":value_2", ":distance_between_positions_1_2"),
						(assign, ":value", ":var_13"),
					(try_end),
					(ge, ":value", 0),
					(agent_get_horse, ":horse_var_2", ":value"),
					(eq, ":horse_var_2", -1),
					(store_random_in_range, ":random_in_range_15_26", 15, 26),
					(agent_set_slot, ":var_2", 50, ":random_in_range_15_26"),
					(agent_set_animation, ":var_2", "anim_shield_bash"),
					(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
					(troop_get_type, ":type_wielded_item_var_2_1", ":troop_id_var_2"),
					(try_begin),
						(eq, ":type_wielded_item_var_2_1", 0),
						(agent_play_sound, ":var_2", "snd_man_yell"),
					(else_try),
						(eq, ":type_wielded_item_var_2_1", 1),
						(agent_play_sound, ":var_2", "snd_woman_yell"),
					(try_end),
					(agent_play_sound, ":value", "snd_wooden_hit_low_armor_high_damage"),
					(agent_get_defend_action, ":attack_action_var_2", ":value"),
					(try_begin),
						(eq, ":attack_action_var_2", 2),
						(neg|position_is_behind_position, 1, 2),
						(agent_get_wielded_item, ":wielded_item_var_2_1", ":value", 1),
						(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
						(eq, ":type_wielded_item_var_2_1", 7),
						(agent_set_animation, ":value", "anim_shield_bash"),
					(else_try),
						(agent_set_animation, ":value", "anim_shield_strike"),
					(try_end),
				(try_end),
				(agent_get_slot, ":var_2_50", ":var_2", 50),
				(val_sub, ":var_2_50", 1),
				(val_max, ":var_2_50", 0),
				(agent_set_slot, ":var_2", 50, ":var_2_50"),
			(try_end)
		])
	] + crouching_triggers ),

	("pagan_stronghold_attack", mtf_battle_mode, -1,
	"You attack the stronghold...",
	[(0, mtef_attackers|mtef_team_1, af_override_horse, aif_start_alarmed, 12, []),
	(0, mtef_attackers|mtef_team_1, af_override_horse, aif_start_alarmed, 0, []),
	(10, mtef_defenders|mtef_team_0, af_override_horse, aif_start_alarmed, 0, []),
	(11, mtef_defenders|mtef_team_0, af_override_horse, aif_start_alarmed, 7, []),
	(15, mtef_defenders|mtef_team_0, af_override_horse, aif_start_alarmed, 0, []),
	(40, mtef_defenders|mtef_team_0|mtef_archers_first, af_override_horse, aif_start_alarmed, 1, []),
	(41, mtef_defenders|mtef_team_0|mtef_archers_first, af_override_horse, aif_start_alarmed, 1, []),
	(42, mtef_defenders|mtef_team_0|mtef_archers_first, af_override_horse, aif_start_alarmed, 1, []),
	(43, mtef_defenders|mtef_team_0|mtef_archers_first, af_override_horse, aif_start_alarmed, 1, []),
	(44, mtef_defenders|mtef_team_0|mtef_archers_first, af_override_horse, aif_start_alarmed, 1, []),
	(45, mtef_defenders|mtef_team_0|mtef_archers_first, af_override_horse, aif_start_alarmed, 1, []),
	(46, mtef_defenders|mtef_team_0|mtef_archers_first, af_override_horse, aif_start_alarmed, 1, [])],
	[
					
	
    (7, 0, ti_once,
    [],
    [
	(call_script, "script_assign_traits"),
    ]),


    (0, 0, 1, 
    [
    ],
    [
	(call_script, "script_stumbling"),
    ]),






#Decapitations next level right here.
(ti_on_agent_hit, 0, 0, [(eq, "$dynamic_decap", 1),],
[
   (store_trigger_param_1, ":victim_agent"),
   (store_trigger_param_2, ":attacker_agent"),
   (store_trigger_param_3, ":damage"),
   (assign, ":attacker_item", reg0), ### Transfer the item ID to make sure it dosn't change while the script is running
   (copy_position, pos5, pos0), ### Transfer the position of the hit to make sure it dosn't change while the script is running
   (neq, ":victim_agent", -1),
   (try_begin), #-- Decapitations --#
      (agent_is_human, ":victim_agent"),
	  (ge, ":attacker_item", 0),
	  (assign, ":run", 0), ### Reset the run test variable
#	  (try_begin), ### Special weapons that can decap, ovevrrides the below conditions
#		  (this_or_next|eq, ":attacker_item", "itm_supercrossbow"),
#		  (eq, ":attacker_item", "itm_supersledge"),
#		  (assign, ":run", 1),
	  (try_begin),
		  #(neq, ":attacker_item", "itm_mace_1"), ### List of weapons that cannot decapitate
		  #(neq, ":attacker_item", "itm_mace_2"), ### This would be easier to do with a preperty check (for damage type), but I don't know if that is possible or not
		  #(neq, ":attacker_item", "itm_mace_3"),
		  #(neq, ":attacker_item", "itm_staff"), #Keeping active incase of script errors
		  (agent_get_action_dir, ":attack_dir", ":attacker_agent"), ### Makes sure the attack is either a left or right swing
		  (this_or_next|eq, ":attack_dir", 1), ### Right swing
		  (eq, ":attack_dir", 2), ### Left swing
		  (assign, ":run", 1),
	  (try_end),
	  (eq, ":run", 1), ### One of the checks were true, continue to run script
	  #(assign, reg1, ":damage"), #Debug messages
	  #(display_message, "@Damage: {reg1}"),
	  
	  (assign, ":run", 0), ### Reset the run test variable
	  (try_begin),
		(ge, ":damage", "$decap_damage"), ### 30 Minimum damage required to decapitate an agent
		(assign, ":run", 1),
		
#	  (else_try),  ### If debugging mode is on, this bypasses the damage requirement check
#		  (eq,"$g_decapitations_debugging", 1),
#		  (assign, ":run", 1),
#		  (display_message, "@Decap minimum DMG req bypassed"),
	  (try_end),
	  (eq, ":run", 1),
	  
	  (store_agent_hit_points, ":hp", ":victim_agent", 1),
	  (val_add, ":hp", 10), ### 10 Victim must have the negative of this hp or below after hit for the script to move on (never put this value below 0 since the agent has to be absolutley positvely dead)!
	  (ge, ":damage", ":hp"),
	  
	  
	  ### Compare the hit position to the agent's position
      (agent_get_position, pos4, ":victim_agent"),
      (get_distance_between_positions, ":distance", pos4, pos5), 
	  (agent_get_horse, ":is_mounted", ":victim_agent"),
	  (try_begin), ### If the agent is on horseback, these values are used (note that these values will not be exactly correct if the horse is very large or very small)
		(ge, ":is_mounted", 0), ### Will be -1 if no horse is to be found, so anything above means that the agent is mounted
		(assign, ":min_distance", 240), ### Minimum distance from the agent's horse's hooves from which the hit is valid (240 is an approximate value)
		(assign, ":max_distance", 260), ### Maximum distance from the agent's horse's hooves to which the hit is valid (260 is an approximate value)
	  (else_try),  ### If the agent is on foot, these values are used
	    (assign, ":min_distance", 160), ### Minimum distance from the agent's feet from which the hit is valid (160 = slightly below the neck)
	    (assign, ":max_distance", 176), ### Maximum distance from the agent's feet to which the hit is valid (176 = near the nose)
	  (try_end),
      (is_between, ":distance", ":min_distance", ":max_distance"), ### Check to see if the hit is within the allowed area
	  
	  
	  (assign, ":run", 0), ### Default variable value before damage test
	  (try_begin),
		  (store_div, ":chance", ":damage", "$decap_damage_divider"), ### Chance of decap is damage / 4 right now. Lower this value for higher chances of decapitation (or press M+Right Ctrl for debug more if you just want to test easy decaps in-game).
		  
		  #(assign, reg1, ":chance"), #Debug messages
		  #(display_message, "@Decap chance is: {reg1}"),
		  (store_random_in_range, ":diceroll", 0, "$decap_randomizer"), ### Randomizer, 0-100
		  
		  #(assign, reg1, ":diceroll"), #Debug messages
		  #(display_message, "@Diceroll: {reg1}"),
		  (le, ":diceroll", ":chance"), ### ":diceroll" must be less than or equal to ":chance", if it is, decapitation occurs!
		  
		  (assign, ":run", 1), ### SUCCESS!
		  
#     (else_try),  ### If debugging mode is on, bypass chance calculation
#		  (eq,"$g_decapitations_debugging", 1),
#		  (assign, ":run", 1),
#		  (display_message, "@Decap chance calc bypassed"),
	  (try_end),  
	  (eq, ":run", 1), ### Time for the fun stuff!

	  ### Gender test for spawning the right head type
	  (assign, ":head_type", "itm_cut_off_head_male"),
	  (agent_get_troop_id, ":victim_troop", ":victim_agent"),
	  (try_begin),
	    (ge, ":victim_troop", 0),
		(troop_get_type,":victim_gender",":victim_troop"),
		(eq, ":victim_gender", 1),
		(assign, ":head_type", "itm_cut_off_head_female"),
	  (try_end),
	  
	  ### Randomize the spawned head's and/or helmet's position and orientation
	  (store_random_in_range, ":z_rotation", 0, 360),
	  (store_random_in_range, ":y_rotation", -60, 60),
	  (store_random_in_range, ":x_pos", -90, 90),
	  (store_random_in_range, ":y_pos", -90, 90),
	  (position_rotate_z, pos4,":z_rotation"),
	  (position_rotate_y, pos4,":y_rotation"),
	  (position_move_x, pos4, ":x_pos"),
	  (position_move_y, pos4, ":y_pos"),
	  (position_set_z_to_ground_level, pos4),
	  (position_move_z, pos4, 5),
	  (set_spawn_position, pos4),
	  (assign, ":prunetime", 360), ### This is the time in seconds before the spawned head or helmet gets pruned (removed). Recommended to keep it above 0 to make sure it gets removed eventually or when the scene resets, to prevent performance issues.
	  
	  #(spawn_item, ":head_type", 0, ":prunetime"), ### This is the old way of spawning the head on the ground with the helmet, disabled because of the new dynamic heads. You can comment away (disable) the dynamic heads spawning further down and uncomment this line for a less performance-needing approach (with no physics involved).
	  
	  ### Does the agent have a helmet or hat equipped?
      (agent_get_item_slot, ":item", ":victim_agent", 4), #head slot
      (try_begin),
         (ge, ":item", 1), ### Does it?
         (agent_unequip_item, ":victim_agent", ":item"), ### Yes it does. Unequip it to allow replacement by the invisible helmet further down
		 (try_begin),
			 ### Don't spawn items with "itp_attatch_armature" flag: rigging causes floating bugs
			 ### This would be much better to do with an item flag check, but I haven't found any way to do that
			 #(neq, ":item", "itm_with_itp_attatch_armature"),
			 #(neg|is_between,":item","start_of_itm_range_with_itp_attatch_armature","end_of_itm_range_with_itp_attatch_armature"),
			#(set_spawn_position, pos4),
			(spawn_item, ":item", 0, ":prunetime"), ### Spawns the agent's currently equipped headgear on the dropped head's position
		 (try_end),
      (try_end),
	  
	  (agent_equip_item, ":victim_agent", "itm_invisible_head"), ### Put an invisible helmet on the agent's head to "remove" it
	  
	  
	  (agent_get_position, pos4, ":victim_agent"), ### Refreshes the agent's position
	  (position_move_z, pos4, ":min_distance"), ### Move to the where the neck used to be attached
	  
	  
	  ### Blood effects! The last variable is the strength. Lower or increase it for more/less blood (or tweak the particle effects themselves in "module_particle_systems.py").
      (particle_system_burst, "psys_blood_decapitation", pos4, 40), 
	  (particle_system_burst, "psys_game_blood", pos4, 10),
	  (particle_system_burst, "psys_game_blood_2", pos4, 10),
	  
	  (play_sound_at_position, "snd_decapitation_battle", pos4), ### Play some nasty sounds
	  
	  
	  ### Dynamic head spawning! See the bottom of "module_scene_props.py" for physics-related options and more.
	  (position_move_z, pos4, 20),
	  (set_spawn_position, pos4),
	  (assign, ":head_type", "spr_head_dynamic_male"),
	  (try_begin), ### Gender check (for determening the type of head)
		(eq, ":victim_gender", 1),
		(assign, ":head_type", "spr_head_dynamic_female"),
	  (try_end),
	  (spawn_scene_prop, ":head_type"),
	  
		#Addition check if we should allow the message to appears
			(eq, "$allow_decap_mess", 1), #Possible script error

	  ### This below is for the text that shows up when somebody is decapitated.
	  
	  ### Who decapitated who?
		(agent_get_troop_id, ":attacker_troop", ":attacker_agent"),
		(str_store_troop_name, s0, ":attacker_troop"),

		(agent_get_troop_id, ":victim_troop", ":victim_agent"),
		(str_store_troop_name, s1, ":victim_troop"),

	  
	  ### Colour check (friend or foe?)
	  (get_player_agent_no, ":my_agent"),
	  (agent_get_team, ":my_team", ":my_agent"),
	  (agent_get_team, ":victim_team", ":victim_agent"),
	  (try_begin), ### Display it!
		  (neq, ":my_team", ":victim_team"),
		  (display_message, "@>>> {s0} decapitated {s1}!", 0xFF33DD11), ## Green
	  (else_try),
		  (display_message, "@>>> {s0} decapitated {s1}!", 0xFFFF4422), ## Red
	  (try_end),
   (try_end), #-- Decapitations END --#
   
   ]),



	#AI Sound horn!
			(0.0, 0.0, 2.0,
		[
			##(store_random_in_range, ":horn_chance", 0, 22),
			#(eq, ":horn_chance", 0),
		],
		[
			(call_script, "script_formation_ai_sound_horn"),
		]),
	#AI Sound horn end!










			##################################################
##### troop_ratio_bar
##################################################
      (0, 0, ti_once, [
	  (eq, "$use_troopbars", 1),
	  ], [
	  (start_presentation, "prsnt_troop_ratio_bar"),
	  ]),
##################################################
##### troop_ratio_bar
##################################################
###Voice-over for Infantry, archers & Cavalry
		
		(0.0, 0.3, 0.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 29) #Everyone!
		],

		[
		(call_script, "script_identify_battle_voices_all")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 30) #Infantry
		],

		[
		(call_script, "script_identify_battle_voices_inf")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 31) #Archers
		],

		[
		(call_script, "script_identify_battle_voices_archers")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 32) #Cavalry
		],

		[
		(call_script, "script_identify_battle_voices_cav")
		]),
		###Voice-over for Infantry, archers & Cavalry	
		
		
		
					#####MUSICBOX SIEGE VARIANT
	(ti_after_mission_start, 0, ti_once, [ #680 #(ti_after_mission_start, 0, 680, [ #680
	(eq, "$additional_music", 1),
 #Obtained from Mod Options, affects mission templates, range: ALL SP Hostile music, co-op variant is additional_music_coop.
	],
		
  [
    #(play_track, "track_silence", 1), #Stop current module track
	   (music_set_situation, mtf_sit_fight), #Field
   #(music_set_situation, mtf_sit_siege), #Siege probably don't use
	(assign, "$music_timer", 0), #Patch
  #Randomize chance is 1 in a 5 (20%)
  
  #Field related extend to sieges
  (store_random_in_range, ":randomizer", 0, 2), #50% Chance of randomization
  (try_begin),
  (eq, ":randomizer", 0),
  (store_random_in_range, ":euro_randomizernext", 1, 11),
  (store_random_in_range, ":medi_randomizer", 1, 6),
  (store_random_in_range, ":arab_randomizer", 1, 8),
  (assign, "$track_count_field_siege", ":euro_randomizernext"),
  (assign, "$track_count_field_medi_siege", ":medi_randomizer"),
  (assign, "$track_count_field_arabs_siege", ":arab_randomizer"),
  (try_end),
  #Field related extend to sieges
  ]),
	
	(0, 0, 3, [ #680 #(ti_after_mission_start, 0, 680, [ #680
	(eq, "$additional_music", 1),
	 #Obtained from Mod Options, affects mission templates, range: ALL SP Hostile music, co-op variant is additional_music_coop.
	],
		
  [
		  #(display_message, "@Executing music code"),
		  (store_mission_timer_b, ":time_msec"),
		  #(assign, reg10, ":time_msec"),
          #(str_clear, s10),
          #(str_store_string, s10, "@Mission timer B for music: {reg10}"),
		  #(display_message, s10),
			#if next action time is lower than current time, play the sound
			(ge, ":time_msec", "$music_timer"),
			(reset_mission_timer_b), #Resetting mission timer, too.
			(assign, "$music_timer", 0),# Resetting value when track ends.
		
  #Euro only
     (try_begin),
      (ge, "$track_count_field_siege", 11),
      (assign, "$track_count_field_siege", 1),
    (else_try),
      (val_add, "$track_count_field_siege", 1),
	  (ge, "$track_count_field_siege", 11),
	  (assign, "$track_count_field_siege", 1),
    (try_end),
  #Euro only
  
  #Mediterrain only
  
       (try_begin),
      (ge, "$track_count_field_medi_siege", 6),
      (assign, "$track_count_field_medi_siege", 1),
    (else_try),
      (val_add, "$track_count_field_medi_siege", 1),
	  (ge, "$track_count_field_medi_siege", 6),
	  (assign, "$track_count_field_medi_siege", 1),
    (try_end),
  #Mediterrain only
  
  
  #Arabs only

       (try_begin),
      (ge, "$track_count_field_arabs_siege", 8),
      (assign, "$track_count_field_arabs_siege", 1),
    (else_try),
      (val_add, "$track_count_field_arabs_siege", 1),
	  (ge, "$track_count_field_arabs_siege", 8),
	  (assign, "$track_count_field_arabs_siege", 1),
    (try_end),
	#Arabs only
  
  #Pause between music length in seconds
  #(val_add, "$music_timer", 2),# 5 seconds added
  #Pause between music length in seconds
  
	(party_get_current_terrain, ":current_terrain_main_party", "p_main_party"), #Co-Op variant of this trigger should use scenes in_between rather than terrain because player can't obtain terrain in co-op sessions.
	(try_begin),
	(this_or_next|eq, ":current_terrain_main_party", 1), #rt_mountain
	(this_or_next|eq, ":current_terrain_main_party", 2), #rt_steppe
	(eq, ":current_terrain_main_party", 10), #rt_steppe_forest
	#Begin mediterrain music 5 tracks total
	(try_begin),
	(eq, "$track_count_field_medi_siege", 1), #
	(play_track, "track_medib3", 2),
	(val_add, "$music_timer", 209),# 1 second added
	(else_try),
	
	(eq, "$track_count_field_medi_siege", 2), #
	(play_track, "track_medib4", 2),
	(val_add, "$music_timer", 237),#
	(else_try),
	
	(eq, "$track_count_field_medi_siege", 3), #
	(play_track, "track_medib5", 2),
	(val_add, "$music_timer", 229),#
	(else_try),

	(eq, "$track_count_field_medi_siege", 4), #
	(play_track, "track_medis1", 2),
	(val_add, "$music_timer", 195),#
	(else_try),
	(eq, "$track_count_field_medi_siege", 5), #
	(play_track, "track_medis2", 2),
	(val_add, "$music_timer", 66),#
	(try_end),
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 3), #rt_plain
	(this_or_next|eq, ":current_terrain_main_party", 11), #rt_forest
	(eq, ":current_terrain_main_party", 9), #rt_mountain_forest
	#Begin Euro Music
	(try_begin),
	(eq, "$track_count_field_siege", 1), #
	(play_track, "track_euros1", 2),
	(val_add, "$music_timer", 162),#
	(else_try),
	(eq, "$track_count_field_siege", 2), #
	(play_track, "track_euros2", 2),
	(val_add, "$music_timer", 221),#
	(else_try),
	
	(eq, "$track_count_field_siege", 3), #
	(play_track, "track_euros3", 2),
	(val_add, "$music_timer", 190),#
	(else_try),
	
	(eq, "$track_count_field_siege", 4), #
	(play_track, "track_euros4", 2),
	(val_add, "$music_timer", 317),#
	(else_try),
	
	(eq, "$track_count_field_siege", 5), #
	(play_track, "track_euros5", 2),
	(val_add, "$music_timer", 59),#
		(else_try),
	
	(eq, "$track_count_field_siege", 6), #
	(play_track, "track_euros6", 2),
	(val_add, "$music_timer", 59),#
		(else_try),
	
	(eq, "$track_count_field_siege", 7), #
	(play_track, "track_euros7", 2),
	(val_add, "$music_timer", 85),#
		(else_try),
	
	(eq, "$track_count_field_siege", 8), #
	(play_track, "track_euros8", 2),
	(val_add, "$music_timer", 82),#
		(else_try),
	
	(eq, "$track_count_field_siege", 9), #
	(play_track, "track_euros9", 2),
	(val_add, "$music_timer", 199),#
		(else_try),
	
	(eq, "$track_count_field_siege", 10), #
	(play_track, "track_euros10", 2),
	(val_add, "$music_timer", 281),#
	(try_end),
	
	
	
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 4), #rt_snow
	(this_or_next|eq, ":current_terrain_main_party", 12), #rt_snow_forest
	(eq, ":current_terrain_main_party", 7), #rt_bridge
	#Begin Euro Music
	(try_begin),
	(eq, "$track_count_field_siege", 1), #
	(play_track, "track_euros1", 2),
	(val_add, "$music_timer", 162),#
	(else_try),
	(eq, "$track_count_field_siege", 2), #
	(play_track, "track_euros2", 2),
	(val_add, "$music_timer", 221),#
	(else_try),
	
	(eq, "$track_count_field_siege", 3), #
	(play_track, "track_euros3", 2),
	(val_add, "$music_timer", 190),#
	(else_try),
	
	(eq, "$track_count_field_siege", 4), #
	(play_track, "track_euros4", 2),
	(val_add, "$music_timer", 317),#
	(else_try),
	
	(eq, "$track_count_field_siege", 5), #
	(play_track, "track_euros5", 2),
	(val_add, "$music_timer", 59),#
		(else_try),
	
	(eq, "$track_count_field_siege", 6), #
	(play_track, "track_euros6", 2),
	(val_add, "$music_timer", 59),#
		(else_try),
	
	(eq, "$track_count_field_siege", 7), #
	(play_track, "track_euros7", 2),
	(val_add, "$music_timer", 85),#
		(else_try),
	
	(eq, "$track_count_field_siege", 8), #
	(play_track, "track_euros8", 2),
	(val_add, "$music_timer", 82),#
		(else_try),
	
	(eq, "$track_count_field_siege", 9), #
	(play_track, "track_euros9", 2),
	(val_add, "$music_timer", 199),#
		(else_try),
	
	(eq, "$track_count_field_siege", 10), #
	(play_track, "track_euros10", 2),
	(val_add, "$music_timer", 281),#
	(try_end),
	
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 5), #rt_desert
	(eq, ":current_terrain_main_party", 13), #rt_desert_forest
	#Begin arab music
	(try_begin),
	(eq, "$track_count_field_arabs_siege", 1), #
	(play_track, "track_arabs1",  2),
	(val_add, "$music_timer", 198),#
	(else_try),
	(eq, "$track_count_field_arabs_siege", 2), #
	(play_track, "track_arabs2", 2),
	(val_add, "$music_timer", 112),#
	
	(else_try),
	(eq, "$track_count_field_arabs_siege", 3), #
	(play_track, "track_medis1", 2),
	(val_add, "$music_timer", 195),#
	(else_try),
	
	(eq, "$track_count_field_arabs_siege", 4), #
	(play_track, "track_arabs4", 2),
	(val_add, "$music_timer", 79),#
		(else_try),
	
	(eq, "$track_count_field_arabs_siege", 5), #
	(play_track, "track_arabs5", 2),
	(val_add, "$music_timer", 394),#
	
			(else_try),
	(eq, "$track_count_field_arabs_siege", 6), #
	(play_track, "track_arabs3", 2),
	(val_add, "$music_timer", 80),#
			(else_try),
	(eq, "$track_count_field_arabs_siege", 7), #
	(play_track, "track_medis2", 2),
	(val_add, "$music_timer", 66),#
	(try_end),
	(try_end),
	
  ]),
	
	#####MUSICBOX END
			#####Camera mode by Rubik None-Coop Version Begin
		(0, 0, 0, [(eq, "$extended_camera_mode", 1)],
  [
    (get_player_agent_no, ":player_agent"),
    (agent_get_look_position, pos1, ":player_agent"),
    (position_move_z, pos1, "$g_camera_z"),
    (position_move_y, pos1, "$g_camera_y"),
    (agent_get_horse, ":horse_agent", ":player_agent"),
    (try_begin),
      (ge, ":horse_agent", 0),
      (position_move_z, pos1, 80),
    (try_end),
    (mission_cam_set_position, pos1),
    (try_begin),
      (key_is_down, key_left_control),
      (assign, ":move_val", 50),
    (else_try),
      (assign, ":move_val", 10),
    (try_end),
    (try_begin),
      (key_clicked, key_up),
      (mission_cam_set_mode, 1),
      (val_add, "$g_camera_z", ":move_val"),
    (else_try),
      (key_clicked, key_down),
      (mission_cam_set_mode, 1),
      (val_sub, "$g_camera_z", ":move_val"),
    (else_try),
      (key_clicked, key_left),
      (mission_cam_set_mode, 1),
      (val_add, "$g_camera_y", ":move_val"),
    (else_try),
      (key_clicked, key_right),
      (mission_cam_set_mode, 1),
      (val_sub, "$g_camera_y", ":move_val"),
    (try_end),
    (try_begin),
      (this_or_next|game_key_clicked, gk_view_char),
      (this_or_next|game_key_clicked, gk_zoom),
      (game_key_clicked, gk_cam_toggle),
      (mission_cam_set_mode, 0),
    (try_end),
  ]),
  #####Camera mode by Rubik None-Coop Version End
		
		
		
		
#		#####MUSICBOX DEBUG
#		(0, 0, 10, [
#		],
#  [
#		(party_get_current_terrain, ":current_terrain_main_party", "p_main_party"),
#	      #BEGIN DEBUG
#          (assign, reg10, ":current_terrain_main_party"),
#          (str_clear, s10),
#          (str_store_string, s10, "@Terrain: {reg10}"),
#		  (display_message, s10),
#          #END DEBUG
#  ]),

		
		
###########Torch by troycall/Envious Arm begin

																	#(-25.0, 0.0, 0.0, #Enabling this forces random chance to be 100%
																	#(ti_on_agent_spawn, 0, 0, #Enabling this forces random chance to be 100%
																	(20, 0, ti_once, #Proper one, but reinforcements do not get assigned torches.
        [
          (mission_tpl_are_all_agents_spawned), #From VC Header_Operations to prevent weird behavior.
          (is_currently_night) #Check if currently night time
        ],
        [

		  ####DEFAULT
		   #(try_for_agents, ":agent"),
            #(agent_get_wielded_item, ":item", ":agent", 1),
            #(gt, ":item", -1),
            #(agent_unequip_item, ":agent", ":item"),
            #(agent_equip_item, ":agent", "itm_torch"),
            #(agent_set_wielded_item, ":agent", "itm_torch"),           
          #(try_end),
		  ####END DEFAULT
		  
		  (try_for_agents, ":agent"), #Try for agents...
		  #Extension
		  (agent_is_alive, ":agent"), #For performance reasons
		  #End
		  (agent_is_human, ":agent"), #Performance
          (agent_is_non_player, ":agent"), #Uncommenting this includes player on spawning with torch, may be necessary to uncomment at module_coop_mission_templates.
		  


		 ##########Default Order
		 #######		  (agent_is_human, ":agent"), #Performance
         #######(agent_is_non_player, ":agent"), #Uncommenting this includes player on spawning with torch, may be necessary to uncomment at module_coop_mission_templates.
		 #######
		 ########Extension
		 #######(agent_is_active, ":agent"), #For performance reasons
		 #######(agent_is_alive, ":agent"), #For performance reasons
		 ########End
		  ############
		  		  
				#  (try_begin),
				  
		#		          (agent_get_wielded_item, ":rhand", ":agent", 0),  #Right hand
		#  (assign, ":rhanditem", 0), # Preparing local variable.
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000000000100),
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000004000000),
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000008000000),
		#  (neg|item_has_capability, ":rhanditem", 0x0000000170000000),
		# 

		  #
		  
          #BEGIN DEBUG
          #(assign, reg10, ":agent"),
          #(str_clear, s10),
          #(str_store_string, s10, "@New agent: {reg10}"),
          #END DEBUG
		  #(agent_get_wielded_item, ":rhanditem", ":agent", 0),  #Obtain right hand item
         (agent_get_wielded_item, ":rhanditem", ":agent", 0),  #Obtain right hand item
          (agent_get_wielded_item, ":item", ":agent", 1), # Left hand: shield or -1
          #BEGIN DEBUG
          #(assign, reg10, ":item"),
          #(str_store_string, s10, "@{s10}. LH: {reg10}"),
		  #(display_message, "@Main block Phase A finalized"),
          #END DEBUG
		  #(item_get_type, ":type", ":rhanditem"), #If right hand item is polearm, stop reading rest of code.
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_club_with_spike_head", "itm_wooden_shield"),
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_light_lance", "itm_wooden_shield"),
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_light_lance", "itm_wooden_shield"),
          (try_begin),
		  (neg|is_between, ":rhanditem", "itm_club_with_spike_head", "itm_wooden_shield"),
		  (neg|is_between, ":rhanditem", "itm_lance_banner_jer", "itm_cross_end"), #Update item slots
		  #(neg|troop_has_item_equipped, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		  #(neq, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		  
		# (neg|eq, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		    (gt, ":item", -1), #Check if the agent wields any item in the left hand, this or next.
            #(neq, ":item", -1),# Check if the agent wields any item in the left hand
            (neq, ":item", "itm_torch"), #If agent is using torch, ignore him.
            #(display_message, "@PASSED neg tests"), #Debug message

			
            (store_random_in_range, ":chance", 1, 101), # Chance of item being assigned
            (try_begin),
			  (le, ":chance", "$torch_chance"), #25% = 25
				#lt           = neg | ge # less than		-- (lt,<value>,<value>),
				#neq          = neg | eq # not equal to		-- (neq,<value>,<value>),
				#le           = neg | gt # less or equal to	-- (le,<value>,<value>),
              (agent_unequip_item, ":agent", ":item"),
			  
              #BEGIN DEBUG
              #(str_store_item_name, s11, ":item"),
              #(str_store_string, s10, "@{s10}. Removed item: {s11}"),
			  #(display_message, "@(agent_unequip_item, :agent, :item PASSED."),
              #END DEBUG

               
                (agent_equip_item, ":agent", "itm_torch"), #Tell agent to equip the item
                 #(display_message, "@(agent_equip_item, :agent, :item PASSED."),
                  (agent_set_wielded_item, ":agent", "itm_torch"), #Required for infantry only, cavarly can work without it.
                  #(display_message, "@(agent_set_wielded_item, :agent, :item PASSED."),
                 
                 
                  #BEGIN DEBUG
                #(else_try),
                  #(str_store_string, s10, "@{s10}. Failed random chance."),
                (try_end),
               
              #(else_try),
                #(str_store_string, s10, "@{s10}. Invalid agent for torch"),
              (try_end),
             
              #(display_message, s10),
			  (try_end),
              #END DEBUG
			#  (try_end),
      ]),
	  
###########Torch by troycall/Envious Arm end


		(-19.0, 0.0, 0.0,
		[],

		[
			(team_set_relation, 0, 2, 1),
			(team_set_relation, 1, 3, 1),
			(call_script, "script_change_banners_and_chest")
		]),

		(-21.0, 0.0, 0.0,
		[],

		[
			(try_begin),
				(eq, "$g_battle_won", 1),
				(call_script, "script_count_mission_casualties_from_agents"),
				(finish_mission, 0),
			(else_try),
				(eq, "$pin_player_fallen", 1),
				(eq, "$g_battle_won", 0),
				(call_script, "script_simulate_retreat", 5, 20, 1),
				(str_store_string, 5, "str_retreat"),
				(call_script, "script_count_mission_casualties_from_agents"),
				(set_mission_result, -1),
				(finish_mission, 0),
			(else_try),
				(eq, "$pin_player_fallen", 1),
				(eq, "$g_battle_won", -1),
				(call_script, "script_count_mission_casualties_from_agents"),
				(finish_mission, 0),
			(else_try),
				(call_script, "script_cf_check_enemies_nearby"),
				(question_box, "str_do_you_want_to_retreat"),
			(else_try),
				(get_player_agent_no, ":player_agent_no"),
				(neg|agent_is_alive, ":player_agent_no"),
				(call_script, "script_cf_check_enemies_nearby"),
				(question_box, "str_do_you_want_to_retreat"),
			(else_try),
				(display_message, "str_can_not_retreat"),
			(try_end)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(call_script, "script_troop_agent_set_banner", "tableau_game_troop_label_banner", ":trigger_param_1", ":troop_id_trigger_param_1")
		]),

		(-8.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(eq, ":trigger_param_1", 0),
			(assign, "$pin_player_fallen", 0),
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_team, ":team_player_agent_no", ":player_agent_no"),
			(try_begin),
				(neq, "$attacker_team", ":team_player_agent_no"),
				(neq, "$attacker_team_2", ":team_player_agent_no"),
				(str_store_string, 5, "str_siege_continues"),
				(call_script, "script_simulate_retreat", 8, 15, 0),
			(else_try),
				(str_store_string, 5, "str_retreat"),
				(call_script, "script_simulate_retreat", 5, 20, 0),
			(try_end),
			(call_script, "script_count_mission_casualties_from_agents"),
			(finish_mission, 0)
		]),

		(0.0, 0.0, ti_once,
		[],

		[
			(assign, "$g_battle_won", 0),
			(assign, "$defender_reinforcement_stage", 0),
			(assign, "$attacker_reinforcement_stage", 0),
			(assign, "$dmod_current_agent", -1),
			(assign, "$dmod_move_camera", -1),
			(try_begin),
			(eq, "$additional_music", 0),
			(call_script, "script_music_set_situation_with_culture", 262144),
			(try_end),
		]),

		(30.0, 0.0, 0.0,
		[],

		[]),

		(0.0, 0.0, ti_once,
		[
			(assign, "$defender_team", 0),
			(assign, "$attacker_team", 1),
			(assign, "$defender_team_2", 2),
			(assign, "$attacker_team_2", 3)
		],

		[]),

		(0.0, 0.0, ti_once,
		[
			(set_show_messages, 0),
			(entry_point_get_position, 10, 10),
			(try_for_range, ":number", 0, 9),
				(neq, ":number", 1),
				(team_give_order, "$defender_team", ":number", 0),
				(team_give_order, "$defender_team", ":number", 7),
				(team_give_order, "$defender_team", ":number", 7),
				(team_give_order, "$defender_team", ":number", 7),
				(team_give_order, "$defender_team_2", ":number", 0),
				(team_give_order, "$defender_team_2", ":number", 7),
				(team_give_order, "$defender_team_2", ":number", 7),
				(team_give_order, "$defender_team_2", ":number", 7),
			(try_end),
			(team_give_order, "$defender_team", 1, 11),
			(team_set_order_position, "$defender_team", 9, 10),
			(team_give_order, "$defender_team_2", 1, 11),
			(team_set_order_position, "$defender_team_2", 9, 10),
			(team_give_order, "$attacker_team", 9, 2),
			(team_give_order, "$attacker_team_2", 9, 2),
			(set_show_messages, 1)
		],

		[]),

		(0.0, 2.0, ti_once,
		[],

		[
			(try_for_agents, ":var_1"),
				(agent_set_slot, ":var_1", slot_agent_is_not_reinforcement, 1),
			(try_end)
		]),

		(3.0, 0.0, 0.0,
		[],

		[
			(store_mission_timer_a, ":mission_timer_a"),
			(ge, ":mission_timer_a", 10),
			(try_begin),
				(store_mul, ":value", "$attacker_reinforcement_stage", 2),
				(this_or_next|lt, "$defender_reinforcement_stage", 14),
				(le, "$defender_reinforcement_stage", ":value"),
				(store_normalized_team_count, ":normalized_team_count_0", 0),
				(lt, ":normalized_team_count_0", 10),
				(add_reinforcements_to_entry, 4, 7),
				(val_add, "$defender_reinforcement_stage", 1),
			(try_end)
		]),

		(2.0, 0.0, 0.0,
		[
			(gt, "$defender_reinforcement_stage", 0)
		],

		[
			(call_script, "script_siege_move_archers_to_archer_positions")
		]),

		(3.0, 0.0, 0.0,
		[
			(assign, ":value", 1),
			(try_begin),
				(ge, "$attacker_reinforcement_stage", 10),
				(store_mul, ":value_2", "$defender_reinforcement_stage", 2),
				(gt, "$attacker_reinforcement_stage", ":value_2"),
				(assign, ":value", 0),
			(try_end),
			(eq, ":value", 1),
			(store_mission_timer_a, ":mission_timer_a"),
			(ge, ":mission_timer_a", 10),
			(store_normalized_team_count, ":normalized_team_count_1", 1),
			(lt, ":normalized_team_count_1", 6)
		],

		[
			(add_reinforcements_to_entry, 1, 8),
			(val_add, "$attacker_reinforcement_stage", 1)
		]),

		(2.0, 0.0, ti_once,
		[],

		[
			(set_show_messages, 0),
			(try_for_range, ":number", 0, 9),
				(team_give_order, "$attacker_team", ":number", 12),
			(try_end),
			(try_for_range, ":number", 0, 9),
				(team_give_order, "$attacker_team_2", ":number", 12),
			(try_end),
			(set_show_messages, 1)
		]),

		(2.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_check_friendly_kills")
		]),

		(5.0, 60.0, ti_once,
		[
			(store_mission_timer_a, reg1),
			(ge, reg1, 10),
			(all_enemies_defeated, 5),
			(set_mission_result, 1),
			(display_message, "str_msg_battle_won"),
			#(play_sound, "snd_won_battle"), #Moved to victorious main menu
			(assign, "$g_battle_won", 1),
			(assign, "$g_battle_result", 1),
			(call_script, "script_play_victorious_sound")
		],

		[
			(call_script, "script_count_mission_casualties_from_agents"),
			(finish_mission, 1)
		]),

		(10.0, 0.0, 0.0, # Battle won/lost messages!
		[],

		[
			(eq, "$g_battle_won", 1),
			#(play_sound, "snd_won_battle"), #Moved to victorious main menu
			(display_message, "str_msg_battle_won")
		]),

		(120.0, 0.0, 0.0,
		[],

		[
			(try_for_agents, ":var_1"),
				(agent_is_alive, ":var_1"),
				(agent_is_human, ":var_1"),
				(agent_get_team, ":team_var_1", ":var_1"),
				(this_or_next|eq, ":team_var_1", "$defender_team"),
				(eq, ":team_var_1", "$defender_team_2"),
				(agent_refill_ammo, ":var_1"),
			(try_end)
		]),

		(1.0, 4.0, ti_once,
		[
			(eq, "$enable_deahtcam", 1),
			(main_hero_fallen)
		],

		[
			(assign, "$pin_player_fallen", 1),
			(neq, "$use_player_auxiliary", 1),
			(display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
			(display_message, "@If you choose to watch the fight you can use the mouse scroll up and down to switch between troop view or AWDS keys for free camera view.")
		]),

		(0.0, 0.0, 0.0,
		[],

		[
			(game_key_clicked, 22),
			(neg|is_presentation_active, "prsnt_battle"),
			(start_presentation, "prsnt_battle")
		]),

		(0.1, 0.0, 0.0,
		[],

		[
			(is_presentation_active, "prsnt_battle"),
			(call_script, "script_update_order_panel_statistics_and_map")
		]),

		(-22.0, 0.0, 0.0,
		[
			(display_message, "str_cant_use_inventory_now")
		],

		[]),

		(1.0, 60.0, ti_once,
		[
			(store_mission_timer_a, reg1),
			(ge, reg1, 10),
			(main_hero_fallen),
			(assign, ":var_1", 0),
			(try_for_agents, ":var_2"),
				(agent_is_ally, ":var_2"),
				(agent_is_alive, ":var_2"),
				(val_add, ":var_1", 1),
			(try_end),
			(eq, ":var_1", 0),
			(set_mission_result, -1),
						(try_begin),
			(eq, "$colored_messages", 1),
			(display_message, "@Battle lost...", 0x00f78078),
			(else_try),
			(display_message, "@Battle lost..."),
			(try_end),
			(assign, "$g_battle_won", -1),
			(assign, "$g_battle_result", -1)
		],

		[
			(call_script, "script_count_mission_casualties_from_agents"),
			(finish_mission, 0)
		]),

		(10.0, 0.0, 0.0, # Battle won/lost messages!
		[],

		[
			(eq, "$g_battle_won", -1),
						(try_begin),
			(eq, "$colored_messages", 1),
			(display_message, "@Battle lost! Press tab key to leave...", 0x00f78078),
			(else_try),
			(display_message, "@Battle lost! Press tab key to leave..."),
			(try_end),
			#(play_sound, "snd_battle_sounds"), #Moved to your companions carry you away from the fighting menu
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(gt, "$dmod_current_agent", 0),
			(eq, "$setting_use_dmod", 1),
			(eq, "$dmod_move_camera", 1),
			(agent_get_position, 1, "$dmod_current_agent"),
			(position_move_z, 1, 300),
			(position_move_y, 1, -300),
			(agent_get_horse, ":horse_l_dmod_current_agent", "$dmod_current_agent"),
			(try_begin),
				(ge, ":horse_l_dmod_current_agent", 0),
			(try_end),
			(try_begin),
				(eq, "$pop_camera_on", 1),
				(assign, "$pop_camera_on", 0),
			(try_end),
			(mission_cam_set_position, 1),
			(mission_cam_set_mode, 1),
			(set_fixed_point_multiplier, 100)
		],

		[]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(eq, "$setting_use_dmod", 1),
			(key_clicked, 238),
			(main_hero_fallen),
			(call_script, "script_dmod_cycle_forwards")
		],

		[]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(eq, "$setting_use_dmod", 1),
			(key_clicked, 239),
			(main_hero_fallen),
			(call_script, "script_dmod_cycle_backwards")
		],

		[]),

		(0.0, 0.0, ti_once,
		[],

		[
			(assign, "$pop_camera_on", 0),
			(assign, "$pop_camera_mouse_center_x", 500),
			(assign, "$pop_camera_mouse_center_y", 375),
			(assign, "$pop_camera_mouse_x", "$pop_camera_mouse_center_x"),
			(assign, "$pop_camera_mouse_y", "$pop_camera_mouse_center_y"),
			(assign, "$pop_camera_mouse_counter", 0)
		]),

		(0.0, 4.0, ti_once,
		[
			(eq, "$enable_deahtcam", 1),
			(main_hero_fallen),
			(eq, "$pop_camera_on", 0),
			(assign, "$tom_sand_storm", 0)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_position, 1, ":player_agent_no"),
			(position_get_x, ":position_x_1", 1),
			(position_get_y, ":position_y_1", 1),
			(init_position, 47),
			(position_set_x, 47, ":position_x_1"),
			(position_set_y, 47, ":position_y_1"),
			(position_set_z_to_ground_level, 47),
			(position_move_z, 47, 250),
			(mission_cam_set_mode, 1, 0, 0),
			(mission_cam_set_position, 47),
			(assign, "$pop_camera_rotx", 0),
			(assign, "$pop_camera_on", 1)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(this_or_next|eq, "$dmod_move_camera", 1),
			(eq, "$pop_camera_on", 1),
			(this_or_next|game_key_clicked, 0),
			(this_or_next|game_key_is_down, 0),
			(this_or_next|game_key_clicked, 1),
			(this_or_next|game_key_is_down, 1),
			(this_or_next|game_key_clicked, 2),
			(this_or_next|game_key_is_down, 2),
			(this_or_next|game_key_clicked, 3),
			(game_key_is_down, 3)
		],

		[
			(try_begin),
				(eq, "$dmod_move_camera", 1),
				(mission_cam_set_mode, 1, 0, 0),
				(assign, "$pop_camera_rotx", 0),
				(assign, "$pop_camera_on", 1),
				(assign, "$dmod_move_camera", 0),
			(try_end),
			(mission_cam_get_position, 47),
			(assign, ":value", 0),
			(assign, ":value_2", 0),
			(try_begin),
				(this_or_next|game_key_clicked, 0),
				(game_key_is_down, 0),
				(assign, ":value_2", 10),
			(try_end),
			(try_begin),
				(this_or_next|game_key_clicked, 1),
				(game_key_is_down, 1),
				(assign, ":value_2", -10),
			(try_end),
			(try_begin),
				(this_or_next|game_key_clicked, 2),
				(game_key_is_down, 2),
				(assign, ":value", -10),
			(try_end),
			(try_begin),
				(this_or_next|game_key_clicked, 3),
				(game_key_is_down, 3),
				(assign, ":value", 10),
			(try_end),
			(position_move_x, 47, ":value"),
			(position_move_y, 47, ":value_2"),
			(mission_cam_set_position, 47)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(eq, "$pop_camera_on", 1),
			(neg|is_presentation_active, "prsnt_battle"),
			(mouse_get_position, 1),
			(set_fixed_point_multiplier, 1000),
			(position_get_x, reg1, 1),
			(position_get_y, reg2, 1),
			(set_fixed_point_multiplier, 100),
			(this_or_next|neq, reg1, "$pop_camera_mouse_center_x"),
			(neq, reg2, "$pop_camera_mouse_center_y")
		],

		[
			(assign, ":value", 1),
			(try_begin),
				(eq, reg1, "$pop_camera_mouse_x"),
				(eq, reg2, "$pop_camera_mouse_y"),
				(val_add, "$pop_camera_mouse_counter", 1),
				(try_begin),
					(gt, "$pop_camera_mouse_counter", 50),
					(assign, "$pop_camera_mouse_center_x", reg1),
					(assign, "$pop_camera_mouse_center_y", reg2),
					(assign, "$pop_camera_mouse_counter", 0),
				(try_end),
				(assign, ":value", 0),
			(try_end),
			(eq, ":value", 1),
			(assign, "$pop_camera_mouse_counter", 0),
			(assign, "$pop_camera_mouse_x", reg1),
			(assign, "$pop_camera_mouse_y", reg2),
			(mission_cam_get_position, 47),
			(store_sub, ":value_2", "$pop_camera_mouse_center_x", reg1),
			(store_sub, ":value_3", reg2, "$pop_camera_mouse_center_y"),
			(try_for_range, ":number", 0, 2),
				(try_begin),
					(eq, ":number", 1),
					(assign, ":value_2", ":value_3"),
				(try_end),
				(this_or_next|lt, ":value_2", -2),
				(gt, ":value_2", 2),
				(assign, ":value_4", 1),
				(try_begin),
					(lt, ":value_2", 0),
					(assign, ":value_4", -1),
				(try_end),
				(val_abs, ":value_2"),
				(val_sub, ":value_2", 2),
				(convert_to_fixed_point, ":value_2"),
				(store_sqrt, ":value_2", ":value_2"),
				(convert_from_fixed_point, ":value_2"),
				(val_clamp, ":value_2", 1, 64),
				(val_mul, ":value_2", ":value_4"),
				(try_begin),
					(eq, ":number", 0),
					(store_mul, ":value_5", "$pop_camera_rotx", -1),
					(position_rotate_x, 47, ":value_5"),
					(position_rotate_z, 47, ":value_2"),
					(position_rotate_x, 47, "$pop_camera_rotx"),
				(try_end),
				(try_begin),
					(eq, ":number", 1),
					(position_rotate_x, 47, ":value_2"),
					(val_add, "$pop_camera_rotx", ":value_2"),
				(try_end),
			(try_end),
			(mission_cam_set_position, 47)
		]),

		(-26.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(store_trigger_param_2, ":trigger_param_2"),
			(store_trigger_param_3, ":trigger_param_3"),
			(try_begin),
				(ge, ":trigger_param_1", 0),
				(neg|agent_is_ally, ":trigger_param_1"),
				(agent_is_human, ":trigger_param_1"),
				(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
				(str_store_troop_name, 6, ":troop_id_trigger_param_1"),
				(assign, reg0, ":trigger_param_1"),
				(assign, reg1, ":trigger_param_2"),
				(assign, reg2, ":trigger_param_3"),
				(agent_get_team, reg3, ":trigger_param_1"),
				(party_add_members, "p_total_enemy_casualties", ":troop_id_trigger_param_1", 1),
				(eq, ":trigger_param_3", 1),
				(party_wound_members, "p_total_enemy_casualties", ":troop_id_trigger_param_1", 1),
			(try_end)
		]),

		(0.0, 0.0, 5.0,
		[],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_non_player, ":var_2"), #Agent must not be a player V1.0998D2
				(neq, ":player_agent_no", ":var_2"),
				(agent_slot_eq, ":var_2", 100, 0),
				(agent_is_alive, ":var_2"),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(agent_get_ammo, ":ammo_var_2", ":var_2"),
				(le, ":ammo_var_2", 0),
				(try_begin),
					(gt, ":horse_var_2", 0),
					(neg|troop_is_guarantee_ranged, ":troop_id_var_2"),
					(agent_get_wielded_item, ":wielded_item_var_2_0", ":var_2", 0),
					(neg|is_between, ":wielded_item_var_2_0", "itm_light_lance", "itm_spear_a"),
					(try_for_range, ":item", "itm_light_lance", "itm_spear_a"),
						(agent_set_wielded_item, ":var_2", ":item"),
					(try_end),
				(else_try),
					(eq, "$tom_use_banners", 1),
					(try_for_range, ":item", 1198, 1202),
						(agent_set_wielded_item, ":var_2", ":item"),
					(try_end),
					(agent_get_wielded_item, ":item", ":var_2", 0),
					(is_between, ":item", 1198, 1202),
				(else_try),
					(neg|troop_is_guarantee_ranged, ":troop_id_var_2"),
					(le, ":horse_var_2", 0),
					(agent_get_wielded_item, ":wielded_item_var_2_0", ":var_2", 0),
					(is_between, ":wielded_item_var_2_0", "itm_light_lance", "itm_spear_a"),
					(try_for_range, reg0, 0, 4),
						(agent_get_item_slot, ":item", ":var_2", reg0),
						(is_between, ":item", 1, "itm_cross_end"), #Previously itm_items_end
						(neg|is_between, ":item", "itm_light_lance", "itm_bamboo_spear"),
						(item_get_type, ":type_item", ":item"),
						(this_or_next|eq, ":type_item", 3),
						(this_or_next|eq, ":type_item", 4),
						(eq, ":type_item", 2),
						(agent_set_wielded_item, ":var_2", ":item"),
					(try_end),
				(else_try),
					(neg|troop_is_guarantee_ranged, ":troop_id_var_2"),
					(le, ":horse_var_2", 0),
					(agent_get_wielded_item, ":wielded_item_var_2_0", ":var_2", 0),
					(neg|is_between, ":wielded_item_var_2_0", "itm_bamboo_spear", "itm_wooden_shield"),
					(try_for_range, ":item", "itm_bamboo_spear", "itm_wooden_shield"),
						(agent_set_wielded_item, ":var_2", ":item"),
					(try_end),
				(else_try),
					(troop_is_guarantee_ranged, ":troop_id_var_2"),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_division, ":division_var_2", ":var_2"),
					(team_get_hold_fire_order, ":hold_fire_order_team_var_2_division_var_2", ":team_var_2", ":division_var_2"),
					(neq, ":hold_fire_order_team_var_2_division_var_2", 1),
					(is_between, ":wielded_item_var_2_0", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_0", ":wielded_item_var_2_0"),
					(this_or_next|le, ":wielded_item_var_2_0", -1),
					(this_or_next|neq, ":type_wielded_item_var_2_0", 10),
					(this_or_next|neq, ":type_wielded_item_var_2_0", 9),
					(neq, ":type_wielded_item_var_2_0", 8),
					(call_script, "script_get_closest_enemy_distance_new", ":var_2", ":team_var_2", 300),
					(assign, ":var_13", reg1),
					(gt, ":var_13", 300),
					(assign, ":value", 4),
					(try_for_range, reg0, 0, ":value"),
						(agent_get_item_slot, ":item_slot_var_2_reg0", ":var_2", reg0),
						(is_between, ":item_slot_var_2_reg0", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_0", ":item_slot_var_2_reg0"),
						(this_or_next|eq, ":type_wielded_item_var_2_0", 10),
						(this_or_next|eq, ":type_wielded_item_var_2_0", 8),
						(eq, ":type_wielded_item_var_2_0", 9),
						(agent_set_wielded_item, ":var_2", ":item_slot_var_2_reg0"),
						(assign, ":value", -1),
					(try_end),
				(try_end),
			(try_end)
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(assign, "$tom_sand_storm", 0),
			(call_script, "script_change_rain_or_snow"),
			(set_fixed_point_multiplier, 100),
			(try_begin),
				(is_currently_night),
				#(set_shader_param_float, "@vFresnelMultiplier", 15),
			(else_try),
				#(set_shader_param_float, "@vFresnelMultiplier", 50),
			(try_end)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$tom_sand_storm", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_position, 0, ":player_agent_no"),
			(position_set_z_to_ground_level, 0),
			(position_get_z, ":position_z_0", 0),
			(val_add, ":position_z_0", 400),
			(position_set_z, 0, ":position_z_0"),
			(particle_system_burst, "psys_desert_storm", 0, 2),
			(set_fixed_point_multiplier, 100)
		]),

#		(0.0, 2.0, ti_once,
#		[
#			(eq, "$tom_use_banners", 1)
#		],
#
#		[
#			(call_script, "script_set_flag_carriers")
#		]),

		(10.0, 0.0, 0.0,
		[
			(eq, "$tom_use_banners", 1),
			(eq, "$tom_bonus_banners", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_range, ":value"),
				(agent_slot_eq, ":value", 107, 1),
				(agent_is_alive, ":value"),
				(agent_is_active, ":value"),
				(agent_get_team, ":team_value", ":value"),
				(agent_get_position, 1, ":value"),
				(try_for_range, ":value_2"),
					(neq, ":value_2", ":value"),
					(agent_get_team, ":team_value_2", ":value_2"),
					(eq, ":team_value", ":team_value_2"),
					(agent_is_alive, ":value_2"),
					(agent_is_active, ":value_2"),
					(agent_is_human, ":value_2"),
					(agent_get_position, 2, ":value_2"),
					(get_distance_between_positions_in_meters, ":distance_between_positions_in_meters_1_2", 1, 2),
					(le, ":distance_between_positions_in_meters_1_2", 10),
					(store_agent_hit_points, ":agent_hit_points_value_2", ":value_2"),
					(val_add, ":agent_hit_points_value_2", 2),
					(val_min, ":agent_hit_points_value_2", 101),
					(agent_set_hit_points, ":value_2", ":agent_hit_points_value_2"),
					(try_begin),
						(eq, ":value_2", ":player_agent_no"),
						(display_message, "@You feel secured standing near the banner, healing some of your HP.", 0x006495ed),
					(try_end),
				(try_end),
			(try_end),
			(assign, ":value", ":player_agent_no"),
			(agent_is_alive, ":value"),
			(agent_get_wielded_item, ":wielded_item_value_0", ":value", 0),
			(is_between, ":wielded_item_value_0", 1198, 1202),
			(agent_get_team, ":team_value", ":value"),
			(agent_get_position, 1, ":value"),
			(try_for_range, ":value_2"),
				(neq, ":value_2", ":value"),
				(agent_get_team, ":team_value_2", ":value_2"),
				(eq, ":team_value", ":team_value_2"),
				(agent_is_alive, ":value_2"),
				(agent_is_active, ":value_2"),
				(agent_is_human, ":value_2"),
				(agent_get_position, 2, ":value_2"),
				(get_distance_between_positions_in_meters, ":distance_between_positions_in_meters_1_2", 1, 2),
				(le, ":distance_between_positions_in_meters_1_2", 10),
				(store_agent_hit_points, ":agent_hit_points_value_2", ":value_2"),
				(try_begin),
					(eq, ":wielded_item_value_0", 1201),
					(val_add, ":agent_hit_points_value_2", 1),
				(try_end),
				(val_add, ":agent_hit_points_value_2", 5),
				(val_max, ":agent_hit_points_value_2", 101),
				(agent_set_hit_points, ":value_2", ":agent_hit_points_value_2"),
			(try_end)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$tom_sand_storm", 3)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_position, 0, ":player_agent_no"),
			(position_set_z_to_ground_level, 0),
			(position_get_z, ":position_z_0", 0),
			(val_add, ":position_z_0", 2100),
			(position_set_z, 0, ":position_z_0"),
			(particle_system_burst, "psys_rain", 0, 1),
			(set_fixed_point_multiplier, 100)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$tom_sand_storm", 2)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_position, 0, ":player_agent_no"),
			(position_set_z_to_ground_level, 0),
			(position_get_z, ":position_z_0", 0),
			(val_add, ":position_z_0", 2000),
			(position_set_z, 0, ":position_z_0"),
			(particle_system_burst, "psys_blizzard", 0, 1),
			(set_fixed_point_multiplier, 100)
		]),

		(8.0, 0.0, 0.0,
		[
			(eq, "$tom_sand_storm", 3)
		],

		[
			(store_random_in_range, ":random_in_range_0_100", 0, 100),
			(try_begin),
				(ge, ":random_in_range_0_100", 90),
				(play_sound, "snd_thunder"),
			(try_end)
		]),

		(0.0, 0.0, ti_once,
		[
			(eq, "$tom_sand_storm", 2)
		],

		[
			(play_sound, "snd_wind")
		]),

		(0.0, 0.0, ti_once,
		[
			(eq, "$tom_sand_storm", 1)
		],

		[
			(play_sound, "snd_wind")
		]),

		(1.0, 0.0, ti_once,
		[
			(neq, "$g_battle_result", 0),
			(get_player_agent_no, ":player_agent_no"),
			(agent_is_alive, ":player_agent_no"),
			(agent_get_troop_id, ":troop_id_player_agent_no", ":player_agent_no"),
			(eq, ":troop_id_player_agent_no", "trp_player")
		],

		[
			(call_script, "script_freelancer_keep_field_loot")
		]),

		(0.0, 1.5, 0.0,
		[
			(key_clicked, 20),
			(get_player_agent_no, ":player_agent_no"),
			(agent_is_alive, ":player_agent_no"),
			(agent_set_animation, ":player_agent_no", "anim_cheer", 1),
			(agent_play_sound, ":player_agent_no", "snd_man_victory")
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_team, ":team_player_agent_no", ":player_agent_no"),
			(agent_get_position, 1, ":player_agent_no"),
			(try_for_agents, ":var_3"),
				(agent_is_alive, ":var_3"),
				(agent_is_human, ":var_3"),
				(agent_get_team, ":team_var_3", ":var_3"),
				(eq, ":team_var_3", ":team_player_agent_no"),
				(agent_get_position, 0, ":var_3"),
				(get_distance_between_positions_in_meters, ":distance_between_positions_in_meters_0_1", 0, 1),
				(lt, ":distance_between_positions_in_meters_0_1", 20),
				(agent_set_animation, ":var_3", "anim_cheer", 1),
				(agent_play_sound, ":var_3", "snd_man_victory"),
				(agent_get_slot, ":var_3_courage_score", ":var_3", slot_agent_courage_score),
				(val_add, ":var_3_courage_score", 5),
				(val_min, ":var_3_courage_score", 9600),
				(agent_set_slot, ":var_3", slot_agent_courage_score, ":var_3_courage_score"),
			(try_end),
			(display_message, "@Huzzah! You encourage your nearby troops.")
		]),

		(0.0, 1.7, 0.0,
		[
			(eq, "$tom_yell_smelly_peasents", 1)
		],

		[
			(call_script, "script_tom_command_cheer"),
			(assign, "$tom_yell_smelly_peasents", 0)
		]),

		(-26.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(store_trigger_param_2, ":trigger_param_2"),
			(neg|agent_is_ally, ":trigger_param_1"),
			(agent_is_human, ":trigger_param_1"),
			(eq, ":trigger_param_2", "$fplayer_agent_no"),
			(val_add, "$killcount", 1)
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_clear_troop_array", "trp_lances_troop_in_combat", 0, "$lance_troop_serving")
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_is_human, ":trigger_param_1"),
			(get_player_agent_no, ":player_agent_no"),
			(neq, ":trigger_param_1", ":player_agent_no"),
			(agent_get_party_id, ":party_id_trigger_param_1", ":trigger_param_1"),
			(eq, ":party_id_trigger_param_1", "p_main_party"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(call_script, "script_search_for_troop", ":troop_id_trigger_param_1"),
			(agent_set_slot, ":trigger_param_1", 102, reg0)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_set_matching_sexy_boots", ":trigger_param_1")
		]),

			(0.0, 0.0, 0.0,
		[
			(eq, "$sp_shield_bash", 1),
			(game_key_is_down, 7),
			(game_key_clicked, 6),
			(neg|main_hero_fallen),
		],

		[
		(call_script, "script_shield_bash"),
		]),

			##AI kicking begin
		   (2, 0, 3, #AI kicking
       [], [
	(get_player_agent_no,":player"),
	(try_for_agents, ":agent"),
		(neq, ":agent", ":player"),
		(agent_is_alive, ":agent"),
		(neq, ":agent", -1),
		(agent_is_human, ":agent"),#Only humans can kick....FOR NOW
		(agent_is_active, ":agent"),
		(agent_slot_eq, ":agent", slot_agent_is_running_away, 0),#Isn't fleeing the battle.
		##He's an eligible human.  Now see if he's in a position to kick.
		(agent_get_attack_action, ":attack_action", ":agent"), #returned values: free = 0, readying_attack = 1, releasing_attack = 2, completing_attack_after_hit = 3, attack_parried = 4, reloading = 5, after_release = 6, cancelling_attack = 7
		(agent_get_defend_action, ":defend_action", ":agent"),#
		(this_or_next|eq,":attack_action",4),#Just got parried
		(this_or_next|eq,":defend_action",1),#Parrying an enemy
		##So he'll only try to kick if he just parried an enemy attack, or his own attack just got parried.
		(agent_get_team, ":team", ":agent"),
		(assign, ":maximum_distance", 100),
		#Target Acquisition
		(agent_ai_get_look_target,":suspect",":agent"),
		(gt,":suspect",0),#Make sure there is someone.
		(agent_is_alive, ":suspect"),
		(agent_is_human, ":suspect"),#Only kick humans
		(agent_is_active, ":suspect"),
		(agent_get_team, ":suspect_team", ":suspect"),
		(neq, ":suspect_team", ":team"),#Friends don't let friends kick friends.
		(agent_get_position, pos1, ":agent"),#Distance check
		(agent_get_position, pos2, ":suspect"),
		(neg|position_is_behind_position, pos2, pos1), #Suspect can't be behind kicker.
		(get_distance_between_positions, ":distance", pos1, pos2),
		(le, ":distance", ":maximum_distance"),
		#Check chance
		(store_random_in_range,":kickchance", 1, 10),
		(try_begin),
			(eq,":kickchance",1), #10% chance per check
				#(display_message, "@Agent kicks."),
				(agent_set_animation, ":agent", "anim_prepare_kick_0"),
				(agent_deliver_damage_to_agent, ":agent", ":suspect", 3),
				(agent_set_animation, ":suspect", "anim_strike3_abdomen_front"),#Get Kicked
			(try_end),
	   (try_end),]),
	   
	   ##AI Kicking end
		
		
		(0.25, 0.0, 4.0,
		[
			(eq, "$sp_shield_bash_ai", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(neq, ":var_2", ":player_agent_no"),
				(agent_is_alive, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_active, ":var_2"), #Test to see if it stops AI from shield bashing (new addition v3)
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(store_skill_level, ":skill_level_shield_troop_id_var_2", "skl_shield", ":troop_id_var_2"),
				(store_proficiency_level, ":proficiency_level_troop_id_var_2_0", ":troop_id_var_2", 0),
				(ge, ":skill_level_shield_troop_id_var_2", 4),
				(ge, ":proficiency_level_troop_id_var_2_0", 200),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(le, ":horse_var_2", 0),
				(try_begin),
					(neg|agent_slot_ge, ":var_2", 50, 1),
					(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
					(agent_get_wielded_item, ":wielded_item_var_2_1", ":var_2", 1),
					(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
					(eq, ":type_wielded_item_var_2_1", 7),
					(agent_get_attack_action, ":attack_action_var_2", ":var_2"),
					(eq, ":attack_action_var_2", 0),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_position, 1, ":var_2"),
					(assign, ":value", -1),
					(assign, ":value_2", 125),
					(try_for_agents, ":var_13"),
						(agent_is_alive, ":var_13"),
						(agent_is_human, ":var_13"),
						(agent_get_position, 2, ":var_13"),
						(neg|position_is_behind_position, 2, 1),
						(agent_get_team, ":team_var_13", ":var_13"),
						(neq, ":team_var_13", ":team_var_2"),
						(try_begin),
							(eq, ":team_var_2", 0),
							(assign, ":value_3", 2),
						(else_try),
							(eq, ":team_var_2", 2),
							(assign, ":value_3", 0),
						(else_try),
							(eq, ":team_var_2", 1),
							(assign, ":value_3", 3),
						(else_try),
							(eq, ":team_var_2", 3),
							(assign, ":value_3", 1),
						(try_end),
						(neq, ":team_var_13", ":value_3"),
						(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
						(le, ":distance_between_positions_1_2", ":value_2"),
						(assign, ":value_2", ":distance_between_positions_1_2"),
						(assign, ":value", ":var_13"),
					(try_end),
					(ge, ":value", 0),
					(agent_get_horse, ":horse_var_2", ":value"),
					(eq, ":horse_var_2", -1),
					(store_random_in_range, ":random_in_range_15_26", 15, 26),
					(agent_set_slot, ":var_2", 50, ":random_in_range_15_26"),
					(agent_set_animation, ":var_2", "anim_shield_bash"),
					(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
					(troop_get_type, ":type_wielded_item_var_2_1", ":troop_id_var_2"),
					(try_begin),
						(eq, ":type_wielded_item_var_2_1", 0),
						(agent_play_sound, ":var_2", "snd_man_yell"),
					(else_try),
						(eq, ":type_wielded_item_var_2_1", 1),
						(agent_play_sound, ":var_2", "snd_woman_yell"),
					(try_end),
					(agent_play_sound, ":value", "snd_wooden_hit_low_armor_high_damage"),
					(agent_get_defend_action, ":attack_action_var_2", ":value"),
					(try_begin),
						(eq, ":attack_action_var_2", 2),
						(neg|position_is_behind_position, 1, 2),
						(agent_get_wielded_item, ":wielded_item_var_2_1", ":value", 1),
						(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
						(eq, ":type_wielded_item_var_2_1", 7),
						(agent_set_animation, ":value", "anim_shield_bash"),
					(else_try),
						(agent_set_animation, ":value", "anim_shield_strike"),
					(try_end),
				(try_end),
				(agent_get_slot, ":var_2_50", ":var_2", 50),
				(val_sub, ":var_2_50", 1),
				(val_max, ":var_2_50", 0),
				(agent_set_slot, ":var_2", 50, ":var_2_50"),
			(try_end)
		])
	] + crouching_triggers ),

	("castle_attack_walls_defenders_sally_player", mtf_battle_mode, -1,
	"Your soldiers sally out and attempt to delay the besiegers...",
	[(3, mtef_attackers|mtef_team_0, af_override_horse, aif_start_alarmed, 12, []),
	(3, mtef_attackers|mtef_team_0, af_override_horse, aif_start_alarmed, 0, []),
	(0, mtef_defenders|mtef_team_1, af_override_horse, aif_start_alarmed, 12, []),
	(0, mtef_defenders|mtef_team_1, af_override_horse, aif_start_alarmed, 0, [])],
	[
	

    (7, 0, ti_once,
    [],
    [
	(call_script, "script_assign_traits"),
    ]),


    (0, 0, 1, 
    [
    ],
    [
	(call_script, "script_stumbling"),
    ]),





#Decapitations next level right here.
(ti_on_agent_hit, 0, 0, [(eq, "$dynamic_decap", 1),],
[
   (store_trigger_param_1, ":victim_agent"),
   (store_trigger_param_2, ":attacker_agent"),
   (store_trigger_param_3, ":damage"),
   (assign, ":attacker_item", reg0), ### Transfer the item ID to make sure it dosn't change while the script is running
   (copy_position, pos5, pos0), ### Transfer the position of the hit to make sure it dosn't change while the script is running
   (neq, ":victim_agent", -1),
   (try_begin), #-- Decapitations --#
      (agent_is_human, ":victim_agent"),
	  (ge, ":attacker_item", 0),
	  (assign, ":run", 0), ### Reset the run test variable
#	  (try_begin), ### Special weapons that can decap, ovevrrides the below conditions
#		  (this_or_next|eq, ":attacker_item", "itm_supercrossbow"),
#		  (eq, ":attacker_item", "itm_supersledge"),
#		  (assign, ":run", 1),
	  (try_begin),
		  #(neq, ":attacker_item", "itm_mace_1"), ### List of weapons that cannot decapitate
		  #(neq, ":attacker_item", "itm_mace_2"), ### This would be easier to do with a preperty check (for damage type), but I don't know if that is possible or not
		  #(neq, ":attacker_item", "itm_mace_3"),
		  #(neq, ":attacker_item", "itm_staff"), #Keeping active incase of script errors
		  (agent_get_action_dir, ":attack_dir", ":attacker_agent"), ### Makes sure the attack is either a left or right swing
		  (this_or_next|eq, ":attack_dir", 1), ### Right swing
		  (eq, ":attack_dir", 2), ### Left swing
		  (assign, ":run", 1),
	  (try_end),
	  (eq, ":run", 1), ### One of the checks were true, continue to run script
	  #(assign, reg1, ":damage"), #Debug messages
	  #(display_message, "@Damage: {reg1}"),
	  
	  (assign, ":run", 0), ### Reset the run test variable
	  (try_begin),
		(ge, ":damage", "$decap_damage"), ### 30 Minimum damage required to decapitate an agent
		(assign, ":run", 1),
		
#	  (else_try),  ### If debugging mode is on, this bypasses the damage requirement check
#		  (eq,"$g_decapitations_debugging", 1),
#		  (assign, ":run", 1),
#		  (display_message, "@Decap minimum DMG req bypassed"),
	  (try_end),
	  (eq, ":run", 1),
	  
	  (store_agent_hit_points, ":hp", ":victim_agent", 1),
	  (val_add, ":hp", 10), ### 10 Victim must have the negative of this hp or below after hit for the script to move on (never put this value below 0 since the agent has to be absolutley positvely dead)!
	  (ge, ":damage", ":hp"),
	  
	  
	  ### Compare the hit position to the agent's position
      (agent_get_position, pos4, ":victim_agent"),
      (get_distance_between_positions, ":distance", pos4, pos5), 
	  (agent_get_horse, ":is_mounted", ":victim_agent"),
	  (try_begin), ### If the agent is on horseback, these values are used (note that these values will not be exactly correct if the horse is very large or very small)
		(ge, ":is_mounted", 0), ### Will be -1 if no horse is to be found, so anything above means that the agent is mounted
		(assign, ":min_distance", 240), ### Minimum distance from the agent's horse's hooves from which the hit is valid (240 is an approximate value)
		(assign, ":max_distance", 260), ### Maximum distance from the agent's horse's hooves to which the hit is valid (260 is an approximate value)
	  (else_try),  ### If the agent is on foot, these values are used
	    (assign, ":min_distance", 160), ### Minimum distance from the agent's feet from which the hit is valid (160 = slightly below the neck)
	    (assign, ":max_distance", 176), ### Maximum distance from the agent's feet to which the hit is valid (176 = near the nose)
	  (try_end),
      (is_between, ":distance", ":min_distance", ":max_distance"), ### Check to see if the hit is within the allowed area
	  
	  
	  (assign, ":run", 0), ### Default variable value before damage test
	  (try_begin),
		  (store_div, ":chance", ":damage", "$decap_damage_divider"), ### Chance of decap is damage / 4 right now. Lower this value for higher chances of decapitation (or press M+Right Ctrl for debug more if you just want to test easy decaps in-game).
		  
		  #(assign, reg1, ":chance"), #Debug messages
		  #(display_message, "@Decap chance is: {reg1}"),
		  (store_random_in_range, ":diceroll", 0, "$decap_randomizer"), ### Randomizer, 0-100
		  
		  #(assign, reg1, ":diceroll"), #Debug messages
		  #(display_message, "@Diceroll: {reg1}"),
		  (le, ":diceroll", ":chance"), ### ":diceroll" must be less than or equal to ":chance", if it is, decapitation occurs!
		  
		  (assign, ":run", 1), ### SUCCESS!
		  
#     (else_try),  ### If debugging mode is on, bypass chance calculation
#		  (eq,"$g_decapitations_debugging", 1),
#		  (assign, ":run", 1),
#		  (display_message, "@Decap chance calc bypassed"),
	  (try_end),  
	  (eq, ":run", 1), ### Time for the fun stuff!

	  ### Gender test for spawning the right head type
	  (assign, ":head_type", "itm_cut_off_head_male"),
	  (agent_get_troop_id, ":victim_troop", ":victim_agent"),
	  (try_begin),
	    (ge, ":victim_troop", 0),
		(troop_get_type,":victim_gender",":victim_troop"),
		(eq, ":victim_gender", 1),
		(assign, ":head_type", "itm_cut_off_head_female"),
	  (try_end),
	  
	  ### Randomize the spawned head's and/or helmet's position and orientation
	  (store_random_in_range, ":z_rotation", 0, 360),
	  (store_random_in_range, ":y_rotation", -60, 60),
	  (store_random_in_range, ":x_pos", -90, 90),
	  (store_random_in_range, ":y_pos", -90, 90),
	  (position_rotate_z, pos4,":z_rotation"),
	  (position_rotate_y, pos4,":y_rotation"),
	  (position_move_x, pos4, ":x_pos"),
	  (position_move_y, pos4, ":y_pos"),
	  (position_set_z_to_ground_level, pos4),
	  (position_move_z, pos4, 5),
	  (set_spawn_position, pos4),
	  (assign, ":prunetime", 360), ### This is the time in seconds before the spawned head or helmet gets pruned (removed). Recommended to keep it above 0 to make sure it gets removed eventually or when the scene resets, to prevent performance issues.
	  
	  #(spawn_item, ":head_type", 0, ":prunetime"), ### This is the old way of spawning the head on the ground with the helmet, disabled because of the new dynamic heads. You can comment away (disable) the dynamic heads spawning further down and uncomment this line for a less performance-needing approach (with no physics involved).
	  
	  ### Does the agent have a helmet or hat equipped?
      (agent_get_item_slot, ":item", ":victim_agent", 4), #head slot
      (try_begin),
         (ge, ":item", 1), ### Does it?
         (agent_unequip_item, ":victim_agent", ":item"), ### Yes it does. Unequip it to allow replacement by the invisible helmet further down
		 (try_begin),
			 ### Don't spawn items with "itp_attatch_armature" flag: rigging causes floating bugs
			 ### This would be much better to do with an item flag check, but I haven't found any way to do that
			 #(neq, ":item", "itm_with_itp_attatch_armature"),
			 #(neg|is_between,":item","start_of_itm_range_with_itp_attatch_armature","end_of_itm_range_with_itp_attatch_armature"),
			#(set_spawn_position, pos4),
			(spawn_item, ":item", 0, ":prunetime"), ### Spawns the agent's currently equipped headgear on the dropped head's position
		 (try_end),
      (try_end),
	  
	  (agent_equip_item, ":victim_agent", "itm_invisible_head"), ### Put an invisible helmet on the agent's head to "remove" it
	  
	  
	  (agent_get_position, pos4, ":victim_agent"), ### Refreshes the agent's position
	  (position_move_z, pos4, ":min_distance"), ### Move to the where the neck used to be attached
	  
	  
	  ### Blood effects! The last variable is the strength. Lower or increase it for more/less blood (or tweak the particle effects themselves in "module_particle_systems.py").
      (particle_system_burst, "psys_blood_decapitation", pos4, 40), 
	  (particle_system_burst, "psys_game_blood", pos4, 10),
	  (particle_system_burst, "psys_game_blood_2", pos4, 10),
	  
	  (play_sound_at_position, "snd_decapitation_battle", pos4), ### Play some nasty sounds
	  
	  
	  ### Dynamic head spawning! See the bottom of "module_scene_props.py" for physics-related options and more.
	  (position_move_z, pos4, 20),
	  (set_spawn_position, pos4),
	  (assign, ":head_type", "spr_head_dynamic_male"),
	  (try_begin), ### Gender check (for determening the type of head)
		(eq, ":victim_gender", 1),
		(assign, ":head_type", "spr_head_dynamic_female"),
	  (try_end),
	  (spawn_scene_prop, ":head_type"),
	  
		#Addition check if we should allow the message to appears
			(eq, "$allow_decap_mess", 1), #Possible script error

	  ### This below is for the text that shows up when somebody is decapitated.
	  
	  ### Who decapitated who?
		(agent_get_troop_id, ":attacker_troop", ":attacker_agent"),
		(str_store_troop_name, s0, ":attacker_troop"),

		(agent_get_troop_id, ":victim_troop", ":victim_agent"),
		(str_store_troop_name, s1, ":victim_troop"),

	  
	  ### Colour check (friend or foe?)
	  (get_player_agent_no, ":my_agent"),
	  (agent_get_team, ":my_team", ":my_agent"),
	  (agent_get_team, ":victim_team", ":victim_agent"),
	  (try_begin), ### Display it!
		  (neq, ":my_team", ":victim_team"),
		  (display_message, "@>>> {s0} decapitated {s1}!", 0xFF33DD11), ## Green
	  (else_try),
		  (display_message, "@>>> {s0} decapitated {s1}!", 0xFFFF4422), ## Red
	  (try_end),
   (try_end), #-- Decapitations END --#
   
   ]),



	#AI Sound horn!
			(0.0, 0.0, 2.0,
		[
			##(store_random_in_range, ":horn_chance", 0, 22),
			#(eq, ":horn_chance", 0),
		],
		[
			(call_script, "script_formation_ai_sound_horn"),
		]),
	#AI Sound horn end!










			##################################################
##### troop_ratio_bar
##################################################
      (0, 0, ti_once, [
	  (eq, "$use_troopbars", 1),
	  ], [
	  (start_presentation, "prsnt_troop_ratio_bar"),
	  ]),
##################################################
##### troop_ratio_bar
##################################################
	
###Voice-over for Infantry, archers & Cavalry
		
		(0.0, 0.3, 0.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 29) #Everyone!
		],

		[
		(call_script, "script_identify_battle_voices_all")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 30) #Infantry
		],

		[
		(call_script, "script_identify_battle_voices_inf")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 31) #Archers
		],

		[
		(call_script, "script_identify_battle_voices_archers")
		]),
		
		(0.0, 0.3, 4.0, #Can only fire once every 4 seconds.
		[
			(game_key_clicked, 32) #Cavalry
		],

		[
		(call_script, "script_identify_battle_voices_cav")
		]),
		###Voice-over for Infantry, archers & Cavalry	
		
		
		
			#####MUSICBOX SIEGE VARIANT
	(ti_after_mission_start, 0, ti_once, [ #680 #(ti_after_mission_start, 0, 680, [ #680
	(eq, "$additional_music", 1),
 #Obtained from Mod Options, affects mission templates, range: ALL SP Hostile music, co-op variant is additional_music_coop.
	],
		
  [
    #(play_track, "track_silence", 1), #Stop current module track
	   (music_set_situation, mtf_sit_fight), #Field
   #(music_set_situation, mtf_sit_siege), #Siege probably don't use
	(assign, "$music_timer", 0), #Patch
  #Randomize chance is 1 in a 5 (20%)
  
  #Field related extend to sieges
  (store_random_in_range, ":randomizer", 0, 2), #50% Chance of randomization
  (try_begin),
  (eq, ":randomizer", 0),
  (store_random_in_range, ":euro_randomizernext", 1, 11),
  (store_random_in_range, ":medi_randomizer", 1, 6),
  (store_random_in_range, ":arab_randomizer", 1, 8),
  (assign, "$track_count_field_siege", ":euro_randomizernext"),
  (assign, "$track_count_field_medi_siege", ":medi_randomizer"),
  (assign, "$track_count_field_arabs_siege", ":arab_randomizer"),
  (try_end),
  #Field related extend to sieges
  ]),
	
	(0, 0, 3, [ #680 #(ti_after_mission_start, 0, 680, [ #680
	(eq, "$additional_music", 1),
	 #Obtained from Mod Options, affects mission templates, range: ALL SP Hostile music, co-op variant is additional_music_coop.
	],
		
  [
		  #(display_message, "@Executing music code"),
		  (store_mission_timer_b, ":time_msec"),
		  #(assign, reg10, ":time_msec"),
          #(str_clear, s10),
          #(str_store_string, s10, "@Mission timer B for music: {reg10}"),
		  #(display_message, s10),
			#if next action time is lower than current time, play the sound
			(ge, ":time_msec", "$music_timer"),
			(reset_mission_timer_b), #Resetting mission timer, too.
			(assign, "$music_timer", 0),# Resetting value when track ends.
		
  #Euro only
     (try_begin),
      (ge, "$track_count_field_siege", 11),
      (assign, "$track_count_field_siege", 1),
    (else_try),
      (val_add, "$track_count_field_siege", 1),
	  (ge, "$track_count_field_siege", 11),
	  (assign, "$track_count_field_siege", 1),
    (try_end),
  #Euro only
  
  #Mediterrain only
  
       (try_begin),
      (ge, "$track_count_field_medi_siege", 6),
      (assign, "$track_count_field_medi_siege", 1),
    (else_try),
      (val_add, "$track_count_field_medi_siege", 1),
	  (ge, "$track_count_field_medi_siege", 6),
	  (assign, "$track_count_field_medi_siege", 1),
    (try_end),
  #Mediterrain only
  
  
  #Arabs only

       (try_begin),
      (ge, "$track_count_field_arabs_siege", 8),
      (assign, "$track_count_field_arabs_siege", 1),
    (else_try),
      (val_add, "$track_count_field_arabs_siege", 1),
	  (ge, "$track_count_field_arabs_siege", 8),
	  (assign, "$track_count_field_arabs_siege", 1),
    (try_end),
	#Arabs only
  
  #Pause between music length in seconds
  #(val_add, "$music_timer", 2),# 5 seconds added
  #Pause between music length in seconds
  
	(party_get_current_terrain, ":current_terrain_main_party", "p_main_party"), #Co-Op variant of this trigger should use scenes in_between rather than terrain because player can't obtain terrain in co-op sessions.
	(try_begin),
	(this_or_next|eq, ":current_terrain_main_party", 1), #rt_mountain
	(this_or_next|eq, ":current_terrain_main_party", 2), #rt_steppe
	(eq, ":current_terrain_main_party", 10), #rt_steppe_forest
	#Begin mediterrain music 5 tracks total
	(try_begin),
	(eq, "$track_count_field_medi_siege", 1), #
	(play_track, "track_medib3", 2),
	(val_add, "$music_timer", 209),# 1 second added
	(else_try),
	
	(eq, "$track_count_field_medi_siege", 2), #
	(play_track, "track_medib4", 2),
	(val_add, "$music_timer", 237),#
	(else_try),
	
	(eq, "$track_count_field_medi_siege", 3), #
	(play_track, "track_medib5", 2),
	(val_add, "$music_timer", 229),#
	(else_try),

	(eq, "$track_count_field_medi_siege", 4), #
	(play_track, "track_medis1", 2),
	(val_add, "$music_timer", 195),#
	(else_try),
	(eq, "$track_count_field_medi_siege", 5), #
	(play_track, "track_medis2", 2),
	(val_add, "$music_timer", 66),#
	(try_end),
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 3), #rt_plain
	(this_or_next|eq, ":current_terrain_main_party", 11), #rt_forest
	(eq, ":current_terrain_main_party", 9), #rt_mountain_forest
	#Begin Euro Music
	(try_begin),
	(eq, "$track_count_field_siege", 1), #
	(play_track, "track_euros1", 2),
	(val_add, "$music_timer", 162),#
	(else_try),
	(eq, "$track_count_field_siege", 2), #
	(play_track, "track_euros2", 2),
	(val_add, "$music_timer", 221),#
	(else_try),
	
	(eq, "$track_count_field_siege", 3), #
	(play_track, "track_euros3", 2),
	(val_add, "$music_timer", 190),#
	(else_try),
	
	(eq, "$track_count_field_siege", 4), #
	(play_track, "track_euros4", 2),
	(val_add, "$music_timer", 317),#
	(else_try),
	
	(eq, "$track_count_field_siege", 5), #
	(play_track, "track_euros5", 2),
	(val_add, "$music_timer", 59),#
		(else_try),
	
	(eq, "$track_count_field_siege", 6), #
	(play_track, "track_euros6", 2),
	(val_add, "$music_timer", 59),#
		(else_try),
	
	(eq, "$track_count_field_siege", 7), #
	(play_track, "track_euros7", 2),
	(val_add, "$music_timer", 85),#
		(else_try),
	
	(eq, "$track_count_field_siege", 8), #
	(play_track, "track_euros8", 2),
	(val_add, "$music_timer", 82),#
		(else_try),
	
	(eq, "$track_count_field_siege", 9), #
	(play_track, "track_euros9", 2),
	(val_add, "$music_timer", 199),#
		(else_try),
	
	(eq, "$track_count_field_siege", 10), #
	(play_track, "track_euros10", 2),
	(val_add, "$music_timer", 281),#
	(try_end),
	
	
	
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 4), #rt_snow
	(this_or_next|eq, ":current_terrain_main_party", 12), #rt_snow_forest
	(eq, ":current_terrain_main_party", 7), #rt_bridge
	#Begin Euro Music
	(try_begin),
	(eq, "$track_count_field_siege", 1), #
	(play_track, "track_euros1", 2),
	(val_add, "$music_timer", 162),#
	(else_try),
	(eq, "$track_count_field_siege", 2), #
	(play_track, "track_euros2", 2),
	(val_add, "$music_timer", 221),#
	(else_try),
	
	(eq, "$track_count_field_siege", 3), #
	(play_track, "track_euros3", 2),
	(val_add, "$music_timer", 190),#
	(else_try),
	
	(eq, "$track_count_field_siege", 4), #
	(play_track, "track_euros4", 2),
	(val_add, "$music_timer", 317),#
	(else_try),
	
	(eq, "$track_count_field_siege", 5), #
	(play_track, "track_euros5", 2),
	(val_add, "$music_timer", 59),#
		(else_try),
	
	(eq, "$track_count_field_siege", 6), #
	(play_track, "track_euros6", 2),
	(val_add, "$music_timer", 59),#
		(else_try),
	
	(eq, "$track_count_field_siege", 7), #
	(play_track, "track_euros7", 2),
	(val_add, "$music_timer", 85),#
		(else_try),
	
	(eq, "$track_count_field_siege", 8), #
	(play_track, "track_euros8", 2),
	(val_add, "$music_timer", 82),#
		(else_try),
	
	(eq, "$track_count_field_siege", 9), #
	(play_track, "track_euros9", 2),
	(val_add, "$music_timer", 199),#
		(else_try),
	
	(eq, "$track_count_field_siege", 10), #
	(play_track, "track_euros10", 2),
	(val_add, "$music_timer", 281),#
	(try_end),
	
	(else_try),
	(this_or_next|eq, ":current_terrain_main_party", 5), #rt_desert
	(eq, ":current_terrain_main_party", 13), #rt_desert_forest
	#Begin arab music
	(try_begin),
	(eq, "$track_count_field_arabs_siege", 1), #
	(play_track, "track_arabs1",  2),
	(val_add, "$music_timer", 198),#
	(else_try),
	(eq, "$track_count_field_arabs_siege", 2), #
	(play_track, "track_arabs2", 2),
	(val_add, "$music_timer", 112),#
	
	(else_try),
	(eq, "$track_count_field_arabs_siege", 3), #
	(play_track, "track_medis1", 2),
	(val_add, "$music_timer", 195),#
	(else_try),
	
	(eq, "$track_count_field_arabs_siege", 4), #
	(play_track, "track_arabs4", 2),
	(val_add, "$music_timer", 79),#
		(else_try),
	
	(eq, "$track_count_field_arabs_siege", 5), #
	(play_track, "track_arabs5", 2),
	(val_add, "$music_timer", 394),#
	
			(else_try),
	(eq, "$track_count_field_arabs_siege", 6), #
	(play_track, "track_arabs3", 2),
	(val_add, "$music_timer", 80),#
			(else_try),
	(eq, "$track_count_field_arabs_siege", 7), #
	(play_track, "track_medis2", 2),
	(val_add, "$music_timer", 66),#
	(try_end),
	(try_end),
	
  ]),
	
	#####MUSICBOX END
		
			#####Camera mode by Rubik None-Coop Version Begin
		(0, 0, 0, [(eq, "$extended_camera_mode", 1)],
  [
    (get_player_agent_no, ":player_agent"),
    (agent_get_look_position, pos1, ":player_agent"),
    (position_move_z, pos1, "$g_camera_z"),
    (position_move_y, pos1, "$g_camera_y"),
    (agent_get_horse, ":horse_agent", ":player_agent"),
    (try_begin),
      (ge, ":horse_agent", 0),
      (position_move_z, pos1, 80),
    (try_end),
    (mission_cam_set_position, pos1),
    (try_begin),
      (key_is_down, key_left_control),
      (assign, ":move_val", 50),
    (else_try),
      (assign, ":move_val", 10),
    (try_end),
    (try_begin),
      (key_clicked, key_up),
      (mission_cam_set_mode, 1),
      (val_add, "$g_camera_z", ":move_val"),
    (else_try),
      (key_clicked, key_down),
      (mission_cam_set_mode, 1),
      (val_sub, "$g_camera_z", ":move_val"),
    (else_try),
      (key_clicked, key_left),
      (mission_cam_set_mode, 1),
      (val_add, "$g_camera_y", ":move_val"),
    (else_try),
      (key_clicked, key_right),
      (mission_cam_set_mode, 1),
      (val_sub, "$g_camera_y", ":move_val"),
    (try_end),
    (try_begin),
      (this_or_next|game_key_clicked, gk_view_char),
      (this_or_next|game_key_clicked, gk_zoom),
      (game_key_clicked, gk_cam_toggle),
      (mission_cam_set_mode, 0),
    (try_end),
  ]),
  #####Camera mode by Rubik None-Coop Version End
		
		
		
###########Torch by troycall/Envious Arm begin

																	#(-25.0, 0.0, 0.0, #Enabling this forces random chance to be 100%
																	#(ti_on_agent_spawn, 0, 0, #Enabling this forces random chance to be 100%
																	(20, 0, ti_once, #Proper one, but reinforcements do not get assigned torches.
        [
          (mission_tpl_are_all_agents_spawned), #From VC Header_Operations to prevent weird behavior.
          (is_currently_night) #Check if currently night time
        ],
        [

		  ####DEFAULT
		   #(try_for_agents, ":agent"),
            #(agent_get_wielded_item, ":item", ":agent", 1),
            #(gt, ":item", -1),
            #(agent_unequip_item, ":agent", ":item"),
            #(agent_equip_item, ":agent", "itm_torch"),
            #(agent_set_wielded_item, ":agent", "itm_torch"),           
          #(try_end),
		  ####END DEFAULT
		  
		  (try_for_agents, ":agent"), #Try for agents...
		  #Extension
		  (agent_is_alive, ":agent"), #For performance reasons
		  #End
		  (agent_is_human, ":agent"), #Performance
          (agent_is_non_player, ":agent"), #Uncommenting this includes player on spawning with torch, may be necessary to uncomment at module_coop_mission_templates.
		  


		 ##########Default Order
		 #######		  (agent_is_human, ":agent"), #Performance
         #######(agent_is_non_player, ":agent"), #Uncommenting this includes player on spawning with torch, may be necessary to uncomment at module_coop_mission_templates.
		 #######
		 ########Extension
		 #######(agent_is_active, ":agent"), #For performance reasons
		 #######(agent_is_alive, ":agent"), #For performance reasons
		 ########End
		  ############
		  		  
				#  (try_begin),
				  
		#		          (agent_get_wielded_item, ":rhand", ":agent", 0),  #Right hand
		#  (assign, ":rhanditem", 0), # Preparing local variable.
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000000000100),
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000004000000),
		#  (this_or_next|neg|item_has_capability, ":rhanditem", 0x0000000008000000),
		#  (neg|item_has_capability, ":rhanditem", 0x0000000170000000),
		# 

		  #
		  
          #BEGIN DEBUG
          #(assign, reg10, ":agent"),
          #(str_clear, s10),
          #(str_store_string, s10, "@New agent: {reg10}"),
          #END DEBUG
		  #(agent_get_wielded_item, ":rhanditem", ":agent", 0),  #Obtain right hand item
         (agent_get_wielded_item, ":rhanditem", ":agent", 0),  #Obtain right hand item
          (agent_get_wielded_item, ":item", ":agent", 1), # Left hand: shield or -1
          #BEGIN DEBUG
          #(assign, reg10, ":item"),
          #(str_store_string, s10, "@{s10}. LH: {reg10}"),
		  #(display_message, "@Main block Phase A finalized"),
          #END DEBUG
		  #(item_get_type, ":type", ":rhanditem"), #If right hand item is polearm, stop reading rest of code.
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_club_with_spike_head", "itm_wooden_shield"),
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_light_lance", "itm_wooden_shield"),
		  #(this_or_next|neg|is_between, ":rhanditem", "itm_light_lance", "itm_wooden_shield"),
          (try_begin),
		  (neg|is_between, ":rhanditem", "itm_club_with_spike_head", "itm_wooden_shield"),
		  (neg|is_between, ":rhanditem", "itm_lance_banner_jer", "itm_cross_end"), #Update item slots
		  #(neg|troop_has_item_equipped, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		  #(neq, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		  
		# (neg|eq, ":type", 0x0000000000000004), #If agent is using torch, ignore him.
		    (gt, ":item", -1), #Check if the agent wields any item in the left hand, this or next.
            #(neq, ":item", -1),# Check if the agent wields any item in the left hand
            (neq, ":item", "itm_torch"), #If agent is using torch, ignore him.
            #(display_message, "@PASSED neg tests"), #Debug message

			
            (store_random_in_range, ":chance", 1, 101), # Chance of item being assigned
            (try_begin),
			  (le, ":chance", "$torch_chance"), #25% = 25
				#lt           = neg | ge # less than		-- (lt,<value>,<value>),
				#neq          = neg | eq # not equal to		-- (neq,<value>,<value>),
				#le           = neg | gt # less or equal to	-- (le,<value>,<value>),
              (agent_unequip_item, ":agent", ":item"),
			  
              #BEGIN DEBUG
              #(str_store_item_name, s11, ":item"),
              #(str_store_string, s10, "@{s10}. Removed item: {s11}"),
			  #(display_message, "@(agent_unequip_item, :agent, :item PASSED."),
              #END DEBUG

               
                (agent_equip_item, ":agent", "itm_torch"), #Tell agent to equip the item
                 #(display_message, "@(agent_equip_item, :agent, :item PASSED."),
                  (agent_set_wielded_item, ":agent", "itm_torch"), #Required for infantry only, cavarly can work without it.
                  #(display_message, "@(agent_set_wielded_item, :agent, :item PASSED."),
                 
                 
                  #BEGIN DEBUG
                #(else_try),
                  #(str_store_string, s10, "@{s10}. Failed random chance."),
                (try_end),
               
              #(else_try),
                #(str_store_string, s10, "@{s10}. Invalid agent for torch"),
              (try_end),
             
              #(display_message, s10),
			  (try_end),
              #END DEBUG
			#  (try_end),
      ]),
	  
###########Torch by troycall/Envious Arm end


	
		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_agent_reassign_team", ":trigger_param_1")
		]),

		(-19.0, 0.0, 0.0,
		[],

		[
			(team_set_relation, 0, 2, 1),
			(team_set_relation, 1, 3, 1),
			(call_script, "script_change_banners_and_chest"),
			(call_script, "script_remove_siege_objects")
		]),

		(-21.0, 0.0, 0.0,
		[],

		[
			(try_begin),
				(eq, "$g_battle_won", 1),
				(call_script, "script_count_mission_casualties_from_agents"),
				(finish_mission, 0),
			(else_try),
				(eq, "$pin_player_fallen", 1),
				(eq, "$g_battle_won", 0),
				(call_script, "script_simulate_retreat", 5, 20, 1),
				(str_store_string, 5, "str_retreat"),
				(call_script, "script_count_mission_casualties_from_agents"),
				(set_mission_result, -1),
				(finish_mission, 0),
			(else_try),
				(eq, "$pin_player_fallen", 1),
				(eq, "$g_battle_won", -1),
				(call_script, "script_count_mission_casualties_from_agents"),
				(finish_mission, 0),
			(else_try),
				(call_script, "script_cf_check_enemies_nearby"),
				(question_box, "str_do_you_want_to_retreat"),
			(else_try),
				(get_player_agent_no, ":player_agent_no"),
				(neg|agent_is_alive, ":player_agent_no"),
				(call_script, "script_cf_check_enemies_nearby"),
				(question_box, "str_do_you_want_to_retreat"),
			(else_try),
				(display_message, "str_can_not_retreat"),
			(try_end)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
			(call_script, "script_troop_agent_set_banner", "tableau_game_troop_label_banner", ":trigger_param_1", ":troop_id_trigger_param_1")
		]),

		(-26.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(store_trigger_param_2, ":trigger_param_2"), #Removedforunassignedstuff#
			(store_trigger_param_3, ":trigger_param_3"),
			(try_begin),
				(ge, ":trigger_param_1", 0),
				(neg|agent_is_ally, ":trigger_param_1"),
				(agent_is_human, ":trigger_param_1"),
				(agent_get_troop_id, ":troop_id_trigger_param_1", ":trigger_param_1"),
				(party_add_members, "p_total_enemy_casualties", ":troop_id_trigger_param_1", 1),
				(eq, ":trigger_param_3", 1),
				(party_wound_members, "p_total_enemy_casualties", ":troop_id_trigger_param_1", 1),
			(try_end)
		]),

		(-8.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(eq, ":trigger_param_1", 0),
			(assign, "$pin_player_fallen", 0),
			(str_store_string, 5, "str_retreat"),
			(call_script, "script_simulate_retreat", 5, 20, 0),
			(call_script, "script_count_mission_casualties_from_agents"),
			(finish_mission, 0)
		]),

		(0.0, 0.0, ti_once,
		[],

		[
			(assign, "$g_battle_won", 0),
			(try_begin),
			(eq, "$additional_music", 0),
			(call_script, "script_combat_music_set_situation_with_culture"),
			(try_end),
			(assign, "$dmod_current_agent", -1),
			(assign, "$dmod_move_camera", -1)
		]),

		(30.0, 0.0, 0.0,
		[],

		[]),

		(2.0, 0.0, 0.0,
		[],

		[
			(call_script, "script_check_friendly_kills")
		]),

		(1.0, 60.0, ti_once,
		[
			(store_mission_timer_a, reg1),
			(ge, reg1, 10),
			(all_enemies_defeated, 2),
			(set_mission_result, 1),
			(display_message, "str_msg_battle_won"),
			#(play_sound, "snd_won_battle"), #Moved to victorious main menu
			(assign, "$g_battle_won", 1),
			(assign, "$g_battle_result", 1),
			(assign, "$g_siege_sallied_out_once", 1),
			(assign, "$g_siege_method", 1),
			(call_script, "script_play_victorious_sound")
		],

		[
			(call_script, "script_count_mission_casualties_from_agents"),
			(finish_mission, 1)
		]),

		(10.0, 0.0, 0.0, # Battle won/lost messages!
		[],

		[
			(eq, "$g_battle_won", 1),
			#(play_sound, "snd_won_battle"), #Moved to victorious main menu
			(display_message, "str_msg_battle_won")
		]),

		(1.0, 60.0, ti_once,
		[
			(store_mission_timer_a, reg1),
			(ge, reg1, 10),
			(main_hero_fallen),
			(assign, ":var_1", 0),
			(try_for_agents, ":var_2"),
				(agent_is_ally, ":var_2"),
				(agent_is_alive, ":var_2"),
				(val_add, ":var_1", 1),
			(try_end),
			(eq, ":var_1", 0),
			(set_mission_result, -1),
						(try_begin),
			(eq, "$colored_messages", 1),
			(display_message, "@Battle lost...", 0x00f78078),
			(else_try),
			(display_message, "@Battle lost..."),
			(try_end),
			(assign, "$g_battle_won", -1),
			(assign, "$g_battle_result", -1)
		],

		[
			(call_script, "script_count_mission_casualties_from_agents"),
			(finish_mission, 0)
		]),

		(10.0, 0.0, 0.0, # Battle won/lost messages!
		[],

		[
			(eq, "$g_battle_won", -1),
			(try_begin),
			(eq, "$colored_messages", 1),
			(display_message, "@Battle lost! Press tab key to leave...", 0x00f78078),
			(else_try),
			(display_message, "@Battle lost! Press tab key to leave..."),
			(try_end),
			#(play_sound, "snd_battle_sounds"), #Moved to your companions carry you away from the fighting menu
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(gt, "$dmod_current_agent", 0),
			(eq, "$setting_use_dmod", 1),
			(eq, "$dmod_move_camera", 1),
			(agent_get_position, 1, "$dmod_current_agent"),
			(position_move_z, 1, 300),
			(position_move_y, 1, -300),
			(agent_get_horse, ":horse_l_dmod_current_agent", "$dmod_current_agent"),
			(try_begin),
				(ge, ":horse_l_dmod_current_agent", 0),
			(try_end),
			(try_begin),
				(eq, "$pop_camera_on", 1),
				(assign, "$pop_camera_on", 0),
			(try_end),
			(mission_cam_set_position, 1),
			(mission_cam_set_mode, 1),
			(set_fixed_point_multiplier, 100)
		],

		[]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(eq, "$setting_use_dmod", 1),
			(key_clicked, 238),
			(main_hero_fallen),
			(call_script, "script_dmod_cycle_forwards")
		],

		[]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(eq, "$setting_use_dmod", 1),
			(key_clicked, 239),
			(main_hero_fallen),
			(call_script, "script_dmod_cycle_backwards")
		],

		[]),

		(0.0, 0.0, ti_once,
		[],

		[
			(assign, "$pop_camera_on", 0),
			(assign, "$pop_camera_mouse_center_x", 500),
			(assign, "$pop_camera_mouse_center_y", 375),
			(assign, "$pop_camera_mouse_x", "$pop_camera_mouse_center_x"),
			(assign, "$pop_camera_mouse_y", "$pop_camera_mouse_center_y"),
			(assign, "$pop_camera_mouse_counter", 0)
		]),

		(0.0, 4.0, ti_once,
		[
			(eq, "$enable_deahtcam", 1),
			(main_hero_fallen),
			(eq, "$pop_camera_on", 0),
			(assign, "$tom_sand_storm", 0)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_position, 1, ":player_agent_no"),
			(position_get_x, ":position_x_1", 1),
			(position_get_y, ":position_y_1", 1),
			(init_position, 47),
			(position_set_x, 47, ":position_x_1"),
			(position_set_y, 47, ":position_y_1"),
			(position_set_z_to_ground_level, 47),
			(position_move_z, 47, 250),
			(mission_cam_set_mode, 1, 0, 0),
			(mission_cam_set_position, 47),
			(assign, "$pop_camera_rotx", 0),
			(assign, "$pop_camera_on", 1)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(this_or_next|eq, "$dmod_move_camera", 1),
			(eq, "$pop_camera_on", 1),
			(this_or_next|game_key_clicked, 0),
			(this_or_next|game_key_is_down, 0),
			(this_or_next|game_key_clicked, 1),
			(this_or_next|game_key_is_down, 1),
			(this_or_next|game_key_clicked, 2),
			(this_or_next|game_key_is_down, 2),
			(this_or_next|game_key_clicked, 3),
			(game_key_is_down, 3)
		],

		[
			(try_begin),
				(eq, "$dmod_move_camera", 1),
				(mission_cam_set_mode, 1, 0, 0),
				(assign, "$pop_camera_rotx", 0),
				(assign, "$pop_camera_on", 1),
				(assign, "$dmod_move_camera", 0),
			(try_end),
			(mission_cam_get_position, 47),
			(assign, ":value", 0),
			(assign, ":value_2", 0),
			(try_begin),
				(this_or_next|game_key_clicked, 0),
				(game_key_is_down, 0),
				(assign, ":value_2", 10),
			(try_end),
			(try_begin),
				(this_or_next|game_key_clicked, 1),
				(game_key_is_down, 1),
				(assign, ":value_2", -10),
			(try_end),
			(try_begin),
				(this_or_next|game_key_clicked, 2),
				(game_key_is_down, 2),
				(assign, ":value", -10),
			(try_end),
			(try_begin),
				(this_or_next|game_key_clicked, 3),
				(game_key_is_down, 3),
				(assign, ":value", 10),
			(try_end),
			(position_move_x, 47, ":value"),
			(position_move_y, 47, ":value_2"),
			(mission_cam_set_position, 47)
		]),

		(0.0, 0.0, 0.0,
		[
			(eq, "$enable_deahtcam", 1),
			(eq, "$pop_camera_on", 1),
			(neg|is_presentation_active, "prsnt_battle"),
			(mouse_get_position, 1),
			(set_fixed_point_multiplier, 1000),
			(position_get_x, reg1, 1),
			(position_get_y, reg2, 1),
			(set_fixed_point_multiplier, 100),
			(this_or_next|neq, reg1, "$pop_camera_mouse_center_x"),
			(neq, reg2, "$pop_camera_mouse_center_y")
		],

		[
			(assign, ":value", 1),
			(try_begin),
				(eq, reg1, "$pop_camera_mouse_x"),
				(eq, reg2, "$pop_camera_mouse_y"),
				(val_add, "$pop_camera_mouse_counter", 1),
				(try_begin),
					(gt, "$pop_camera_mouse_counter", 50),
					(assign, "$pop_camera_mouse_center_x", reg1),
					(assign, "$pop_camera_mouse_center_y", reg2),
					(assign, "$pop_camera_mouse_counter", 0),
				(try_end),
				(assign, ":value", 0),
			(try_end),
			(eq, ":value", 1),
			(assign, "$pop_camera_mouse_counter", 0),
			(assign, "$pop_camera_mouse_x", reg1),
			(assign, "$pop_camera_mouse_y", reg2),
			(mission_cam_get_position, 47),
			(store_sub, ":value_2", "$pop_camera_mouse_center_x", reg1),
			(store_sub, ":value_3", reg2, "$pop_camera_mouse_center_y"),
			(try_for_range, ":number", 0, 2),
				(try_begin),
					(eq, ":number", 1),
					(assign, ":value_2", ":value_3"),
				(try_end),
				(this_or_next|lt, ":value_2", -2),
				(gt, ":value_2", 2),
				(assign, ":value_4", 1),
				(try_begin),
					(lt, ":value_2", 0),
					(assign, ":value_4", -1),
				(try_end),
				(val_abs, ":value_2"),
				(val_sub, ":value_2", 2),
				(convert_to_fixed_point, ":value_2"),
				(store_sqrt, ":value_2", ":value_2"),
				(convert_from_fixed_point, ":value_2"),
				(val_clamp, ":value_2", 1, 64),
				(val_mul, ":value_2", ":value_4"),
				(try_begin),
					(eq, ":number", 0),
					(store_mul, ":value_5", "$pop_camera_rotx", -1),
					(position_rotate_x, 47, ":value_5"),
					(position_rotate_z, 47, ":value_2"),
					(position_rotate_x, 47, "$pop_camera_rotx"),
				(try_end),
				(try_begin),
					(eq, ":number", 1),
					(position_rotate_x, 47, ":value_2"),
					(val_add, "$pop_camera_rotx", ":value_2"),
				(try_end),
			(try_end),
			(mission_cam_set_position, 47)
		]),

		(1.0, 4.0, ti_once,
		[
			(main_hero_fallen)
		],

		[
			(assign, "$pin_player_fallen", 1),
			(neq, "$use_player_auxiliary", 1),
			(display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
			(display_message, "@If you choose to watch the fight you can use the mouse scroll up and down to switch between troop view or AWDS keys for free camera view.")
		]),

		(0.0, 0.0, 0.0,
		[],

		[
			(game_key_clicked, 22),
			(neg|is_presentation_active, "prsnt_battle"),
			(start_presentation, "prsnt_battle")
		]),

		(0.1, 0.0, 0.0,
		[],

		[
			(is_presentation_active, "prsnt_battle"),
			(call_script, "script_update_order_panel_statistics_and_map")
		]),

		(-22.0, 0.0, 0.0,
		[],

		[
			(display_message, "str_use_baggage_for_inventory")
		]),

		(0.0, 0.0, ti_once,
		[],

		[
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_team, ":team_player_agent_no", ":player_agent_no"),
			(set_show_messages, 0),
			(team_give_order, ":team_player_agent_no", 9, 0),
			(set_show_messages, 1)
		]),

		(0.0, 0.0, ti_once,
		[
			(eq, 0, 1),
			(eq, "$enable_deahtcam", 1),
			(main_hero_fallen)
		],

		[
			(assign, "$fclock", 1),
			(call_script, "script_player_order_formations", 2),
			(get_player_agent_no, ":player_agent_no"),
			(agent_get_team, ":team_player_agent_no", ":player_agent_no"),
			(team_give_order, ":team_player_agent_no", 9, 2)
		]),

		(0.0, 0.0, 5.0,
		[],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_non_player, ":var_2"), #Agent must not be a player V1.0998D2
				(neq, ":player_agent_no", ":var_2"),
				(agent_slot_eq, ":var_2", 100, 0),
				(agent_is_alive, ":var_2"),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(agent_get_ammo, ":ammo_var_2", ":var_2"),
				(le, ":ammo_var_2", 0),
				(try_begin),
					(gt, ":horse_var_2", 0),
					(neg|troop_is_guarantee_ranged, ":troop_id_var_2"),
					(agent_get_wielded_item, ":wielded_item_var_2_0", ":var_2", 0),
					(neg|is_between, ":wielded_item_var_2_0", "itm_light_lance", "itm_spear_a"),
					(try_for_range, ":item", "itm_light_lance", "itm_spear_a"),
						(agent_set_wielded_item, ":var_2", ":item"),
					(try_end),
				(else_try),
					(eq, "$tom_use_banners", 1),
					(try_for_range, ":item", 1198, 1202),
						(agent_set_wielded_item, ":var_2", ":item"),
					(try_end),
					(agent_get_wielded_item, ":item", ":var_2", 0),
					(is_between, ":item", 1198, 1202),
				(else_try),
					(neg|troop_is_guarantee_ranged, ":troop_id_var_2"),
					(le, ":horse_var_2", 0),
					(agent_get_wielded_item, ":wielded_item_var_2_0", ":var_2", 0),
					(is_between, ":wielded_item_var_2_0", "itm_light_lance", "itm_spear_a"),
					(try_for_range, reg0, 0, 4),
						(agent_get_item_slot, ":item", ":var_2", reg0),
						(is_between, ":item", 1, "itm_cross_end"), #Previously itm_items_end
						(neg|is_between, ":item", "itm_light_lance", "itm_bamboo_spear"),
						(item_get_type, ":type_item", ":item"),
						(this_or_next|eq, ":type_item", 3),
						(this_or_next|eq, ":type_item", 4),
						(eq, ":type_item", 2),
						(agent_set_wielded_item, ":var_2", ":item"),
					(try_end),
				(else_try),
					(neg|troop_is_guarantee_ranged, ":troop_id_var_2"),
					(le, ":horse_var_2", 0),
					(agent_get_wielded_item, ":wielded_item_var_2_0", ":var_2", 0),
					(neg|is_between, ":wielded_item_var_2_0", "itm_bamboo_spear", "itm_wooden_shield"),
					(try_for_range, ":item", "itm_bamboo_spear", "itm_wooden_shield"),
						(agent_set_wielded_item, ":var_2", ":item"),
					(try_end),
				(else_try),
					(troop_is_guarantee_ranged, ":troop_id_var_2"),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_division, ":division_var_2", ":var_2"),
					(team_get_hold_fire_order, ":hold_fire_order_team_var_2_division_var_2", ":team_var_2", ":division_var_2"),
					(neq, ":hold_fire_order_team_var_2_division_var_2", 1),
					(is_between, ":wielded_item_var_2_0", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_0", ":wielded_item_var_2_0"),
					(this_or_next|le, ":wielded_item_var_2_0", -1),
					(this_or_next|neq, ":type_wielded_item_var_2_0", 10),
					(this_or_next|neq, ":type_wielded_item_var_2_0", 9),
					(neq, ":type_wielded_item_var_2_0", 8),
					(call_script, "script_get_closest_enemy_distance_new", ":var_2", ":team_var_2", 300),
					(assign, ":var_13", reg1),
					(gt, ":var_13", 300),
					(assign, ":value", 4),
					(try_for_range, reg0, 0, ":value"),
						(agent_get_item_slot, ":item_slot_var_2_reg0", ":var_2", reg0),
						(is_between, ":item_slot_var_2_reg0", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_0", ":item_slot_var_2_reg0"),
						(this_or_next|eq, ":type_wielded_item_var_2_0", 10),
						(this_or_next|eq, ":type_wielded_item_var_2_0", 8),
						(eq, ":type_wielded_item_var_2_0", 9),
						(agent_set_wielded_item, ":var_2", ":item_slot_var_2_reg0"),
						(assign, ":value", -1),
					(try_end),
				(try_end),
			(try_end)
		]),

		(-25.0, 0.0, 0.0,
		[],

		[
			(store_trigger_param_1, ":trigger_param_1"),
			(call_script, "script_set_matching_sexy_boots", ":trigger_param_1")
		]),

			(0.0, 0.0, 0.0,
		[
			(eq, "$sp_shield_bash", 1),
			(game_key_is_down, 7),
			(game_key_clicked, 6),
			(neg|main_hero_fallen),
		],

		[
		(call_script, "script_shield_bash"),
		]),

			##AI kicking begin
		   (2, 0, 3, #AI kicking
       [], [
	(get_player_agent_no,":player"),
	(try_for_agents, ":agent"),
		(neq, ":agent", ":player"),
		(agent_is_alive, ":agent"),
		(neq, ":agent", -1),
		(agent_is_human, ":agent"),#Only humans can kick....FOR NOW
		(agent_is_active, ":agent"),
		(agent_slot_eq, ":agent", slot_agent_is_running_away, 0),#Isn't fleeing the battle.
		##He's an eligible human.  Now see if he's in a position to kick.
		(agent_get_attack_action, ":attack_action", ":agent"), #returned values: free = 0, readying_attack = 1, releasing_attack = 2, completing_attack_after_hit = 3, attack_parried = 4, reloading = 5, after_release = 6, cancelling_attack = 7
		(agent_get_defend_action, ":defend_action", ":agent"),#
		(this_or_next|eq,":attack_action",4),#Just got parried
		(this_or_next|eq,":defend_action",1),#Parrying an enemy
		##So he'll only try to kick if he just parried an enemy attack, or his own attack just got parried.
		(agent_get_team, ":team", ":agent"),
		(assign, ":maximum_distance", 100),
		#Target Acquisition
		(agent_ai_get_look_target,":suspect",":agent"),
		(gt,":suspect",0),#Make sure there is someone.
		(agent_is_alive, ":suspect"),
		(agent_is_human, ":suspect"),#Only kick humans
		(agent_is_active, ":suspect"),
		(agent_get_team, ":suspect_team", ":suspect"),
		(neq, ":suspect_team", ":team"),#Friends don't let friends kick friends.
		(agent_get_position, pos1, ":agent"),#Distance check
		(agent_get_position, pos2, ":suspect"),
		(neg|position_is_behind_position, pos2, pos1), #Suspect can't be behind kicker.
		(get_distance_between_positions, ":distance", pos1, pos2),
		(le, ":distance", ":maximum_distance"),
		#Check chance
		(store_random_in_range,":kickchance", 1, 10),
		(try_begin),
			(eq,":kickchance",1), #10% chance per check
				#(display_message, "@Agent kicks."),
				(agent_set_animation, ":agent", "anim_prepare_kick_0"),
				(agent_deliver_damage_to_agent, ":agent", ":suspect", 3),
				(agent_set_animation, ":suspect", "anim_strike3_abdomen_front"),#Get Kicked
			(try_end),
	   (try_end),]),
	   
	   ##AI Kicking end
		
		
		(0.25, 0.0, 4.0,
		[
			(eq, "$sp_shield_bash_ai", 1)
		],

		[
			(get_player_agent_no, ":player_agent_no"),
			(try_for_agents, ":var_2"),
				(neq, ":var_2", ":player_agent_no"),
				(agent_is_alive, ":var_2"),
				(agent_is_human, ":var_2"),
				(agent_is_active, ":var_2"), #Test to see if it stops AI from shield bashing (new addition v3)
				(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
				(store_skill_level, ":skill_level_shield_troop_id_var_2", "skl_shield", ":troop_id_var_2"),
				(store_proficiency_level, ":proficiency_level_troop_id_var_2_0", ":troop_id_var_2", 0),
				(ge, ":skill_level_shield_troop_id_var_2", 4),
				(ge, ":proficiency_level_troop_id_var_2_0", 200),
				(agent_get_horse, ":horse_var_2", ":var_2"),
				(le, ":horse_var_2", 0),
				(try_begin),
					(neg|agent_slot_ge, ":var_2", 50, 1),
					(agent_slot_eq, ":var_2", slot_agent_is_running_away, 0),
					(agent_get_wielded_item, ":wielded_item_var_2_1", ":var_2", 1),
					(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
					(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
					(eq, ":type_wielded_item_var_2_1", 7),
					(agent_get_attack_action, ":attack_action_var_2", ":var_2"),
					(eq, ":attack_action_var_2", 0),
					(agent_get_team, ":team_var_2", ":var_2"),
					(agent_get_position, 1, ":var_2"),
					(assign, ":value", -1),
					(assign, ":value_2", 125),
					(try_for_agents, ":var_13"),
						(agent_is_alive, ":var_13"),
						(agent_is_human, ":var_13"),
						(agent_get_position, 2, ":var_13"),
						(neg|position_is_behind_position, 2, 1),
						(agent_get_team, ":team_var_13", ":var_13"),
						(neq, ":team_var_13", ":team_var_2"),
						(try_begin),
							(eq, ":team_var_2", 0),
							(assign, ":value_3", 2),
						(else_try),
							(eq, ":team_var_2", 2),
							(assign, ":value_3", 0),
						(else_try),
							(eq, ":team_var_2", 1),
							(assign, ":value_3", 3),
						(else_try),
							(eq, ":team_var_2", 3),
							(assign, ":value_3", 1),
						(try_end),
						(neq, ":team_var_13", ":value_3"),
						(get_distance_between_positions, ":distance_between_positions_1_2", 1, 2),
						(le, ":distance_between_positions_1_2", ":value_2"),
						(assign, ":value_2", ":distance_between_positions_1_2"),
						(assign, ":value", ":var_13"),
					(try_end),
					(ge, ":value", 0),
					(agent_get_horse, ":horse_var_2", ":value"),
					(eq, ":horse_var_2", -1),
					(store_random_in_range, ":random_in_range_15_26", 15, 26),
					(agent_set_slot, ":var_2", 50, ":random_in_range_15_26"),
					(agent_set_animation, ":var_2", "anim_shield_bash"),
					(agent_get_troop_id, ":troop_id_var_2", ":var_2"),
					(troop_get_type, ":type_wielded_item_var_2_1", ":troop_id_var_2"),
					(try_begin),
						(eq, ":type_wielded_item_var_2_1", 0),
						(agent_play_sound, ":var_2", "snd_man_yell"),
					(else_try),
						(eq, ":type_wielded_item_var_2_1", 1),
						(agent_play_sound, ":var_2", "snd_woman_yell"),
					(try_end),
					(agent_play_sound, ":value", "snd_wooden_hit_low_armor_high_damage"),
					(agent_get_defend_action, ":attack_action_var_2", ":value"),
					(try_begin),
						(eq, ":attack_action_var_2", 2),
						(neg|position_is_behind_position, 1, 2),
						(agent_get_wielded_item, ":wielded_item_var_2_1", ":value", 1),
						(is_between, ":wielded_item_var_2_1", 1, "itm_cross_end"), #Previously itm_items_end
						(item_get_type, ":type_wielded_item_var_2_1", ":wielded_item_var_2_1"),
						(eq, ":type_wielded_item_var_2_1", 7),
						(agent_set_animation, ":value", "anim_shield_bash"),
					(else_try),
						(agent_set_animation, ":value", "anim_shield_strike"),
					(try_end),
				(try_end),
				(agent_get_slot, ":var_2_50", ":var_2", 50),
				(val_sub, ":var_2_50", 1),
				(val_max, ":var_2_50", 0),
				(agent_set_slot, ":var_2", 50, ":var_2_50"),
			(try_end)
		])
	] + crouching_triggers ),

#COOP BEGIN ##########################
] + coop_mission_templates 
#COOP END############################